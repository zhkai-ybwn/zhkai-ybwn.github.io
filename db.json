{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-bamboo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/css/animate.min.css","path":"css/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/goTop.js","path":"js/goTop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/jquery3.5.1.js","path":"js/jquery3.5.1.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/local_search.js","path":"js/local_search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/ribbon.min.js","path":"js/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue2.6.11.js","path":"js/vue2.6.11.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/wrapImage.js","path":"js/wrapImage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","path":"js/aplayer/APlayer@1.10.1.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/bubble.js","path":"js/bubble/bubble.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/homeBubble.js","path":"js/bubble/homeBubble.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","path":"js/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/clicklove.js","path":"js/cursor/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/explosion.min.js","path":"js/cursor/explosion.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/fireworks.js","path":"js/cursor/fireworks.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/text.js","path":"js/cursor/text.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/barrager.css","path":"js/danmu/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/close.png","path":"js/danmu/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","path":"js/danmu/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/falling/sakura.js","path":"js/falling/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/falling/snow.js","path":"js/falling/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","path":"js/fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","path":"js/fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/issues/index.js","path":"js/issues/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/loaded/index.css","path":"js/loaded/index.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/pjax@0.2.8/index.js","path":"js/pjax@0.2.8/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","path":"js/prism/prism-coy.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","path":"js/prism/prism-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","path":"js/prism/prism-funky.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","path":"js/prism/prism-line-numbers.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","path":"js/prism/prism-okaidia.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","path":"js/prism/prism-solarizedlight.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","path":"js/prism/prism-tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","path":"js/prism/prism-twilight.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism.min.css","path":"js/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/font.css","path":"js/shareJs/font.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/share.min.css","path":"js/shareJs/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","path":"js/shareJs/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.animate1.0.3.min.js","path":"js/swiper/swiper.animate1.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.min.js","path":"js/swiper/swiper.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper@5.4.1.min.css","path":"js/swiper/swiper@5.4.1.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/vue-awesome-swiper.js","path":"js/swiper/vue-awesome-swiper.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.css","path":"js/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","path":"js/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","path":"js/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","path":"js/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/utils/index.js","path":"js/utils/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/valine/index.js","path":"js/valine/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","path":"js/vue-seamless-scroll/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.css","path":"js/vue-typed-js/index.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.js","path":"js/vue-typed-js/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/waline/waline.min.js","path":"js/waline/waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/cursor/Horizontal.cur","path":"medias/cursor/Horizontal.cur","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","path":"js/shareJs/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","path":"js/shareJs/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","path":"js/shareJs/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","path":"js/shareJs/fonts/iconfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/AutoUpdater自动更新客户端.md","hash":"ab9d4536e6196d920c7c4bf13aabc2ec57889cc3","modified":1666852813617},{"_id":"source/_posts/CefSharp创建客户端.md","hash":"8ef7b87fe5fe900e73fb69a08815f2b4bd6b877f","modified":1666852813618},{"_id":"source/_posts/BIO-NIO-AIO对比.md","hash":"b3139e67205d21e3e399356935a623f4ee3b3297","modified":1666852813618},{"_id":"source/_posts/Elasticsearch入门.md","hash":"fdde577b4a946262bf9f78335d61327cff61626f","modified":1666852813618},{"_id":"source/_posts/Elasticsearch的倒排索引.md","hash":"d1b2cd2072ef215086624334ff1dce05111dcc20","modified":1666852813618},{"_id":"source/_posts/JS循环总结.md","hash":"0eabb2e670e975a3e0af44e3f2c0b8c796b50bc8","modified":1676612615885},{"_id":"source/_posts/JVM结构详解.md","hash":"ab012fda82c6f0213909139f44bdc30b9d875676","modified":1666852813622},{"_id":"source/_posts/Java交换数组元素.md","hash":"1c2a9d0e89f9c24467b784fa5dc499fafb690ae4","modified":1666852813622},{"_id":"source/_posts/Java文件处理常用方法.md","hash":"b4de2ed5f390d0de2a458ec84606dac3399d884a","modified":1676618594497},{"_id":"source/_posts/Java类型转换工具类（持续更新）.md","hash":"06d6f537c090a9e1d036c7a9bbd82666b3e327a5","modified":1666852813622},{"_id":"source/_posts/LeetCode一维数组的动态和.md","hash":"08e534a3f654ab1b6cc4e13763ba7e2507a7505a","modified":1666852813623},{"_id":"source/_posts/LeetCode两数之和.md","hash":"d3f3a229e29ca22da69f2512c88c4825adaf44ca","modified":1666852813623},{"_id":"source/_posts/LeetCode二维数组中的查找.md","hash":"262caa17fbcd6ab08b3a57d3f3e9ee32564e76e8","modified":1666852813623},{"_id":"source/_posts/LeetCode子矩形查询.md","hash":"07c568b462cc297be39b3f98be7ceee527043d12","modified":1666852813623},{"_id":"source/_posts/LeetCode数组中重复的数字.md","hash":"0346ed47224a87012ab29fdf4a05fb4ddec7ddba","modified":1666852813624},{"_id":"source/_posts/LeetCode替换空格.md","hash":"c2ff6d31d78fd24c43fbb370adfd96ac2349667d","modified":1666852813624},{"_id":"source/_posts/LeetCode最富有客户的资产总量.md","hash":"ceacc3f0465fddae273e9698c0b926c81683b66c","modified":1666852813624},{"_id":"source/_posts/LeetCode移除元素.md","hash":"09993280a1335dbeb432c1368e8dff75b13521ca","modified":1666852813625},{"_id":"source/_posts/LeetCode缺失的第一个正数.md","hash":"871dd940925186d6b1d412365a5bf663f470394f","modified":1666852813625},{"_id":"source/_posts/Spring-Batch学习笔记（一）.md","hash":"d27df58df4620b9fe07c7bcc176b8ce04f3fa311","modified":1666852813625},{"_id":"source/_posts/Vue学习一.md","hash":"483a92d0412df80d7149bf5e1e63f24c2592e467","modified":1666852813626},{"_id":"source/_posts/Vue函数防抖和函数节流.md","hash":"17df38d01d36b4c15bc06ae98f598decee502f51","modified":1666852813625},{"_id":"source/_posts/Vue学习二.md","hash":"ca76c14dac390bdbd50ad4ae7c5ed2d5ec06d59c","modified":1666852813626},{"_id":"source/_posts/WinForm设置控件居中.md","hash":"dfc6082d89ef341402fa2c887b9e07cb996fef97","modified":1666852813626},{"_id":"source/_posts/Windows安装Hive.md","hash":"05d1ff9732ef0d75f8877354d55b6b92f43d1292","modified":1670209224780},{"_id":"source/_posts/Windows端口被占用解决方法.md","hash":"9fd21aa2a4e49ac69c520b6d63a35f45c9d7eeaf","modified":1666852813626},{"_id":"source/_posts/Windows系统修改jar内容.md","hash":"d23dfb1defdb87bcb403101844a85813a9f4c74e","modified":1666852813627},{"_id":"source/_posts/about.md","hash":"7faa1d79e8676ed66e7e37e0d1c1f26028b5a0a8","modified":1666852813627},{"_id":"source/_posts/async-await的理解.md","hash":"205ecc3d6d327a3feab35d0284bb9de342968582","modified":1666852813627},{"_id":"source/_posts/css学习三.md","hash":"a91cb4cf89ac58c2e169291c214915e4c080dd28","modified":1666852813628},{"_id":"source/_posts/css学习二.md","hash":"eef29911b9f0a60a23332ecccf4b0c73f8cca926","modified":1666852813628},{"_id":"source/_posts/css学习一.md","hash":"6245938e566b54c0a4c6cd4bdcf234788da78fee","modified":1666852813628},{"_id":"source/_posts/css学习四.md","hash":"28277777fb7162c28733591e9e7b38e24ae14443","modified":1666852813629},{"_id":"source/_posts/一款智能的日期解析工具.md","hash":"1507b472bd9cd0ef707948d59b5456f17e142b99","modified":1666852813629},{"_id":"source/_posts/双向绑定和单向绑定.md","hash":"1ce9d455231ba0d6c055ebaceb750cda9ed8266b","modified":1666852813629},{"_id":"source/_posts/在浏览器输入URL回车之后发生了什么？.md","hash":"083fb2fcca57b969a88de3799ca3e383e5083f04","modified":1666852813629},{"_id":"source/_posts/常用插件备份.md","hash":"c81b6d6a083b7e27662c6cc57684ad3b84cacaa0","modified":1666852813630},{"_id":"source/_posts/常用链接备忘.md","hash":"2f42795972b0de4f9091b96766bcdbaaff635ac4","modified":1666852813630},{"_id":"source/_posts/维护java项目之-和equals.md","hash":"41611876ba77e02c859f0e65df7c101f902e22c1","modified":1666852813630},{"_id":"source/about/index.md","hash":"a1be0b9bc9a822b666c8c41a02020e0536ba9e4b","modified":1678845510419},{"_id":"source/categories/index.md","hash":"25fe757ef5434e38f42b4acb224131a2f1d3ed3e","modified":1678845374483},{"_id":"source/friends/index.md","hash":"668d9d6c8176b853d9217a18f7fa4d4cfae350e6","modified":1678845499615},{"_id":"source/tags/index.md","hash":"503ae565e31321344f66e22a75d2b079fdf63d1d","modified":1678845402258},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/ghcard.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1678779187346},{"_id":"themes/hexo-theme-bamboo/LICENSE","hash":"a169fe9d633c76d88c67c4155ac50d7c33261c5a","modified":1678779187295},{"_id":"themes/hexo-theme-bamboo/README.md","hash":"9c502960324f524f78b9f2f44f1e951bbfdbbf92","modified":1678779187297},{"_id":"themes/hexo-theme-bamboo/_config.yml","hash":"6752843e891370b4f646e6393b5920079a2b6b6f","modified":1678847980471},{"_id":"themes/hexo-theme-bamboo/package.json","hash":"c001fc49f0a84f244b5b4b84433edb9b3fc67e35","modified":1678779187323},{"_id":"themes/hexo-theme-bamboo/languages/default.yml","hash":"8bd4b5a14c8c48229a0dca8eb80b34a5ce01b5b5","modified":1678779187298},{"_id":"themes/hexo-theme-bamboo/languages/zh-CN.yml","hash":"caefd6f264b9b29a45dc507aee17683710aef3fe","modified":1678779187298},{"_id":"themes/hexo-theme-bamboo/languages/zh-TW.yml","hash":"0cdab82f5b0b6c975ddae075312764640ba5592d","modified":1678779187298},{"_id":"themes/hexo-theme-bamboo/layout/category.ejs","hash":"37ffb09fbfaf42173e0dcc12e77733aaf3dc33d5","modified":1678779187322},{"_id":"themes/hexo-theme-bamboo/layout/index.ejs","hash":"c14582ffc3e238d6a09f13a90058afe764d6c224","modified":1678779187322},{"_id":"themes/hexo-theme-bamboo/layout/categories.ejs","hash":"7258b144c22829b972fa819d034c45168b7f722a","modified":1678779187322},{"_id":"themes/hexo-theme-bamboo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1678779187321},{"_id":"themes/hexo-theme-bamboo/layout/layout.ejs","hash":"b492a3b7d870eb728f42b026130568d398b8e06b","modified":1678779187322},{"_id":"themes/hexo-theme-bamboo/layout/post.ejs","hash":"80af2a254bbdb3a2ea535e7aba0ad7771a638fe4","modified":1678779187323},{"_id":"themes/hexo-theme-bamboo/layout/tag.ejs","hash":"b8ebaaeb58bdc5a2ece441f05caeccd259a8fd52","modified":1678779187323},{"_id":"themes/hexo-theme-bamboo/layout/tags.ejs","hash":"9f893119661ef904b9b0a44baf15f5b51389fef7","modified":1678779187323},{"_id":"themes/hexo-theme-bamboo/source/favicon.ico","hash":"801ff7b3f358b77a813787a97ef59148eec93fd8","modified":1678779187349},{"_id":"themes/hexo-theme-bamboo/layout/_partial/archive.ejs","hash":"e6381dbd19b931fe9f8da37fcde132e65fbe1d4a","modified":1678779187299},{"_id":"themes/hexo-theme-bamboo/layout/_partial/dark.ejs","hash":"653f56cf403abdf5b5d55cc4174e2877b61ebda3","modified":1678779187305},{"_id":"themes/hexo-theme-bamboo/layout/_partial/goTop.ejs","hash":"8799f7e3b34b919cd274c570d77e10e3085f1a58","modified":1678779187307},{"_id":"themes/hexo-theme-bamboo/layout/_partial/home_widget.ejs","hash":"e94f14d51791e6239fbab5276a186d875f9b919c","modified":1678779187308},{"_id":"themes/hexo-theme-bamboo/layout/_partial/lantern.ejs","hash":"8b3466dbd0158f8297ac336052b8d4fded4081a0","modified":1678779187308},{"_id":"themes/hexo-theme-bamboo/layout/_partial/loaded.ejs","hash":"0144a7eef60a574b43bbc5dfa0a919f5f03c7188","modified":1678779187308},{"_id":"themes/hexo-theme-bamboo/layout/_partial/motto.ejs","hash":"3ccb6a463eab6a23de8f8e3527c9ae67f87568d0","modified":1678779187309},{"_id":"themes/hexo-theme-bamboo/layout/_partial/notice.ejs","hash":"bfb9f2ca32d4932f5754bde29bc91a2781524b8d","modified":1678779187310},{"_id":"themes/hexo-theme-bamboo/layout/_partial/paginator.ejs","hash":"ff1b36f73cebd04e72520ceba0d959b56386874d","modified":1678779187310},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side.ejs","hash":"49ab0cdbcb40e88261e563cea764e2ea1a40db63","modified":1678779187319},{"_id":"themes/hexo-theme-bamboo/layout/_partial/topArticle.ejs","hash":"ba26f88c11dcc3ce3a987c4caf071e2f52ad58f0","modified":1678779187321},{"_id":"themes/hexo-theme-bamboo/scripts/events/index.js","hash":"0bfe87f78315fecec7c9fdd779a0c53e24759b2c","modified":1678779187324},{"_id":"themes/hexo-theme-bamboo/layout/_partial/swiper.ejs","hash":"bc0ce3be887a734ac71a9b5595b6b366913bc102","modified":1678779187321},{"_id":"themes/hexo-theme-bamboo/scripts/helpers/side_archives.js","hash":"b780ec1516d12b088f81b5ce25a80df460d91f3c","modified":1678779187324},{"_id":"themes/hexo-theme-bamboo/scripts/tag/btn.js","hash":"35d97ecd3b05abc5069483e4817ff075e5e2cf52","modified":1678779187325},{"_id":"themes/hexo-theme-bamboo/scripts/tag/btns.js","hash":"e328ebb9b45e4b21f720f65b9c1730596677b964","modified":1678779187325},{"_id":"themes/hexo-theme-bamboo/scripts/tag/checkbox.js","hash":"b398969bd13fa37c90a323242f2d6be5c0dacbd1","modified":1678779187325},{"_id":"themes/hexo-theme-bamboo/scripts/tag/file.js","hash":"8cfdf178ea78639a7c852838ecffe1d1d5febaec","modified":1678779187325},{"_id":"themes/hexo-theme-bamboo/scripts/tag/folding.js","hash":"fa0d60a8b32bb942c9b04cd4256281ed8486f223","modified":1678779187326},{"_id":"themes/hexo-theme-bamboo/scripts/tag/getPhoto.js","hash":"6e747c115bc1c537cd09883f2e0562037a0b9ed8","modified":1678779187326},{"_id":"themes/hexo-theme-bamboo/scripts/tag/ghcard.js","hash":"2e0359ca4bc781b29bdd8c827f6349e7b369ea02","modified":1678779187326},{"_id":"themes/hexo-theme-bamboo/scripts/tag/gallery.js","hash":"d47607d31105741a33152c8c39cc2d1f6e2c88f9","modified":1678779187326},{"_id":"themes/hexo-theme-bamboo/scripts/tag/image.js","hash":"d23c426ca0beb9528a00f0e4185eddd023889ee8","modified":1678779187326},{"_id":"themes/hexo-theme-bamboo/scripts/tag/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1678779187327},{"_id":"themes/hexo-theme-bamboo/scripts/tag/issues.js","hash":"136c1d2c002b05cd96f0477033ad98583a3379d9","modified":1678779187327},{"_id":"themes/hexo-theme-bamboo/scripts/tag/link.js","hash":"226d074278af7ed30516a74655bfa79151422c65","modified":1678779187327},{"_id":"themes/hexo-theme-bamboo/scripts/tag/media.js","hash":"04434a1760ec70d23f726921ba3e74898af4b531","modified":1678779187327},{"_id":"themes/hexo-theme-bamboo/scripts/tag/mermaid.js","hash":"32bc8b283be1f0f3fe99ed979bb2150af3a5ca04","modified":1678779187327},{"_id":"themes/hexo-theme-bamboo/scripts/tag/note.js","hash":"dd0ef71e882691a6d7a0624440b5de53c7ad7342","modified":1678779187328},{"_id":"themes/hexo-theme-bamboo/scripts/tag/progress.js","hash":"62b4170eb844b2bc97cb1aa2082c0669bed287d2","modified":1678779187328},{"_id":"themes/hexo-theme-bamboo/scripts/tag/site.js","hash":"56e270f7242570ab300ec933c9932300e3e3b8fa","modified":1678779187328},{"_id":"themes/hexo-theme-bamboo/scripts/tag/span.js","hash":"377c0ce99bee9eea4930d11d046abbbf72132f0a","modified":1678779187328},{"_id":"themes/hexo-theme-bamboo/scripts/tag/swiper.js","hash":"ae42d6156e39aad54b331e4257131c9b05bfcee4","modified":1678779187328},{"_id":"themes/hexo-theme-bamboo/scripts/tag/tabs.js","hash":"e15327573e6aec73ab7d494b7fefe950e3e5425b","modified":1678779187329},{"_id":"themes/hexo-theme-bamboo/scripts/tag/timeline.js","hash":"c7942e1c59d9d8f25f2d63c6d8b53a6415d11f6b","modified":1678779187329},{"_id":"themes/hexo-theme-bamboo/scripts/tag/title.js","hash":"53b82637070fca5e846fa7f69829e66e83cc2a76","modified":1678779187329},{"_id":"themes/hexo-theme-bamboo/scripts/tag/titleB.js","hash":"fe9bd544ee4bb0b8e653cc05243ab9cc7c1e8f30","modified":1678779187329},{"_id":"themes/hexo-theme-bamboo/scripts/z-lazyload/index.js","hash":"00807c9898fff8f712fc8f311ed0bdd84c71b812","modified":1678779187330},{"_id":"themes/hexo-theme-bamboo/source/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1678779187349},{"_id":"themes/hexo-theme-bamboo/source/js/goTop.js","hash":"dfcbf8a70cfb4465d0afabf5153bd069771a6a1c","modified":1678779187355},{"_id":"themes/hexo-theme-bamboo/source/js/activate-power-mode.js","hash":"3d02584da9dd820d1d9a454c5a93a2c37a8e4e42","modified":1678779187350},{"_id":"themes/hexo-theme-bamboo/source/js/app.js","hash":"38e8d7ce69449ee7fc28db92f6be88ae26e708b2","modified":1678779187350},{"_id":"themes/hexo-theme-bamboo/source/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1678779187360},{"_id":"themes/hexo-theme-bamboo/source/js/local_search.js","hash":"475dc0727cb85c22f15f86701dd93c4bf449a438","modified":1678779187357},{"_id":"themes/hexo-theme-bamboo/source/js/wrapImage.js","hash":"4b3cbceda7950c3fb2a17c4e169c4fdbc023ceab","modified":1678779187372},{"_id":"themes/hexo-theme-bamboo/source/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":1678779187372},{"_id":"themes/hexo-theme-bamboo/layout/_partial/analytics/baidu-analytics.ejs","hash":"f989e0ee065053d355837ca998eca27c00131d34","modified":1678779187299},{"_id":"themes/hexo-theme-bamboo/layout/_partial/analytics/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1678779187299},{"_id":"themes/hexo-theme-bamboo/layout/_partial/card/post.ejs","hash":"004aef800efdd4114f437f29ec1061685dce356e","modified":1678779187300},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer/busuanzi.ejs","hash":"e270fd0f16574b86630498c15f013d5ef58b80c0","modified":1678779187306},{"_id":"themes/hexo-theme-bamboo/source/css/style.styl","hash":"96748ead27dc238bec3e4bf7684c4550bc716a22","modified":1678779187349},{"_id":"themes/hexo-theme-bamboo/layout/_partial/analytics/google-analytics.ejs","hash":"f04decc35047925815621d6a559330cc2c6c2bc9","modified":1678779187299},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer/footer.ejs","hash":"e3d5d8e9cf3c735e7ecf591b6a5ef77e819fea41","modified":1678779187306},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer/fish.ejs","hash":"5b6d29219a57bf34ececaf1b9dc598ec63c24201","modified":1678779187306},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/drawer.ejs","hash":"7f58dba694b251049deb73f6a18b94de6d4c82f9","modified":1678779187307},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/head.ejs","hash":"2e530f66898d6d9a6b112f8126c359d0820c44f9","modified":1678779187307},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/header.ejs","hash":"9c5340131066125d3841c769d77a232f0dad2165","modified":1678779187307},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/search.ejs","hash":"5d2acb6b861ad238b208967c9da5c561dd9e5580","modified":1678779187308},{"_id":"themes/hexo-theme-bamboo/layout/_partial/math/mathjax.ejs","hash":"388b78bc00022c6550823ffa70b8f0eb1d1cd8be","modified":1678779187309},{"_id":"themes/hexo-theme-bamboo/layout/_partial/math/mermaid.ejs","hash":"fb9ab8c213fa4516e3688a2aab44326ad1a025e7","modified":1678779187309},{"_id":"themes/hexo-theme-bamboo/layout/_partial/meta/aplayer.ejs","hash":"160c39f0810c515cdf5c2364227f59aec3251cc2","modified":1678779187309},{"_id":"themes/hexo-theme-bamboo/layout/_partial/pjax/index.ejs","hash":"59acb62d88b9e66f05d103f0f118eba4c7470cb1","modified":1678779187310},{"_id":"themes/hexo-theme-bamboo/layout/_partial/pjax/animate.ejs","hash":"2528b879755c3471b3f47bdd8ee3806c2c72fba3","modified":1678779187310},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/categories.ejs","hash":"45004011cdca22dd0c980a2f90c68054667d0838","modified":1678779187311},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/bgSwiper.ejs","hash":"12a2d8f1d99edf60dd283f74fd99d9c1bfcfaaf8","modified":1678779187311},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/comment.ejs","hash":"7e76a8705df059d9595b1ba21bace4345a4d6734","modified":1678779187311},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/copyright.ejs","hash":"9f05ed11f3151bf50b843f0429527a523872e098","modified":1678779187311},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/post-detail-header.ejs","hash":"6e418aa25f135ca972935184f28c527485ccb842","modified":1678779187312},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/donate.ejs","hash":"72336d4ecc8fb205b620253f950b2080a2aeed0f","modified":1678779187311},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/post-nav.ejs","hash":"da01c409b1c2b68ff710c5dd83f19d6c435e9776","modified":1678779187312},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/prismjs.ejs","hash":"bff454e36b76dbc06638090ae8d46044dc8ca85b","modified":1678779187312},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/share.ejs","hash":"d1cdbc86207b2113f811742419032d1f6058079b","modified":1678779187312},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/tags.ejs","hash":"ff49ab6225b40e3b2fadcd592f4ffcc8ad3861af","modified":1678779187313},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/toc.ejs","hash":"5daf18775e5cf3c993d65bc6d8a2dfb8b03ee4b7","modified":1678779187313},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_1.ejs","hash":"7558051d554483b392d4b3e2fb2f281bf8032ba5","modified":1678779187313},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_2.ejs","hash":"98f049c1fef78c2635c6e8bc07a1199a295f938b","modified":1678779187313},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_3.ejs","hash":"2da3733ce0441b9c490475f655938a6ce224db64","modified":1678779187314},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_4.ejs","hash":"497d1f80761e9580c953f74485b2ab9878edcfae","modified":1678779187314},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_5.ejs","hash":"937dfb80d40581ab9b194781cd09b5668fcf81d1","modified":1678779187314},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_6.ejs","hash":"d5c6213f9384cafa0e72bb0fa5ae2a6225cd0bfd","modified":1678779187314},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_7.ejs","hash":"2fced8bd111a46fa6c3cd64d22d748d6debee8f9","modified":1678779187314},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_8.ejs","hash":"cb3d3cd743949b3916059be7ead04ead92710be4","modified":1678779187315},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_9.ejs","hash":"bcac880397ba0c42409231dab762ae1bc9ae9d75","modified":1678779187315},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/copy.ejs","hash":"3b3b4c4bb0a34af119292a948ee29fbcf331b4d2","modified":1678779187315},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/cursor_effect.ejs","hash":"d9f2e7025cc2f4a3de8419e23371ffdaaab018f5","modified":1678779187315},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/danmu.ejs","hash":"4eff58f4f870de51f9aa08ebb81cdcde8529ef96","modified":1678779187316},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/dark.ejs","hash":"29c3a72d4b00a3569b0ce209e428fdf2d73317a0","modified":1678779187316},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/falling.ejs","hash":"103bed9758ac8fa53edfba0a4f1b50faee9dca9b","modified":1678779187316},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/global.ejs","hash":"12619a95fc870212a4de1ca08fb1026176679b65","modified":1678779187316},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/head.ejs","hash":"f8217c89fa39e0516200da8ecd0dde2fec3c9891","modified":1678779187317},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/index.ejs","hash":"a898352dcb60e6ccc0ce0c311cffda230da28733","modified":1678779187317},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/inputEffects.ejs","hash":"7630b4cef226f99385bcf01f604d25f4b65318c7","modified":1678779187317},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/issues.ejs","hash":"ab547e88bada03125150327a025be05cd7a9bc8e","modified":1678779187317},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/lazyload.ejs","hash":"eaab6c8252a3ed0706f45c331a9e017cea4a3535","modified":1678779187317},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/setHeader.ejs","hash":"943b4c90fa08b901ca1e016528d20648f9bffd23","modified":1678779187318},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/swiperTag.ejs","hash":"639743741a6de2e7a40d3625c8525560b9734e3a","modified":1678779187318},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/toc.ejs","hash":"ded2bb1a71482d79c346a5e013a0fa6b00d0003e","modified":1678779187318},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/typed.ejs","hash":"73acc534dcfb19f0e674a52eba6a9376ad430b30","modified":1678779187318},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/sideHeader.ejs","hash":"588fc152cc51e70f2c721555ee53dd2dcbb049c6","modified":1678779187319},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_archives.ejs","hash":"6659a785f112460877a33b7a6f02dd805558cc21","modified":1678779187319},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/scrollreveal.ejs","hash":"bdd17960edce7b40c4e26df00d351bb16614133b","modified":1678779187318},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_blogger.ejs","hash":"e88ae04908799f5d6dba38f28d7cd85ff45556a5","modified":1678779187319},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_category.ejs","hash":"8a7a6e42d3e745c3235d119ba0c63bbbc83cd106","modified":1678779187320},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_recent_post.ejs","hash":"a961783a1b2f04d433faedd0755b66e927ebc1ba","modified":1678779187320},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_tagcloud.ejs","hash":"5fa40c2b4b6643a2769331f00013fb27dc6ee2c4","modified":1678779187320},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_toc.ejs","hash":"0400b06628fdd0eeea10e00af90f4521c2bb136a","modified":1678779187320},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_webinfo.ejs","hash":"dc4cc97a41f8e1c8a206781b0db7fa3131a6b68f","modified":1678779187320},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/widget_library_sticky.ejs","hash":"fe6e8c25240d2d90626b07d47e8b557c27098713","modified":1678779187321},{"_id":"themes/hexo-theme-bamboo/scripts/events/lib/stellar-tag-utils.js","hash":"687727b6846740353f4ba81d8ee1e62cbcfcf887","modified":1678779187324},{"_id":"themes/hexo-theme-bamboo/scripts/z-lazyload/lib/process.js","hash":"e6883b90fbc7c5194ace34f3258f69d411ef25ff","modified":1678779187330},{"_id":"themes/hexo-theme-bamboo/source/css/_defines/variable.styl","hash":"460c920078b5367f586b3d17d9f87e53b9fd0843","modified":1678779187330},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/about.styl","hash":"a125f2891f5a088eaa08bcccdbbbba7aa1eda0f7","modified":1678779187331},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/archive.styl","hash":"6b9659d2abc44c4a5081b12556d6fef14a06cdd3","modified":1678779187331},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/base.styl","hash":"fd99167ba0b85301f26496a3452f071f9cd6f31a","modified":1678779187332},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/categories.styl","hash":"5b42b9fde51f5b8649b06ee1bca84a6c072bc8e9","modified":1678779187332},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/category.styl","hash":"bce11b4616beb5329f34501ba415ab7be1736ff2","modified":1678779187332},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/comment.styl","hash":"3e175a08ea08572372e9f7fd33e8c5b34a945a48","modified":1678779187333},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/copyRyght.styl","hash":"21623bb44c7fb00ebde18b9b4673457c86851ce7","modified":1678779187333},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/custom.styl","hash":"84f84a1ae189c1febec63454be00d65ba69e3773","modified":1678779187333},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/danmu.styl","hash":"87406be8f0be56862b77803bd86b3d9f342435ac","modified":1678779187333},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/dark.styl","hash":"9c647bce70ae88a133e5216cb1ca9f37e0f674a1","modified":1678779187333},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/donate.styl","hash":"06afbf560ae3caf9d48fe02c8b3d82bca2cebb22","modified":1678779187334},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/footer.styl","hash":"29c2efba47d1e356be78a8cbc9acdd6d51362809","modified":1678779187334},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/friends.styl","hash":"d91bf1b489889f25fc7a506be45b3cdf0a5b38a2","modified":1678779187334},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/drawer.styl","hash":"47a82cc350cd512399f8d97063499c414eb4662c","modified":1678779187334},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/goTop.styl","hash":"c374ca324e426ff1fec51e31c473b462f33ef533","modified":1678779187335},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/header.styl","hash":"20807cf5dd56f681851e766f91f847658f9e7cbd","modified":1678779187335},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/highlight.styl","hash":"b0b5d1a070e470f73038480fe474aca98a258f9e","modified":1678779187335},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/home.styl","hash":"1a6220af4b38d7ec84c726fafe755a2f1b049f4c","modified":1678779187335},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/lantern.styl","hash":"2603683ee15aca0933e4e15577be45e1032ef332","modified":1678779187335},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/motto.styl","hash":"23347c6275cfb599b19bd7fa258b899ef62751e3","modified":1678779187336},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/notice.styl","hash":"57e333bad7ef2983ebe8a8e486827b829249b2e8","modified":1678779187336},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/pace.styl","hash":"fcc30b2d2f8016b0331f6613ce0ae663093cc3ab","modified":1678779187336},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/paginator.styl","hash":"983957412350b651607346ff0cf80d918634537b","modified":1678779187336},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post-detail-header.styl","hash":"a41719ad49655563d89c6dc90bf52e05006d8ddc","modified":1678779187336},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post-nav.styl","hash":"7ccf15cbaa9335824981785cb1fe965db7a37f5a","modified":1678779187337},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post.styl","hash":"21a426c69c7b410d48dc152fd1723165b4fb7966","modified":1678779187337},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/posts.styl","hash":"4c9655fb7c23385d572e37534a36922573c0d87f","modified":1678779187337},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/search.styl","hash":"b50899c8347a680a6a451aa38df95583a14d274d","modified":1678779187339},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/side.styl","hash":"fb7d4875c52e69f677de70f870100c73ed05deef","modified":1678779187339},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/tag.styl","hash":"775005641a93d20496a3f8b3bcf0ce03d6374e6c","modified":1678779187340},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/tags.styl","hash":"e4f9770b29fe47575b7cb3ccaa1e4161bedc6ccf","modified":1678779187340},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/topArticle.styl","hash":"6a3d84770cba2e39533725a1db85367139a80203","modified":1678779187340},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/transition.styl","hash":"893476822b8011c6efc2d4822c237debb1d2752a","modified":1678779187340},{"_id":"themes/hexo-theme-bamboo/source/css/_plugins/mathjax.styl","hash":"84140a2367b3e2166846a88101e2c2d2180cfe29","modified":1678779187341},{"_id":"themes/hexo-theme-bamboo/source/css/_plugins/pjaxanimate.styl","hash":"75dcb005e509cc352ffc809ef559da19d6c583bf","modified":1678779187341},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/btn.styl","hash":"8e734421541539c202e2b3f5d690b1d72831133f","modified":1678779187341},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/folding.styl","hash":"0a93551470fd093d14f6980650617f61cbe358c0","modified":1678779187345},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/checkbox.styl","hash":"26647f72de70e61778893887c34080f5d0c3bf64","modified":1678779187341},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/circle.styl","hash":"8fea937dc6ffb22aa2a435862ce8e06308df5965","modified":1678779187342},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/gallery.styl","hash":"6368e1dcfbf565de7007a498370cf5a7d358f761","modified":1678779187345},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/galleryGroup.styl","hash":"3bd73e43ff26af03689647d8c87c74ccc1246372","modified":1678779187346},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/image.styl","hash":"3806a855d0654b2e31e286884f97c58c4dc35a35","modified":1678779187346},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/inline-label.styl","hash":"1731022ae2dd1e5bf44eca5fc2a4fde5d3e19826","modified":1678779187346},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/link.styl","hash":"8c8dd27de491f43831b3662a69c0d3729da9c3c4","modified":1678779187346},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/media.styl","hash":"5e3e064e46db84536e6f8c83db138a63fbadc232","modified":1678779187347},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/note.styl","hash":"b78ab3f2c95666d6521001b84e92f59707e50d10","modified":1678779187347},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/progress.styl","hash":"a16479bdd1d3e4371d91b4d05bfe6153861851ec","modified":1678779187347},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/site-card.styl","hash":"a6d1e9c1cb501e6d9e241ab97d2184e229e36187","modified":1678779187347},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/span.styl","hash":"6a7734904c4818bc8b379d44642c4bcf1f9798f8","modified":1678779187348},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/swiper.styl","hash":"571a0eedbfc6a9253856d55a357808e4be99d596","modified":1678779187348},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/tabs.styl","hash":"c261bbc2503bf61a343d8f1870ab493e86f9a42c","modified":1678779187348},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/timeline.styl","hash":"23044f0a93ab8a54686b5472d9d6ac56eaf56da2","modified":1678779187348},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/title.styl","hash":"19bbc75baf4a71f4fda883807e0104cdae388d7e","modified":1678779187349},{"_id":"themes/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1678779187350},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/bubble.js","hash":"40cbc57f98407216ba6dc412e2b75e18c036240f","modified":1678779187351},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1678779187351},{"_id":"themes/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1678779187351},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1678779187352},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1678779187352},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1678779187352},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1678779187352},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1678779187353},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1678779187353},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1678779187353},{"_id":"themes/hexo-theme-bamboo/source/js/falling/sakura.js","hash":"ab41921e8f6ea1bedfcc348924574dc0caa20858","modified":1678779187354},{"_id":"themes/hexo-theme-bamboo/source/js/falling/snow.js","hash":"6f4ef88304f874ef8bb8ea54f79b5d97f5a8f2f6","modified":1678779187354},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1678779187354},{"_id":"themes/hexo-theme-bamboo/source/js/issues/index.js","hash":"e5f7b37f9dd8e966c7a63b8b6da27d53510eddeb","modified":1678779187356},{"_id":"themes/hexo-theme-bamboo/source/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1678779187357},{"_id":"themes/hexo-theme-bamboo/source/js/pjax@0.2.8/index.js","hash":"c9b1e349203e558dbe43665353e88c6eafc7dbcd","modified":1678779187357},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1678779187358},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1678779187358},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1678779187358},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1678779187359},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1678779187358},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1678779187359},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1678779187359},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1678779187359},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1678779187360},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1678779187360},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1678779187361},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1678779187362},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper@5.4.1.min.css","hash":"de2263f82e7bf0778f31fd05c53000799f60701a","modified":1678779187363},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.animate1.0.3.min.js","hash":"d26f0ff85f5fea9b0e46bdfc1a4c4b202bc88619","modified":1678779187362},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1678779187364},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.css","hash":"45e469dffa7b9ebc03f99fd09fb97274cdc5e9b4","modified":1678779187364},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1678779187364},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1678779187367},{"_id":"themes/hexo-theme-bamboo/source/js/utils/index.js","hash":"54c66b0a396cc3743884cdb979e5c400218613ce","modified":1678779187367},{"_id":"themes/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1678779187369},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.css","hash":"36a1d2f61d11ab328e349d6a523dd9dea2ec7ee1","modified":1678779187369},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1678779187369},{"_id":"themes/hexo-theme-bamboo/source/medias/cursor/Horizontal.cur","hash":"c3c5e8485a67b7ab16079a96b53aff7ff52de756","modified":1678779187372},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/changyan/layout.ejs","hash":"b90f7f7e2f77be536f4b97d52419a2f794bdbaec","modified":1678779187301},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitalk/layout.ejs","hash":"6e79a6febb328f25672a30562f42bae83b660d43","modified":1678779187301},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/changyan/script.ejs","hash":"03e325fae6afbdf97b6248718da6ae55c7f9713f","modified":1678779187301},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/beaudar/script.ejs","hash":"f6c087d32bf103ac42032d0b675eb316e40f958e","modified":1678779187301},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/beaudar/layout.ejs","hash":"52b9a55b6e83bd9a10fc3f66a18be98e3965475b","modified":1678779187300},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitalk/script.ejs","hash":"0d9ca1cf699ca0833314d200a3c443a169628c27","modified":1678779187302},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitment/script.ejs","hash":"f1b1e86772b919f51439ee9f2a1457f1c72b48f6","modified":1678779187302},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/livere/layout.ejs","hash":"5986303fce163c62598a036d4366f3371537d714","modified":1678779187303},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitment/layout.ejs","hash":"25133b120d294dc7bf195ddc175a808970902922","modified":1678779187302},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/livere/script.ejs","hash":"a6d632f39a6252b7647d97fb756d424f5cdab5c2","modified":1678779187303},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/twikoo/layout.ejs","hash":"d0730213e2a736c39a3ca519405c799dfc37311b","modified":1678779187303},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/twikoo/script.ejs","hash":"b35bf06fb2e8bc1b08b8a26e1f967fab398d0945","modified":1678779187303},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/utterance/layout.ejs","hash":"b9d45f3cc83931c766283e9ad9aab62578d20370","modified":1678779187304},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/utterance/script.ejs","hash":"b533a20a77fd9f85bd05abe1eb32fdb96d62b10e","modified":1678779187304},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/valine/layout.ejs","hash":"fa5f2280e3159ece2e3185536c2338f30a442d08","modified":1678779187304},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/valine/script.ejs","hash":"686825b876be14a69f8a81e575b8ff873c6473bb","modified":1678779187305},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/waline/layout.ejs","hash":"b26e5ea3f5553b65117dc0d260c8a8e91929741c","modified":1678779187305},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_2.styl","hash":"be6d8bead01f83be4301044e5ab902d4203bb2ef","modified":1678779187338},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/waline/script.ejs","hash":"45e64391a7baef0c8e025640f49a9bdbfac1a756","modified":1678779187305},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_1.styl","hash":"fad3760b5280d5f074e2cddfcd8799271847e817","modified":1678779187337},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_3.styl","hash":"0a0cdfd52a2bebc9165f6e74a09377501846baf9","modified":1678779187338},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_5.styl","hash":"8d7d41ebf5871a53e62463517a4f6710069187e3","modified":1678779187338},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_4.styl","hash":"d37f0ae9e913ad5f66fa277c27b2f2a091c9861d","modified":1678779187338},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_6.styl","hash":"f6d0a40b5d4802b201f1e703801882d3fff0be4d","modified":1678779187338},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_7.styl","hash":"6c3801881c8c0d5a72a8ba6e4954627ccb4838fb","modified":1678779187339},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_8.styl","hash":"9a769ce1141594c92d7277688617516d900a4c87","modified":1678779187339},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_10.styl","hash":"7a56563ac7c5e54890c1503cc26d0b2cce2c5e5f","modified":1678779187342},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_12.styl","hash":"f30b240ed01589c4a9226bd26b2c9b16fbc4f731","modified":1678779187343},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_11.styl","hash":"3200f4686a059c720240d79da0499f275f9072ab","modified":1678779187342},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_13.styl","hash":"aeafdf3145d4b1e4c29fce168152347fbef06ecb","modified":1678779187343},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_14.styl","hash":"f99ca2a3c04eb5a07c10990bd47a235d2f4bb1d4","modified":1678779187343},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_2.styl","hash":"7c30edb992577ac0972c88a73ba8dca9bc5e3a00","modified":1678779187344},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_1.styl","hash":"747203f44b6f1f0cf461ad267adbb4f7a088e384","modified":1678779187342},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_3.styl","hash":"f83142b71f4913a97e9f4f38984875ee67c834b6","modified":1678779187344},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_15.styl","hash":"c4871320812888cbc02f028cb2e4536d638c9922","modified":1678779187343},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_8.styl","hash":"0611b95238be036de97e4f2777ade6c20c7d8abf","modified":1678779187345},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_5.styl","hash":"14dba613efd1cba5167d5347755063ffdbd98d86","modified":1678779187344},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_4.styl","hash":"df3d24ae1d912296a9f4271b7b808c8f4c296f0b","modified":1678779187344},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_7.styl","hash":"370ad5362836e7ca7a0cbc1a103680bbfbabe230","modified":1678779187344},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_6.styl","hash":"2e5a6561325cf920845a21a82452ddd5eecb7c60","modified":1678779187344},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1678779187360},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1678779187361},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1678779187361},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_9.styl","hash":"5f95065c870432d5b34ef2b550b484848a204bd0","modified":1678779187345},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1678779187361},{"_id":"themes/hexo-theme-bamboo/source/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1678779187356},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1678779187355},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1678779187363},{"_id":"themes/hexo-theme-bamboo/source/js/valine/index.js","hash":"8809117760e0a7ce8dcc3f14b6421a4d415284a6","modified":1678779187368},{"_id":"themes/hexo-theme-bamboo/source/js/waline/waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1678779187371},{"_id":"themes/hexo-theme-bamboo/source/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1678779187370},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1678779187366},{"_id":"public/atom.xml","hash":"32dc3b9f47a3991a392ac4528f28f1f2ba2b252b","modified":1678848616800},{"_id":"public/search.xml","hash":"9fef80e1c9036b5519fac9becce26f99c19a363a","modified":1678848616800},{"_id":"public/about/index.html","hash":"1a2324f84f436c455412e44dbf26f185cacd5514","modified":1678848616800},{"_id":"public/friends/index.html","hash":"864d1de3d03ae7df41107c2d8ed9c66f623877fa","modified":1678848616800},{"_id":"public/categories/index.html","hash":"871623817204678194857d5e9c2c69136b2ac5a9","modified":1678848616800},{"_id":"public/tags/index.html","hash":"986897d54c68277b1828dd8841696804e1c68d5a","modified":1678848616800},{"_id":"public/2023/02/17/java-wen-jian-chu-li-chang-yong-fang-fa/index.html","hash":"68009a61d6904e27e67a7798c06a89651fb70faa","modified":1678848616800},{"_id":"public/2022/07/29/chang-yong-cha-jian-bei-fen/index.html","hash":"be6a5a709f83d5a6f33b9db31bd626fbfed0dc7e","modified":1678848616800},{"_id":"public/2022/07/29/windows-xi-tong-xiu-gai-jar-nei-rong/index.html","hash":"57630246b771ed3687a84698149253b7ca4a0e8a","modified":1678848616800},{"_id":"public/2022/04/09/css-xue-xi-si/index.html","hash":"f80740b8749dd32ac94c88494548557921ec8f46","modified":1678848616800},{"_id":"public/2022/04/05/css-xue-xi-san/index.html","hash":"d36cad6f30986ea13355aab8b7ee6e8011099d4b","modified":1678848616800},{"_id":"public/2022/04/04/css-xue-xi-er/index.html","hash":"6de8d59298c1a6ba9eb13e43d92cb7a8bc262306","modified":1678848616800},{"_id":"public/2022/04/03/css-xue-xi-yi/index.html","hash":"2a1cb97d87a3ce517f071f51c9a2a416f67a61b4","modified":1678848616800},{"_id":"public/2022/03/27/async-await-de-li-jie/index.html","hash":"2faee6993b0ed32e4209457e482b1d83b00dc1bb","modified":1678848616800},{"_id":"public/2022/03/26/js-xun-huan-zong-jie/index.html","hash":"83f3e02670959440eaa10581a2b8909ebe1dbfab","modified":1678848616800},{"_id":"public/2021/12/08/vue-xue-xi-er/index.html","hash":"1873dc9cb8ff5117eed07b9fc608f4ee440d23cd","modified":1678848616800},{"_id":"public/2021/12/07/vue-xue-xi-yi/index.html","hash":"cb5a9930e1136713500181731d73e611a39ede0a","modified":1678848616800},{"_id":"public/2021/12/07/windows-an-zhuang-hive/index.html","hash":"503cb5fa992e48e5844fb4585efe5a0b4a50d8e4","modified":1678848616800},{"_id":"public/2021/04/13/leetcode-ti-huan-kong-ge/index.html","hash":"830a27a418bb8901096dc5c316750d86a0fe2a07","modified":1678848616800},{"_id":"public/2021/04/09/leetcode-er-wei-shu-zu-zhong-de-cha-zhao/index.html","hash":"b5baef5e3279016bf6e32654595825bcbf0e3826","modified":1678848616800},{"_id":"public/2021/04/08/zai-liu-lan-qi-shu-ru-url-hui-che-zhi-hou-fa-sheng-liao-shi-me/index.html","hash":"eabf71157cd8547cf31c954fe636e9a7cc93ed43","modified":1678848616800},{"_id":"public/2021/04/08/leetcode-shu-zu-zhong-chong-fu-de-shu-zi/index.html","hash":"e3818561cb986924d7ae8134101765e74294b931","modified":1678848616800},{"_id":"public/2021/04/07/shuang-xiang-bang-ding-he-dan-xiang-bang-ding/index.html","hash":"5388966fc3b3f171a9a2d926039aa28e2efb7f5b","modified":1678848616800},{"_id":"public/2021/04/07/leetcode-zi-ju-xing-cha-xun/index.html","hash":"283120847cccbcde5a59c2f58497602c4541a857","modified":1678848616800},{"_id":"public/2021/04/06/leetcode-zui-fu-you-ke-hu-de-zi-chan-zong-liang/index.html","hash":"050eebe852e8a249f0256a159cbe94163414dcd8","modified":1678848616800},{"_id":"public/2021/03/31/jvm-jie-gou-xiang-jie/index.html","hash":"a329e3633c09eacebe8876d17f3f667bba0f120c","modified":1678848616800},{"_id":"public/2021/03/31/leetcode-yi-wei-shu-zu-de-dong-tai-he/index.html","hash":"c8f4164a5aa6e828e48a5d1e718464b644793fe1","modified":1678848616800},{"_id":"public/2021/03/30/java-jiao-huan-shu-zu-yuan-su/index.html","hash":"a9fa26b59cc4036f872c9efa1bae4344fcf1d956","modified":1678848616800},{"_id":"public/2022/07/29/chang-yong-lian-jie-bei-wang/index.html","hash":"32f5a4ae892c17066b68ae051ddc9151d2bbce04","modified":1678848616800},{"_id":"public/2021/03/29/leetcode-que-shi-de-di-yi-ge-zheng-shu/index.html","hash":"d2f0ca2d2e0c5215c011a2c2ca7c06eb45994fb6","modified":1678848616800},{"_id":"public/2021/03/25/leetcode-yi-chu-yuan-su/index.html","hash":"3bdd58fdc34622c518efafc1b7ffcd82b9b223dc","modified":1678848616800},{"_id":"public/2021/03/23/leetcode-liang-shu-zhi-he/index.html","hash":"ba2ffa11c673dced1ba0a215fdcda6e961bebbb2","modified":1678848616800},{"_id":"public/2021/03/23/elasticsearch-ru-men/index.html","hash":"e133fb23c1b710b5cf424f60004bd357caae420a","modified":1678848616800},{"_id":"public/2021/03/22/bio-nio-aio-dui-bi/index.html","hash":"e06d433237563cbb468220efaa25ad29a13618b8","modified":1678848616800},{"_id":"public/2021/03/19/windows-duan-kou-bei-zhan-yong-jie-jue-fang-fa/index.html","hash":"0efb2a476c7b065cfc301f6b26a79b17866ff939","modified":1678848616800},{"_id":"public/2021/03/19/autoupdater-zi-dong-geng-xin-ke-hu-duan/index.html","hash":"85feeb1fe779f3efb537301d74b777d3ed9b265e","modified":1678848616800},{"_id":"public/2021/03/19/cefsharp-chuang-jian-ke-hu-duan/index.html","hash":"59e206e261cfe5ffaf1cb57437a7f1521c85dd9f","modified":1678848616800},{"_id":"public/2021/03/25/elasticsearch-de-dao-pai-suo-yin/index.html","hash":"0cfeb508332dfa0ee3ef0dae4f794bcc89f718aa","modified":1678848616800},{"_id":"public/2021/03/19/winform-she-zhi-kong-jian-ju-zhong/index.html","hash":"060871eb45ec0ddd895e0b41cfd90039344987de","modified":1678848616800},{"_id":"public/2021/03/19/spring-batch-xue-xi-bi-ji-yi/index.html","hash":"a41f0eddf7ba67059a4ed7619e28149dffe814c6","modified":1678848616800},{"_id":"public/2021/03/19/java-lei-xing-zhuan-huan-gong-ju-lei-chi-xu-geng-xin/index.html","hash":"7af96baf7c48aa7366b754279ab6288b8495c2ea","modified":1678848616800},{"_id":"public/2021/03/19/wei-hu-java-xiang-mu-zhi-he-equals/index.html","hash":"9863accf718d68a17f2f775fd3a88c4fc91c2f02","modified":1678848616800},{"_id":"public/2021/03/19/yi-kuan-zhi-neng-de-ri-qi-jie-xi-gong-ju/index.html","hash":"92de09daba830a4be1f39cc1b04b200cb67e5612","modified":1678848616800},{"_id":"public/archives/index.html","hash":"dd12687acf8c0ae6d342920e55aff7fd02e50056","modified":1678848616800},{"_id":"public/2021/03/18/about/index.html","hash":"4b2724287e35e83415e0763a79a747ceceb2cfb4","modified":1678848616800},{"_id":"public/2021/03/18/vue-han-shu-fang-dou-he-han-shu-jie-liu/index.html","hash":"0e53ffc8d6fbb2930192d94f5c4cad3b4b0bbb63","modified":1678848616800},{"_id":"public/archives/page/2/index.html","hash":"db4ce9327565a8ce5647cb7c930c3a731d38cc7c","modified":1678848616800},{"_id":"public/archives/page/4/index.html","hash":"45e579ad0c1c4c6d1b35e67d8456ef2898a1689d","modified":1678848616800},{"_id":"public/archives/page/3/index.html","hash":"34cf66fc2ccd831236b9f7452f3c3b32d8af3f79","modified":1678848616800},{"_id":"public/archives/2021/page/3/index.html","hash":"6ae83fe97f4cb966fa78094cb9fcf1681a9a333d","modified":1678848616800},{"_id":"public/archives/2021/03/page/2/index.html","hash":"ce08365a0131310c623a0a6e5867537b4aa0e26d","modified":1678848616800},{"_id":"public/archives/2021/04/index.html","hash":"ebf85f063e9869d9eb35840832834b5abb925518","modified":1678848616800},{"_id":"public/archives/2021/12/index.html","hash":"eca2b6aeeae28e51cbd5d1e8bcb0dfa72e3a6fd0","modified":1678848616800},{"_id":"public/archives/2022/index.html","hash":"b23dad46794b5b8f5f80ab7f453a46d9423b4cf0","modified":1678848616800},{"_id":"public/archives/2022/03/index.html","hash":"03aabb3fef76f04dae91a2637014f1e152e23629","modified":1678848616800},{"_id":"public/archives/2022/04/index.html","hash":"6d24037f0e105ea035b05397d0938acbb4c4849c","modified":1678848616800},{"_id":"public/archives/2022/07/index.html","hash":"b2a14f69e61226f4aaef0274bfb0da1f06f5de80","modified":1678848616800},{"_id":"public/archives/2023/index.html","hash":"f12d1d7b6367734f8886d9589ed0f7483e9c9d44","modified":1678848616800},{"_id":"public/archives/2023/02/index.html","hash":"3b66b72daac20645912025d9495ee15f031daff0","modified":1678848616800},{"_id":"public/categories/Net/index.html","hash":"bd8de5893353da6d389f7d4de5b592e354d95d31","modified":1678848616800},{"_id":"public/categories/后端/index.html","hash":"5af177cba803d75fc2d8b61ce26f705bb19e7b76","modified":1678848616800},{"_id":"public/categories/后端/page/2/index.html","hash":"1ffe089e21615a7c9d7c5bc9c381007f6826191a","modified":1678848616800},{"_id":"public/categories/Net/Winform/index.html","hash":"61adeef9877f233e7cb87d3702554039785a06b3","modified":1678848616800},{"_id":"public/categories/DB/index.html","hash":"527e453491f6340e05e59dbcbc339239cb678e32","modified":1678848616800},{"_id":"public/categories/前端/index.html","hash":"cf48897078578fb2ad1daf5d8de2065cc64a1292","modified":1678848616800},{"_id":"public/categories/后端/Java/index.html","hash":"bbb3df5d635935590a30a1163cd10389e4525586","modified":1678848616800},{"_id":"public/categories/后端/算法/index.html","hash":"95011dd31e52582f92654efeccc09f0b516d26f7","modified":1678848616800},{"_id":"public/categories/DB/Elasticsearch/index.html","hash":"0f068365a8557b056b13bec67515385c142d4159","modified":1678848616800},{"_id":"public/categories/前端/Vue/index.html","hash":"8bb1f5f39519d3aa4d1bacf33d080ff6bd5e7b56","modified":1678848616800},{"_id":"public/categories/Windows/index.html","hash":"7e93bc11e1706551eb183c9090439f8059bda5f7","modified":1678848616800},{"_id":"public/categories/操作系统/index.html","hash":"98317d9253fb6a3bf2c5ca0f7f2480471a90b435","modified":1678848616800},{"_id":"public/categories/个人/index.html","hash":"55975b667100cfdd9c51b63ea3b0547c02b476d5","modified":1678848616800},{"_id":"public/categories/Vscode/index.html","hash":"56449e1704db5713d24a91907c4084941372d09a","modified":1678848616800},{"_id":"public/categories/链接/index.html","hash":"cc946c99d8c10f694dd60bfdff9e24df43fe66ca","modified":1678848616800},{"_id":"public/categories/Windows/数据库/index.html","hash":"b35069a68d3ecee692825665ceba90c94e920714","modified":1678848616800},{"_id":"public/categories/操作系统/Windows/index.html","hash":"2f28ae1676a327efe56054b5da2df917eed56d93","modified":1678848616800},{"_id":"public/categories/Vscode/插件/index.html","hash":"40f469a9e882d97231f15abd121add18761018b7","modified":1678848616800},{"_id":"public/index.html","hash":"81103fa2d7b60c69e507c3c4102929cfa8e91933","modified":1678848616800},{"_id":"public/page/2/index.html","hash":"0e160a0bb4d12d68789b8255f34e276a43cfd884","modified":1678848616800},{"_id":"public/page/3/index.html","hash":"c90b09c0fe746959e52a924a0e1b0da65fd8a4ab","modified":1678848616800},{"_id":"public/page/4/index.html","hash":"98813f63fdc74be294f6228e55466aa7078abc19","modified":1678848616800},{"_id":"public/tags/AutoUpdater/index.html","hash":"c37d057f49c7eeead5415d741705b6125901fc6e","modified":1678848616800},{"_id":"public/archives/2021/page/2/index.html","hash":"d07f1c2b9c63d0ae4ed3dddc2699f5b927414d84","modified":1678848616800},{"_id":"public/tags/客户端/index.html","hash":"c44c8788f861a4acf86de29d78136bf5aa2b0862","modified":1678848616800},{"_id":"public/tags/IO模型/index.html","hash":"2a63998da0ffb80234fadf6cdda2abbfb250c618","modified":1678848616800},{"_id":"public/archives/2021/index.html","hash":"2dec2f7ccd5b8207acbc57f084ae76fb6ae66995","modified":1678848616800},{"_id":"public/tags/CefSharp/index.html","hash":"f3cd5efb424bb7d1ff5d0b37d6c11a11e20dcabc","modified":1678848616800},{"_id":"public/tags/循环/index.html","hash":"7d47eba48b4a3492f1efb8023241dd2131a69149","modified":1678848616800},{"_id":"public/tags/JVM/index.html","hash":"713040981a1594627c5ce5bc5941cccde3d659fd","modified":1678848616800},{"_id":"public/tags/数组/index.html","hash":"24d939d6ca052c008ee2eff3478206ecf6d00bde","modified":1678848616800},{"_id":"public/tags/文件处理/index.html","hash":"bc5e96d89118f70002cc685ed6690068236a0180","modified":1678848616800},{"_id":"public/tags/类型转换/index.html","hash":"73edb8af68cb677125d9e3f965fc023799562d11","modified":1678848616800},{"_id":"public/tags/Elasticsearch/index.html","hash":"6725943fbc6ebcadb17faf69b9fcb2fd8e9c58ce","modified":1678848616800},{"_id":"public/tags/Utils/index.html","hash":"f0ec48a807ef4eee5d1ec416e16725f85d139c6f","modified":1678848616800},{"_id":"public/tags/Spring-Batch/index.html","hash":"d87dcc8164fdaf2dae9d60d624bcfe45eaed3495","modified":1678848616800},{"_id":"public/tags/批处理/index.html","hash":"14c90d5e43e9ed5f51c4fee2e870c1b7785772cd","modified":1678848616800},{"_id":"public/tags/引入JS/index.html","hash":"e4eb6cbc470b4788feb4e20447a7b35b5d500931","modified":1678848616800},{"_id":"public/tags/模板语法/index.html","hash":"a69a295657a9db82a5702f59bd667903c2258d97","modified":1678848616800},{"_id":"public/tags/防抖/index.html","hash":"91755804f0c290c87aed0faab8446bf08bab9827","modified":1678848616800},{"_id":"public/tags/节流/index.html","hash":"12c9e865b0b63446ac53446083759d096484938a","modified":1678848616800},{"_id":"public/tags/el与data/index.html","hash":"4ecee009f3b8be6ca3fcbd50c76c153ec9db5768","modified":1678848616800},{"_id":"public/tags/MVVM模型/index.html","hash":"3650be9b4b978c5a3899c2e8da9d58d0c5e0442c","modified":1678848616800},{"_id":"public/tags/控件/index.html","hash":"c16569e403b650541c3cc6089fa039a8be75bbdd","modified":1678848616800},{"_id":"public/tags/居中/index.html","hash":"95cebf068d9bf40245856fff6e236b3225422726","modified":1678848616800},{"_id":"public/tags/Hive/index.html","hash":"74d396e3b309ec3015496251c854b5e8095f7e73","modified":1678848616800},{"_id":"public/tags/LeetCode/index.html","hash":"4d725411dad40c3d9a088772a590101f9f570128","modified":1678848616800},{"_id":"public/tags/数据库/index.html","hash":"8d45cf60631a7c71c62a5a720b32f64c83606d0f","modified":1678848616800},{"_id":"public/tags/端口占用/index.html","hash":"2fa9cd934b2359cf5120d82b4c3bfa8a94977df7","modified":1678848616800},{"_id":"public/tags/jar包/index.html","hash":"a4ba3987689fe45a88843ff457575277ff08c63e","modified":1678848616800},{"_id":"public/tags/简历/index.html","hash":"fe4123b00d75a6a92e16a90689fec4abb1ceb2a5","modified":1678848616800},{"_id":"public/tags/异步/index.html","hash":"429f2223af1c0174c0d9cbc9acae825d8cd8753c","modified":1678848616800},{"_id":"public/tags/async-await/index.html","hash":"f10793fb1d5693f4e42103170e81a9331d3f5998","modified":1678848616800},{"_id":"public/tags/css/index.html","hash":"089bf474af3c8c0c26dbf15cbffd86b53f071b9e","modified":1678848616800},{"_id":"public/tags/日期解析/index.html","hash":"8af1ed39b336941a9ec9d5fd87834bf695693f9c","modified":1678848616800},{"_id":"public/tags/双向绑定/index.html","hash":"826a4e9bfb4ae9534fb8b87cb34934b8d152eaed","modified":1678848616800},{"_id":"public/tags/单向绑定/index.html","hash":"2e0fae916d989b426a194c11d47bf415dd20ef7a","modified":1678848616800},{"_id":"public/tags/浏览器/index.html","hash":"5f979349eecf37177b149bbe7e9fbd3e3efc7910","modified":1678848616800},{"_id":"public/tags/URL/index.html","hash":"babe167c48f26cd37bfce0296d30665d4b06491c","modified":1678848616800},{"_id":"public/tags/Vscode/index.html","hash":"50f9889083550920d1cf397ab8f628ada41dce4c","modified":1678848616800},{"_id":"public/tags/equals/index.html","hash":"31a18db8775551d155ec01a69a9cfed7db03b582","modified":1678848616800},{"_id":"public/tags/链接/index.html","hash":"4e8f354f8766513da8ca2e42992d8a5d06af0f9e","modified":1678848616800},{"_id":"public/tags/笔记/index.html","hash":"b1a9a616da46ca8d9f70cad21c8031d3164852f3","modified":1678848616800},{"_id":"public/archives/2021/03/index.html","hash":"bdd105e78d7e55c2a53af58e443f21f658a6a7fb","modified":1678848616800},{"_id":"public/favicon.ico","hash":"801ff7b3f358b77a813787a97ef59148eec93fd8","modified":1678848616800},{"_id":"public/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":1678848616800},{"_id":"public/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1678848616800},{"_id":"public/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1678848616800},{"_id":"public/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1678848616800},{"_id":"public/js/shareJs/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1678848616800},{"_id":"public/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1678848616800},{"_id":"public/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1678848616800},{"_id":"public/medias/cursor/Horizontal.cur","hash":"c3c5e8485a67b7ab16079a96b53aff7ff52de756","modified":1678848616800},{"_id":"public/js/activate-power-mode.js","hash":"3d02584da9dd820d1d9a454c5a93a2c37a8e4e42","modified":1678848616800},{"_id":"public/js/app.js","hash":"38e8d7ce69449ee7fc28db92f6be88ae26e708b2","modified":1678848616800},{"_id":"public/js/goTop.js","hash":"dfcbf8a70cfb4465d0afabf5153bd069771a6a1c","modified":1678848616800},{"_id":"public/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1678848616800},{"_id":"public/js/wrapImage.js","hash":"4b3cbceda7950c3fb2a17c4e169c4fdbc023ceab","modified":1678848616800},{"_id":"public/js/local_search.js","hash":"475dc0727cb85c22f15f86701dd93c4bf449a438","modified":1678848616800},{"_id":"public/js/bubble/bubble.js","hash":"40cbc57f98407216ba6dc412e2b75e18c036240f","modified":1678848616800},{"_id":"public/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1678848616800},{"_id":"public/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1678848616800},{"_id":"public/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1678848616800},{"_id":"public/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1678848616800},{"_id":"public/css/style.css","hash":"0af136b7d092792d335a0c71c88977749fd2295d","modified":1678848616800},{"_id":"public/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1678848616800},{"_id":"public/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1678848616800},{"_id":"public/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1678848616800},{"_id":"public/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1678848616800},{"_id":"public/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1678848616800},{"_id":"public/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1678848616800},{"_id":"public/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1678848616800},{"_id":"public/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1678848616800},{"_id":"public/js/falling/snow.js","hash":"6f4ef88304f874ef8bb8ea54f79b5d97f5a8f2f6","modified":1678848616800},{"_id":"public/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1678848616800},{"_id":"public/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1678848616800},{"_id":"public/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1678848616800},{"_id":"public/js/issues/index.js","hash":"e5f7b37f9dd8e966c7a63b8b6da27d53510eddeb","modified":1678848616800},{"_id":"public/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1678848616800},{"_id":"public/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1678848616800},{"_id":"public/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1678848616800},{"_id":"public/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1678848616800},{"_id":"public/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1678848616800},{"_id":"public/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1678848616800},{"_id":"public/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1678848616800},{"_id":"public/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1678848616800},{"_id":"public/js/swiper/swiper.animate1.0.3.min.js","hash":"0e48f180ca2f18b787e4b7b6e55ee3b0c6067691","modified":1678848616800},{"_id":"public/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1678848616800},{"_id":"public/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1678848616800},{"_id":"public/js/swiper/swiper@5.4.1.min.css","hash":"de2263f82e7bf0778f31fd05c53000799f60701a","modified":1678848616800},{"_id":"public/js/tocbot/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1678848616800},{"_id":"public/js/tocbot/tocbot.css","hash":"45e469dffa7b9ebc03f99fd09fb97274cdc5e9b4","modified":1678848616800},{"_id":"public/js/utils/index.js","hash":"54c66b0a396cc3743884cdb979e5c400218613ce","modified":1678848616800},{"_id":"public/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1678848616800},{"_id":"public/js/vue-typed-js/index.css","hash":"36a1d2f61d11ab328e349d6a523dd9dea2ec7ee1","modified":1678848616800},{"_id":"public/js/falling/sakura.js","hash":"ab41921e8f6ea1bedfcc348924574dc0caa20858","modified":1678848616800},{"_id":"public/js/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1678848616800},{"_id":"public/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1678848616800},{"_id":"public/js/pjax@0.2.8/index.js","hash":"c9b1e349203e558dbe43665353e88c6eafc7dbcd","modified":1678848616800},{"_id":"public/js/swiper/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1678848616800},{"_id":"public/js/swiper/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1678848616800},{"_id":"public/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1678848616800},{"_id":"public/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1678848616800},{"_id":"public/js/waline/waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1678848616800},{"_id":"public/js/valine/index.js","hash":"8809117760e0a7ce8dcc3f14b6421a4d415284a6","modified":1678848616800}],"Category":[{"name":".Net","_id":"clf934bj10004scacdytg5s9i"},{"name":"后端","_id":"clf934bj7000fscac00vwc5lb"},{"name":"Winform","parent":"clf934bj10004scacdytg5s9i","_id":"clf934bj9000lscac9aat9xeh"},{"name":"DB","_id":"clf934bjb000pscac9t61crxw"},{"name":"前端","_id":"clf934bjd000xscacf841fuhm"},{"name":"Java","parent":"clf934bj7000fscac00vwc5lb","_id":"clf934bjj001escac3nhq1ed0"},{"name":"算法","parent":"clf934bj7000fscac00vwc5lb","_id":"clf934bjp001yscachs0z6z7r"},{"name":"Elasticsearch","parent":"clf934bjb000pscac9t61crxw","_id":"clf934bjs002cscachki40qtq"},{"name":"Vue","parent":"clf934bjd000xscacf841fuhm","_id":"clf934bk3003yscac5x1ggh6r"},{"name":"Windows","_id":"clf934bk5004dscacf6x5gos2"},{"name":"操作系统","_id":"clf934bk5004iscacgt0z25hv"},{"name":"个人","_id":"clf934bk6004tscaccc6z63kv"},{"name":"Vscode","_id":"clf934bk80053scac80g13d8w"},{"name":"链接","_id":"clf934bk80059scac0isz482q"},{"name":"数据库","parent":"clf934bk5004dscacf6x5gos2","_id":"clf934bk9005dscacdzjwbjho"},{"name":"Windows","parent":"clf934bk5004iscacgt0z25hv","_id":"clf934bk9005iscac3mmm292o"},{"name":"插件","parent":"clf934bk80053scac80g13d8w","_id":"clf934bka005pscacf99054lh"}],"Data":[],"Page":[{"title":"about","date":"2023-03-15T01:58:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-03-15 09:58:30\n---\n","updated":"2023-03-15T01:58:30.419Z","path":"about/index.html","comments":1,"layout":"page","_id":"clf934biw0000scac23toams8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2023-03-15T01:58:05.000Z","onlyTitle":true,"toc":false,"_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-03-15 09:58:05\nonlyTitle: true # 只显示title\ntoc: false # 不显示文章目录\n---\n","updated":"2023-03-15T01:58:19.615Z","path":"friends/index.html","comments":1,"layout":"page","_id":"clf934bj00002scac3vazfjqs","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2023-03-15T01:55:49.000Z","title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ndate: 2023-03-15 09:55:49\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-03-15T01:56:14.483Z","path":"categories/index.html","comments":1,"_id":"clf934bj30006scacd1n6dz9h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-03-15T01:56:32.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-15 09:56:32\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-03-15T01:56:42.258Z","path":"tags/index.html","comments":1,"_id":"clf934bj40008scacfjeo450c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AutoUpdater自动更新客户端","date":"2021-03-19T03:11:06.000Z","_content":"\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n\n## 工作简介\n\n        从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n\n## XML 文件\n\n    ``` xml\n        <?xml version = \"1.0\" encoding = \"UTF-8\"?>\n        < item >\n            < version > 2.0.0.0 </ version >\n            < url > https://www.cnblogs.com</ url >\n            < changelog > https://www.cnblogs.com </ changelog >\n            < mandatory > false </ mandatory >\n        </ item >\n    ```\n\n    如上所示：\n        version(必填)：格式为X.X.X.X的版本标记。\n        url(必填)：最新版本安装程序文件的url。\n        changelog(可选)：程序更改日志的url。\n        mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n    选择使用以下代码将跳过update对话框，自动下载更新：\n\n    ``` xml\n        <mandatory mode=\"2\">true</mandatory>\n    ```\n\n        args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n        checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n    ```xml\n    <checksum algorithm=\"MD5\">Update file Checksum</checksum>\n    ```\n\n## 窗体代码\n\n    ``` c#\n    using AutoUpdaterDotNET;\n\n    private void button1_Click(object sender, EventArgs e)\n            {\n                //XML文件地址\n                AutoUpdater.Start(\"https://www.cnblogs.com\");\n            }\n    ```\n\n## 参考地址\n\n<https://github.com/ravibpatel/AutoUpdater.NET>\n","source":"_posts/AutoUpdater自动更新客户端.md","raw":"---\ntitle: AutoUpdater自动更新客户端\ndate: 2021-03-19 11:11:06\ntags:\n  - AutoUpdater\n  - 客户端\n\ncategories: [.Net, Winform]\n---\n\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n\n## 工作简介\n\n        从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n\n## XML 文件\n\n    ``` xml\n        <?xml version = \"1.0\" encoding = \"UTF-8\"?>\n        < item >\n            < version > 2.0.0.0 </ version >\n            < url > https://www.cnblogs.com</ url >\n            < changelog > https://www.cnblogs.com </ changelog >\n            < mandatory > false </ mandatory >\n        </ item >\n    ```\n\n    如上所示：\n        version(必填)：格式为X.X.X.X的版本标记。\n        url(必填)：最新版本安装程序文件的url。\n        changelog(可选)：程序更改日志的url。\n        mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n    选择使用以下代码将跳过update对话框，自动下载更新：\n\n    ``` xml\n        <mandatory mode=\"2\">true</mandatory>\n    ```\n\n        args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n        checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n    ```xml\n    <checksum algorithm=\"MD5\">Update file Checksum</checksum>\n    ```\n\n## 窗体代码\n\n    ``` c#\n    using AutoUpdaterDotNET;\n\n    private void button1_Click(object sender, EventArgs e)\n            {\n                //XML文件地址\n                AutoUpdater.Start(\"https://www.cnblogs.com\");\n            }\n    ```\n\n## 参考地址\n\n<https://github.com/ravibpatel/AutoUpdater.NET>\n","slug":"AutoUpdater自动更新客户端","published":1,"updated":"2022-10-27T06:40:13.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934biy0001scach1wm7aa6","content":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n</code></pre>\n<h2 id=\"工作简介\"><a href=\"#工作简介\" class=\"headerlink\" title=\"工作简介\"></a>工作简介</h2><pre><code>    从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n</code></pre>\n<h2 id=\"XML-文件\"><a href=\"#XML-文件\" class=\"headerlink\" title=\"XML 文件\"></a>XML 文件</h2><pre><code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version = <span class=\"string\">&quot;1.0&quot;</span> encoding = <span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\">&lt; item &gt;</span><br><span class=\"line\">    &lt; version &gt; 2.0.0.0 &lt;/ version &gt;</span><br><span class=\"line\">    &lt; url &gt; https://www.cnblogs.com&lt;/ url &gt;</span><br><span class=\"line\">    &lt; changelog &gt; https://www.cnblogs.com &lt;/ changelog &gt;</span><br><span class=\"line\">    &lt; mandatory &gt; false &lt;/ mandatory &gt;</span><br><span class=\"line\">&lt;/ item &gt;</span><br></pre></td></tr></table></figure>\n\n如上所示：\n    version(必填)：格式为X.X.X.X的版本标记。\n    url(必填)：最新版本安装程序文件的url。\n    changelog(可选)：程序更改日志的url。\n    mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n选择使用以下代码将跳过update对话框，自动下载更新：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mandatory</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">mandatory</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n    args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n    checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">checksum</span> <span class=\"attr\">algorithm</span>=<span class=\"string\">&quot;MD5&quot;</span>&gt;</span>Update file Checksum<span class=\"tag\">&lt;/<span class=\"name\">checksum</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoUpdaterDotNET;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//XML文件地址</span></span><br><span class=\"line\">            AutoUpdater.Start(<span class=\"string\">&quot;https://www.cnblogs.com&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://github.com/ravibpatel/AutoUpdater.NET\">https://github.com/ravibpatel/AutoUpdater.NET</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n</code></pre>\n<h2 id=\"工作简介\"><a href=\"#工作简介\" class=\"headerlink\" title=\"工作简介\"></a>工作简介</h2><pre><code>    从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n</code></pre>\n<h2 id=\"XML-文件\"><a href=\"#XML-文件\" class=\"headerlink\" title=\"XML 文件\"></a>XML 文件</h2><pre><code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version = <span class=\"string\">&quot;1.0&quot;</span> encoding = <span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\">&lt; item &gt;</span><br><span class=\"line\">    &lt; version &gt; 2.0.0.0 &lt;/ version &gt;</span><br><span class=\"line\">    &lt; url &gt; https://www.cnblogs.com&lt;/ url &gt;</span><br><span class=\"line\">    &lt; changelog &gt; https://www.cnblogs.com &lt;/ changelog &gt;</span><br><span class=\"line\">    &lt; mandatory &gt; false &lt;/ mandatory &gt;</span><br><span class=\"line\">&lt;/ item &gt;</span><br></pre></td></tr></table></figure>\n\n如上所示：\n    version(必填)：格式为X.X.X.X的版本标记。\n    url(必填)：最新版本安装程序文件的url。\n    changelog(可选)：程序更改日志的url。\n    mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n选择使用以下代码将跳过update对话框，自动下载更新：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mandatory</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">mandatory</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n    args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n    checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">checksum</span> <span class=\"attr\">algorithm</span>=<span class=\"string\">&quot;MD5&quot;</span>&gt;</span>Update file Checksum<span class=\"tag\">&lt;/<span class=\"name\">checksum</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoUpdaterDotNET;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//XML文件地址</span></span><br><span class=\"line\">            AutoUpdater.Start(<span class=\"string\">&quot;https://www.cnblogs.com&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://github.com/ravibpatel/AutoUpdater.NET\">https://github.com/ravibpatel/AutoUpdater.NET</a></p>\n"},{"title":"CefSharp创建客户端","date":"2021-03-19T03:10:53.000Z","_content":"\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n\n## 配置工作\n\n    (1)首先右击项目选择属性，在\"生成\"选项中将\"首选32位\"勾上。\n\n    (2)其次在项目文件目录下找到\"项目名称.csproj\"文件，在第一个PropertyGroup中添加以下代码：\n\n    ``` xml\n        <CefSharpAnyCpuSupport>true</CefSharpAnyCpuSupport>\n    ```\n\n    (3)最后修改App.config文件，和<startup>标签并列地位，添加以下代码：\n\n    ``` xml\n\n    <runtime>\n        <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n            <probing privatePath=\"x86\"/>\n        </assemblyBinding>\n    </runtime>\n    ```\n\n## 窗体代码\n\n    ``` c#\n\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Windows.Forms;\n    using CefSharp;\n    using CefSharp.WinForms;\n\n    namespace embebbedChromium\n    {\n        public partial class Form1 : Form\n        {\n            public ChromiumWebBrowser chromeBrowser;\n\n            public Form1()\n            {\n                InitializeComponent();\n                // 初始化全局组件后启动浏览器\n                InitializeChromium();\n            }\n\n            private void Form1_Load(object sender, EventArgs e)\n            {\n\n            }\n\n            public void InitializeChromium()\n            {\n                CefSettings settings = new CefSettings();\n                //按照设置初始化cef\n                Cef.Initialize(settings);\n                // 创建一个浏览器组件\n                chromeBrowser = new ChromiumWebBrowser(\"http://baidu.com\");\n                // 将其添加到表单并将其填充到表单窗口\n                this.Controls.Add(chromeBrowser);\n                chromeBrowser.Dock = DockStyle.Fill;\n            }\n\n            private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n            {\n                Cef.Shutdown();\n            }\n        }\n    }\n    ```\n\n## 参考地址\n\n<https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application>\n","source":"_posts/CefSharp创建客户端.md","raw":"---\ntitle: CefSharp创建客户端\ndate: 2021-03-19 11:10:53\ntags:\n  - CefSharp\n  - 客户端\n\ncategories: [.Net, Winform]\n---\n\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n\n## 配置工作\n\n    (1)首先右击项目选择属性，在\"生成\"选项中将\"首选32位\"勾上。\n\n    (2)其次在项目文件目录下找到\"项目名称.csproj\"文件，在第一个PropertyGroup中添加以下代码：\n\n    ``` xml\n        <CefSharpAnyCpuSupport>true</CefSharpAnyCpuSupport>\n    ```\n\n    (3)最后修改App.config文件，和<startup>标签并列地位，添加以下代码：\n\n    ``` xml\n\n    <runtime>\n        <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n            <probing privatePath=\"x86\"/>\n        </assemblyBinding>\n    </runtime>\n    ```\n\n## 窗体代码\n\n    ``` c#\n\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Windows.Forms;\n    using CefSharp;\n    using CefSharp.WinForms;\n\n    namespace embebbedChromium\n    {\n        public partial class Form1 : Form\n        {\n            public ChromiumWebBrowser chromeBrowser;\n\n            public Form1()\n            {\n                InitializeComponent();\n                // 初始化全局组件后启动浏览器\n                InitializeChromium();\n            }\n\n            private void Form1_Load(object sender, EventArgs e)\n            {\n\n            }\n\n            public void InitializeChromium()\n            {\n                CefSettings settings = new CefSettings();\n                //按照设置初始化cef\n                Cef.Initialize(settings);\n                // 创建一个浏览器组件\n                chromeBrowser = new ChromiumWebBrowser(\"http://baidu.com\");\n                // 将其添加到表单并将其填充到表单窗口\n                this.Controls.Add(chromeBrowser);\n                chromeBrowser.Dock = DockStyle.Fill;\n            }\n\n            private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n            {\n                Cef.Shutdown();\n            }\n        }\n    }\n    ```\n\n## 参考地址\n\n<https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application>\n","slug":"CefSharp创建客户端","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj00003scac3gic6sy3","content":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n</code></pre>\n<h2 id=\"配置工作\"><a href=\"#配置工作\" class=\"headerlink\" title=\"配置工作\"></a>配置工作</h2><pre><code>(1)首先右击项目选择属性，在&quot;生成&quot;选项中将&quot;首选32位&quot;勾上。\n\n(2)其次在项目文件目录下找到&quot;项目名称.csproj&quot;文件，在第一个PropertyGroup中添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n(3)最后修改App.config文件，和&lt;startup&gt;标签并列地位，添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assemblyBinding</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">probing</span> <span class=\"attr\">privatePath</span>=<span class=\"string\">&quot;x86&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">assemblyBinding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">runtime</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Drawing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp.WinForms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">embebbedChromium</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Form1</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ChromiumWebBrowser chromeBrowser;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Form1</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化全局组件后启动浏览器</span></span><br><span class=\"line\">            InitializeChromium();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeChromium</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CefSettings settings = <span class=\"keyword\">new</span> CefSettings();</span><br><span class=\"line\">            <span class=\"comment\">//按照设置初始化cef</span></span><br><span class=\"line\">            Cef.Initialize(settings);</span><br><span class=\"line\">            <span class=\"comment\">// 创建一个浏览器组件</span></span><br><span class=\"line\">            chromeBrowser = <span class=\"keyword\">new</span> ChromiumWebBrowser(<span class=\"string\">&quot;http://baidu.com&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将其添加到表单并将其填充到表单窗口</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(chromeBrowser);</span><br><span class=\"line\">            chromeBrowser.Dock = DockStyle.Fill;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Cef.Shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application\">https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n</code></pre>\n<h2 id=\"配置工作\"><a href=\"#配置工作\" class=\"headerlink\" title=\"配置工作\"></a>配置工作</h2><pre><code>(1)首先右击项目选择属性，在&quot;生成&quot;选项中将&quot;首选32位&quot;勾上。\n\n(2)其次在项目文件目录下找到&quot;项目名称.csproj&quot;文件，在第一个PropertyGroup中添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n(3)最后修改App.config文件，和&lt;startup&gt;标签并列地位，添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assemblyBinding</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">probing</span> <span class=\"attr\">privatePath</span>=<span class=\"string\">&quot;x86&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">assemblyBinding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">runtime</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Drawing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp.WinForms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">embebbedChromium</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Form1</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ChromiumWebBrowser chromeBrowser;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Form1</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化全局组件后启动浏览器</span></span><br><span class=\"line\">            InitializeChromium();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeChromium</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CefSettings settings = <span class=\"keyword\">new</span> CefSettings();</span><br><span class=\"line\">            <span class=\"comment\">//按照设置初始化cef</span></span><br><span class=\"line\">            Cef.Initialize(settings);</span><br><span class=\"line\">            <span class=\"comment\">// 创建一个浏览器组件</span></span><br><span class=\"line\">            chromeBrowser = <span class=\"keyword\">new</span> ChromiumWebBrowser(<span class=\"string\">&quot;http://baidu.com&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将其添加到表单并将其填充到表单窗口</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(chromeBrowser);</span><br><span class=\"line\">            chromeBrowser.Dock = DockStyle.Fill;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Cef.Shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application\">https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application</a></p>\n"},{"title":"BIO/NIO/AIO对比","date":"2021-03-22T02:14:29.000Z","_content":"\n## IO 模型\n\n就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。\nJava 支持三种网络编程模型：BIO、NIO、AIO。\n\n- Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。\n\n- Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。\n\n- Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\n## BIO、NIO、AIO 使用场景\n\n- BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。\n- NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。\n- AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。\n\n## BIO 基本介绍\n\n- Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。\n- BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。\n\n### BIO 编程简要流程\n\n1. 服务器驱动一个 ServiceSocket。\n2. 客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。\n3. 客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。\n4. 如果有响应，客户端线程会等待请求结束后，再继续执行。\n\n### BIO 服务端代码案例\n\n```Java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:35:59\n */\npublic class Bio {\n\n\n    /**\n     * BIO 测试方法\n     */\n    public static void bioTest() throws IOException{\n        // 创建线程池\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        // 创建serverSocket\n        ServerSocket serverSocket = new ServerSocket(6666);\n        for (; ; ) {\n            System.out.println(\"等待连接中...\");\n            // 监听，等待客户端连接\n            Socket socket = serverSocket.accept();\n            System.out.println(\"连接到一个客户端\");\n            executorService.execute(() -> handler(socket));\n        }\n    }\n\n    /**\n     * 编写一个handler方法，和客户端通讯\n     *\n     * @param socket 套接字\n     */\n    public static void handler(Socket socket) {\n        byte[] bytes = new byte[1024];\n        System.out.println(\"当前线程信息：\" + Thread.currentThread().getName());\n        try {\n            // 通过socket获取输入流\n            InputStream inputStream = socket.getInputStream();\n            // 循环读取客户度发送的数据\n            while (inputStream.read(bytes) != -1) {\n                System.out.println(Thread.currentThread().getName() + \"：发送信息为：\" + new String(bytes, 0, bytes.length));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            System.out.println(\"关闭连接\");\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n- 启动该案例\n- 使用终端命令`telnet 127.0.0.1 6666`，打开 telnet 命令窗口\n  ![avatar](https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg)\n- 按下`ctrl+]`\n  ![avatar](https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg)\n- 输入`send hello world`，进行通信\n  ![avatar](https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg)\n- 输入`quit`退出 telnet 窗口，关闭连接\n  ![avatar](https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg)\n\n### BIO 问题分析\n\n1. 每个请求都需要创建独立的线程，与对应的客户端进行数据处理。\n2. 当并发数大时，需要创建大量线程来处理连接，系统资源占用大。\n3. 连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。\n\n## NIO 基本介绍\n\n1. Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。\n2. NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。\n3. NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。\n4. NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。\n5. Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。\n\n### NIO Buffer 的基本使用\n\n```Java\n  import java.nio.IntBuffer;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:39:49\n */\npublic class Nio {\n    /**\n     * NIO 测试方法\n     */\n    public static void nioTest() {\n        //同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer\n        //创建一个Buffer，大小为5\n        IntBuffer buffer = IntBuffer.allocate(5);\n        // 存放数据\n        int size = buffer.capacity();\n        for (int i = 0; i < size; i++) {\n            buffer.put(i);\n        }\n        // 切换成读模式，读写切换\n        buffer.flip();\n        while (buffer.hasRemaining()) {\n            System.out.println(buffer.get());\n        }\n    }\n\n}\n```\n\n### NIO 三大核心组件关系\n\n![avatar](https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png)\n\n#### 说明\n\n1. 每个 Channel 对应一个 Buffer。\n2. Selector 对应一个线程，一个线程对应多个 Channel。\n3. 该图反应了有三个 Channel 注册到该 Selector。\n4. 该程序切换到哪个 Channel 是由事件决定的（Event）。\n5. Selector 会根据不同的事件，在各个通道上切换。\n6. Buffer 就是一个内存块，底层是一个数组。\n7. 数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO\n\n### NIO 三大核心理解\n\n![avatar](https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg)\n\n#### Buffer 的机制及子类\n\n##### Buffer（缓冲区）基本介绍\n\n缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。\nChannel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。\n在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：\n\n```Java\npublic abstract class IntBuffer\n    extends Buffer\n    implements Comparable<IntBuffer>\n{\n\n    // These fields are declared here rather than in Heap-X-Buffer in order to\n    // reduce the number of virtual method invocations needed to access these\n    // values, which is especially costly when coding small buffers.\n    //\n    final int[] hb;                  // Non-null only for heap buffers\n    final int offset;\n    boolean isReadOnly;                 // Valid only for heap buffers\n\n    // Creates a new buffer with the given mark, position, limit, capacity,\n    // backing array, and array offset\n    //\n    IntBuffer(int mark, int pos, int lim, int cap,   // package-private\n                 int[] hb, int offset)\n    {\n        super(mark, pos, lim, cap);\n        this.hb = hb;\n        this.offset = offset;\n    }\n\n    // Creates a new buffer with the given mark, position, limit, and capacity\n    //\n    IntBuffer(int mark, int pos, int lim, int cap) { // package-private\n        this(mark, pos, lim, cap, null, 0);\n    }\n}\n```\n\n| Buffer 常用子类 | 描述                   |\n| --------------- | ---------------------- |\n| ByteBuffer      | 存储字节数据到缓冲区   |\n| ShortBuffer     | 存储字符创数据到缓冲区 |\n| CharBuffer      | 存储字符数据到缓冲区   |\n| IntBuffer       | 存储整数数据到缓冲区   |\n| LongBuffer      | 存储长整型数据到缓冲区 |\n| DoubleBuffer    | 存储浮点型数据到缓冲区 |\n| FloatBuffer     | 存储浮点型数据到缓冲区 |\n\nBuffer 中定义了四个属性来提供所有其包含的数据元素。\n\n```Java\n  // Invariants: mark <= position <= limit <= capacity\n  private int mark = -1;\n  private int position = 0;\n  private int limit;\n  private int capacity;\n```\n\n| 属性     | 描述                                                                                 |\n| -------- | ------------------------------------------------------------------------------------ |\n| capacity | 容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改                     |\n| limit    | 表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的     |\n| position | 当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备 |\n| Mark     | 标记当前 position 位置，当 reset 后回到标记位置                                      |\n\n#### Channel 的基本介绍\n\nNIO 的通道类似于流，但有如下区别：\n\n1. 通道是双向的可以进行读写，而流是单向的只能读，或者写。\n2. 通道可以实现已读读取数据。\n3. 通道可以从缓冲区读取数据，也可以写入数据到缓冲区。\n\n常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel\n\n##### FileChannel 类\n\nFileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：\n\n1. 使用 FileChannel 写入文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel写入文本文件\n     */\n    public static void nioFileChannelWrite() throws IOException {\n        String writeStr = \"Hello, Java菜鸟程序员\";\n        // 创建一个输出流\n        FileOutputStream fileOutputStream = new FileOutputStream(\"hello.txt\");\n        // 获取通道\n        FileChannel channel = fileOutputStream.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        // 写入byteBuffer\n        byteBuffer.put(writeStr.getBytes());\n        // 切换模式\n        byteBuffer.flip();\n        // 写入通道\n        channel.write(byteBuffer);\n        // 关闭\n        channel.close();\n        fileOutputStream.close();\n    }\n   ```\n\n2. 使用 FileChannel 读取文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel 读取文本文件\n     */\n    public static void nioFileChannelRead() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileChannel channel = fileInputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        channel.read(byteBuffer);\n        System.out.println(new String(byteBuffer.array(), 0, byteBuffer.limit()));\n        channel.close();\n        fileInputStream.close();\n    }\n   ```\n\n3. 使用 FileChannel 复制文件\n\n   ```Java\n    /**\n     * 使用FileChannel复制文件\n     */\n    public static void nioFileChannelCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1);\n        while (inChannel.read(byteBuffer) != -1){\n            byteBuffer.flip();\n            outChannel.write(byteBuffer);\n            // 清空重置\n            byteBuffer.clear();\n        }\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n4. 使用 transferFrom 复制文件\n\n   ```Java\n   /**\n     * 使用transferFrom复制文件\n     */\n    public static void nioTransferFromCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        // 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\n        outChannel.close();\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n##### Channel 和 Buffer 的注意事项\n\n1. ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。\n2. 可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。\n3. NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。\n4. NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。\n   - Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。\n   - Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。\n\n#### Selector 的基本介绍\n\n1. Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。\n2. Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。\n3. 只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。\n4. 避免了多线程之间上下文切换导致的开销。\n\n##### Selector 特点\n\nNetty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。\n\n当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。\n\n线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。\n\n由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。\n\n一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。\n\n##### Selector 常用方法\n\n```Java\npublic abstract class Selector implement Closeable{\n  public static Selector open(); // 得到一个选择器对象\n  public int select(long timeout); // 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间\n  public Set<SelectionKey> selectionKeys(); // 从内部集合中得到所有的SelectionKey\n}\n```\n\n##### Selector 相关方法说明\n\n- selector.select()：若监听到注册管道中有事件，则持续阻塞\n- selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回\n- selector.wakeup()：换线 selector\n- selector.selectNow()：不阻塞，立即返回\n\n#### NIO 非阻塞网络编程过程分析\n\n1. 当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。\n2. Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。\n3. 将 socketChannel 注册到 Selector 上，`public final SelectionKey register(Selector sel, int ops)`，一个 selector 上可以注册多个 SocketChannel。\n4. 注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。\n5. 进一步得到各个 SelectionKey，有事件发生。\n6. 再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。\n7. 可以通过得到的 channel，完成业务处理。\n\nSelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。\n\n##### SelectionKey 相关方法\n\n| 方法                                               | 描述                         |\n| -------------------------------------------------- | ---------------------------- |\n| public abstract Selector selector();               | 得到与之关联的 Selector 对象 |\n| public abstract SelectableChannel channel();       | 得到与之关联的通道           |\n| public final Object attachment();                  | 得到与之关联的共享数据       |\n| public abstract SelectionKey interestOps(int ops); | 设置或改变监听的事件类型     |\n| public final boolean isReadable();                 | 通道是否可读                 |\n| public final boolean usWritable();                 | 通道是否可写                 |\n| public final boolean isAcceptable();               | 是否可以建立连接 ACCEPT      |\n\n### NIO 和 BIO 对比\n\n1. BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。\n2. BIO 是阻塞的，而 NIO 是非阻塞的。\n3. BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。\n\n### AIO 基本介绍\n\nJDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。\n\nAIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。\n\nReactor 和 Proactor\n\n- 两种 IO 多路复用方案：Reactor and Proactor。\n- Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。\n","source":"_posts/BIO-NIO-AIO对比.md","raw":"---\ntitle: BIO/NIO/AIO对比\ndate: 2021-03-22 10:14:29\ntags:\n  - IO模型\ncategories: [后端, Java]\n---\n\n## IO 模型\n\n就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。\nJava 支持三种网络编程模型：BIO、NIO、AIO。\n\n- Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。\n\n- Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。\n\n- Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\n## BIO、NIO、AIO 使用场景\n\n- BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。\n- NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。\n- AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。\n\n## BIO 基本介绍\n\n- Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。\n- BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。\n\n### BIO 编程简要流程\n\n1. 服务器驱动一个 ServiceSocket。\n2. 客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。\n3. 客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。\n4. 如果有响应，客户端线程会等待请求结束后，再继续执行。\n\n### BIO 服务端代码案例\n\n```Java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:35:59\n */\npublic class Bio {\n\n\n    /**\n     * BIO 测试方法\n     */\n    public static void bioTest() throws IOException{\n        // 创建线程池\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        // 创建serverSocket\n        ServerSocket serverSocket = new ServerSocket(6666);\n        for (; ; ) {\n            System.out.println(\"等待连接中...\");\n            // 监听，等待客户端连接\n            Socket socket = serverSocket.accept();\n            System.out.println(\"连接到一个客户端\");\n            executorService.execute(() -> handler(socket));\n        }\n    }\n\n    /**\n     * 编写一个handler方法，和客户端通讯\n     *\n     * @param socket 套接字\n     */\n    public static void handler(Socket socket) {\n        byte[] bytes = new byte[1024];\n        System.out.println(\"当前线程信息：\" + Thread.currentThread().getName());\n        try {\n            // 通过socket获取输入流\n            InputStream inputStream = socket.getInputStream();\n            // 循环读取客户度发送的数据\n            while (inputStream.read(bytes) != -1) {\n                System.out.println(Thread.currentThread().getName() + \"：发送信息为：\" + new String(bytes, 0, bytes.length));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            System.out.println(\"关闭连接\");\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n- 启动该案例\n- 使用终端命令`telnet 127.0.0.1 6666`，打开 telnet 命令窗口\n  ![avatar](https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg)\n- 按下`ctrl+]`\n  ![avatar](https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg)\n- 输入`send hello world`，进行通信\n  ![avatar](https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg)\n- 输入`quit`退出 telnet 窗口，关闭连接\n  ![avatar](https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg)\n\n### BIO 问题分析\n\n1. 每个请求都需要创建独立的线程，与对应的客户端进行数据处理。\n2. 当并发数大时，需要创建大量线程来处理连接，系统资源占用大。\n3. 连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。\n\n## NIO 基本介绍\n\n1. Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。\n2. NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。\n3. NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。\n4. NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。\n5. Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。\n\n### NIO Buffer 的基本使用\n\n```Java\n  import java.nio.IntBuffer;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:39:49\n */\npublic class Nio {\n    /**\n     * NIO 测试方法\n     */\n    public static void nioTest() {\n        //同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer\n        //创建一个Buffer，大小为5\n        IntBuffer buffer = IntBuffer.allocate(5);\n        // 存放数据\n        int size = buffer.capacity();\n        for (int i = 0; i < size; i++) {\n            buffer.put(i);\n        }\n        // 切换成读模式，读写切换\n        buffer.flip();\n        while (buffer.hasRemaining()) {\n            System.out.println(buffer.get());\n        }\n    }\n\n}\n```\n\n### NIO 三大核心组件关系\n\n![avatar](https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png)\n\n#### 说明\n\n1. 每个 Channel 对应一个 Buffer。\n2. Selector 对应一个线程，一个线程对应多个 Channel。\n3. 该图反应了有三个 Channel 注册到该 Selector。\n4. 该程序切换到哪个 Channel 是由事件决定的（Event）。\n5. Selector 会根据不同的事件，在各个通道上切换。\n6. Buffer 就是一个内存块，底层是一个数组。\n7. 数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO\n\n### NIO 三大核心理解\n\n![avatar](https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg)\n\n#### Buffer 的机制及子类\n\n##### Buffer（缓冲区）基本介绍\n\n缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。\nChannel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。\n在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：\n\n```Java\npublic abstract class IntBuffer\n    extends Buffer\n    implements Comparable<IntBuffer>\n{\n\n    // These fields are declared here rather than in Heap-X-Buffer in order to\n    // reduce the number of virtual method invocations needed to access these\n    // values, which is especially costly when coding small buffers.\n    //\n    final int[] hb;                  // Non-null only for heap buffers\n    final int offset;\n    boolean isReadOnly;                 // Valid only for heap buffers\n\n    // Creates a new buffer with the given mark, position, limit, capacity,\n    // backing array, and array offset\n    //\n    IntBuffer(int mark, int pos, int lim, int cap,   // package-private\n                 int[] hb, int offset)\n    {\n        super(mark, pos, lim, cap);\n        this.hb = hb;\n        this.offset = offset;\n    }\n\n    // Creates a new buffer with the given mark, position, limit, and capacity\n    //\n    IntBuffer(int mark, int pos, int lim, int cap) { // package-private\n        this(mark, pos, lim, cap, null, 0);\n    }\n}\n```\n\n| Buffer 常用子类 | 描述                   |\n| --------------- | ---------------------- |\n| ByteBuffer      | 存储字节数据到缓冲区   |\n| ShortBuffer     | 存储字符创数据到缓冲区 |\n| CharBuffer      | 存储字符数据到缓冲区   |\n| IntBuffer       | 存储整数数据到缓冲区   |\n| LongBuffer      | 存储长整型数据到缓冲区 |\n| DoubleBuffer    | 存储浮点型数据到缓冲区 |\n| FloatBuffer     | 存储浮点型数据到缓冲区 |\n\nBuffer 中定义了四个属性来提供所有其包含的数据元素。\n\n```Java\n  // Invariants: mark <= position <= limit <= capacity\n  private int mark = -1;\n  private int position = 0;\n  private int limit;\n  private int capacity;\n```\n\n| 属性     | 描述                                                                                 |\n| -------- | ------------------------------------------------------------------------------------ |\n| capacity | 容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改                     |\n| limit    | 表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的     |\n| position | 当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备 |\n| Mark     | 标记当前 position 位置，当 reset 后回到标记位置                                      |\n\n#### Channel 的基本介绍\n\nNIO 的通道类似于流，但有如下区别：\n\n1. 通道是双向的可以进行读写，而流是单向的只能读，或者写。\n2. 通道可以实现已读读取数据。\n3. 通道可以从缓冲区读取数据，也可以写入数据到缓冲区。\n\n常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel\n\n##### FileChannel 类\n\nFileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：\n\n1. 使用 FileChannel 写入文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel写入文本文件\n     */\n    public static void nioFileChannelWrite() throws IOException {\n        String writeStr = \"Hello, Java菜鸟程序员\";\n        // 创建一个输出流\n        FileOutputStream fileOutputStream = new FileOutputStream(\"hello.txt\");\n        // 获取通道\n        FileChannel channel = fileOutputStream.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        // 写入byteBuffer\n        byteBuffer.put(writeStr.getBytes());\n        // 切换模式\n        byteBuffer.flip();\n        // 写入通道\n        channel.write(byteBuffer);\n        // 关闭\n        channel.close();\n        fileOutputStream.close();\n    }\n   ```\n\n2. 使用 FileChannel 读取文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel 读取文本文件\n     */\n    public static void nioFileChannelRead() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileChannel channel = fileInputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        channel.read(byteBuffer);\n        System.out.println(new String(byteBuffer.array(), 0, byteBuffer.limit()));\n        channel.close();\n        fileInputStream.close();\n    }\n   ```\n\n3. 使用 FileChannel 复制文件\n\n   ```Java\n    /**\n     * 使用FileChannel复制文件\n     */\n    public static void nioFileChannelCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1);\n        while (inChannel.read(byteBuffer) != -1){\n            byteBuffer.flip();\n            outChannel.write(byteBuffer);\n            // 清空重置\n            byteBuffer.clear();\n        }\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n4. 使用 transferFrom 复制文件\n\n   ```Java\n   /**\n     * 使用transferFrom复制文件\n     */\n    public static void nioTransferFromCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        // 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\n        outChannel.close();\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n##### Channel 和 Buffer 的注意事项\n\n1. ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。\n2. 可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。\n3. NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。\n4. NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。\n   - Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。\n   - Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。\n\n#### Selector 的基本介绍\n\n1. Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。\n2. Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。\n3. 只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。\n4. 避免了多线程之间上下文切换导致的开销。\n\n##### Selector 特点\n\nNetty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。\n\n当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。\n\n线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。\n\n由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。\n\n一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。\n\n##### Selector 常用方法\n\n```Java\npublic abstract class Selector implement Closeable{\n  public static Selector open(); // 得到一个选择器对象\n  public int select(long timeout); // 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间\n  public Set<SelectionKey> selectionKeys(); // 从内部集合中得到所有的SelectionKey\n}\n```\n\n##### Selector 相关方法说明\n\n- selector.select()：若监听到注册管道中有事件，则持续阻塞\n- selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回\n- selector.wakeup()：换线 selector\n- selector.selectNow()：不阻塞，立即返回\n\n#### NIO 非阻塞网络编程过程分析\n\n1. 当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。\n2. Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。\n3. 将 socketChannel 注册到 Selector 上，`public final SelectionKey register(Selector sel, int ops)`，一个 selector 上可以注册多个 SocketChannel。\n4. 注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。\n5. 进一步得到各个 SelectionKey，有事件发生。\n6. 再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。\n7. 可以通过得到的 channel，完成业务处理。\n\nSelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。\n\n##### SelectionKey 相关方法\n\n| 方法                                               | 描述                         |\n| -------------------------------------------------- | ---------------------------- |\n| public abstract Selector selector();               | 得到与之关联的 Selector 对象 |\n| public abstract SelectableChannel channel();       | 得到与之关联的通道           |\n| public final Object attachment();                  | 得到与之关联的共享数据       |\n| public abstract SelectionKey interestOps(int ops); | 设置或改变监听的事件类型     |\n| public final boolean isReadable();                 | 通道是否可读                 |\n| public final boolean usWritable();                 | 通道是否可写                 |\n| public final boolean isAcceptable();               | 是否可以建立连接 ACCEPT      |\n\n### NIO 和 BIO 对比\n\n1. BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。\n2. BIO 是阻塞的，而 NIO 是非阻塞的。\n3. BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。\n\n### AIO 基本介绍\n\nJDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。\n\nAIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。\n\nReactor 和 Proactor\n\n- 两种 IO 多路复用方案：Reactor and Proactor。\n- Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。\n","slug":"BIO-NIO-AIO对比","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj30007scacdfy36sup","content":"<h2 id=\"IO-模型\"><a href=\"#IO-模型\" class=\"headerlink\" title=\"IO 模型\"></a>IO 模型</h2><p>就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br>Java 支持三种网络编程模型：BIO、NIO、AIO。</p>\n<ul>\n<li><p>Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。</p>\n</li>\n<li><p>Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。</p>\n</li>\n<li><p>Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n</li>\n</ul>\n<h2 id=\"BIO、NIO、AIO-使用场景\"><a href=\"#BIO、NIO、AIO-使用场景\" class=\"headerlink\" title=\"BIO、NIO、AIO 使用场景\"></a>BIO、NIO、AIO 使用场景</h2><ul>\n<li>BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。</li>\n<li>NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。</li>\n<li>AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</li>\n</ul>\n<h2 id=\"BIO-基本介绍\"><a href=\"#BIO-基本介绍\" class=\"headerlink\" title=\"BIO 基本介绍\"></a>BIO 基本介绍</h2><ul>\n<li>Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。</li>\n<li>BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。</li>\n</ul>\n<h3 id=\"BIO-编程简要流程\"><a href=\"#BIO-编程简要流程\" class=\"headerlink\" title=\"BIO 编程简要流程\"></a>BIO 编程简要流程</h3><ol>\n<li>服务器驱动一个 ServiceSocket。</li>\n<li>客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。</li>\n<li>客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。</li>\n<li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li>\n</ol>\n<h3 id=\"BIO-服务端代码案例\"><a href=\"#BIO-服务端代码案例\" class=\"headerlink\" title=\"BIO 服务端代码案例\"></a>BIO 服务端代码案例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:35:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bio</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * BIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bioTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"comment\">// 创建serverSocket</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">6666</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;等待连接中...&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 监听，等待客户端连接</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;连接到一个客户端&quot;</span>);</span><br><span class=\"line\">            executorService.execute(() -&gt; handler(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写一个handler方法，和客户端通讯</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> socket 套接字</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handler</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程信息：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过socket获取输入流</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"comment\">// 循环读取客户度发送的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inputStream.read(bytes) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;：发送信息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, bytes.length));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;关闭连接&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动该案例</li>\n<li>使用终端命令<code>telnet 127.0.0.1 6666</code>，打开 telnet 命令窗口<br><img src=\"https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n<li>按下<code>ctrl+]</code><br><img src=\"https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n<li>输入<code>send hello world</code>，进行通信<br><img src=\"https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n<li>输入<code>quit</code>退出 telnet 窗口，关闭连接<br><img src=\"https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n</ul>\n<h3 id=\"BIO-问题分析\"><a href=\"#BIO-问题分析\" class=\"headerlink\" title=\"BIO 问题分析\"></a>BIO 问题分析</h3><ol>\n<li>每个请求都需要创建独立的线程，与对应的客户端进行数据处理。</li>\n<li>当并发数大时，需要创建大量线程来处理连接，系统资源占用大。</li>\n<li>连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。</li>\n</ol>\n<h2 id=\"NIO-基本介绍\"><a href=\"#NIO-基本介绍\" class=\"headerlink\" title=\"NIO 基本介绍\"></a>NIO 基本介绍</h2><ol>\n<li>Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。</li>\n<li>NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。</li>\n<li>NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。</li>\n<li>NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。</li>\n<li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。</li>\n</ol>\n<h3 id=\"NIO-Buffer-的基本使用\"><a href=\"#NIO-Buffer-的基本使用\" class=\"headerlink\" title=\"NIO Buffer 的基本使用\"></a>NIO Buffer 的基本使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> java.nio.IntBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:39:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Nio</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * NIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个Buffer，大小为5</span></span><br><span class=\"line\">        <span class=\"type\">IntBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> IntBuffer.allocate(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 存放数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> buffer.capacity();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            buffer.put(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 切换成读模式，读写切换</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.println(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NIO-三大核心组件关系\"><a href=\"#NIO-三大核心组件关系\" class=\"headerlink\" title=\"NIO 三大核心组件关系\"></a>NIO 三大核心组件关系</h3><p><img src=\"https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>该图反应了有三个 Channel 注册到该 Selector。</li>\n<li>该程序切换到哪个 Channel 是由事件决定的（Event）。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 就是一个内存块，底层是一个数组。</li>\n<li>数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO</li>\n</ol>\n<h3 id=\"NIO-三大核心理解\"><a href=\"#NIO-三大核心理解\" class=\"headerlink\" title=\"NIO 三大核心理解\"></a>NIO 三大核心理解</h3><p><img src=\"https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"Buffer-的机制及子类\"><a href=\"#Buffer-的机制及子类\" class=\"headerlink\" title=\"Buffer 的机制及子类\"></a>Buffer 的机制及子类</h4><h5 id=\"Buffer（缓冲区）基本介绍\"><a href=\"#Buffer（缓冲区）基本介绍\" class=\"headerlink\" title=\"Buffer（缓冲区）基本介绍\"></a>Buffer（缓冲区）基本介绍</h5><p>缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。<br>Channel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。<br>在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">Buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;IntBuffer&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These fields are declared here rather than in Heap-X-Buffer in order to</span></span><br><span class=\"line\">    <span class=\"comment\">// reduce the number of virtual method invocations needed to access these</span></span><br><span class=\"line\">    <span class=\"comment\">// values, which is especially costly when coding small buffers.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] hb;                  <span class=\"comment\">// Non-null only for heap buffers</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> offset;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> isReadOnly;                 <span class=\"comment\">// Valid only for heap buffers</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, capacity,</span></span><br><span class=\"line\">    <span class=\"comment\">// backing array, and array offset</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap,   <span class=\"comment\">// package-private</span></span><br><span class=\"line\">                 <span class=\"type\">int</span>[] hb, <span class=\"type\">int</span> offset)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(mark, pos, lim, cap);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hb = hb;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.offset = offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, and capacity</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap) &#123; <span class=\"comment\">// package-private</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(mark, pos, lim, cap, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Buffer 常用子类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ByteBuffer</td>\n<td>存储字节数据到缓冲区</td>\n</tr>\n<tr>\n<td>ShortBuffer</td>\n<td>存储字符创数据到缓冲区</td>\n</tr>\n<tr>\n<td>CharBuffer</td>\n<td>存储字符数据到缓冲区</td>\n</tr>\n<tr>\n<td>IntBuffer</td>\n<td>存储整数数据到缓冲区</td>\n</tr>\n<tr>\n<td>LongBuffer</td>\n<td>存储长整型数据到缓冲区</td>\n</tr>\n<tr>\n<td>DoubleBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n<tr>\n<td>FloatBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n</tbody></table>\n<p>Buffer 中定义了四个属性来提供所有其包含的数据元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">mark</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> limit;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> capacity;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>capacity</td>\n<td>容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的</td>\n</tr>\n<tr>\n<td>position</td>\n<td>当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>标记当前 position 位置，当 reset 后回到标记位置</td>\n</tr>\n</tbody></table>\n<h4 id=\"Channel-的基本介绍\"><a href=\"#Channel-的基本介绍\" class=\"headerlink\" title=\"Channel 的基本介绍\"></a>Channel 的基本介绍</h4><p>NIO 的通道类似于流，但有如下区别：</p>\n<ol>\n<li>通道是双向的可以进行读写，而流是单向的只能读，或者写。</li>\n<li>通道可以实现已读读取数据。</li>\n<li>通道可以从缓冲区读取数据，也可以写入数据到缓冲区。</li>\n</ol>\n<p>常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel</p>\n<h5 id=\"FileChannel-类\"><a href=\"#FileChannel-类\" class=\"headerlink\" title=\"FileChannel 类\"></a>FileChannel 类</h5><p>FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：</p>\n<ol>\n<li><p>使用 FileChannel 写入文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel写入文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelWrite</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">writeStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, Java菜鸟程序员&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 创建一个输出流</span></span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 写入byteBuffer</span></span><br><span class=\"line\">     byteBuffer.put(writeStr.getBytes());</span><br><span class=\"line\">     <span class=\"comment\">// 切换模式</span></span><br><span class=\"line\">     byteBuffer.flip();</span><br><span class=\"line\">     <span class=\"comment\">// 写入通道</span></span><br><span class=\"line\">     channel.write(byteBuffer);</span><br><span class=\"line\">     <span class=\"comment\">// 关闭</span></span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 读取文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel 读取文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelRead</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     channel.read(byteBuffer);</span><br><span class=\"line\">     System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(byteBuffer.array(), <span class=\"number\">0</span>, byteBuffer.limit()));</span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用FileChannel复制文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (inChannel.read(byteBuffer) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        outChannel.write(byteBuffer);</span><br><span class=\"line\">        <span class=\"comment\">// 清空重置</span></span><br><span class=\"line\">        byteBuffer.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileOutputStream.close();</span><br><span class=\"line\">    fileInputStream.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 transferFrom 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用transferFrom复制文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTransferFromCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法</span></span><br><span class=\"line\">     outChannel.transferFrom(inChannel, <span class=\"number\">0</span>, inChannel.size());</span><br><span class=\"line\">     outChannel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"Channel-和-Buffer-的注意事项\"><a href=\"#Channel-和-Buffer-的注意事项\" class=\"headerlink\" title=\"Channel 和 Buffer 的注意事项\"></a>Channel 和 Buffer 的注意事项</h5><ol>\n<li>ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。</li>\n<li>可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。</li>\n<li>NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。</li>\n<li>NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。<ul>\n<li>Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。</li>\n<li>Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Selector-的基本介绍\"><a href=\"#Selector-的基本介绍\" class=\"headerlink\" title=\"Selector 的基本介绍\"></a>Selector 的基本介绍</h4><ol>\n<li>Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。</li>\n<li>Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。</li>\n<li>只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。</li>\n<li>避免了多线程之间上下文切换导致的开销。</li>\n</ol>\n<h5 id=\"Selector-特点\"><a href=\"#Selector-特点\" class=\"headerlink\" title=\"Selector 特点\"></a>Selector 特点</h5><p>Netty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。</p>\n<p>当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。</p>\n<p>线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。</p>\n<p>由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。</p>\n<p>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。</p>\n<h5 id=\"Selector-常用方法\"><a href=\"#Selector-常用方法\" class=\"headerlink\" title=\"Selector 常用方法\"></a>Selector 常用方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Selector</span> implement Closeable&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Selector <span class=\"title function_\">open</span><span class=\"params\">()</span>; <span class=\"comment\">// 得到一个选择器对象</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span>; <span class=\"comment\">// 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;SelectionKey&gt; <span class=\"title function_\">selectionKeys</span><span class=\"params\">()</span>; <span class=\"comment\">// 从内部集合中得到所有的SelectionKey</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Selector-相关方法说明\"><a href=\"#Selector-相关方法说明\" class=\"headerlink\" title=\"Selector 相关方法说明\"></a>Selector 相关方法说明</h5><ul>\n<li>selector.select()：若监听到注册管道中有事件，则持续阻塞</li>\n<li>selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回</li>\n<li>selector.wakeup()：换线 selector</li>\n<li>selector.selectNow()：不阻塞，立即返回</li>\n</ul>\n<h4 id=\"NIO-非阻塞网络编程过程分析\"><a href=\"#NIO-非阻塞网络编程过程分析\" class=\"headerlink\" title=\"NIO 非阻塞网络编程过程分析\"></a>NIO 非阻塞网络编程过程分析</h4><ol>\n<li>当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。</li>\n<li>Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。</li>\n<li>将 socketChannel 注册到 Selector 上，<code>public final SelectionKey register(Selector sel, int ops)</code>，一个 selector 上可以注册多个 SocketChannel。</li>\n<li>注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。</li>\n<li>进一步得到各个 SelectionKey，有事件发生。</li>\n<li>再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。</li>\n<li>可以通过得到的 channel，完成业务处理。</li>\n</ol>\n<p>SelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。</p>\n<h5 id=\"SelectionKey-相关方法\"><a href=\"#SelectionKey-相关方法\" class=\"headerlink\" title=\"SelectionKey 相关方法\"></a>SelectionKey 相关方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public abstract Selector selector();</td>\n<td>得到与之关联的 Selector 对象</td>\n</tr>\n<tr>\n<td>public abstract SelectableChannel channel();</td>\n<td>得到与之关联的通道</td>\n</tr>\n<tr>\n<td>public final Object attachment();</td>\n<td>得到与之关联的共享数据</td>\n</tr>\n<tr>\n<td>public abstract SelectionKey interestOps(int ops);</td>\n<td>设置或改变监听的事件类型</td>\n</tr>\n<tr>\n<td>public final boolean isReadable();</td>\n<td>通道是否可读</td>\n</tr>\n<tr>\n<td>public final boolean usWritable();</td>\n<td>通道是否可写</td>\n</tr>\n<tr>\n<td>public final boolean isAcceptable();</td>\n<td>是否可以建立连接 ACCEPT</td>\n</tr>\n</tbody></table>\n<h3 id=\"NIO-和-BIO-对比\"><a href=\"#NIO-和-BIO-对比\" class=\"headerlink\" title=\"NIO 和 BIO 对比\"></a>NIO 和 BIO 对比</h3><ol>\n<li>BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。</li>\n<li>BIO 是阻塞的，而 NIO 是非阻塞的。</li>\n<li>BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</li>\n</ol>\n<h3 id=\"AIO-基本介绍\"><a href=\"#AIO-基本介绍\" class=\"headerlink\" title=\"AIO 基本介绍\"></a>AIO 基本介绍</h3><p>JDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。</p>\n<p>AIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。</p>\n<p>Reactor 和 Proactor</p>\n<ul>\n<li>两种 IO 多路复用方案：Reactor and Proactor。</li>\n<li>Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IO-模型\"><a href=\"#IO-模型\" class=\"headerlink\" title=\"IO 模型\"></a>IO 模型</h2><p>就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br>Java 支持三种网络编程模型：BIO、NIO、AIO。</p>\n<ul>\n<li><p>Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。</p>\n</li>\n<li><p>Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。</p>\n</li>\n<li><p>Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n</li>\n</ul>\n<h2 id=\"BIO、NIO、AIO-使用场景\"><a href=\"#BIO、NIO、AIO-使用场景\" class=\"headerlink\" title=\"BIO、NIO、AIO 使用场景\"></a>BIO、NIO、AIO 使用场景</h2><ul>\n<li>BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。</li>\n<li>NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。</li>\n<li>AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</li>\n</ul>\n<h2 id=\"BIO-基本介绍\"><a href=\"#BIO-基本介绍\" class=\"headerlink\" title=\"BIO 基本介绍\"></a>BIO 基本介绍</h2><ul>\n<li>Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。</li>\n<li>BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。</li>\n</ul>\n<h3 id=\"BIO-编程简要流程\"><a href=\"#BIO-编程简要流程\" class=\"headerlink\" title=\"BIO 编程简要流程\"></a>BIO 编程简要流程</h3><ol>\n<li>服务器驱动一个 ServiceSocket。</li>\n<li>客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。</li>\n<li>客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。</li>\n<li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li>\n</ol>\n<h3 id=\"BIO-服务端代码案例\"><a href=\"#BIO-服务端代码案例\" class=\"headerlink\" title=\"BIO 服务端代码案例\"></a>BIO 服务端代码案例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:35:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bio</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * BIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bioTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"comment\">// 创建serverSocket</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">6666</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;等待连接中...&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 监听，等待客户端连接</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;连接到一个客户端&quot;</span>);</span><br><span class=\"line\">            executorService.execute(() -&gt; handler(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写一个handler方法，和客户端通讯</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> socket 套接字</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handler</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程信息：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过socket获取输入流</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"comment\">// 循环读取客户度发送的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inputStream.read(bytes) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;：发送信息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, bytes.length));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;关闭连接&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动该案例</li>\n<li>使用终端命令<code>telnet 127.0.0.1 6666</code>，打开 telnet 命令窗口<br><img src=\"https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg\" alt=\"avatar\"></li>\n<li>按下<code>ctrl+]</code><br><img src=\"https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg\" alt=\"avatar\"></li>\n<li>输入<code>send hello world</code>，进行通信<br><img src=\"https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg\" alt=\"avatar\"></li>\n<li>输入<code>quit</code>退出 telnet 窗口，关闭连接<br><img src=\"https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg\" alt=\"avatar\"></li>\n</ul>\n<h3 id=\"BIO-问题分析\"><a href=\"#BIO-问题分析\" class=\"headerlink\" title=\"BIO 问题分析\"></a>BIO 问题分析</h3><ol>\n<li>每个请求都需要创建独立的线程，与对应的客户端进行数据处理。</li>\n<li>当并发数大时，需要创建大量线程来处理连接，系统资源占用大。</li>\n<li>连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。</li>\n</ol>\n<h2 id=\"NIO-基本介绍\"><a href=\"#NIO-基本介绍\" class=\"headerlink\" title=\"NIO 基本介绍\"></a>NIO 基本介绍</h2><ol>\n<li>Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。</li>\n<li>NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。</li>\n<li>NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。</li>\n<li>NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。</li>\n<li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。</li>\n</ol>\n<h3 id=\"NIO-Buffer-的基本使用\"><a href=\"#NIO-Buffer-的基本使用\" class=\"headerlink\" title=\"NIO Buffer 的基本使用\"></a>NIO Buffer 的基本使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> java.nio.IntBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:39:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Nio</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * NIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个Buffer，大小为5</span></span><br><span class=\"line\">        <span class=\"type\">IntBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> IntBuffer.allocate(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 存放数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> buffer.capacity();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            buffer.put(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 切换成读模式，读写切换</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.println(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NIO-三大核心组件关系\"><a href=\"#NIO-三大核心组件关系\" class=\"headerlink\" title=\"NIO 三大核心组件关系\"></a>NIO 三大核心组件关系</h3><p><img src=\"https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png\" alt=\"avatar\"></p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>该图反应了有三个 Channel 注册到该 Selector。</li>\n<li>该程序切换到哪个 Channel 是由事件决定的（Event）。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 就是一个内存块，底层是一个数组。</li>\n<li>数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO</li>\n</ol>\n<h3 id=\"NIO-三大核心理解\"><a href=\"#NIO-三大核心理解\" class=\"headerlink\" title=\"NIO 三大核心理解\"></a>NIO 三大核心理解</h3><p><img src=\"https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg\" alt=\"avatar\"></p>\n<h4 id=\"Buffer-的机制及子类\"><a href=\"#Buffer-的机制及子类\" class=\"headerlink\" title=\"Buffer 的机制及子类\"></a>Buffer 的机制及子类</h4><h5 id=\"Buffer（缓冲区）基本介绍\"><a href=\"#Buffer（缓冲区）基本介绍\" class=\"headerlink\" title=\"Buffer（缓冲区）基本介绍\"></a>Buffer（缓冲区）基本介绍</h5><p>缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。<br>Channel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。<br>在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">Buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;IntBuffer&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These fields are declared here rather than in Heap-X-Buffer in order to</span></span><br><span class=\"line\">    <span class=\"comment\">// reduce the number of virtual method invocations needed to access these</span></span><br><span class=\"line\">    <span class=\"comment\">// values, which is especially costly when coding small buffers.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] hb;                  <span class=\"comment\">// Non-null only for heap buffers</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> offset;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> isReadOnly;                 <span class=\"comment\">// Valid only for heap buffers</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, capacity,</span></span><br><span class=\"line\">    <span class=\"comment\">// backing array, and array offset</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap,   <span class=\"comment\">// package-private</span></span><br><span class=\"line\">                 <span class=\"type\">int</span>[] hb, <span class=\"type\">int</span> offset)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(mark, pos, lim, cap);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hb = hb;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.offset = offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, and capacity</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap) &#123; <span class=\"comment\">// package-private</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(mark, pos, lim, cap, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Buffer 常用子类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ByteBuffer</td>\n<td>存储字节数据到缓冲区</td>\n</tr>\n<tr>\n<td>ShortBuffer</td>\n<td>存储字符创数据到缓冲区</td>\n</tr>\n<tr>\n<td>CharBuffer</td>\n<td>存储字符数据到缓冲区</td>\n</tr>\n<tr>\n<td>IntBuffer</td>\n<td>存储整数数据到缓冲区</td>\n</tr>\n<tr>\n<td>LongBuffer</td>\n<td>存储长整型数据到缓冲区</td>\n</tr>\n<tr>\n<td>DoubleBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n<tr>\n<td>FloatBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n</tbody></table>\n<p>Buffer 中定义了四个属性来提供所有其包含的数据元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">mark</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> limit;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> capacity;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>capacity</td>\n<td>容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的</td>\n</tr>\n<tr>\n<td>position</td>\n<td>当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>标记当前 position 位置，当 reset 后回到标记位置</td>\n</tr>\n</tbody></table>\n<h4 id=\"Channel-的基本介绍\"><a href=\"#Channel-的基本介绍\" class=\"headerlink\" title=\"Channel 的基本介绍\"></a>Channel 的基本介绍</h4><p>NIO 的通道类似于流，但有如下区别：</p>\n<ol>\n<li>通道是双向的可以进行读写，而流是单向的只能读，或者写。</li>\n<li>通道可以实现已读读取数据。</li>\n<li>通道可以从缓冲区读取数据，也可以写入数据到缓冲区。</li>\n</ol>\n<p>常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel</p>\n<h5 id=\"FileChannel-类\"><a href=\"#FileChannel-类\" class=\"headerlink\" title=\"FileChannel 类\"></a>FileChannel 类</h5><p>FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：</p>\n<ol>\n<li><p>使用 FileChannel 写入文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel写入文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelWrite</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">writeStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, Java菜鸟程序员&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 创建一个输出流</span></span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 写入byteBuffer</span></span><br><span class=\"line\">     byteBuffer.put(writeStr.getBytes());</span><br><span class=\"line\">     <span class=\"comment\">// 切换模式</span></span><br><span class=\"line\">     byteBuffer.flip();</span><br><span class=\"line\">     <span class=\"comment\">// 写入通道</span></span><br><span class=\"line\">     channel.write(byteBuffer);</span><br><span class=\"line\">     <span class=\"comment\">// 关闭</span></span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 读取文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel 读取文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelRead</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     channel.read(byteBuffer);</span><br><span class=\"line\">     System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(byteBuffer.array(), <span class=\"number\">0</span>, byteBuffer.limit()));</span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用FileChannel复制文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (inChannel.read(byteBuffer) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        outChannel.write(byteBuffer);</span><br><span class=\"line\">        <span class=\"comment\">// 清空重置</span></span><br><span class=\"line\">        byteBuffer.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileOutputStream.close();</span><br><span class=\"line\">    fileInputStream.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 transferFrom 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用transferFrom复制文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTransferFromCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法</span></span><br><span class=\"line\">     outChannel.transferFrom(inChannel, <span class=\"number\">0</span>, inChannel.size());</span><br><span class=\"line\">     outChannel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"Channel-和-Buffer-的注意事项\"><a href=\"#Channel-和-Buffer-的注意事项\" class=\"headerlink\" title=\"Channel 和 Buffer 的注意事项\"></a>Channel 和 Buffer 的注意事项</h5><ol>\n<li>ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。</li>\n<li>可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。</li>\n<li>NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。</li>\n<li>NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。<ul>\n<li>Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。</li>\n<li>Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Selector-的基本介绍\"><a href=\"#Selector-的基本介绍\" class=\"headerlink\" title=\"Selector 的基本介绍\"></a>Selector 的基本介绍</h4><ol>\n<li>Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。</li>\n<li>Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。</li>\n<li>只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。</li>\n<li>避免了多线程之间上下文切换导致的开销。</li>\n</ol>\n<h5 id=\"Selector-特点\"><a href=\"#Selector-特点\" class=\"headerlink\" title=\"Selector 特点\"></a>Selector 特点</h5><p>Netty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。</p>\n<p>当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。</p>\n<p>线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。</p>\n<p>由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。</p>\n<p>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。</p>\n<h5 id=\"Selector-常用方法\"><a href=\"#Selector-常用方法\" class=\"headerlink\" title=\"Selector 常用方法\"></a>Selector 常用方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Selector</span> implement Closeable&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Selector <span class=\"title function_\">open</span><span class=\"params\">()</span>; <span class=\"comment\">// 得到一个选择器对象</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span>; <span class=\"comment\">// 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;SelectionKey&gt; <span class=\"title function_\">selectionKeys</span><span class=\"params\">()</span>; <span class=\"comment\">// 从内部集合中得到所有的SelectionKey</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Selector-相关方法说明\"><a href=\"#Selector-相关方法说明\" class=\"headerlink\" title=\"Selector 相关方法说明\"></a>Selector 相关方法说明</h5><ul>\n<li>selector.select()：若监听到注册管道中有事件，则持续阻塞</li>\n<li>selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回</li>\n<li>selector.wakeup()：换线 selector</li>\n<li>selector.selectNow()：不阻塞，立即返回</li>\n</ul>\n<h4 id=\"NIO-非阻塞网络编程过程分析\"><a href=\"#NIO-非阻塞网络编程过程分析\" class=\"headerlink\" title=\"NIO 非阻塞网络编程过程分析\"></a>NIO 非阻塞网络编程过程分析</h4><ol>\n<li>当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。</li>\n<li>Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。</li>\n<li>将 socketChannel 注册到 Selector 上，<code>public final SelectionKey register(Selector sel, int ops)</code>，一个 selector 上可以注册多个 SocketChannel。</li>\n<li>注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。</li>\n<li>进一步得到各个 SelectionKey，有事件发生。</li>\n<li>再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。</li>\n<li>可以通过得到的 channel，完成业务处理。</li>\n</ol>\n<p>SelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。</p>\n<h5 id=\"SelectionKey-相关方法\"><a href=\"#SelectionKey-相关方法\" class=\"headerlink\" title=\"SelectionKey 相关方法\"></a>SelectionKey 相关方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public abstract Selector selector();</td>\n<td>得到与之关联的 Selector 对象</td>\n</tr>\n<tr>\n<td>public abstract SelectableChannel channel();</td>\n<td>得到与之关联的通道</td>\n</tr>\n<tr>\n<td>public final Object attachment();</td>\n<td>得到与之关联的共享数据</td>\n</tr>\n<tr>\n<td>public abstract SelectionKey interestOps(int ops);</td>\n<td>设置或改变监听的事件类型</td>\n</tr>\n<tr>\n<td>public final boolean isReadable();</td>\n<td>通道是否可读</td>\n</tr>\n<tr>\n<td>public final boolean usWritable();</td>\n<td>通道是否可写</td>\n</tr>\n<tr>\n<td>public final boolean isAcceptable();</td>\n<td>是否可以建立连接 ACCEPT</td>\n</tr>\n</tbody></table>\n<h3 id=\"NIO-和-BIO-对比\"><a href=\"#NIO-和-BIO-对比\" class=\"headerlink\" title=\"NIO 和 BIO 对比\"></a>NIO 和 BIO 对比</h3><ol>\n<li>BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。</li>\n<li>BIO 是阻塞的，而 NIO 是非阻塞的。</li>\n<li>BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</li>\n</ol>\n<h3 id=\"AIO-基本介绍\"><a href=\"#AIO-基本介绍\" class=\"headerlink\" title=\"AIO 基本介绍\"></a>AIO 基本介绍</h3><p>JDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。</p>\n<p>AIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。</p>\n<p>Reactor 和 Proactor</p>\n<ul>\n<li>两种 IO 多路复用方案：Reactor and Proactor。</li>\n<li>Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。</li>\n</ul>\n"},{"title":"Elasticsearch的倒排索引","date":"2021-03-25T07:37:40.000Z","_content":"","source":"_posts/Elasticsearch的倒排索引.md","raw":"---\ntitle: Elasticsearch的倒排索引\ndate: 2021-03-25 15:37:40\ntags:\n---\n","slug":"Elasticsearch的倒排索引","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj40009scacaevv7t6f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Elasticsearch入门","date":"2021-03-23T03:38:04.000Z","_content":"\n## Elasticsearch 简介\n\nElasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。\n\n### 应用场景\n\n- 应用或者网站的搜索框\n- 存储和分析日志、指标和安全事件数据\n- 机器学习用来实时自动模拟数据行为\n- 作为存储引擎，实现业务工作流的自动化\n- 作为地理信息系统（GIS）来管理、整合和分析空间信息\n- 作为生物信息学研究工具存储和处理遗传数据\n\n### 数据存储：文档和索引\n\nElasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。\n\nElasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。\n\n## Elasticsearch 安装\n\n### 下载\n\n下载链接 <https://www.elastic.co/cn/downloads/elasticsearch>\n\n### 安装使用\n\n直接将下载的压缩包解压，启动`bin`目录下面的`elasticsearch.bat`\n\n浏览器打开<http://localhost:9200/>查看 Elasticsearch 服务信息\n\n![avatar](https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg)\n\n### 配置远程访问\n\n打开`config`目录下的`elasticsearch.yml`配置文件\n\n`修改network.host: 你的IP地址`\n\n放开注释`#cluster.initial_master_nodes: [\"node-1\", \"node-2\"]`\n节点根据情况进行增删\n","source":"_posts/Elasticsearch入门.md","raw":"---\ntitle: Elasticsearch入门\ndate: 2021-03-23 11:38:04\ntags:\n  - Elasticsearch\n  - 笔记\ncategories: [DB, Elasticsearch]\n---\n\n## Elasticsearch 简介\n\nElasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。\n\n### 应用场景\n\n- 应用或者网站的搜索框\n- 存储和分析日志、指标和安全事件数据\n- 机器学习用来实时自动模拟数据行为\n- 作为存储引擎，实现业务工作流的自动化\n- 作为地理信息系统（GIS）来管理、整合和分析空间信息\n- 作为生物信息学研究工具存储和处理遗传数据\n\n### 数据存储：文档和索引\n\nElasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。\n\nElasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。\n\n## Elasticsearch 安装\n\n### 下载\n\n下载链接 <https://www.elastic.co/cn/downloads/elasticsearch>\n\n### 安装使用\n\n直接将下载的压缩包解压，启动`bin`目录下面的`elasticsearch.bat`\n\n浏览器打开<http://localhost:9200/>查看 Elasticsearch 服务信息\n\n![avatar](https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg)\n\n### 配置远程访问\n\n打开`config`目录下的`elasticsearch.yml`配置文件\n\n`修改network.host: 你的IP地址`\n\n放开注释`#cluster.initial_master_nodes: [\"node-1\", \"node-2\"]`\n节点根据情况进行增删\n","slug":"Elasticsearch入门","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj5000ascacacu9e4pe","content":"<h2 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h2><p>Elasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>应用或者网站的搜索框</li>\n<li>存储和分析日志、指标和安全事件数据</li>\n<li>机器学习用来实时自动模拟数据行为</li>\n<li>作为存储引擎，实现业务工作流的自动化</li>\n<li>作为地理信息系统（GIS）来管理、整合和分析空间信息</li>\n<li>作为生物信息学研究工具存储和处理遗传数据</li>\n</ul>\n<h3 id=\"数据存储：文档和索引\"><a href=\"#数据存储：文档和索引\" class=\"headerlink\" title=\"数据存储：文档和索引\"></a>数据存储：文档和索引</h3><p>Elasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。</p>\n<p>Elasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。</p>\n<h2 id=\"Elasticsearch-安装\"><a href=\"#Elasticsearch-安装\" class=\"headerlink\" title=\"Elasticsearch 安装\"></a>Elasticsearch 安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载链接 <a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p>直接将下载的压缩包解压，启动<code>bin</code>目录下面的<code>elasticsearch.bat</code></p>\n<p>浏览器打开<a href=\"http://localhost:9200/\">http://localhost:9200/</a>查看 Elasticsearch 服务信息</p>\n<p><img src=\"https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h3><p>打开<code>config</code>目录下的<code>elasticsearch.yml</code>配置文件</p>\n<p><code>修改network.host: 你的IP地址</code></p>\n<p>放开注释<code>#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</code><br>节点根据情况进行增删</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h2><p>Elasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>应用或者网站的搜索框</li>\n<li>存储和分析日志、指标和安全事件数据</li>\n<li>机器学习用来实时自动模拟数据行为</li>\n<li>作为存储引擎，实现业务工作流的自动化</li>\n<li>作为地理信息系统（GIS）来管理、整合和分析空间信息</li>\n<li>作为生物信息学研究工具存储和处理遗传数据</li>\n</ul>\n<h3 id=\"数据存储：文档和索引\"><a href=\"#数据存储：文档和索引\" class=\"headerlink\" title=\"数据存储：文档和索引\"></a>数据存储：文档和索引</h3><p>Elasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。</p>\n<p>Elasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。</p>\n<h2 id=\"Elasticsearch-安装\"><a href=\"#Elasticsearch-安装\" class=\"headerlink\" title=\"Elasticsearch 安装\"></a>Elasticsearch 安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载链接 <a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p>直接将下载的压缩包解压，启动<code>bin</code>目录下面的<code>elasticsearch.bat</code></p>\n<p>浏览器打开<a href=\"http://localhost:9200/\">http://localhost:9200/</a>查看 Elasticsearch 服务信息</p>\n<p><img src=\"https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg\" alt=\"avatar\"></p>\n<h3 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h3><p>打开<code>config</code>目录下的<code>elasticsearch.yml</code>配置文件</p>\n<p><code>修改network.host: 你的IP地址</code></p>\n<p>放开注释<code>#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</code><br>节点根据情况进行增删</p>\n"},{"title":"JS循环总结","date":"2022-03-26T03:07:01.000Z","_content":"\n## JS循环总结\n\n工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有`forEach`、`for in`、`for of`、`map`以及`for`，故对这些循环做些总结。\n\n### forEach（数组方法）\n\n#### 特性\n\n- 遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。\n- 没有返回值。\n- 不能使用break中断循环，不能使用return返回到外层函数。\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    let newArray = array.forEach(item => {\n        item+=1;\n        console.log(item);// 2 3 4\n    })\n    console.log(array); // [1, 2, 3]\n    console.log(newArray) // undefined\n```\n\n### for in\n\n#### 特性\n\n更适合遍历对象，可以遍历数组，但是会有一些局限性。\n\n#### 实例\n\n`for in`的索引为字符串型数字，不能直接进行几何运算\n\n```js\n    const array = [1, 2, 3];\n    for(const i in array) {\n        const res = i + 1;\n        console.log(res);\n    }\n    // 01 11 21\n```\n\n遍历顺序有可能不是按照实际数组的内部顺序，使用`for in`会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用`hasOwnProperty()`方法可以判断某属性是不是该对象的实例属性\n\n```js\n    const array = [1, 2, 3];\n    Array.prototype.a = 123;\n    for (const index in array) {\n        const res = array[index];\n        console.log(res);\n    }\n    // 1 2 3 123\n\n    for (const index in array) {\n        if (array.hasOwnProperty(index)) {\n            const res = array[index];\n            console.log(res);\n        }\n    }\n    // 1 2 3\n```\n\n### for of\n\n#### 特性\n\n- 可遍历map/objet/array/set/string等\n- 避免了`for in`的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。\n\n#### 实例\n\n`for of`是ES6的新语法，为了弥补`for in`的局限性。\n`for of`遍历的数组元素值，而且`for of`遍历的只是数组内的元素，不包括原型属性和索引\n\n```js\n    const array = [1, 2, 3];\n    array.a = 123;\n    Array.prototype.a = 123;\n    for(const value of array) {\n        console.log(value);\n    }\n    // 1 2 3\n```\n\n`for of`适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的`Object.keys()`方法\n\n```js\n    const myObject = {\n        a: 1,\n        b: 2,\n        c: 3\n    };\n    for (const key of Object.keys(myObject)) {\n        console.log(key + \"：\" + myObject[key]);\n    }\n    //> \"a：1\" \"b：2\" \"c：3\n```\n\n### map （数组方法）\n\n#### 特性\n\n- map不改变原数组但是会返回新数组\n- 可以使用break中断循环，可以使用return返回到外层函数\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    const newArray = array.map(index => {\n        return index+= 1;\n    })\n    console.log(array);// [1, 2 , 3]\n    console.log(newArray);//  [2, 3 , 4]\n```\n\n**在大地上我们只过一生。 ----叶赛宁**\n","source":"_posts/JS循环总结.md","raw":"---\ntitle: JS循环总结\ndate: 2022-03-26 11:07:01\ntags:\n    - 循环\ncategories: [前端]\n---\n\n## JS循环总结\n\n工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有`forEach`、`for in`、`for of`、`map`以及`for`，故对这些循环做些总结。\n\n### forEach（数组方法）\n\n#### 特性\n\n- 遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。\n- 没有返回值。\n- 不能使用break中断循环，不能使用return返回到外层函数。\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    let newArray = array.forEach(item => {\n        item+=1;\n        console.log(item);// 2 3 4\n    })\n    console.log(array); // [1, 2, 3]\n    console.log(newArray) // undefined\n```\n\n### for in\n\n#### 特性\n\n更适合遍历对象，可以遍历数组，但是会有一些局限性。\n\n#### 实例\n\n`for in`的索引为字符串型数字，不能直接进行几何运算\n\n```js\n    const array = [1, 2, 3];\n    for(const i in array) {\n        const res = i + 1;\n        console.log(res);\n    }\n    // 01 11 21\n```\n\n遍历顺序有可能不是按照实际数组的内部顺序，使用`for in`会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用`hasOwnProperty()`方法可以判断某属性是不是该对象的实例属性\n\n```js\n    const array = [1, 2, 3];\n    Array.prototype.a = 123;\n    for (const index in array) {\n        const res = array[index];\n        console.log(res);\n    }\n    // 1 2 3 123\n\n    for (const index in array) {\n        if (array.hasOwnProperty(index)) {\n            const res = array[index];\n            console.log(res);\n        }\n    }\n    // 1 2 3\n```\n\n### for of\n\n#### 特性\n\n- 可遍历map/objet/array/set/string等\n- 避免了`for in`的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。\n\n#### 实例\n\n`for of`是ES6的新语法，为了弥补`for in`的局限性。\n`for of`遍历的数组元素值，而且`for of`遍历的只是数组内的元素，不包括原型属性和索引\n\n```js\n    const array = [1, 2, 3];\n    array.a = 123;\n    Array.prototype.a = 123;\n    for(const value of array) {\n        console.log(value);\n    }\n    // 1 2 3\n```\n\n`for of`适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的`Object.keys()`方法\n\n```js\n    const myObject = {\n        a: 1,\n        b: 2,\n        c: 3\n    };\n    for (const key of Object.keys(myObject)) {\n        console.log(key + \"：\" + myObject[key]);\n    }\n    //> \"a：1\" \"b：2\" \"c：3\n```\n\n### map （数组方法）\n\n#### 特性\n\n- map不改变原数组但是会返回新数组\n- 可以使用break中断循环，可以使用return返回到外层函数\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    const newArray = array.map(index => {\n        return index+= 1;\n    })\n    console.log(array);// [1, 2 , 3]\n    console.log(newArray);//  [2, 3 , 4]\n```\n\n**在大地上我们只过一生。 ----叶赛宁**\n","slug":"JS循环总结","published":1,"updated":"2023-02-17T05:43:35.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj6000dscacg6wd0o9y","content":"<h2 id=\"JS循环总结\"><a href=\"#JS循环总结\" class=\"headerlink\" title=\"JS循环总结\"></a>JS循环总结</h2><p>工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有<code>forEach</code>、<code>for in</code>、<code>for of</code>、<code>map</code>以及<code>for</code>，故对这些循环做些总结。</p>\n<h3 id=\"forEach（数组方法）\"><a href=\"#forEach（数组方法）\" class=\"headerlink\" title=\"forEach（数组方法）\"></a>forEach（数组方法）</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。</li>\n<li>没有返回值。</li>\n<li>不能使用break中断循环，不能使用return返回到外层函数。</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArray = array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    item+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);<span class=\"comment\">// 2 3 4</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for in\"></a>for in</h3><h4 id=\"特性-1\"><a href=\"#特性-1\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>更适合遍历对象，可以遍历数组，但是会有一些局限性。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for in</code>的索引为字符串型数字，不能直接进行几何运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 01 11 21</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历顺序有可能不是按照实际数组的内部顺序，使用<code>for in</code>会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用<code>hasOwnProperty()</code>方法可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.<span class=\"title function_\">hasOwnProperty</span>(index)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-of\"><a href=\"#for-of\" class=\"headerlink\" title=\"for of\"></a>for of</h3><h4 id=\"特性-2\"><a href=\"#特性-2\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>可遍历map/objet/array/set/string等</li>\n<li>避免了<code>for in</code>的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。</li>\n</ul>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for of</code>是ES6的新语法，为了弥补<code>for in</code>的局限性。<br><code>for of</code>遍历的数组元素值，而且<code>for of</code>遍历的只是数组内的元素，不包括原型属性和索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">array.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for of</code>适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的<code>Object.keys()</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(myObject)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&quot;：&quot;</span> + myObject[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//&gt; &quot;a：1&quot; &quot;b：2&quot; &quot;c：3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map-（数组方法）\"><a href=\"#map-（数组方法）\" class=\"headerlink\" title=\"map （数组方法）\"></a>map （数组方法）</h3><h4 id=\"特性-3\"><a href=\"#特性-3\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>map不改变原数组但是会返回新数组</li>\n<li>可以使用break中断循环，可以使用return返回到外层函数</li>\n</ul>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = array.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index+= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array);<span class=\"comment\">// [1, 2 , 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray);<span class=\"comment\">//  [2, 3 , 4]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在大地上我们只过一生。 —-叶赛宁</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS循环总结\"><a href=\"#JS循环总结\" class=\"headerlink\" title=\"JS循环总结\"></a>JS循环总结</h2><p>工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有<code>forEach</code>、<code>for in</code>、<code>for of</code>、<code>map</code>以及<code>for</code>，故对这些循环做些总结。</p>\n<h3 id=\"forEach（数组方法）\"><a href=\"#forEach（数组方法）\" class=\"headerlink\" title=\"forEach（数组方法）\"></a>forEach（数组方法）</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。</li>\n<li>没有返回值。</li>\n<li>不能使用break中断循环，不能使用return返回到外层函数。</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArray = array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    item+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);<span class=\"comment\">// 2 3 4</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for in\"></a>for in</h3><h4 id=\"特性-1\"><a href=\"#特性-1\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>更适合遍历对象，可以遍历数组，但是会有一些局限性。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for in</code>的索引为字符串型数字，不能直接进行几何运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 01 11 21</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历顺序有可能不是按照实际数组的内部顺序，使用<code>for in</code>会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用<code>hasOwnProperty()</code>方法可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.<span class=\"title function_\">hasOwnProperty</span>(index)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-of\"><a href=\"#for-of\" class=\"headerlink\" title=\"for of\"></a>for of</h3><h4 id=\"特性-2\"><a href=\"#特性-2\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>可遍历map/objet/array/set/string等</li>\n<li>避免了<code>for in</code>的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。</li>\n</ul>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for of</code>是ES6的新语法，为了弥补<code>for in</code>的局限性。<br><code>for of</code>遍历的数组元素值，而且<code>for of</code>遍历的只是数组内的元素，不包括原型属性和索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">array.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for of</code>适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的<code>Object.keys()</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(myObject)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&quot;：&quot;</span> + myObject[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//&gt; &quot;a：1&quot; &quot;b：2&quot; &quot;c：3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map-（数组方法）\"><a href=\"#map-（数组方法）\" class=\"headerlink\" title=\"map （数组方法）\"></a>map （数组方法）</h3><h4 id=\"特性-3\"><a href=\"#特性-3\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>map不改变原数组但是会返回新数组</li>\n<li>可以使用break中断循环，可以使用return返回到外层函数</li>\n</ul>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = array.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index+= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array);<span class=\"comment\">// [1, 2 , 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray);<span class=\"comment\">//  [2, 3 , 4]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在大地上我们只过一生。 —-叶赛宁</strong></p>\n"},{"title":"JVM结构详解","date":"2021-03-31T06:36:40.000Z","_content":"\n## JVM 结构详解\n\n### JVM 结构图\n\n![avatar](https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg)\n\n#### 程序计数器（PC 寄存器）\n\n##### 程序计数器的定义\n\n程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。\n\n##### 程序计数器的作用\n\n- 字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。\n- 在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。\n\n##### 程序计数器的特点\n\n- 是一块较小的内存空间。\n- 线程私有，每条线程都有自己的程序计数器。\n- 生命周期：随着线程的创建而创建，随着线程的结束而销毁。\n- 是唯一一个不会出现 OutOfMemoryError 的内存区域。\n\n#### Java 虚拟机栈（Java 栈）\n\n##### Java 虚拟机栈的定义\n\nJava 虚拟机栈是描述 Java 方法运行过程的内存模型。\n\nJava 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做`栈帧`的区域，用于存放该方法运行过程中的一些信息，如：\n\n- 局部变量表\n- 操作数栈\n- 动态链接\n- 方法出口信息\n- ......\n\n##### 压栈出栈过程\n\n当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。\n\nJava 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。\n\n方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。\n\n由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。\n\n##### Java 虚拟机栈的特点\n\n- 局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。\n- Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。\n  - StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。\n  - OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。\n- Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。\n\n出现 StackOverFlowError 时，内存空间可能还有很多。\n\n#### 本地方法栈（c 栈）\n\n##### 本地方法栈的定义\n\n本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。\n\n##### 栈帧变化过程\n\n本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。\n\n方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。\n\n如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。\n\n#### 堆\n\n##### 堆的定义\n\n堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。\n\n##### 堆的特点\n\n- 线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。\n- 在虚拟机启动时创建。\n- 是垃圾回收的主要场所。\n- 进一步可分为：新生代（Eden 区：`From Survior`，`To Survior`、老年代。\n\n不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。\n\n堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。\n\nJava 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。\n\n#### 方法区\n\n##### 方法区的定义\n\nJava 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：\n\n- 已经被虚拟机加载的类信息\n- 常量\n- 静态变量\n- 即时编译器编译后的代码\n\n##### 方法区的特点\n\n- 线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。\n- 永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为`永久代`。\n- 内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。\n- Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。\n\n##### 运行时常量池\n\n方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。\n\n当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的`intern()`方法就能在运行期间向常量池中添加字符串常量。\n\n#### 直接内存（堆外内存）\n\n直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。\n\n##### 操作直接内存\n\n在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的`DirectByteBuffer`对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。\n\n直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。\n\n##### 直接内存和堆内存比较\n\n- 直接内存申请空间耗费更高的性能\n- 直接内存读取 IO 的性能要优于普通的堆内存\n- 直接内存作用链：本地 IO -> 直接内存 -> 本地 IO\n- 堆内存作用链：本地 IO -> 直接内存 -> 非直接内存 -> 直接内存 -> 本地 IO\n\n服务器管理员在配置虚拟机参数时，会根据实际内存设置`-Xmx`等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现`OutOfMemoryError`异常。\n\n### 参考地址\n\n<https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure>\n","source":"_posts/JVM结构详解.md","raw":"---\ntitle: JVM结构详解\ndate: 2021-03-31 14:36:40\ntags:\n  - JVM\ncategories:\n  - 后端\n  - Java\n---\n\n## JVM 结构详解\n\n### JVM 结构图\n\n![avatar](https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg)\n\n#### 程序计数器（PC 寄存器）\n\n##### 程序计数器的定义\n\n程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。\n\n##### 程序计数器的作用\n\n- 字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。\n- 在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。\n\n##### 程序计数器的特点\n\n- 是一块较小的内存空间。\n- 线程私有，每条线程都有自己的程序计数器。\n- 生命周期：随着线程的创建而创建，随着线程的结束而销毁。\n- 是唯一一个不会出现 OutOfMemoryError 的内存区域。\n\n#### Java 虚拟机栈（Java 栈）\n\n##### Java 虚拟机栈的定义\n\nJava 虚拟机栈是描述 Java 方法运行过程的内存模型。\n\nJava 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做`栈帧`的区域，用于存放该方法运行过程中的一些信息，如：\n\n- 局部变量表\n- 操作数栈\n- 动态链接\n- 方法出口信息\n- ......\n\n##### 压栈出栈过程\n\n当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。\n\nJava 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。\n\n方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。\n\n由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。\n\n##### Java 虚拟机栈的特点\n\n- 局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。\n- Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。\n  - StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。\n  - OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。\n- Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。\n\n出现 StackOverFlowError 时，内存空间可能还有很多。\n\n#### 本地方法栈（c 栈）\n\n##### 本地方法栈的定义\n\n本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。\n\n##### 栈帧变化过程\n\n本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。\n\n方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。\n\n如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。\n\n#### 堆\n\n##### 堆的定义\n\n堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。\n\n##### 堆的特点\n\n- 线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。\n- 在虚拟机启动时创建。\n- 是垃圾回收的主要场所。\n- 进一步可分为：新生代（Eden 区：`From Survior`，`To Survior`、老年代。\n\n不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。\n\n堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。\n\nJava 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。\n\n#### 方法区\n\n##### 方法区的定义\n\nJava 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：\n\n- 已经被虚拟机加载的类信息\n- 常量\n- 静态变量\n- 即时编译器编译后的代码\n\n##### 方法区的特点\n\n- 线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。\n- 永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为`永久代`。\n- 内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。\n- Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。\n\n##### 运行时常量池\n\n方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。\n\n当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的`intern()`方法就能在运行期间向常量池中添加字符串常量。\n\n#### 直接内存（堆外内存）\n\n直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。\n\n##### 操作直接内存\n\n在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的`DirectByteBuffer`对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。\n\n直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。\n\n##### 直接内存和堆内存比较\n\n- 直接内存申请空间耗费更高的性能\n- 直接内存读取 IO 的性能要优于普通的堆内存\n- 直接内存作用链：本地 IO -> 直接内存 -> 本地 IO\n- 堆内存作用链：本地 IO -> 直接内存 -> 非直接内存 -> 直接内存 -> 本地 IO\n\n服务器管理员在配置虚拟机参数时，会根据实际内存设置`-Xmx`等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现`OutOfMemoryError`异常。\n\n### 参考地址\n\n<https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure>\n","slug":"JVM结构详解","published":1,"updated":"2022-10-27T06:40:13.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj7000escac44y7cyuk","content":"<h2 id=\"JVM-结构详解\"><a href=\"#JVM-结构详解\" class=\"headerlink\" title=\"JVM 结构详解\"></a>JVM 结构详解</h2><h3 id=\"JVM-结构图\"><a href=\"#JVM-结构图\" class=\"headerlink\" title=\"JVM 结构图\"></a>JVM 结构图</h3><p><img src=\"https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"程序计数器（PC-寄存器）\"><a href=\"#程序计数器（PC-寄存器）\" class=\"headerlink\" title=\"程序计数器（PC 寄存器）\"></a>程序计数器（PC 寄存器）</h4><h5 id=\"程序计数器的定义\"><a href=\"#程序计数器的定义\" class=\"headerlink\" title=\"程序计数器的定义\"></a>程序计数器的定义</h5><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。</p>\n<h5 id=\"程序计数器的作用\"><a href=\"#程序计数器的作用\" class=\"headerlink\" title=\"程序计数器的作用\"></a>程序计数器的作用</h5><ul>\n<li>字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。</li>\n<li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li>\n</ul>\n<h5 id=\"程序计数器的特点\"><a href=\"#程序计数器的特点\" class=\"headerlink\" title=\"程序计数器的特点\"></a>程序计数器的特点</h5><ul>\n<li>是一块较小的内存空间。</li>\n<li>线程私有，每条线程都有自己的程序计数器。</li>\n<li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li>\n<li>是唯一一个不会出现 OutOfMemoryError 的内存区域。</li>\n</ul>\n<h4 id=\"Java-虚拟机栈（Java-栈）\"><a href=\"#Java-虚拟机栈（Java-栈）\" class=\"headerlink\" title=\"Java 虚拟机栈（Java 栈）\"></a>Java 虚拟机栈（Java 栈）</h4><h5 id=\"Java-虚拟机栈的定义\"><a href=\"#Java-虚拟机栈的定义\" class=\"headerlink\" title=\"Java 虚拟机栈的定义\"></a>Java 虚拟机栈的定义</h5><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p>\n<p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做<code>栈帧</code>的区域，用于存放该方法运行过程中的一些信息，如：</p>\n<ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口信息</li>\n<li>……</li>\n</ul>\n<h5 id=\"压栈出栈过程\"><a href=\"#压栈出栈过程\" class=\"headerlink\" title=\"压栈出栈过程\"></a>压栈出栈过程</h5><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p>\n<p>Java 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p>\n<p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p>\n<p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p>\n<h5 id=\"Java-虚拟机栈的特点\"><a href=\"#Java-虚拟机栈的特点\" class=\"headerlink\" title=\"Java 虚拟机栈的特点\"></a>Java 虚拟机栈的特点</h5><ul>\n<li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。</li>\n<li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul>\n<li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li>\n<li>OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。</li>\n</ul>\n</li>\n<li>Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li>\n</ul>\n<p>出现 StackOverFlowError 时，内存空间可能还有很多。</p>\n<h4 id=\"本地方法栈（c-栈）\"><a href=\"#本地方法栈（c-栈）\" class=\"headerlink\" title=\"本地方法栈（c 栈）\"></a>本地方法栈（c 栈）</h4><h5 id=\"本地方法栈的定义\"><a href=\"#本地方法栈的定义\" class=\"headerlink\" title=\"本地方法栈的定义\"></a>本地方法栈的定义</h5><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<h5 id=\"栈帧变化过程\"><a href=\"#栈帧变化过程\" class=\"headerlink\" title=\"栈帧变化过程\"></a>栈帧变化过程</h5><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。</p>\n<p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。</p>\n<p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h5 id=\"堆的定义\"><a href=\"#堆的定义\" class=\"headerlink\" title=\"堆的定义\"></a>堆的定义</h5><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p>\n<h5 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h5><ul>\n<li>线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li>\n<li>在虚拟机启动时创建。</li>\n<li>是垃圾回收的主要场所。</li>\n<li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survior</code>、老年代。</li>\n</ul>\n<p>不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p>\n<p>堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。</p>\n<p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><h5 id=\"方法区的定义\"><a href=\"#方法区的定义\" class=\"headerlink\" title=\"方法区的定义\"></a>方法区的定义</h5><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：</p>\n<ul>\n<li>已经被虚拟机加载的类信息</li>\n<li>常量</li>\n<li>静态变量</li>\n<li>即时编译器编译后的代码</li>\n</ul>\n<h5 id=\"方法区的特点\"><a href=\"#方法区的特点\" class=\"headerlink\" title=\"方法区的特点\"></a>方法区的特点</h5><ul>\n<li>线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。</li>\n<li>永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为<code>永久代</code>。</li>\n<li>内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li>\n<li>Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。</li>\n</ul>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><p>方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。</p>\n<p>当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的<code>intern()</code>方法就能在运行期间向常量池中添加字符串常量。</p>\n<h4 id=\"直接内存（堆外内存）\"><a href=\"#直接内存（堆外内存）\" class=\"headerlink\" title=\"直接内存（堆外内存）\"></a>直接内存（堆外内存）</h4><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p>\n<h5 id=\"操作直接内存\"><a href=\"#操作直接内存\" class=\"headerlink\" title=\"操作直接内存\"></a>操作直接内存</h5><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。</p>\n<p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p>\n<h5 id=\"直接内存和堆内存比较\"><a href=\"#直接内存和堆内存比较\" class=\"headerlink\" title=\"直接内存和堆内存比较\"></a>直接内存和堆内存比较</h5><ul>\n<li>直接内存申请空间耗费更高的性能</li>\n<li>直接内存读取 IO 的性能要优于普通的堆内存</li>\n<li>直接内存作用链：本地 IO -&gt; 直接内存 -&gt; 本地 IO</li>\n<li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li>\n</ul>\n<p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现<code>OutOfMemoryError</code>异常。</p>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure\">https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JVM-结构详解\"><a href=\"#JVM-结构详解\" class=\"headerlink\" title=\"JVM 结构详解\"></a>JVM 结构详解</h2><h3 id=\"JVM-结构图\"><a href=\"#JVM-结构图\" class=\"headerlink\" title=\"JVM 结构图\"></a>JVM 结构图</h3><p><img src=\"https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg\" alt=\"avatar\"></p>\n<h4 id=\"程序计数器（PC-寄存器）\"><a href=\"#程序计数器（PC-寄存器）\" class=\"headerlink\" title=\"程序计数器（PC 寄存器）\"></a>程序计数器（PC 寄存器）</h4><h5 id=\"程序计数器的定义\"><a href=\"#程序计数器的定义\" class=\"headerlink\" title=\"程序计数器的定义\"></a>程序计数器的定义</h5><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。</p>\n<h5 id=\"程序计数器的作用\"><a href=\"#程序计数器的作用\" class=\"headerlink\" title=\"程序计数器的作用\"></a>程序计数器的作用</h5><ul>\n<li>字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。</li>\n<li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li>\n</ul>\n<h5 id=\"程序计数器的特点\"><a href=\"#程序计数器的特点\" class=\"headerlink\" title=\"程序计数器的特点\"></a>程序计数器的特点</h5><ul>\n<li>是一块较小的内存空间。</li>\n<li>线程私有，每条线程都有自己的程序计数器。</li>\n<li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li>\n<li>是唯一一个不会出现 OutOfMemoryError 的内存区域。</li>\n</ul>\n<h4 id=\"Java-虚拟机栈（Java-栈）\"><a href=\"#Java-虚拟机栈（Java-栈）\" class=\"headerlink\" title=\"Java 虚拟机栈（Java 栈）\"></a>Java 虚拟机栈（Java 栈）</h4><h5 id=\"Java-虚拟机栈的定义\"><a href=\"#Java-虚拟机栈的定义\" class=\"headerlink\" title=\"Java 虚拟机栈的定义\"></a>Java 虚拟机栈的定义</h5><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p>\n<p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做<code>栈帧</code>的区域，用于存放该方法运行过程中的一些信息，如：</p>\n<ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口信息</li>\n<li>……</li>\n</ul>\n<h5 id=\"压栈出栈过程\"><a href=\"#压栈出栈过程\" class=\"headerlink\" title=\"压栈出栈过程\"></a>压栈出栈过程</h5><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p>\n<p>Java 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p>\n<p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p>\n<p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p>\n<h5 id=\"Java-虚拟机栈的特点\"><a href=\"#Java-虚拟机栈的特点\" class=\"headerlink\" title=\"Java 虚拟机栈的特点\"></a>Java 虚拟机栈的特点</h5><ul>\n<li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。</li>\n<li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul>\n<li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li>\n<li>OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。</li>\n</ul>\n</li>\n<li>Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li>\n</ul>\n<p>出现 StackOverFlowError 时，内存空间可能还有很多。</p>\n<h4 id=\"本地方法栈（c-栈）\"><a href=\"#本地方法栈（c-栈）\" class=\"headerlink\" title=\"本地方法栈（c 栈）\"></a>本地方法栈（c 栈）</h4><h5 id=\"本地方法栈的定义\"><a href=\"#本地方法栈的定义\" class=\"headerlink\" title=\"本地方法栈的定义\"></a>本地方法栈的定义</h5><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<h5 id=\"栈帧变化过程\"><a href=\"#栈帧变化过程\" class=\"headerlink\" title=\"栈帧变化过程\"></a>栈帧变化过程</h5><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。</p>\n<p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。</p>\n<p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h5 id=\"堆的定义\"><a href=\"#堆的定义\" class=\"headerlink\" title=\"堆的定义\"></a>堆的定义</h5><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p>\n<h5 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h5><ul>\n<li>线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li>\n<li>在虚拟机启动时创建。</li>\n<li>是垃圾回收的主要场所。</li>\n<li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survior</code>、老年代。</li>\n</ul>\n<p>不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p>\n<p>堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。</p>\n<p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><h5 id=\"方法区的定义\"><a href=\"#方法区的定义\" class=\"headerlink\" title=\"方法区的定义\"></a>方法区的定义</h5><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：</p>\n<ul>\n<li>已经被虚拟机加载的类信息</li>\n<li>常量</li>\n<li>静态变量</li>\n<li>即时编译器编译后的代码</li>\n</ul>\n<h5 id=\"方法区的特点\"><a href=\"#方法区的特点\" class=\"headerlink\" title=\"方法区的特点\"></a>方法区的特点</h5><ul>\n<li>线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。</li>\n<li>永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为<code>永久代</code>。</li>\n<li>内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li>\n<li>Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。</li>\n</ul>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><p>方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。</p>\n<p>当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的<code>intern()</code>方法就能在运行期间向常量池中添加字符串常量。</p>\n<h4 id=\"直接内存（堆外内存）\"><a href=\"#直接内存（堆外内存）\" class=\"headerlink\" title=\"直接内存（堆外内存）\"></a>直接内存（堆外内存）</h4><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p>\n<h5 id=\"操作直接内存\"><a href=\"#操作直接内存\" class=\"headerlink\" title=\"操作直接内存\"></a>操作直接内存</h5><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。</p>\n<p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p>\n<h5 id=\"直接内存和堆内存比较\"><a href=\"#直接内存和堆内存比较\" class=\"headerlink\" title=\"直接内存和堆内存比较\"></a>直接内存和堆内存比较</h5><ul>\n<li>直接内存申请空间耗费更高的性能</li>\n<li>直接内存读取 IO 的性能要优于普通的堆内存</li>\n<li>直接内存作用链：本地 IO -&gt; 直接内存 -&gt; 本地 IO</li>\n<li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li>\n</ul>\n<p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现<code>OutOfMemoryError</code>异常。</p>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure\">https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure</a></p>\n"},{"title":"Java交换数组元素","date":"2021-03-30T05:53:53.000Z","_content":"\n## Java 交换数组元素\n\n### 代码示例\n\n```Java\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author zhkai\n * @date 2021年3月30日14:09:29\n */\npublic class SwapElement {\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementOne(int[] nums, int i, int j) {\n        int item = nums[i];\n        nums[i] = nums[j];\n        nums[j] = item;\n        return nums;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementTwo(int[] nums, int i, int j) {\n        List<Integer> item = Arrays.stream(nums).boxed().collect(Collectors.toList());\n        Collections.swap(item, i, j);\n        int[] result = item.stream().mapToInt(Integer::valueOf).toArray();\n        return result;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementThree(int[] nums, int i, int j) {\n        nums[i] ^= nums[j];\n        nums[j] ^= nums[i];\n        nums[i] ^= nums[j];\n        return nums;\n    }\n}\n\n```\n\n### 效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4}; i=1; j=3;\n方法一：2420500ns\n方法二：163113800ns\n方法三：20200ns\n```\n\n### 总结\n\n- 方法一：\n    使用中间变量进行交换，不能直接进行交换。\n- 方法二：\n    使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。\n- 方法三：\n    使用位运算符进行交换。\n    ^：如果相对应位值相同，则结果为0，否则为1\n    `C ^= C1 等价于 C = C^C1`\n","source":"_posts/Java交换数组元素.md","raw":"---\ntitle: Java交换数组元素\ndate: 2021-03-30 13:53:53\ntags:\n  - 数组\ncategories: [后端, Java]\n---\n\n## Java 交换数组元素\n\n### 代码示例\n\n```Java\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author zhkai\n * @date 2021年3月30日14:09:29\n */\npublic class SwapElement {\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementOne(int[] nums, int i, int j) {\n        int item = nums[i];\n        nums[i] = nums[j];\n        nums[j] = item;\n        return nums;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementTwo(int[] nums, int i, int j) {\n        List<Integer> item = Arrays.stream(nums).boxed().collect(Collectors.toList());\n        Collections.swap(item, i, j);\n        int[] result = item.stream().mapToInt(Integer::valueOf).toArray();\n        return result;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementThree(int[] nums, int i, int j) {\n        nums[i] ^= nums[j];\n        nums[j] ^= nums[i];\n        nums[i] ^= nums[j];\n        return nums;\n    }\n}\n\n```\n\n### 效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4}; i=1; j=3;\n方法一：2420500ns\n方法二：163113800ns\n方法三：20200ns\n```\n\n### 总结\n\n- 方法一：\n    使用中间变量进行交换，不能直接进行交换。\n- 方法二：\n    使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。\n- 方法三：\n    使用位运算符进行交换。\n    ^：如果相对应位值相同，则结果为0，否则为1\n    `C ^= C1 等价于 C = C^C1`\n","slug":"Java交换数组元素","published":1,"updated":"2022-10-27T06:40:13.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj8000hscac4ht0876h","content":"<h2 id=\"Java-交换数组元素\"><a href=\"#Java-交换数组元素\" class=\"headerlink\" title=\"Java 交换数组元素\"></a>Java 交换数组元素</h2><h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月30日14:09:29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwapElement</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementOne(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = item;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementTwo(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; item = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class=\"line\">        Collections.swap(item, i, j);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = item.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementThree(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        nums[j] ^= nums[i];</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;; i=1; j=3;</span><br><span class=\"line\">方法一：2420500ns</span><br><span class=\"line\">方法二：163113800ns</span><br><span class=\"line\">方法三：20200ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>方法一：<br>  使用中间变量进行交换，不能直接进行交换。</li>\n<li>方法二：<br>  使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。</li>\n<li>方法三：<br>  使用位运算符进行交换。<br>  ^：如果相对应位值相同，则结果为0，否则为1<br>  <code>C ^= C1 等价于 C = C^C1</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-交换数组元素\"><a href=\"#Java-交换数组元素\" class=\"headerlink\" title=\"Java 交换数组元素\"></a>Java 交换数组元素</h2><h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月30日14:09:29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwapElement</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementOne(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = item;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementTwo(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; item = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class=\"line\">        Collections.swap(item, i, j);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = item.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementThree(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        nums[j] ^= nums[i];</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;; i=1; j=3;</span><br><span class=\"line\">方法一：2420500ns</span><br><span class=\"line\">方法二：163113800ns</span><br><span class=\"line\">方法三：20200ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>方法一：<br>  使用中间变量进行交换，不能直接进行交换。</li>\n<li>方法二：<br>  使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。</li>\n<li>方法三：<br>  使用位运算符进行交换。<br>  ^：如果相对应位值相同，则结果为0，否则为1<br>  <code>C ^= C1 等价于 C = C^C1</code></li>\n</ul>\n"},{"title":"Java文件处理常用方法","date":"2023-02-17T03:07:01.000Z","_content":"\n## Java文件处理常用方法\n\n归纳整理一些常用的处理文件的方法\n\n### Java Apache FileUtils\n\n#### Maven依赖引入\n\n```xml\n    <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>2.6</version>\n    </dependency>\n```\n\n#### 创建和删除文件\n\n使用FileUtils.touch()创建一个新文件，并使用FileUtils.deleteQuietly()将其删除。\nCreateDeleteFileEx.java\n\n```java\nimport org.apache.commons.io.FileUtils;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author 25724\n * @date 2023/2/17 15:02\n * @description 创建和删除文件\n */\npublic class CreateDeleteFileEx {\n    public static void main(String[] args) throws IOException {\n        File myFile = new File(\"src/main/resources/myFile.txt\");\n        FileUtils.touch(myFile);\n        if (myFile.exists()) {\n            System.out.println(\"The file exists\");\n        } else {\n            System.out.println(\"The file does not exist\");\n        }\n        FileUtils.deleteQuietly(myFile);\n        if (myFile.exists()) {\n            System.out.println(\"The file exists\");\n        } else {\n            System.out.println(\"The file does not exist\");\n        }\n    }\n}\n```\n","source":"_posts/Java文件处理常用方法.md","raw":"---\ntitle: Java文件处理常用方法\ndate: 2023-02-17 11:07:01\ntags:\n    - 文件处理\ncategories: [后端]\n---\n\n## Java文件处理常用方法\n\n归纳整理一些常用的处理文件的方法\n\n### Java Apache FileUtils\n\n#### Maven依赖引入\n\n```xml\n    <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>2.6</version>\n    </dependency>\n```\n\n#### 创建和删除文件\n\n使用FileUtils.touch()创建一个新文件，并使用FileUtils.deleteQuietly()将其删除。\nCreateDeleteFileEx.java\n\n```java\nimport org.apache.commons.io.FileUtils;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author 25724\n * @date 2023/2/17 15:02\n * @description 创建和删除文件\n */\npublic class CreateDeleteFileEx {\n    public static void main(String[] args) throws IOException {\n        File myFile = new File(\"src/main/resources/myFile.txt\");\n        FileUtils.touch(myFile);\n        if (myFile.exists()) {\n            System.out.println(\"The file exists\");\n        } else {\n            System.out.println(\"The file does not exist\");\n        }\n        FileUtils.deleteQuietly(myFile);\n        if (myFile.exists()) {\n            System.out.println(\"The file exists\");\n        } else {\n            System.out.println(\"The file does not exist\");\n        }\n    }\n}\n```\n","slug":"Java文件处理常用方法","published":1,"updated":"2023-02-17T07:23:14.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bj9000jscac56dj3gpb","content":"<h2 id=\"Java文件处理常用方法\"><a href=\"#Java文件处理常用方法\" class=\"headerlink\" title=\"Java文件处理常用方法\"></a>Java文件处理常用方法</h2><p>归纳整理一些常用的处理文件的方法</p>\n<h3 id=\"Java-Apache-FileUtils\"><a href=\"#Java-Apache-FileUtils\" class=\"headerlink\" title=\"Java Apache FileUtils\"></a>Java Apache FileUtils</h3><h4 id=\"Maven依赖引入\"><a href=\"#Maven依赖引入\" class=\"headerlink\" title=\"Maven依赖引入\"></a>Maven依赖引入</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建和删除文件\"><a href=\"#创建和删除文件\" class=\"headerlink\" title=\"创建和删除文件\"></a>创建和删除文件</h4><p>使用FileUtils.touch()创建一个新文件，并使用FileUtils.deleteQuietly()将其删除。<br>CreateDeleteFileEx.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 25724</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/17 15:02</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 创建和删除文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateDeleteFileEx</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">myFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;src/main/resources/myFile.txt&quot;</span>);</span><br><span class=\"line\">        FileUtils.touch(myFile);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myFile.exists()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file exists&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file does not exist&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FileUtils.deleteQuietly(myFile);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myFile.exists()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file exists&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file does not exist&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java文件处理常用方法\"><a href=\"#Java文件处理常用方法\" class=\"headerlink\" title=\"Java文件处理常用方法\"></a>Java文件处理常用方法</h2><p>归纳整理一些常用的处理文件的方法</p>\n<h3 id=\"Java-Apache-FileUtils\"><a href=\"#Java-Apache-FileUtils\" class=\"headerlink\" title=\"Java Apache FileUtils\"></a>Java Apache FileUtils</h3><h4 id=\"Maven依赖引入\"><a href=\"#Maven依赖引入\" class=\"headerlink\" title=\"Maven依赖引入\"></a>Maven依赖引入</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建和删除文件\"><a href=\"#创建和删除文件\" class=\"headerlink\" title=\"创建和删除文件\"></a>创建和删除文件</h4><p>使用FileUtils.touch()创建一个新文件，并使用FileUtils.deleteQuietly()将其删除。<br>CreateDeleteFileEx.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 25724</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/17 15:02</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 创建和删除文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateDeleteFileEx</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">myFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;src/main/resources/myFile.txt&quot;</span>);</span><br><span class=\"line\">        FileUtils.touch(myFile);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myFile.exists()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file exists&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file does not exist&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FileUtils.deleteQuietly(myFile);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myFile.exists()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file exists&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;The file does not exist&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java类型转换工具类（持续更新）","date":"2021-03-19T03:08:23.000Z","_content":"\n## 简介\n\n  将项目中用到的类型转换做个记录。\n\n## 详细代码\n\n ``` java\n  @Component\n  public class TypeUtil {\n   // [start]字符串转各种格式\n  \n   // 字符串转日期(格式:\"yyyyMMdd\")\n   public static Date StrToDateFirst(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"dd/MM/yyyy\")\n   public static Date StrToDateSecond(String str) {\n    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd\")\n   public static Date StrToDateThird(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd HH:mm:ss\")\n   public static Date StrToDateFourth(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转Integer\n   public static Integer StrToInteger(String str) {\n    Integer integer = null;\n    try {\n     integer = Integer.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return integer;\n   }\n  \n   // 字符串转Double\n   public static Double StrToDouble(String str) {\n    Double double1 = 0.00;\n    try {\n     double1 = Double.parseDouble(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return double1;\n   }\n  \n   // 字符串转时间戳\n   public static Timestamp StrToTimeStamp(String str) {\n    Timestamp timestamp = null;\n    try {\n     timestamp = Timestamp.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return timestamp;\n   }\n  \n   // 字符串转BigDecimal\n   public static BigDecimal StrTiBigdecimal(String str) {\n    BigDecimal bigDecimal = null;\n    try {\n     bigDecimal = new BigDecimal(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return bigDecimal;\n   }\n   // [end]\n  \n  }\n ```\n","source":"_posts/Java类型转换工具类（持续更新）.md","raw":"---\ntitle: Java类型转换工具类（持续更新）\ndate: 2021-03-19 11:08:23\ntags: \n\n\t- 类型转换\n\t- Utils\n\ncategories: \n\n\t[后端, Java]\n\n---\n\n## 简介\n\n  将项目中用到的类型转换做个记录。\n\n## 详细代码\n\n ``` java\n  @Component\n  public class TypeUtil {\n   // [start]字符串转各种格式\n  \n   // 字符串转日期(格式:\"yyyyMMdd\")\n   public static Date StrToDateFirst(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"dd/MM/yyyy\")\n   public static Date StrToDateSecond(String str) {\n    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd\")\n   public static Date StrToDateThird(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd HH:mm:ss\")\n   public static Date StrToDateFourth(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转Integer\n   public static Integer StrToInteger(String str) {\n    Integer integer = null;\n    try {\n     integer = Integer.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return integer;\n   }\n  \n   // 字符串转Double\n   public static Double StrToDouble(String str) {\n    Double double1 = 0.00;\n    try {\n     double1 = Double.parseDouble(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return double1;\n   }\n  \n   // 字符串转时间戳\n   public static Timestamp StrToTimeStamp(String str) {\n    Timestamp timestamp = null;\n    try {\n     timestamp = Timestamp.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return timestamp;\n   }\n  \n   // 字符串转BigDecimal\n   public static BigDecimal StrTiBigdecimal(String str) {\n    BigDecimal bigDecimal = null;\n    try {\n     bigDecimal = new BigDecimal(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return bigDecimal;\n   }\n   // [end]\n  \n  }\n ```\n","slug":"Java类型转换工具类（持续更新）","published":1,"updated":"2022-10-27T06:40:13.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bja000nscac0lvq48es","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  将项目中用到的类型转换做个记录。</p>\n<h2 id=\"详细代码\"><a href=\"#详细代码\" class=\"headerlink\" title=\"详细代码\"></a>详细代码</h2> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeUtil</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// [start]字符串转各种格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyyMMdd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFirst</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMMdd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;dd/MM/yyyy&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateSecond</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateThird</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFourth</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Integer</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">StrToInteger</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   integer = Integer.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> integer;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Double</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title function_\">StrToDouble</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Double</span> <span class=\"variable\">double1</span> <span class=\"operator\">=</span> <span class=\"number\">0.00</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   double1 = Double.parseDouble(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> double1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转时间戳</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Timestamp <span class=\"title function_\">StrToTimeStamp</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Timestamp</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   timestamp = Timestamp.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转BigDecimal</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">StrTiBigdecimal</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   bigDecimal = <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bigDecimal;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// [end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  将项目中用到的类型转换做个记录。</p>\n<h2 id=\"详细代码\"><a href=\"#详细代码\" class=\"headerlink\" title=\"详细代码\"></a>详细代码</h2> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeUtil</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// [start]字符串转各种格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyyMMdd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFirst</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMMdd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;dd/MM/yyyy&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateSecond</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateThird</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFourth</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Integer</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">StrToInteger</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   integer = Integer.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> integer;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Double</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title function_\">StrToDouble</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Double</span> <span class=\"variable\">double1</span> <span class=\"operator\">=</span> <span class=\"number\">0.00</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   double1 = Double.parseDouble(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> double1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转时间戳</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Timestamp <span class=\"title function_\">StrToTimeStamp</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Timestamp</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   timestamp = Timestamp.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转BigDecimal</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">StrTiBigdecimal</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   bigDecimal = <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bigDecimal;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// [end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode一维数组的动态和","date":"2021-03-31T01:47:34.000Z","_content":"\n## 一维数组的动态和\n\n### 题目描述\n\n给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]...nums[i])。\n请返回 nums 的动态和。\n\n示例 1：\n\n```Text\n  输入：nums = [1,2,3,4]\n  输出：[1,3,6,10]\n  解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]\n```\n\n示例 2：\n\n```Text\n  输入：nums = [1,1,1,1,1]\n  输出：[1,2,3,4,5]\n  解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]\n```\n\n示例 3：\n\n```Text\n  输入：nums = [3,1,2,10,1]\n  输出：[3,4,5,16,17]\n  解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月31日10:07:10\n */\npublic class RunningSum {\n    /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSum(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return null;\n        }\n        int[] result = new int[numsLen];\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j <= i; j++) {\n                result[i] += nums[j];\n            }\n        }\n        return result;\n    }\n}\n```\n\n### 他山之石（Java）\n\n```Java\n /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumTwo(int[] nums){\n        for( int i = 1 ; i < nums.length ; i++ ){\n            nums[i] += nums[i-1];\n        }\n        return nums;\n    }\n```\n\n```Java\n/**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumThree(int[] nums) {\n        int numsLen = nums.length;\n        int[] result = new int[numsLen];\n        result[0] = nums[0];\n        for (int i = 1; i < numsLen; i++) {\n            result[i] = result[i - 1] + nums[i];\n        }\n        return result;\n    }\n```\n\n#### 效率分析(Java)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：1820300ns\n方法二用时：8600ns\n方法三用时：11300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef running_sum(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    result = [0 for i in range(nums_len)]\n    for i in range(nums_len):\n        for j in range(i + 1):\n            result[i] += nums[j]\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef running_sum_two(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    res = [nums[0]]\n    for i in range(1, nums_len):\n        total = res[i - 1] + nums[i]\n        res.append(total)\n    return res\n```\n\n#### 效率分析(Python)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：15700ns\n方法二用时：6500ns\n```\n","source":"_posts/LeetCode一维数组的动态和.md","raw":"---\ntitle: LeetCode一维数组的动态和\ndate: 2021-03-31 09:47:34\ntags:\n  - LeetCode\n  - 数组\ncategories:\n  - 后端\n  - 算法\n---\n\n## 一维数组的动态和\n\n### 题目描述\n\n给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]...nums[i])。\n请返回 nums 的动态和。\n\n示例 1：\n\n```Text\n  输入：nums = [1,2,3,4]\n  输出：[1,3,6,10]\n  解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]\n```\n\n示例 2：\n\n```Text\n  输入：nums = [1,1,1,1,1]\n  输出：[1,2,3,4,5]\n  解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]\n```\n\n示例 3：\n\n```Text\n  输入：nums = [3,1,2,10,1]\n  输出：[3,4,5,16,17]\n  解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月31日10:07:10\n */\npublic class RunningSum {\n    /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSum(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return null;\n        }\n        int[] result = new int[numsLen];\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j <= i; j++) {\n                result[i] += nums[j];\n            }\n        }\n        return result;\n    }\n}\n```\n\n### 他山之石（Java）\n\n```Java\n /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumTwo(int[] nums){\n        for( int i = 1 ; i < nums.length ; i++ ){\n            nums[i] += nums[i-1];\n        }\n        return nums;\n    }\n```\n\n```Java\n/**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumThree(int[] nums) {\n        int numsLen = nums.length;\n        int[] result = new int[numsLen];\n        result[0] = nums[0];\n        for (int i = 1; i < numsLen; i++) {\n            result[i] = result[i - 1] + nums[i];\n        }\n        return result;\n    }\n```\n\n#### 效率分析(Java)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：1820300ns\n方法二用时：8600ns\n方法三用时：11300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef running_sum(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    result = [0 for i in range(nums_len)]\n    for i in range(nums_len):\n        for j in range(i + 1):\n            result[i] += nums[j]\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef running_sum_two(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    res = [nums[0]]\n    for i in range(1, nums_len):\n        total = res[i - 1] + nums[i]\n        res.append(total)\n    return res\n```\n\n#### 效率分析(Python)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：15700ns\n方法二用时：6500ns\n```\n","slug":"LeetCode一维数组的动态和","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bja000oscacfl837uca","content":"<h2 id=\"一维数组的动态和\"><a href=\"#一维数组的动态和\" class=\"headerlink\" title=\"一维数组的动态和\"></a>一维数组的动态和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i])。<br>请返回 nums 的动态和。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：[1,3,6,10]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1,1,1]</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,1,2,10,1]</span><br><span class=\"line\">输出：[3,4,5,16,17]</span><br><span class=\"line\">解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月31日10:07:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunningSum</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSum(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                result[i] += nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">    * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumTwo(<span class=\"type\">int</span>[] nums)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; nums.length ; i++ )&#123;</span><br><span class=\"line\">           nums[i] += nums[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumThree(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        result[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            result[i] = result[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Java\"><a href=\"#效率分析-Java\" class=\"headerlink\" title=\"效率分析(Java)\"></a>效率分析(Java)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：1820300ns</span><br><span class=\"line\">方法二用时：8600ns</span><br><span class=\"line\">方法三用时：11300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    result = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            result[i] += nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [nums[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        total = res[i - <span class=\"number\">1</span>] + nums[i]</span><br><span class=\"line\">        res.append(total)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Python\"><a href=\"#效率分析-Python\" class=\"headerlink\" title=\"效率分析(Python)\"></a>效率分析(Python)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：15700ns</span><br><span class=\"line\">方法二用时：6500ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一维数组的动态和\"><a href=\"#一维数组的动态和\" class=\"headerlink\" title=\"一维数组的动态和\"></a>一维数组的动态和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i])。<br>请返回 nums 的动态和。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：[1,3,6,10]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1,1,1]</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,1,2,10,1]</span><br><span class=\"line\">输出：[3,4,5,16,17]</span><br><span class=\"line\">解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月31日10:07:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunningSum</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSum(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                result[i] += nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">    * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumTwo(<span class=\"type\">int</span>[] nums)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; nums.length ; i++ )&#123;</span><br><span class=\"line\">           nums[i] += nums[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumThree(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        result[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            result[i] = result[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Java\"><a href=\"#效率分析-Java\" class=\"headerlink\" title=\"效率分析(Java)\"></a>效率分析(Java)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：1820300ns</span><br><span class=\"line\">方法二用时：8600ns</span><br><span class=\"line\">方法三用时：11300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    result = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            result[i] += nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [nums[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        total = res[i - <span class=\"number\">1</span>] + nums[i]</span><br><span class=\"line\">        res.append(total)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Python\"><a href=\"#效率分析-Python\" class=\"headerlink\" title=\"效率分析(Python)\"></a>效率分析(Python)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：15700ns</span><br><span class=\"line\">方法二用时：6500ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode两数之和","date":"2021-03-23T06:09:47.000Z","_content":"\n## LeetCode 两数之和\n\n### 题目描述\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n示例：\n\n```Text\n给定nums = [2,7,11,15],target=9\n因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]\n```\n\n### Java 解法\n\n```Java\nimport java.util.HashMap;\n\n/**\n * @author zhkai\n * @date 2021年3月23日14:27:28\n */\npublic class TwoNumSum {\n    private final static int NUM_NUMS = 2;\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSum(int[] nums, int target) {\n        int len = nums.length;\n        if (len < NUM_NUMS) {\n            return new int[0];\n        }\n        int[] result = new int[2];\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (nums[i] + nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSumMap(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>(16);\n        int len = nums.length;\n        for (int i = 0; i < len; i++) {\n            if (map.containsKey(target - nums[i])) {\n                return new int[]{map.get(target - nums[i]), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n\n```\n\n#### Java解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：5074400ns\n方法二：264300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef two_sum_dict(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n   :param nums: 整数数组\n   :param target: 目标值\n   :return: 数组中和为目标值的两个整数的数组下标\n   \"\"\"\n    dict_item = dict()\n    for i, num in enumerate(nums):\n        if target - num in dict_item:\n            return [dict_item[target - num], i]\n    return []\n\n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n    :param nums: 整数数组\n    :param target: 目标值\n    :return: 数组中和为目标值的两个整数的数组下标\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\n```\n\n#### Python解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：10200ns\n方法二：6800ns\n```\n","source":"_posts/LeetCode两数之和.md","raw":"---\ntitle: LeetCode两数之和\ndate: 2021-03-23 14:09:47\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 两数之和\n\n### 题目描述\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n示例：\n\n```Text\n给定nums = [2,7,11,15],target=9\n因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]\n```\n\n### Java 解法\n\n```Java\nimport java.util.HashMap;\n\n/**\n * @author zhkai\n * @date 2021年3月23日14:27:28\n */\npublic class TwoNumSum {\n    private final static int NUM_NUMS = 2;\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSum(int[] nums, int target) {\n        int len = nums.length;\n        if (len < NUM_NUMS) {\n            return new int[0];\n        }\n        int[] result = new int[2];\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (nums[i] + nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSumMap(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>(16);\n        int len = nums.length;\n        for (int i = 0; i < len; i++) {\n            if (map.containsKey(target - nums[i])) {\n                return new int[]{map.get(target - nums[i]), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n\n```\n\n#### Java解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：5074400ns\n方法二：264300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef two_sum_dict(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n   :param nums: 整数数组\n   :param target: 目标值\n   :return: 数组中和为目标值的两个整数的数组下标\n   \"\"\"\n    dict_item = dict()\n    for i, num in enumerate(nums):\n        if target - num in dict_item:\n            return [dict_item[target - num], i]\n    return []\n\n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n    :param nums: 整数数组\n    :param target: 目标值\n    :return: 数组中和为目标值的两个整数的数组下标\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\n```\n\n#### Python解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：10200ns\n方法二：6800ns\n```\n","slug":"LeetCode两数之和","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjc000rscac7tkqasrz","content":"<h2 id=\"LeetCode-两数之和\"><a href=\"#LeetCode-两数之和\" class=\"headerlink\" title=\"LeetCode 两数之和\"></a>LeetCode 两数之和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定nums = [2,7,11,15],target=9</span><br><span class=\"line\">因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月23日14:27:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoNumSum</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_NUMS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; NUM_NUMS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class=\"line\">                    result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                    result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSumMap(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java解法效率对比\"><a href=\"#Java解法效率对比\" class=\"headerlink\" title=\"Java解法效率对比\"></a>Java解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：5074400ns</span><br><span class=\"line\">方法二：264300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum_dict</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">   :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">   :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   &quot;&quot;&quot;</span></span><br><span class=\"line\">    dict_item = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> dict_item:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [dict_item[target - num], i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python解法效率对比\"><a href=\"#Python解法效率对比\" class=\"headerlink\" title=\"Python解法效率对比\"></a>Python解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：10200ns</span><br><span class=\"line\">方法二：6800ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-两数之和\"><a href=\"#LeetCode-两数之和\" class=\"headerlink\" title=\"LeetCode 两数之和\"></a>LeetCode 两数之和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定nums = [2,7,11,15],target=9</span><br><span class=\"line\">因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月23日14:27:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoNumSum</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_NUMS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; NUM_NUMS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class=\"line\">                    result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                    result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSumMap(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java解法效率对比\"><a href=\"#Java解法效率对比\" class=\"headerlink\" title=\"Java解法效率对比\"></a>Java解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：5074400ns</span><br><span class=\"line\">方法二：264300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum_dict</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">   :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">   :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   &quot;&quot;&quot;</span></span><br><span class=\"line\">    dict_item = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> dict_item:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [dict_item[target - num], i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python解法效率对比\"><a href=\"#Python解法效率对比\" class=\"headerlink\" title=\"Python解法效率对比\"></a>Python解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：10200ns</span><br><span class=\"line\">方法二：6800ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode二维数组中的查找","date":"2021-04-09T02:03:29.000Z","_content":"\n## LeetCode 二维数组中的查找\n\n### 题目描述\n\n在一个 n\\*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。\n\n示例：\n现有矩阵 matrix 如下：\n\n```Text\n[\n  [1,4,7,11,15],\n  [2,5,8,12,19],\n  [3,6,9,16,22],\n  [10,13,14,17,24],\n  [18,21,23,26,30]\n]\n给定target = 5，返回true\n给定target = 20，返回false\n```\n\n### 一得之见（Java/Python）\n\n双循环求解。\n时间复杂度：O(nm)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        for(int i = 0; i < rows; i++){\n            for(int j = 0; j < columns; j++){\n                if(matrix[i][j] == target){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n```\n\n```Python\ndef find_number_in_two_dimen_array(\n        matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n    :param matrix: 二维数组\n    :param target: 整数\n    :return: 二维数组中是否含有该整数\n    \"\"\"\n    if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:\n        return False\n    else:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == target:\n                    return True\n    return False\n```\n\n### 他山之石（Java/Python）\n\n由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。\n\n- 若数组为空，返回 false\n- 初始化行下标为 0，列下标为二维数组的列数减 1\n- 重复下列步骤，知道行下标或者列下标超出边界\n  - 获得当前下标位置的元素 num\n  - 如果 num 和 target 相等，则返回 true\n  - 如果 num 大于 target，列下标减 1\n  - 如果 num 小于 target，行下标加 1\n\n时间复杂度：O(n+m)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArrayTwo(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        int row = 0;\n        int column = columns - 1;\n        while (row < rows && column >= 0) {\n            int num = matrix[row][column];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n                column--;\n            } else {\n                row++;\n            }\n        }\n        return false;\n    }\n```\n\n### 效率对比（Java）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：2201800ns （个人笨比解法😂）\n方法二：8900ns  （线性查找）\n```\n\n### 效率对比（Python）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：11000ns （个人笨比解法😂）\n方法二：5900ns （线性查找）\n```\n","source":"_posts/LeetCode二维数组中的查找.md","raw":"---\ntitle: LeetCode二维数组中的查找\ndate: 2021-04-09 10:03:29\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 二维数组中的查找\n\n### 题目描述\n\n在一个 n\\*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。\n\n示例：\n现有矩阵 matrix 如下：\n\n```Text\n[\n  [1,4,7,11,15],\n  [2,5,8,12,19],\n  [3,6,9,16,22],\n  [10,13,14,17,24],\n  [18,21,23,26,30]\n]\n给定target = 5，返回true\n给定target = 20，返回false\n```\n\n### 一得之见（Java/Python）\n\n双循环求解。\n时间复杂度：O(nm)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        for(int i = 0; i < rows; i++){\n            for(int j = 0; j < columns; j++){\n                if(matrix[i][j] == target){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n```\n\n```Python\ndef find_number_in_two_dimen_array(\n        matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n    :param matrix: 二维数组\n    :param target: 整数\n    :return: 二维数组中是否含有该整数\n    \"\"\"\n    if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:\n        return False\n    else:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == target:\n                    return True\n    return False\n```\n\n### 他山之石（Java/Python）\n\n由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。\n\n- 若数组为空，返回 false\n- 初始化行下标为 0，列下标为二维数组的列数减 1\n- 重复下列步骤，知道行下标或者列下标超出边界\n  - 获得当前下标位置的元素 num\n  - 如果 num 和 target 相等，则返回 true\n  - 如果 num 大于 target，列下标减 1\n  - 如果 num 小于 target，行下标加 1\n\n时间复杂度：O(n+m)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArrayTwo(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        int row = 0;\n        int column = columns - 1;\n        while (row < rows && column >= 0) {\n            int num = matrix[row][column];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n                column--;\n            } else {\n                row++;\n            }\n        }\n        return false;\n    }\n```\n\n### 效率对比（Java）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：2201800ns （个人笨比解法😂）\n方法二：8900ns  （线性查找）\n```\n\n### 效率对比（Python）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：11000ns （个人笨比解法😂）\n方法二：5900ns （线性查找）\n```\n","slug":"LeetCode二维数组中的查找","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjc000uscacbh8r3jlg","content":"<h2 id=\"LeetCode-二维数组中的查找\"><a href=\"#LeetCode-二维数组中的查找\" class=\"headerlink\" title=\"LeetCode 二维数组中的查找\"></a>LeetCode 二维数组中的查找</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个 n*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。</p>\n<p>示例：<br>现有矩阵 matrix 如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,4,7,11,15],</span><br><span class=\"line\">  [2,5,8,12,19],</span><br><span class=\"line\">  [3,6,9,16,22],</span><br><span class=\"line\">  [10,13,14,17,24],</span><br><span class=\"line\">  [18,21,23,26,30]</span><br><span class=\"line\">]</span><br><span class=\"line\">给定target = 5，返回true</span><br><span class=\"line\">给定target = 20，返回false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>双循环求解。<br>时间复杂度：O(nm)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rows; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; columns; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_number_in_two_dimen_array</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"string\">    :param matrix: 二维数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 整数</span></span><br><span class=\"line\"><span class=\"string\">    :return: 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> matrix <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>]) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == target:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。<br>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。<br>可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。</p>\n<ul>\n<li>若数组为空，返回 false</li>\n<li>初始化行下标为 0，列下标为二维数组的列数减 1</li>\n<li>重复下列步骤，知道行下标或者列下标超出边界<ul>\n<li>获得当前下标位置的元素 num</li>\n<li>如果 num 和 target 相等，则返回 true</li>\n<li>如果 num 大于 target，列下标减 1</li>\n<li>如果 num 小于 target，行下标加 1</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n+m)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArrayTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> columns - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row &lt; rows &amp;&amp; column &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target) &#123;</span><br><span class=\"line\">            column--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            row++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：2201800ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：8900ns  （线性查找）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：11000ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：5900ns （线性查找）</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-二维数组中的查找\"><a href=\"#LeetCode-二维数组中的查找\" class=\"headerlink\" title=\"LeetCode 二维数组中的查找\"></a>LeetCode 二维数组中的查找</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个 n*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。</p>\n<p>示例：<br>现有矩阵 matrix 如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,4,7,11,15],</span><br><span class=\"line\">  [2,5,8,12,19],</span><br><span class=\"line\">  [3,6,9,16,22],</span><br><span class=\"line\">  [10,13,14,17,24],</span><br><span class=\"line\">  [18,21,23,26,30]</span><br><span class=\"line\">]</span><br><span class=\"line\">给定target = 5，返回true</span><br><span class=\"line\">给定target = 20，返回false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>双循环求解。<br>时间复杂度：O(nm)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rows; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; columns; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_number_in_two_dimen_array</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"string\">    :param matrix: 二维数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 整数</span></span><br><span class=\"line\"><span class=\"string\">    :return: 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> matrix <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>]) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == target:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。<br>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。<br>可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。</p>\n<ul>\n<li>若数组为空，返回 false</li>\n<li>初始化行下标为 0，列下标为二维数组的列数减 1</li>\n<li>重复下列步骤，知道行下标或者列下标超出边界<ul>\n<li>获得当前下标位置的元素 num</li>\n<li>如果 num 和 target 相等，则返回 true</li>\n<li>如果 num 大于 target，列下标减 1</li>\n<li>如果 num 小于 target，行下标加 1</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n+m)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArrayTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> columns - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row &lt; rows &amp;&amp; column &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target) &#123;</span><br><span class=\"line\">            column--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            row++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：2201800ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：8900ns  （线性查找）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：11000ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：5900ns （线性查找）</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode子矩形查询","date":"2021-04-07T01:28:57.000Z","_content":"\n## LeetCode 子矩形查询\n\n### 题目描述\n\n请你实现一个类`SubrectangleQueries`，它的构造函数的参数是一个`rows * cols`的矩形（这里用整数矩阵表示），并支持以下两种操作：\n\n1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n   - 用 newValue 更新以`(row1,col1)`为左上角且以`(row2,col2)`为右下角的子矩形。\n2. `getValue(int row, int col)`\n   - 返回矩形中坐标`(row,col)`的当前值。\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月7日09:37:05\n */\npublic class SubrectangleQueries {\n    private int[][] rect = null;\n\n    public SubrectangleQueries(int[][] rectangle) {\n        this.rect = rectangle;\n    }\n\n    /**\n     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n     *\n     * @param row1     子矩形左上角行坐标\n     * @param col1     子矩形左上角列坐标\n     * @param row2     子矩形右下角行坐标\n     * @param col2     子矩形右下角列坐标\n     * @param newValue 子矩形新值\n     */\n    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        if (rect != null) {\n            for (int i = row1; i <= row2; i++) {\n                for (int j = col1; j <= col2; j++) {\n                    rect[i][j] = newValue;\n                }\n            }\n        }\n    }\n\n    /**\n     * 返回矩形中坐标(row,col)的当前值。\n     *\n     * @param row 行坐标\n     * @param col 列坐标\n     * @return 当前值\n     */\n    public int getValue(int row, int col) {\n        if (rect != null) {\n            return rect[row][col];\n        }\n        return -1;\n    }\n}\n\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\nclass SubRectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.data = rectangle\n\n    def update_sub_rectangle(\n            self,\n            row1: int,\n            col1: int,\n            row2: int,\n            col2: int,\n            new_value: int):\n        \"\"\"\n        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n        :param self:\n        :param row1: 子矩形左上角行坐标\n        :param col1:子矩形左上角列坐标\n        :param row2:子矩形右下角行坐标\n        :param col2:子矩形右下角列坐标\n        :param new_value:子矩形新值\n        \"\"\"\n        if self.data is not None:\n            for i in range(row1, row2 + 1):\n                for j in range(col1, col2 + 1):\n                    self.data[i][j] = new_value\n\n    def get_value(self, row, col) -> int:\n        \"\"\"\n        回矩形中坐标(row,col)的当前值\n        :param self:\n        :param row: 行坐标\n        :param col: 列坐标\n        :return: 当前值\n        \"\"\"\n        if self.data is not None:\n            return self.data[row][col]\n        else:\n            return -1\n\n```\n","source":"_posts/LeetCode子矩形查询.md","raw":"---\ntitle: LeetCode子矩形查询\ndate: 2021-04-07 09:28:57\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 子矩形查询\n\n### 题目描述\n\n请你实现一个类`SubrectangleQueries`，它的构造函数的参数是一个`rows * cols`的矩形（这里用整数矩阵表示），并支持以下两种操作：\n\n1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n   - 用 newValue 更新以`(row1,col1)`为左上角且以`(row2,col2)`为右下角的子矩形。\n2. `getValue(int row, int col)`\n   - 返回矩形中坐标`(row,col)`的当前值。\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月7日09:37:05\n */\npublic class SubrectangleQueries {\n    private int[][] rect = null;\n\n    public SubrectangleQueries(int[][] rectangle) {\n        this.rect = rectangle;\n    }\n\n    /**\n     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n     *\n     * @param row1     子矩形左上角行坐标\n     * @param col1     子矩形左上角列坐标\n     * @param row2     子矩形右下角行坐标\n     * @param col2     子矩形右下角列坐标\n     * @param newValue 子矩形新值\n     */\n    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        if (rect != null) {\n            for (int i = row1; i <= row2; i++) {\n                for (int j = col1; j <= col2; j++) {\n                    rect[i][j] = newValue;\n                }\n            }\n        }\n    }\n\n    /**\n     * 返回矩形中坐标(row,col)的当前值。\n     *\n     * @param row 行坐标\n     * @param col 列坐标\n     * @return 当前值\n     */\n    public int getValue(int row, int col) {\n        if (rect != null) {\n            return rect[row][col];\n        }\n        return -1;\n    }\n}\n\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\nclass SubRectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.data = rectangle\n\n    def update_sub_rectangle(\n            self,\n            row1: int,\n            col1: int,\n            row2: int,\n            col2: int,\n            new_value: int):\n        \"\"\"\n        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n        :param self:\n        :param row1: 子矩形左上角行坐标\n        :param col1:子矩形左上角列坐标\n        :param row2:子矩形右下角行坐标\n        :param col2:子矩形右下角列坐标\n        :param new_value:子矩形新值\n        \"\"\"\n        if self.data is not None:\n            for i in range(row1, row2 + 1):\n                for j in range(col1, col2 + 1):\n                    self.data[i][j] = new_value\n\n    def get_value(self, row, col) -> int:\n        \"\"\"\n        回矩形中坐标(row,col)的当前值\n        :param self:\n        :param row: 行坐标\n        :param col: 列坐标\n        :return: 当前值\n        \"\"\"\n        if self.data is not None:\n            return self.data[row][col]\n        else:\n            return -1\n\n```\n","slug":"LeetCode子矩形查询","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjd000zscac99cshg96","content":"<h2 id=\"LeetCode-子矩形查询\"><a href=\"#LeetCode-子矩形查询\" class=\"headerlink\" title=\"LeetCode 子矩形查询\"></a>LeetCode 子矩形查询</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请你实现一个类<code>SubrectangleQueries</code>，它的构造函数的参数是一个<code>rows * cols</code>的矩形（这里用整数矩阵表示），并支持以下两种操作：</p>\n<ol>\n<li><code>updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code><ul>\n<li>用 newValue 更新以<code>(row1,col1)</code>为左上角且以<code>(row2,col2)</code>为右下角的子矩形。</li>\n</ul>\n</li>\n<li><code>getValue(int row, int col)</code><ul>\n<li>返回矩形中坐标<code>(row,col)</code>的当前值。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月7日09:37:05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubrectangleQueries</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[][] rect = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SubrectangleQueries</span><span class=\"params\">(<span class=\"type\">int</span>[][] rectangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rect = rectangle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row1     子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col1     子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row2     子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col2     子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue 子矩形新值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSubrectangle</span><span class=\"params\">(<span class=\"type\">int</span> row1, <span class=\"type\">int</span> col1, <span class=\"type\">int</span> row2, <span class=\"type\">int</span> col2, <span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> row1; i &lt;= row2; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> col1; j &lt;= col2; j++) &#123;</span><br><span class=\"line\">                    rect[i][j] = newValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回矩形中坐标(row,col)的当前值。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row 行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col 列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rect[row][col];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubRectangleQueries</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rectangle: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>):</span><br><span class=\"line\">        self.data = rectangle</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_sub_rectangle</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">            self,</span></span><br><span class=\"line\"><span class=\"params\">            row1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            row2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            new_value: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row1: 子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col1:子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param row2:子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col2:子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param new_value:子矩形新值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(row1, row2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(col1, col2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    self.data[i][j] = new_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_value</span>(<span class=\"params\">self, row, col</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回矩形中坐标(row,col)的当前值</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row: 行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col: 列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :return: 当前值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.data[row][col]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-子矩形查询\"><a href=\"#LeetCode-子矩形查询\" class=\"headerlink\" title=\"LeetCode 子矩形查询\"></a>LeetCode 子矩形查询</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请你实现一个类<code>SubrectangleQueries</code>，它的构造函数的参数是一个<code>rows * cols</code>的矩形（这里用整数矩阵表示），并支持以下两种操作：</p>\n<ol>\n<li><code>updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code><ul>\n<li>用 newValue 更新以<code>(row1,col1)</code>为左上角且以<code>(row2,col2)</code>为右下角的子矩形。</li>\n</ul>\n</li>\n<li><code>getValue(int row, int col)</code><ul>\n<li>返回矩形中坐标<code>(row,col)</code>的当前值。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月7日09:37:05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubrectangleQueries</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[][] rect = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SubrectangleQueries</span><span class=\"params\">(<span class=\"type\">int</span>[][] rectangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rect = rectangle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row1     子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col1     子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row2     子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col2     子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue 子矩形新值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSubrectangle</span><span class=\"params\">(<span class=\"type\">int</span> row1, <span class=\"type\">int</span> col1, <span class=\"type\">int</span> row2, <span class=\"type\">int</span> col2, <span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> row1; i &lt;= row2; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> col1; j &lt;= col2; j++) &#123;</span><br><span class=\"line\">                    rect[i][j] = newValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回矩形中坐标(row,col)的当前值。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row 行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col 列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rect[row][col];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubRectangleQueries</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rectangle: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>):</span><br><span class=\"line\">        self.data = rectangle</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_sub_rectangle</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">            self,</span></span><br><span class=\"line\"><span class=\"params\">            row1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            row2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            new_value: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row1: 子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col1:子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param row2:子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col2:子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param new_value:子矩形新值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(row1, row2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(col1, col2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    self.data[i][j] = new_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_value</span>(<span class=\"params\">self, row, col</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回矩形中坐标(row,col)的当前值</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row: 行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col: 列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :return: 当前值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.data[row][col]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode数组中重复的数字","date":"2021-04-08T02:07:10.000Z","_content":"\n## LeetCode 数组中重复的数字\n\n### 题目描述\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n示例 1：\n\n```Text\n输入：[2,3,1,0,2,5,3]\n输出：2或3\n```\n\n### 一得之见（Java/Python）\n\n使用双循环，index 不等且 value 相等时，即重复。\n时间复杂度 O(n²)，空间复杂度 O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumber(int[] nums) {\n        int result = -1;\n        int numsLen = nums.length;\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j < numsLen; j++) {\n                if (i != j && nums[i] == nums[j]) {\n                    result = nums[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n```\n\n```Python\ndef find_repeat_number(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        for j in range(nums_len):\n            if i != j and nums[i] == nums[j]:\n                return nums[i]\n\n    return -1\n```\n\n### 他山之石（Java/Python）\n\n#### 使用集合 Set\n\n把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberTwo(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int repeat = -1;\n        for (int num : nums) {\n            if (!set.add(num)) {\n                repeat = num;\n                break;\n            }\n        }\n        return repeat;\n    }\n```\n\n```Python\ndef find_repeat_number_two(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    temp = set()\n    for num in nums:\n        if num not in temp:\n            temp.add(num)\n        else:\n            return num\n    return -1\n```\n\n#### 先排序再查找\n\n先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFour(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i - 1]) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_three(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums.sort()\n    nums_len = len(nums)\n    for i in range(1, nums_len):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1\n```\n\n#### 使用临时数组\n\n这道题有个很明显的特点，就是数字的大小在 0~n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0~n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFive(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for (int i = 0; i < length; i++) {\n            temp[nums[i]]++;\n            if (temp[nums[i]] > 1) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_four(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    temp = [0 for i in range(nums_len)]\n    for num in nums:\n        temp[num] += 1\n        if temp[num] > 1:\n            return num\n    return -1\n```\n\n#### 原地置换\n\n如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberThree(int[] nums) {\n        int temp;\n        for (int i = 0; i < nums.length; i++) {\n            while (nums[i] != i) {\n                if (nums[i] == nums[nums[i]]) {\n                    return nums[i];\n                }\n                temp = nums[i];\n                nums[i] = nums[temp];\n                nums[temp] = temp;\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_five(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        if nums[i] != i:\n            if nums[i] == nums[nums[i]]:\n                return nums[i]\n            else:\n                temp = nums[i]\n                nums[i] = nums[temp]\n                nums[temp] = temp\n    return -1\n```\n\n#### 效率对比（Java）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：1990900ns （个人笨比解法😂）\n方法二：238000ns  （使用集合Set）\n方法三：12600ns   （先排序再查找🤗）\n方法四：589800ns  （使用临时数组）\n方法五：17600ns   （原地置换）\n```\n\n#### 效率对比（Python）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：6600ns （个人笨比解法 😂）\n方法二：4500ns （使用集合 Set）\n方法三：8100ns （先排序再查找 🤗）\n方法四：28300ns （使用临时数组）\n方法五：6600ns （原地置换）\n```\n","source":"_posts/LeetCode数组中重复的数字.md","raw":"---\ntitle: LeetCode数组中重复的数字\ndate: 2021-04-08 10:07:10\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 数组中重复的数字\n\n### 题目描述\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n示例 1：\n\n```Text\n输入：[2,3,1,0,2,5,3]\n输出：2或3\n```\n\n### 一得之见（Java/Python）\n\n使用双循环，index 不等且 value 相等时，即重复。\n时间复杂度 O(n²)，空间复杂度 O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumber(int[] nums) {\n        int result = -1;\n        int numsLen = nums.length;\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j < numsLen; j++) {\n                if (i != j && nums[i] == nums[j]) {\n                    result = nums[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n```\n\n```Python\ndef find_repeat_number(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        for j in range(nums_len):\n            if i != j and nums[i] == nums[j]:\n                return nums[i]\n\n    return -1\n```\n\n### 他山之石（Java/Python）\n\n#### 使用集合 Set\n\n把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberTwo(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int repeat = -1;\n        for (int num : nums) {\n            if (!set.add(num)) {\n                repeat = num;\n                break;\n            }\n        }\n        return repeat;\n    }\n```\n\n```Python\ndef find_repeat_number_two(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    temp = set()\n    for num in nums:\n        if num not in temp:\n            temp.add(num)\n        else:\n            return num\n    return -1\n```\n\n#### 先排序再查找\n\n先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFour(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i - 1]) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_three(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums.sort()\n    nums_len = len(nums)\n    for i in range(1, nums_len):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1\n```\n\n#### 使用临时数组\n\n这道题有个很明显的特点，就是数字的大小在 0~n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0~n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFive(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for (int i = 0; i < length; i++) {\n            temp[nums[i]]++;\n            if (temp[nums[i]] > 1) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_four(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    temp = [0 for i in range(nums_len)]\n    for num in nums:\n        temp[num] += 1\n        if temp[num] > 1:\n            return num\n    return -1\n```\n\n#### 原地置换\n\n如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberThree(int[] nums) {\n        int temp;\n        for (int i = 0; i < nums.length; i++) {\n            while (nums[i] != i) {\n                if (nums[i] == nums[nums[i]]) {\n                    return nums[i];\n                }\n                temp = nums[i];\n                nums[i] = nums[temp];\n                nums[temp] = temp;\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_five(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        if nums[i] != i:\n            if nums[i] == nums[nums[i]]:\n                return nums[i]\n            else:\n                temp = nums[i]\n                nums[i] = nums[temp]\n                nums[temp] = temp\n    return -1\n```\n\n#### 效率对比（Java）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：1990900ns （个人笨比解法😂）\n方法二：238000ns  （使用集合Set）\n方法三：12600ns   （先排序再查找🤗）\n方法四：589800ns  （使用临时数组）\n方法五：17600ns   （原地置换）\n```\n\n#### 效率对比（Python）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：6600ns （个人笨比解法 😂）\n方法二：4500ns （使用集合 Set）\n方法三：8100ns （先排序再查找 🤗）\n方法四：28300ns （使用临时数组）\n方法五：6600ns （原地置换）\n```\n","slug":"LeetCode数组中重复的数字","published":1,"updated":"2022-10-27T06:40:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bje0012scac1qhp9z79","content":"<h2 id=\"LeetCode-数组中重复的数字\"><a href=\"#LeetCode-数组中重复的数字\" class=\"headerlink\" title=\"LeetCode 数组中重复的数字\"></a>LeetCode 数组中重复的数字</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,3,1,0,2,5,3]</span><br><span class=\"line\">输出：2或3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用双循环，index 不等且 value 相等时，即重复。<br>时间复杂度 O(n²)，空间复杂度 O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; numsLen; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != j &amp;&amp; nums[i] == nums[j]) &#123;</span><br><span class=\"line\">                result = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != j <span class=\"keyword\">and</span> nums[i] == nums[j]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><h4 id=\"使用集合-Set\"><a href=\"#使用集合-Set\" class=\"headerlink\" title=\"使用集合 Set\"></a>使用集合 Set</h4><p>把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">repeat</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!set.add(num)) &#123;</span><br><span class=\"line\">            repeat = num;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    temp = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> temp:</span><br><span class=\"line\">            temp.add(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"先排序再查找\"><a href=\"#先排序再查找\" class=\"headerlink\" title=\"先排序再查找\"></a>先排序再查找</h4><p>先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFour</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_three</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums.sort()</span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == nums[i - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用临时数组\"><a href=\"#使用临时数组\" class=\"headerlink\" title=\"使用临时数组\"></a>使用临时数组</h4><p>这道题有个很明显的特点，就是数字的大小在 0<del>n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0</del>n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        temp[nums[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[nums[i]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_four</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    temp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        temp[num] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp[num] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原地置换\"><a href=\"#原地置换\" class=\"headerlink\" title=\"原地置换\"></a>原地置换</h4><p>如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberThree</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[i] != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = nums[i];</span><br><span class=\"line\">            nums[i] = nums[temp];</span><br><span class=\"line\">            nums[temp] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_five</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == nums[nums[i]]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                temp = nums[i]</span><br><span class=\"line\">                nums[i] = nums[temp]</span><br><span class=\"line\">                nums[temp] = temp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：1990900ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：238000ns  （使用集合Set）</span><br><span class=\"line\">方法三：12600ns   （先排序再查找🤗）</span><br><span class=\"line\">方法四：589800ns  （使用临时数组）</span><br><span class=\"line\">方法五：17600ns   （原地置换）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：6600ns （个人笨比解法 😂）</span><br><span class=\"line\">方法二：4500ns （使用集合 Set）</span><br><span class=\"line\">方法三：8100ns （先排序再查找 🤗）</span><br><span class=\"line\">方法四：28300ns （使用临时数组）</span><br><span class=\"line\">方法五：6600ns （原地置换）</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-数组中重复的数字\"><a href=\"#LeetCode-数组中重复的数字\" class=\"headerlink\" title=\"LeetCode 数组中重复的数字\"></a>LeetCode 数组中重复的数字</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,3,1,0,2,5,3]</span><br><span class=\"line\">输出：2或3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用双循环，index 不等且 value 相等时，即重复。<br>时间复杂度 O(n²)，空间复杂度 O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; numsLen; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != j &amp;&amp; nums[i] == nums[j]) &#123;</span><br><span class=\"line\">                result = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != j <span class=\"keyword\">and</span> nums[i] == nums[j]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><h4 id=\"使用集合-Set\"><a href=\"#使用集合-Set\" class=\"headerlink\" title=\"使用集合 Set\"></a>使用集合 Set</h4><p>把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">repeat</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!set.add(num)) &#123;</span><br><span class=\"line\">            repeat = num;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    temp = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> temp:</span><br><span class=\"line\">            temp.add(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"先排序再查找\"><a href=\"#先排序再查找\" class=\"headerlink\" title=\"先排序再查找\"></a>先排序再查找</h4><p>先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFour</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_three</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums.sort()</span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == nums[i - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用临时数组\"><a href=\"#使用临时数组\" class=\"headerlink\" title=\"使用临时数组\"></a>使用临时数组</h4><p>这道题有个很明显的特点，就是数字的大小在 0<del>n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0</del>n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        temp[nums[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[nums[i]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_four</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    temp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        temp[num] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp[num] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原地置换\"><a href=\"#原地置换\" class=\"headerlink\" title=\"原地置换\"></a>原地置换</h4><p>如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberThree</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[i] != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = nums[i];</span><br><span class=\"line\">            nums[i] = nums[temp];</span><br><span class=\"line\">            nums[temp] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_five</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == nums[nums[i]]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                temp = nums[i]</span><br><span class=\"line\">                nums[i] = nums[temp]</span><br><span class=\"line\">                nums[temp] = temp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：1990900ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：238000ns  （使用集合Set）</span><br><span class=\"line\">方法三：12600ns   （先排序再查找🤗）</span><br><span class=\"line\">方法四：589800ns  （使用临时数组）</span><br><span class=\"line\">方法五：17600ns   （原地置换）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：6600ns （个人笨比解法 😂）</span><br><span class=\"line\">方法二：4500ns （使用集合 Set）</span><br><span class=\"line\">方法三：8100ns （先排序再查找 🤗）</span><br><span class=\"line\">方法四：28300ns （使用临时数组）</span><br><span class=\"line\">方法五：6600ns （原地置换）</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode替换空格","date":"2021-04-13T05:11:11.000Z","_content":"\n## LeetCode 替换空格\n\n### 题目描述\n\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。\n\n实例 1：\n\n```Text\n输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\"\n```\n\n### 一得之见（Java/Python）\n\n使用 Java 的 replaceAll()方法，直接进行替换\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpace(String s) {\n        return s.replaceAll(\" \", \"%20\");\n    }\n```\n\n使用 Python 的 replace()方法，直接进行替换\n\n```Python\ndef replace_space(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    return s.replace(\" \", \"%20\")\n```\n\n### 他山之石（Java/Python）\n\n由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。\n\n- 获得 s 的长度 length\n- 创建字符数组 array，其长度为 length\\*3\n- 初始化 size 为 0，size 表示替换后的字符串的长度\n- 从左到右遍历字符串 s\n  - 获得 s 的当前字符 c\n  - 如果字符 c 是空格，则令`array[size] = '%'`，`array[size + 1] = '2'`，`array[size + 2] = '0'`，并将 size 的值加 3\n  - 如果字符 c 不是空格，则令`array[size] = c`，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpaceTwo(String s) {\n        int sLen = s.length();\n        char[] sArray = new char[sLen * 3];\n        int size = 0;\n        for (int i = 0; i < sLen; i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                sArray[size++] = '%';\n                sArray[size++] = '2';\n                sArray[size++] = '0';\n            } else {\n                sArray[size++] = c;\n            }\n        }\n        String newStr = new String(sArray, 0, size);\n        return newStr;\n    }\n```\n\n- 初始化一个 list，记为 res\n- 遍历列表 s 的每个字符 c：\n  - 当 c 为空格时：向 res 后添加字符串\"%20\"\n  - 当 c 不为空格时：向 res 后添加字符串 c\n- 将列表 s 转换为字符串并返回。\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Python\ndef replace_space_two(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    res = []\n    for c in s:\n        if c == ' ':\n            res.append(\"%20\")\n        else:\n            res.append(c)\n    return \"\".join(res)\n```\n\n### 效率对比（Java）\n\n```Text\n输入：\"We are happy\"\n方法一：3575700ns\n方法二：338300ns\n```\n\n### 效率对比（Python）\n\n```Text\n输入：\"We are happy\"\n方法一：3300ns\n方法二：7600ns\n```\n","source":"_posts/LeetCode替换空格.md","raw":"---\ntitle: LeetCode替换空格\ndate: 2021-04-13 13:11:11\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 替换空格\n\n### 题目描述\n\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。\n\n实例 1：\n\n```Text\n输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\"\n```\n\n### 一得之见（Java/Python）\n\n使用 Java 的 replaceAll()方法，直接进行替换\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpace(String s) {\n        return s.replaceAll(\" \", \"%20\");\n    }\n```\n\n使用 Python 的 replace()方法，直接进行替换\n\n```Python\ndef replace_space(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    return s.replace(\" \", \"%20\")\n```\n\n### 他山之石（Java/Python）\n\n由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。\n\n- 获得 s 的长度 length\n- 创建字符数组 array，其长度为 length\\*3\n- 初始化 size 为 0，size 表示替换后的字符串的长度\n- 从左到右遍历字符串 s\n  - 获得 s 的当前字符 c\n  - 如果字符 c 是空格，则令`array[size] = '%'`，`array[size + 1] = '2'`，`array[size + 2] = '0'`，并将 size 的值加 3\n  - 如果字符 c 不是空格，则令`array[size] = c`，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpaceTwo(String s) {\n        int sLen = s.length();\n        char[] sArray = new char[sLen * 3];\n        int size = 0;\n        for (int i = 0; i < sLen; i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                sArray[size++] = '%';\n                sArray[size++] = '2';\n                sArray[size++] = '0';\n            } else {\n                sArray[size++] = c;\n            }\n        }\n        String newStr = new String(sArray, 0, size);\n        return newStr;\n    }\n```\n\n- 初始化一个 list，记为 res\n- 遍历列表 s 的每个字符 c：\n  - 当 c 为空格时：向 res 后添加字符串\"%20\"\n  - 当 c 不为空格时：向 res 后添加字符串 c\n- 将列表 s 转换为字符串并返回。\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Python\ndef replace_space_two(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    res = []\n    for c in s:\n        if c == ' ':\n            res.append(\"%20\")\n        else:\n            res.append(c)\n    return \"\".join(res)\n```\n\n### 效率对比（Java）\n\n```Text\n输入：\"We are happy\"\n方法一：3575700ns\n方法二：338300ns\n```\n\n### 效率对比（Python）\n\n```Text\n输入：\"We are happy\"\n方法一：3300ns\n方法二：7600ns\n```\n","slug":"LeetCode替换空格","published":1,"updated":"2022-10-27T06:40:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bje0013scac5hrrgpec","content":"<h2 id=\"LeetCode-替换空格\"><a href=\"#LeetCode-替换空格\" class=\"headerlink\" title=\"LeetCode 替换空格\"></a>LeetCode 替换空格</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p>\n<p>实例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;We are happy.&quot;</span><br><span class=\"line\">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用 Java 的 replaceAll()方法，直接进行替换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replaceAll(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Python 的 replace()方法，直接进行替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replace(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。</p>\n<ul>\n<li>获得 s 的长度 length</li>\n<li>创建字符数组 array，其长度为 length*3</li>\n<li>初始化 size 为 0，size 表示替换后的字符串的长度</li>\n<li>从左到右遍历字符串 s<ul>\n<li>获得 s 的当前字符 c</li>\n<li>如果字符 c 是空格，则令<code>array[size] = &#39;%&#39;</code>，<code>array[size + 1] = &#39;2&#39;</code>，<code>array[size + 2] = &#39;0&#39;</code>，并将 size 的值加 3</li>\n<li>如果字符 c 不是空格，则令<code>array[size] = c</code>，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpaceTwo</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sLen</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"type\">char</span>[] sArray = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[sLen * <span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; sLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sArray[size++] = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newStr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(sArray, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化一个 list，记为 res</li>\n<li>遍历列表 s 的每个字符 c：<ul>\n<li>当 c 为空格时：向 res 后添加字符串”%20”</li>\n<li>当 c 不为空格时：向 res 后添加字符串 c</li>\n</ul>\n</li>\n<li>将列表 s 转换为字符串并返回。</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space_two</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c == <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">            res.append(<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            res.append(c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3575700ns</span><br><span class=\"line\">方法二：338300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3300ns</span><br><span class=\"line\">方法二：7600ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-替换空格\"><a href=\"#LeetCode-替换空格\" class=\"headerlink\" title=\"LeetCode 替换空格\"></a>LeetCode 替换空格</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p>\n<p>实例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;We are happy.&quot;</span><br><span class=\"line\">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用 Java 的 replaceAll()方法，直接进行替换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replaceAll(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Python 的 replace()方法，直接进行替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replace(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。</p>\n<ul>\n<li>获得 s 的长度 length</li>\n<li>创建字符数组 array，其长度为 length*3</li>\n<li>初始化 size 为 0，size 表示替换后的字符串的长度</li>\n<li>从左到右遍历字符串 s<ul>\n<li>获得 s 的当前字符 c</li>\n<li>如果字符 c 是空格，则令<code>array[size] = &#39;%&#39;</code>，<code>array[size + 1] = &#39;2&#39;</code>，<code>array[size + 2] = &#39;0&#39;</code>，并将 size 的值加 3</li>\n<li>如果字符 c 不是空格，则令<code>array[size] = c</code>，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpaceTwo</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sLen</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"type\">char</span>[] sArray = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[sLen * <span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; sLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sArray[size++] = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newStr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(sArray, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化一个 list，记为 res</li>\n<li>遍历列表 s 的每个字符 c：<ul>\n<li>当 c 为空格时：向 res 后添加字符串”%20”</li>\n<li>当 c 不为空格时：向 res 后添加字符串 c</li>\n</ul>\n</li>\n<li>将列表 s 转换为字符串并返回。</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space_two</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c == <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">            res.append(<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            res.append(c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3575700ns</span><br><span class=\"line\">方法二：338300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3300ns</span><br><span class=\"line\">方法二：7600ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode最富有客户的资产总量","date":"2021-04-06T03:13:37.000Z","_content":"\n## 最富有客户的资产总量\n\n### 题目描述\n\n给你一个 m \\* n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。\n\n示例 1：\n\n```Text\n输入：accounts = [[1,2,3],[3,2,1]]\n输出：6\n解释：\n第1位客户的资产总量 = 1+2+3=6\n第2位客户的资产总量 = 3+2+1=6\n两位客户都是最富有的，资产总量都是6，所以返回6。\n```\n\n示例 2：\n\n```Text\n输入：accounts = [[1,5],[7,3],[3,5]]\n输出：10\n解释：\n第1位客户的资产总量 = 6\n第2位客户的资产总量 = 10\n第3位客户的资产总量 = 8\n第2为客户是最富有的，资产总量是10\n```\n\n示例 3：\n\n```Text\n输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n输出：17\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月6日11:28:27\n */\npublic class MaximumWealth {\n    /**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealth(int[][] accounts) {\n        int accountsLen = accounts.length;\n        int sum = 0;\n        int result = 0;\n        for (int i = 0; i < accountsLen; i++) {\n            for (int j = 0; j < accounts[i].length; j++) {\n                sum += accounts[i][j];\n            }\n            result = Math.max(result, sum);\n            sum = 0;\n        }\n        return result;\n    }\n}\n\n```\n\n### 他山之石（Java）\n\n```Java\n/**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealthTwo(int[][] accounts) {\n        return Arrays.stream(accounts).map(ints -> Arrays.stream(ints).sum()).max(Integer::compareTo).get();\n    }\n```\n\n### 效率分析（Java）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：2241700ns\n方法二：153366300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef max_wealth(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    accounts_len = len(accounts)\n    result = 0\n    for i in range(accounts_len):\n        len_two = len(accounts[i])\n        sum_one = 0\n        for j in range(len_two):\n            sum_one += accounts[i][j]\n            result = max(result, sum_one)\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef max_wealth_two(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    return max(sum(accounts[i]) for i in range(len(accounts)))\n```\n\n### 效率分析（Python）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：13600ns\n方法二：9100ns\n```\n","source":"_posts/LeetCode最富有客户的资产总量.md","raw":"---\ntitle: LeetCode最富有客户的资产总量\ndate: 2021-04-06 11:13:37\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## 最富有客户的资产总量\n\n### 题目描述\n\n给你一个 m \\* n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。\n\n示例 1：\n\n```Text\n输入：accounts = [[1,2,3],[3,2,1]]\n输出：6\n解释：\n第1位客户的资产总量 = 1+2+3=6\n第2位客户的资产总量 = 3+2+1=6\n两位客户都是最富有的，资产总量都是6，所以返回6。\n```\n\n示例 2：\n\n```Text\n输入：accounts = [[1,5],[7,3],[3,5]]\n输出：10\n解释：\n第1位客户的资产总量 = 6\n第2位客户的资产总量 = 10\n第3位客户的资产总量 = 8\n第2为客户是最富有的，资产总量是10\n```\n\n示例 3：\n\n```Text\n输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n输出：17\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月6日11:28:27\n */\npublic class MaximumWealth {\n    /**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealth(int[][] accounts) {\n        int accountsLen = accounts.length;\n        int sum = 0;\n        int result = 0;\n        for (int i = 0; i < accountsLen; i++) {\n            for (int j = 0; j < accounts[i].length; j++) {\n                sum += accounts[i][j];\n            }\n            result = Math.max(result, sum);\n            sum = 0;\n        }\n        return result;\n    }\n}\n\n```\n\n### 他山之石（Java）\n\n```Java\n/**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealthTwo(int[][] accounts) {\n        return Arrays.stream(accounts).map(ints -> Arrays.stream(ints).sum()).max(Integer::compareTo).get();\n    }\n```\n\n### 效率分析（Java）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：2241700ns\n方法二：153366300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef max_wealth(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    accounts_len = len(accounts)\n    result = 0\n    for i in range(accounts_len):\n        len_two = len(accounts[i])\n        sum_one = 0\n        for j in range(len_two):\n            sum_one += accounts[i][j]\n            result = max(result, sum_one)\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef max_wealth_two(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    return max(sum(accounts[i]) for i in range(len(accounts)))\n```\n\n### 效率分析（Python）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：13600ns\n方法二：9100ns\n```\n","slug":"LeetCode最富有客户的资产总量","published":1,"updated":"2022-10-27T06:40:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjf0016scacfxns9b9v","content":"<h2 id=\"最富有客户的资产总量\"><a href=\"#最富有客户的资产总量\" class=\"headerlink\" title=\"最富有客户的资产总量\"></a>最富有客户的资产总量</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。<br>客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,2,3],[3,2,1]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 1+2+3=6</span><br><span class=\"line\">第2位客户的资产总量 = 3+2+1=6</span><br><span class=\"line\">两位客户都是最富有的，资产总量都是6，所以返回6。</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,5],[7,3],[3,5]]</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 6</span><br><span class=\"line\">第2位客户的资产总量 = 10</span><br><span class=\"line\">第3位客户的资产总量 = 8</span><br><span class=\"line\">第2为客户是最富有的，资产总量是10</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]</span><br><span class=\"line\">输出：17</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月6日11:28:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MaximumWealth</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealth</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">accountsLen</span> <span class=\"operator\">=</span> accounts.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; accountsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; accounts[i].length; j++) &#123;</span><br><span class=\"line\">                sum += accounts[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, sum);</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealthTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(accounts).map(ints -&gt; Arrays.stream(ints).sum()).max(Integer::compareTo).get();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Java）\"><a href=\"#效率分析（Java）\" class=\"headerlink\" title=\"效率分析（Java）\"></a>效率分析（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：2241700ns</span><br><span class=\"line\">方法二：153366300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    accounts_len = <span class=\"built_in\">len</span>(accounts)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(accounts_len):</span><br><span class=\"line\">        len_two = <span class=\"built_in\">len</span>(accounts[i])</span><br><span class=\"line\">        sum_one = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(len_two):</span><br><span class=\"line\">            sum_one += accounts[i][j]</span><br><span class=\"line\">            result = <span class=\"built_in\">max</span>(result, sum_one)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth_two</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">sum</span>(accounts[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(accounts)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Python）\"><a href=\"#效率分析（Python）\" class=\"headerlink\" title=\"效率分析（Python）\"></a>效率分析（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：13600ns</span><br><span class=\"line\">方法二：9100ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最富有客户的资产总量\"><a href=\"#最富有客户的资产总量\" class=\"headerlink\" title=\"最富有客户的资产总量\"></a>最富有客户的资产总量</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。<br>客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,2,3],[3,2,1]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 1+2+3=6</span><br><span class=\"line\">第2位客户的资产总量 = 3+2+1=6</span><br><span class=\"line\">两位客户都是最富有的，资产总量都是6，所以返回6。</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,5],[7,3],[3,5]]</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 6</span><br><span class=\"line\">第2位客户的资产总量 = 10</span><br><span class=\"line\">第3位客户的资产总量 = 8</span><br><span class=\"line\">第2为客户是最富有的，资产总量是10</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]</span><br><span class=\"line\">输出：17</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月6日11:28:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MaximumWealth</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealth</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">accountsLen</span> <span class=\"operator\">=</span> accounts.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; accountsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; accounts[i].length; j++) &#123;</span><br><span class=\"line\">                sum += accounts[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, sum);</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealthTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(accounts).map(ints -&gt; Arrays.stream(ints).sum()).max(Integer::compareTo).get();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Java）\"><a href=\"#效率分析（Java）\" class=\"headerlink\" title=\"效率分析（Java）\"></a>效率分析（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：2241700ns</span><br><span class=\"line\">方法二：153366300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    accounts_len = <span class=\"built_in\">len</span>(accounts)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(accounts_len):</span><br><span class=\"line\">        len_two = <span class=\"built_in\">len</span>(accounts[i])</span><br><span class=\"line\">        sum_one = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(len_two):</span><br><span class=\"line\">            sum_one += accounts[i][j]</span><br><span class=\"line\">            result = <span class=\"built_in\">max</span>(result, sum_one)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth_two</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">sum</span>(accounts[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(accounts)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Python）\"><a href=\"#效率分析（Python）\" class=\"headerlink\" title=\"效率分析（Python）\"></a>效率分析（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：13600ns</span><br><span class=\"line\">方法二：9100ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode移除元素","date":"2021-03-25T05:39:46.000Z","_content":"\n## LeetCode 移除元素\n\n### 题目描述\n\n给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例：\n\n```Text\n输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n```\n\n```Text\n输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n```\n\n### Java 解法\n\n```Java\n/**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElement(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (i = 0; i < len; i++) {\n            if (nums[i] == val) {\n                for (int j = i; j < len - 1; j++) {\n                    nums[j] = nums[j + 1];\n                }\n                i--;\n                len--;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElementTwo(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (int j = 0; j < nums.length; j++) {\n            if (nums[j] == val) {\n                continue;\n            }\n            nums[i++] = nums[j];\n        }\n        return i;\n    }\n```\n\n### Java 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：2666500ns\n方法二：15300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef remove_element(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == val:\n            for j in range(n - 1):\n                nums[j] = nums[j + 1]\n            i -= 1\n            n -= 1\n    return i\n\n\ndef remove_element_two(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    i = 0\n    for j in range(n):\n        if nums[j] == val:\n            continue\n        else:\n            nums[i] = nums[j]\n            i += 1\n    return i\n\n```\n\n### Python 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：60700ns\n方法二：36200ns\n```\n","source":"_posts/LeetCode移除元素.md","raw":"---\ntitle: LeetCode移除元素\ndate: 2021-03-25 13:39:46\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 移除元素\n\n### 题目描述\n\n给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例：\n\n```Text\n输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n```\n\n```Text\n输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n```\n\n### Java 解法\n\n```Java\n/**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElement(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (i = 0; i < len; i++) {\n            if (nums[i] == val) {\n                for (int j = i; j < len - 1; j++) {\n                    nums[j] = nums[j + 1];\n                }\n                i--;\n                len--;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElementTwo(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (int j = 0; j < nums.length; j++) {\n            if (nums[j] == val) {\n                continue;\n            }\n            nums[i++] = nums[j];\n        }\n        return i;\n    }\n```\n\n### Java 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：2666500ns\n方法二：15300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef remove_element(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == val:\n            for j in range(n - 1):\n                nums[j] = nums[j + 1]\n            i -= 1\n            n -= 1\n    return i\n\n\ndef remove_element_two(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    i = 0\n    for j in range(n):\n        if nums[j] == val:\n            continue\n        else:\n            nums[i] = nums[j]\n            i += 1\n    return i\n\n```\n\n### Python 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：60700ns\n方法二：36200ns\n```\n","slug":"LeetCode移除元素","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjg0017scac5y541yld","content":"<h2 id=\"LeetCode-移除元素\"><a href=\"#LeetCode-移除元素\" class=\"headerlink\" title=\"LeetCode 移除元素\"></a>LeetCode 移除元素</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,2,3], val = 3</span><br><span class=\"line\">输出：2, nums = [2,2]</span><br><span class=\"line\">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class=\"line\">输出：5, nums = [0,1,4,0,3]</span><br><span class=\"line\">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; len - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                    nums[j] = nums[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                len--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElementTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[i++] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：2666500ns</span><br><span class=\"line\">方法二：15300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == val:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>):</span><br><span class=\"line\">                nums[j] = nums[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] == val:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nums[i] = nums[j]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：60700ns</span><br><span class=\"line\">方法二：36200ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-移除元素\"><a href=\"#LeetCode-移除元素\" class=\"headerlink\" title=\"LeetCode 移除元素\"></a>LeetCode 移除元素</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,2,3], val = 3</span><br><span class=\"line\">输出：2, nums = [2,2]</span><br><span class=\"line\">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class=\"line\">输出：5, nums = [0,1,4,0,3]</span><br><span class=\"line\">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; len - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                    nums[j] = nums[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                len--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElementTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[i++] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：2666500ns</span><br><span class=\"line\">方法二：15300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == val:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>):</span><br><span class=\"line\">                nums[j] = nums[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] == val:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nums[i] = nums[j]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：60700ns</span><br><span class=\"line\">方法二：36200ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode缺失的第一个正数","date":"2021-03-29T03:43:21.000Z","_content":"\n## LeetCode 缺失的第一个正数\n\n### 题目描述\n\n给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。\n\n进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？\n\n示例 1：\n\n```Text\n输入：nums = [1,2,0]\n输出：3\n```\n\n示例 2：\n\n```Text\n输入：nums = [3,4,-1,1]\n输出：2\n```\n\n示例 3：\n\n```Text\n输入：nums = [7,8,9,11,12]\n输出：1\n```\n\n### Java 解法\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月29日13:51:23\n */\npublic class FirstMissingPositive {\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositive(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        int[] res = new int[numsLen + 1];\n        int resLen = res.length;\n        for (int x : nums) {\n            if (x > 0 && x < resLen) {\n                res[x] = x;\n            }\n        }\n        for (int i = 1; i < resLen; i++) {\n            if (i != res[i]) {\n                return i;\n            }\n        }\n        return resLen;\n    }\n\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositiveTwo(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        for (int i = 0; i < numsLen; i++) {\n            while (nums[i] > 0 && nums[i] < numsLen + 1 && nums[i] != i + 1 && nums[i] != nums[nums[i] - 1]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        for (int i = 0; i < numsLen; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        return numsLen + 1;\n    }\n\n    /**\n     * 交换数组元素位置\n     *\n     * @param nums 未排序的整数数组 nums\n     * @param i 需交换元素数组index\n     * @param j 与需交换元素进行交换的数组index\n     */\n    public static void swap(int[] nums, int i, int j) {\n        if (i != j) {\n            nums[j] ^= nums[j];\n            nums[j] ^= nums[i];\n            nums[i] ^= nums[j];\n        }\n    }\n}\n\n```\n\n#### Java 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：2708900ns\n方法二：15400ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef first_missing_positive(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    res = [0 for i in range(n + 1)]\n    for x in nums:\n        if 0 < x < len(res):\n            res[x] = x\n    for i in range(len(res)):\n        if res[i] != i:\n            return i\n    return len(res)\n\n\ndef first_missing_positive_two(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if 0 < nums[i] < n + 1 and nums[1] != i + \\\n                1 and nums[i] != nums[nums[i] - 1]:\n            swap(nums, i, nums[i] - 1)\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n\n\ndef swap(nums: List[int], i: int, j: int):\n    if i != j:\n        nums[i] ^= nums[j]\n        nums[j] ^= nums[i]\n        nums[i] ^= nums[j]\n\n```\n\n#### Python 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：13900ns\n方法二：17100ns\n```\n","source":"_posts/LeetCode缺失的第一个正数.md","raw":"---\ntitle: LeetCode缺失的第一个正数\ndate: 2021-03-29 11:43:21\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 缺失的第一个正数\n\n### 题目描述\n\n给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。\n\n进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？\n\n示例 1：\n\n```Text\n输入：nums = [1,2,0]\n输出：3\n```\n\n示例 2：\n\n```Text\n输入：nums = [3,4,-1,1]\n输出：2\n```\n\n示例 3：\n\n```Text\n输入：nums = [7,8,9,11,12]\n输出：1\n```\n\n### Java 解法\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月29日13:51:23\n */\npublic class FirstMissingPositive {\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositive(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        int[] res = new int[numsLen + 1];\n        int resLen = res.length;\n        for (int x : nums) {\n            if (x > 0 && x < resLen) {\n                res[x] = x;\n            }\n        }\n        for (int i = 1; i < resLen; i++) {\n            if (i != res[i]) {\n                return i;\n            }\n        }\n        return resLen;\n    }\n\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositiveTwo(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        for (int i = 0; i < numsLen; i++) {\n            while (nums[i] > 0 && nums[i] < numsLen + 1 && nums[i] != i + 1 && nums[i] != nums[nums[i] - 1]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        for (int i = 0; i < numsLen; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        return numsLen + 1;\n    }\n\n    /**\n     * 交换数组元素位置\n     *\n     * @param nums 未排序的整数数组 nums\n     * @param i 需交换元素数组index\n     * @param j 与需交换元素进行交换的数组index\n     */\n    public static void swap(int[] nums, int i, int j) {\n        if (i != j) {\n            nums[j] ^= nums[j];\n            nums[j] ^= nums[i];\n            nums[i] ^= nums[j];\n        }\n    }\n}\n\n```\n\n#### Java 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：2708900ns\n方法二：15400ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef first_missing_positive(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    res = [0 for i in range(n + 1)]\n    for x in nums:\n        if 0 < x < len(res):\n            res[x] = x\n    for i in range(len(res)):\n        if res[i] != i:\n            return i\n    return len(res)\n\n\ndef first_missing_positive_two(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if 0 < nums[i] < n + 1 and nums[1] != i + \\\n                1 and nums[i] != nums[nums[i] - 1]:\n            swap(nums, i, nums[i] - 1)\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n\n\ndef swap(nums: List[int], i: int, j: int):\n    if i != j:\n        nums[i] ^= nums[j]\n        nums[j] ^= nums[i]\n        nums[i] ^= nums[j]\n\n```\n\n#### Python 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：13900ns\n方法二：17100ns\n```\n","slug":"LeetCode缺失的第一个正数","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bji001bscaceglo79t7","content":"<h2 id=\"LeetCode-缺失的第一个正数\"><a href=\"#LeetCode-缺失的第一个正数\" class=\"headerlink\" title=\"LeetCode 缺失的第一个正数\"></a>LeetCode 缺失的第一个正数</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。</p>\n<p>进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,0]</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,-1,1]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [7,8,9,11,12]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月29日13:51:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstMissingPositive</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">resLen</span> <span class=\"operator\">=</span> res.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span> &amp;&amp; x &lt; resLen) &#123;</span><br><span class=\"line\">                res[x] = x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; resLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != res[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositiveTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nums[i] &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] &lt; numsLen + <span class=\"number\">1</span> &amp;&amp; nums[i] != i + <span class=\"number\">1</span> &amp;&amp; nums[i] != nums[nums[i] - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(nums, i, nums[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != i + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numsLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组元素位置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i 需交换元素数组index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j 与需交换元素进行交换的数组index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            nums[j] ^= nums[j];</span><br><span class=\"line\">            nums[j] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：2708900ns</span><br><span class=\"line\">方法二：15400ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; x &lt; <span class=\"built_in\">len</span>(res):</span><br><span class=\"line\">            res[x] = x</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(res)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; nums[i] &lt; n + <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[<span class=\"number\">1</span>] != i + \\</span><br><span class=\"line\">                <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[i] != nums[nums[i] - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            swap(nums, i, nums[i] - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i + <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">swap</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], i: <span class=\"built_in\">int</span>, j: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i != j:</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\">        nums[j] ^= nums[i]</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：13900ns</span><br><span class=\"line\">方法二：17100ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-缺失的第一个正数\"><a href=\"#LeetCode-缺失的第一个正数\" class=\"headerlink\" title=\"LeetCode 缺失的第一个正数\"></a>LeetCode 缺失的第一个正数</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。</p>\n<p>进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,0]</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,-1,1]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [7,8,9,11,12]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月29日13:51:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstMissingPositive</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">resLen</span> <span class=\"operator\">=</span> res.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span> &amp;&amp; x &lt; resLen) &#123;</span><br><span class=\"line\">                res[x] = x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; resLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != res[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositiveTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nums[i] &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] &lt; numsLen + <span class=\"number\">1</span> &amp;&amp; nums[i] != i + <span class=\"number\">1</span> &amp;&amp; nums[i] != nums[nums[i] - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(nums, i, nums[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != i + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numsLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组元素位置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i 需交换元素数组index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j 与需交换元素进行交换的数组index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            nums[j] ^= nums[j];</span><br><span class=\"line\">            nums[j] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：2708900ns</span><br><span class=\"line\">方法二：15400ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; x &lt; <span class=\"built_in\">len</span>(res):</span><br><span class=\"line\">            res[x] = x</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(res)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; nums[i] &lt; n + <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[<span class=\"number\">1</span>] != i + \\</span><br><span class=\"line\">                <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[i] != nums[nums[i] - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            swap(nums, i, nums[i] - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i + <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">swap</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], i: <span class=\"built_in\">int</span>, j: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i != j:</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\">        nums[j] ^= nums[i]</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：13900ns</span><br><span class=\"line\">方法二：17100ns</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring Batch学习笔记（一）","date":"2021-03-19T03:09:52.000Z","_content":"\n## Spring Batch 简介\n\nSpring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。\n此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。\n\n## Spring Batch 使用场景\n\n(1)一般的批处理程序\n\n·从数据库，文件或者队列中读取大量数据\n·处理读取到的数据\n·将处理完成的数据保存到文件，数据库\n\n(2)业务场景\n\n·定期提交批处理\n·并发批处理，并行处理 Job\n·分阶段的企业消息驱动处理\n·大规模并行批处理\n·失败后手动或预定重启\n·依赖步骤的顺序处理\n·部分处理，跳过记录\n·整批交易，适用于批量较小或现有存储过程/脚本的情况\n\n## Spring Batch 主要组成部分\n\n·JobRepository，用来注册 job 的容器\n·JobLauncher，用来启动 job 的接口\n·Job，实际执行的任务，包含一个或多个 Step\n·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter\n·ItemReader，用来读取数据的接口\n·ItemProcessor，用来处理数据的接口\n·ItemWriter，用来输出数据的接口\n以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。\n\n## 代码\n\n(1)监听器 JobListener\n\n```java\n @Component\n public class JobListener implements JobExecutionListener{\n  @Override\n  public void beforeJob(JobExecution jobExecution){\n   // Job执行前需要执行的操作\n  }\n\n  @Override\n  public void afterJob(JobExecution jobExecution){\n   // Job执行完成后需要执行的操作\n  }\n }\n```\n\n(2)配置类 DataBatchConfiguration\n\n```java\n @Configuration\n @EnableBatchProcessing\n public class DataBatchConfiguration{\n  // 用于构建Job\n  @Resource\n  private JobBuilderFactory jobBuilderFactory;\n\n  // 用于构建Step\n  @Resource\n  private StepBuilderFactory stepBuilderFactory;\n\n  // 监听器\n  @Resource\n  private JobListener jobListener;\n\n  // ItemReader(使用的其中一种读取方式)\n  @Autowired\n  private RepositoryItemReader readerData;\n\n  // ItemWriter\n  @Autowired\n  private ItemReader writerData;\n\n  // Job\n  @Bean\n  public Job dataHandleJob(){\n   return jobBuilderFactory.get(\"dataHandleJob\").incrementer(new RunIdIncrementer()).start(getDataStep())\n    .listener(jobListener).build();\n  }\n\n  // Step\n  // User:要处理的对象\n  @Bean\n  public Step getTDistSellOut() {\n  return stepBuilderFactory.get(\"getData\").<User, User>chunk(10000) // 一次commit数据的数量\n    .faultTolerant().retryLimit(3)\n    .retry(Exception.class)\n    .skipLimit(100)            // 发生异常时，允许重试的次数\n    .skip(Exception.class)\n    .reader(readerData)              // reader\n    .writer(writerData).build();        // writer\n  }\n }\n```\n\n(3)读取类 ReaderStep\n\n```java\n @Component\n public class ReaderStep{\n  @Resource\n  private EntityManagerFactory emf;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Bean RepositoryItemReader<User> readerData(){\n   // 排序map(读取数据按照ID进行正序排列)\n   Map<String,Sort.Direction> map = new HashMap<>();\n   map.put(\"id\",sort.Direction.ASC);\n   // SQL语句所需参数LIST\n   List<String> params = new ArrayList<>();\n   params.add(\"2019-03-20\");\n   RepositoryItemReader<User> repositoryItemReader = new new RepositoryItemReader<>();\n   // Set Repository\n   repositoryItemReader.setRepository(userRepository);\n   // Set PageSize(没有会报错)\n   repositoryItemReader.setPageSize(5);\n   // Set Repository Method\n   repositoryItemReader.setMethodName(\"findByDateLike\");\n   // Set 参数List\n   repositoryItemReader.setArguments(params);\n   // Set 排序Map\n   repositoryItemReader.setSort(map);\n   return repositoryItemReader;\n  }\n }\n```\n\n(4)写出类 WriterStep\n\n```java\n @Component\n public class WriterStep {\n  @Resource\n  private UserRepository userRepository;\n\n  @Bean\n  public RepositoryItemWriter<User> writerData(){\n   RepositoryItemWriter<User> repositoryItemWriter = new RepositoryItemWriter<>();\n   repositoryItemWriter.setRepository(userRepository);\n   repositoryItemWriter.setMethodName(\"save\");\n   return repositoryItemWriter;\n  }\n }\n```\n\n## 参考网址\n\n<https://www.cnblogs.com/ealenxie/p/9647703.html>\n","source":"_posts/Spring-Batch学习笔记（一）.md","raw":"---\ntitle: Spring Batch学习笔记（一）\ndate: 2021-03-19 11:09:52\ntags: \n\t- Spring Batch\n\t- 批处理\n\ncategories: \n\t[后端,Java]\n\n---\n\n## Spring Batch 简介\n\nSpring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。\n此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。\n\n## Spring Batch 使用场景\n\n(1)一般的批处理程序\n\n·从数据库，文件或者队列中读取大量数据\n·处理读取到的数据\n·将处理完成的数据保存到文件，数据库\n\n(2)业务场景\n\n·定期提交批处理\n·并发批处理，并行处理 Job\n·分阶段的企业消息驱动处理\n·大规模并行批处理\n·失败后手动或预定重启\n·依赖步骤的顺序处理\n·部分处理，跳过记录\n·整批交易，适用于批量较小或现有存储过程/脚本的情况\n\n## Spring Batch 主要组成部分\n\n·JobRepository，用来注册 job 的容器\n·JobLauncher，用来启动 job 的接口\n·Job，实际执行的任务，包含一个或多个 Step\n·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter\n·ItemReader，用来读取数据的接口\n·ItemProcessor，用来处理数据的接口\n·ItemWriter，用来输出数据的接口\n以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。\n\n## 代码\n\n(1)监听器 JobListener\n\n```java\n @Component\n public class JobListener implements JobExecutionListener{\n  @Override\n  public void beforeJob(JobExecution jobExecution){\n   // Job执行前需要执行的操作\n  }\n\n  @Override\n  public void afterJob(JobExecution jobExecution){\n   // Job执行完成后需要执行的操作\n  }\n }\n```\n\n(2)配置类 DataBatchConfiguration\n\n```java\n @Configuration\n @EnableBatchProcessing\n public class DataBatchConfiguration{\n  // 用于构建Job\n  @Resource\n  private JobBuilderFactory jobBuilderFactory;\n\n  // 用于构建Step\n  @Resource\n  private StepBuilderFactory stepBuilderFactory;\n\n  // 监听器\n  @Resource\n  private JobListener jobListener;\n\n  // ItemReader(使用的其中一种读取方式)\n  @Autowired\n  private RepositoryItemReader readerData;\n\n  // ItemWriter\n  @Autowired\n  private ItemReader writerData;\n\n  // Job\n  @Bean\n  public Job dataHandleJob(){\n   return jobBuilderFactory.get(\"dataHandleJob\").incrementer(new RunIdIncrementer()).start(getDataStep())\n    .listener(jobListener).build();\n  }\n\n  // Step\n  // User:要处理的对象\n  @Bean\n  public Step getTDistSellOut() {\n  return stepBuilderFactory.get(\"getData\").<User, User>chunk(10000) // 一次commit数据的数量\n    .faultTolerant().retryLimit(3)\n    .retry(Exception.class)\n    .skipLimit(100)            // 发生异常时，允许重试的次数\n    .skip(Exception.class)\n    .reader(readerData)              // reader\n    .writer(writerData).build();        // writer\n  }\n }\n```\n\n(3)读取类 ReaderStep\n\n```java\n @Component\n public class ReaderStep{\n  @Resource\n  private EntityManagerFactory emf;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Bean RepositoryItemReader<User> readerData(){\n   // 排序map(读取数据按照ID进行正序排列)\n   Map<String,Sort.Direction> map = new HashMap<>();\n   map.put(\"id\",sort.Direction.ASC);\n   // SQL语句所需参数LIST\n   List<String> params = new ArrayList<>();\n   params.add(\"2019-03-20\");\n   RepositoryItemReader<User> repositoryItemReader = new new RepositoryItemReader<>();\n   // Set Repository\n   repositoryItemReader.setRepository(userRepository);\n   // Set PageSize(没有会报错)\n   repositoryItemReader.setPageSize(5);\n   // Set Repository Method\n   repositoryItemReader.setMethodName(\"findByDateLike\");\n   // Set 参数List\n   repositoryItemReader.setArguments(params);\n   // Set 排序Map\n   repositoryItemReader.setSort(map);\n   return repositoryItemReader;\n  }\n }\n```\n\n(4)写出类 WriterStep\n\n```java\n @Component\n public class WriterStep {\n  @Resource\n  private UserRepository userRepository;\n\n  @Bean\n  public RepositoryItemWriter<User> writerData(){\n   RepositoryItemWriter<User> repositoryItemWriter = new RepositoryItemWriter<>();\n   repositoryItemWriter.setRepository(userRepository);\n   repositoryItemWriter.setMethodName(\"save\");\n   return repositoryItemWriter;\n  }\n }\n```\n\n## 参考网址\n\n<https://www.cnblogs.com/ealenxie/p/9647703.html>\n","slug":"Spring-Batch学习笔记（一）","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjj001dscaceiisfxll","content":"<h2 id=\"Spring-Batch-简介\"><a href=\"#Spring-Batch-简介\" class=\"headerlink\" title=\"Spring Batch 简介\"></a>Spring Batch 简介</h2><p>Spring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。<br>此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。</p>\n<h2 id=\"Spring-Batch-使用场景\"><a href=\"#Spring-Batch-使用场景\" class=\"headerlink\" title=\"Spring Batch 使用场景\"></a>Spring Batch 使用场景</h2><p>(1)一般的批处理程序</p>\n<p>·从数据库，文件或者队列中读取大量数据<br>·处理读取到的数据<br>·将处理完成的数据保存到文件，数据库</p>\n<p>(2)业务场景</p>\n<p>·定期提交批处理<br>·并发批处理，并行处理 Job<br>·分阶段的企业消息驱动处理<br>·大规模并行批处理<br>·失败后手动或预定重启<br>·依赖步骤的顺序处理<br>·部分处理，跳过记录<br>·整批交易，适用于批量较小或现有存储过程/脚本的情况</p>\n<h2 id=\"Spring-Batch-主要组成部分\"><a href=\"#Spring-Batch-主要组成部分\" class=\"headerlink\" title=\"Spring Batch 主要组成部分\"></a>Spring Batch 主要组成部分</h2><p>·JobRepository，用来注册 job 的容器<br>·JobLauncher，用来启动 job 的接口<br>·Job，实际执行的任务，包含一个或多个 Step<br>·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter<br>·ItemReader，用来读取数据的接口<br>·ItemProcessor，用来处理数据的接口<br>·ItemWriter，用来输出数据的接口<br>以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>(1)监听器 JobListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JobListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JobExecutionListener</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行前需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行完成后需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)配置类 DataBatchConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableBatchProcessing</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataBatchConfiguration</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Step</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 监听器</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobListener jobListener;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemReader(使用的其中一种读取方式)</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> RepositoryItemReader readerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemWriter</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> ItemReader writerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Job <span class=\"title function_\">dataHandleJob</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> jobBuilderFactory.get(<span class=\"string\">&quot;dataHandleJob&quot;</span>).incrementer(<span class=\"keyword\">new</span> <span class=\"title class_\">RunIdIncrementer</span>()).start(getDataStep())</span><br><span class=\"line\">   .listener(jobListener).build();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Step</span></span><br><span class=\"line\"> <span class=\"comment\">// User:要处理的对象</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Step <span class=\"title function_\">getTDistSellOut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> stepBuilderFactory.get(<span class=\"string\">&quot;getData&quot;</span>).&lt;User, User&gt;chunk(<span class=\"number\">10000</span>) <span class=\"comment\">// 一次commit数据的数量</span></span><br><span class=\"line\">   .faultTolerant().retryLimit(<span class=\"number\">3</span>)</span><br><span class=\"line\">   .retry(Exception.class)</span><br><span class=\"line\">   .skipLimit(<span class=\"number\">100</span>)            <span class=\"comment\">// 发生异常时，允许重试的次数</span></span><br><span class=\"line\">   .skip(Exception.class)</span><br><span class=\"line\">   .reader(readerData)              <span class=\"comment\">// reader</span></span><br><span class=\"line\">   .writer(writerData).build();        <span class=\"comment\">// writer</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)读取类 ReaderStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReaderStep</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> EntityManagerFactory emf;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span> RepositoryItemReader&lt;User&gt; <span class=\"title function_\">readerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 排序map(读取数据按照ID进行正序排列)</span></span><br><span class=\"line\">  Map&lt;String,Sort.Direction&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  map.put(<span class=\"string\">&quot;id&quot;</span>,sort.Direction.ASC);</span><br><span class=\"line\">  <span class=\"comment\">// SQL语句所需参数LIST</span></span><br><span class=\"line\">  List&lt;String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">  params.add(<span class=\"string\">&quot;2019-03-20&quot;</span>);</span><br><span class=\"line\">  RepositoryItemReader&lt;User&gt; repositoryItemReader = <span class=\"keyword\">new</span> <span class=\"title class_\">new</span> RepositoryItemReader&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository</span></span><br><span class=\"line\">  repositoryItemReader.setRepository(userRepository);</span><br><span class=\"line\">  <span class=\"comment\">// Set PageSize(没有会报错)</span></span><br><span class=\"line\">  repositoryItemReader.setPageSize(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository Method</span></span><br><span class=\"line\">  repositoryItemReader.setMethodName(<span class=\"string\">&quot;findByDateLike&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set 参数List</span></span><br><span class=\"line\">  repositoryItemReader.setArguments(params);</span><br><span class=\"line\">  <span class=\"comment\">// Set 排序Map</span></span><br><span class=\"line\">  repositoryItemReader.setSort(map);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemReader;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)写出类 WriterStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriterStep</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> RepositoryItemWriter&lt;User&gt; <span class=\"title function_\">writerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  RepositoryItemWriter&lt;User&gt; repositoryItemWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">RepositoryItemWriter</span>&lt;&gt;();</span><br><span class=\"line\">  repositoryItemWriter.setRepository(userRepository);</span><br><span class=\"line\">  repositoryItemWriter.setMethodName(<span class=\"string\">&quot;save&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemWriter;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考网址\"><a href=\"#参考网址\" class=\"headerlink\" title=\"参考网址\"></a>参考网址</h2><p><a href=\"https://www.cnblogs.com/ealenxie/p/9647703.html\">https://www.cnblogs.com/ealenxie/p/9647703.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-Batch-简介\"><a href=\"#Spring-Batch-简介\" class=\"headerlink\" title=\"Spring Batch 简介\"></a>Spring Batch 简介</h2><p>Spring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。<br>此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。</p>\n<h2 id=\"Spring-Batch-使用场景\"><a href=\"#Spring-Batch-使用场景\" class=\"headerlink\" title=\"Spring Batch 使用场景\"></a>Spring Batch 使用场景</h2><p>(1)一般的批处理程序</p>\n<p>·从数据库，文件或者队列中读取大量数据<br>·处理读取到的数据<br>·将处理完成的数据保存到文件，数据库</p>\n<p>(2)业务场景</p>\n<p>·定期提交批处理<br>·并发批处理，并行处理 Job<br>·分阶段的企业消息驱动处理<br>·大规模并行批处理<br>·失败后手动或预定重启<br>·依赖步骤的顺序处理<br>·部分处理，跳过记录<br>·整批交易，适用于批量较小或现有存储过程/脚本的情况</p>\n<h2 id=\"Spring-Batch-主要组成部分\"><a href=\"#Spring-Batch-主要组成部分\" class=\"headerlink\" title=\"Spring Batch 主要组成部分\"></a>Spring Batch 主要组成部分</h2><p>·JobRepository，用来注册 job 的容器<br>·JobLauncher，用来启动 job 的接口<br>·Job，实际执行的任务，包含一个或多个 Step<br>·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter<br>·ItemReader，用来读取数据的接口<br>·ItemProcessor，用来处理数据的接口<br>·ItemWriter，用来输出数据的接口<br>以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>(1)监听器 JobListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JobListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JobExecutionListener</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行前需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行完成后需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)配置类 DataBatchConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableBatchProcessing</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataBatchConfiguration</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Step</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 监听器</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobListener jobListener;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemReader(使用的其中一种读取方式)</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> RepositoryItemReader readerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemWriter</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> ItemReader writerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Job <span class=\"title function_\">dataHandleJob</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> jobBuilderFactory.get(<span class=\"string\">&quot;dataHandleJob&quot;</span>).incrementer(<span class=\"keyword\">new</span> <span class=\"title class_\">RunIdIncrementer</span>()).start(getDataStep())</span><br><span class=\"line\">   .listener(jobListener).build();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Step</span></span><br><span class=\"line\"> <span class=\"comment\">// User:要处理的对象</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Step <span class=\"title function_\">getTDistSellOut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> stepBuilderFactory.get(<span class=\"string\">&quot;getData&quot;</span>).&lt;User, User&gt;chunk(<span class=\"number\">10000</span>) <span class=\"comment\">// 一次commit数据的数量</span></span><br><span class=\"line\">   .faultTolerant().retryLimit(<span class=\"number\">3</span>)</span><br><span class=\"line\">   .retry(Exception.class)</span><br><span class=\"line\">   .skipLimit(<span class=\"number\">100</span>)            <span class=\"comment\">// 发生异常时，允许重试的次数</span></span><br><span class=\"line\">   .skip(Exception.class)</span><br><span class=\"line\">   .reader(readerData)              <span class=\"comment\">// reader</span></span><br><span class=\"line\">   .writer(writerData).build();        <span class=\"comment\">// writer</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)读取类 ReaderStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReaderStep</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> EntityManagerFactory emf;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span> RepositoryItemReader&lt;User&gt; <span class=\"title function_\">readerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 排序map(读取数据按照ID进行正序排列)</span></span><br><span class=\"line\">  Map&lt;String,Sort.Direction&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  map.put(<span class=\"string\">&quot;id&quot;</span>,sort.Direction.ASC);</span><br><span class=\"line\">  <span class=\"comment\">// SQL语句所需参数LIST</span></span><br><span class=\"line\">  List&lt;String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">  params.add(<span class=\"string\">&quot;2019-03-20&quot;</span>);</span><br><span class=\"line\">  RepositoryItemReader&lt;User&gt; repositoryItemReader = <span class=\"keyword\">new</span> <span class=\"title class_\">new</span> RepositoryItemReader&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository</span></span><br><span class=\"line\">  repositoryItemReader.setRepository(userRepository);</span><br><span class=\"line\">  <span class=\"comment\">// Set PageSize(没有会报错)</span></span><br><span class=\"line\">  repositoryItemReader.setPageSize(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository Method</span></span><br><span class=\"line\">  repositoryItemReader.setMethodName(<span class=\"string\">&quot;findByDateLike&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set 参数List</span></span><br><span class=\"line\">  repositoryItemReader.setArguments(params);</span><br><span class=\"line\">  <span class=\"comment\">// Set 排序Map</span></span><br><span class=\"line\">  repositoryItemReader.setSort(map);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemReader;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)写出类 WriterStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriterStep</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> RepositoryItemWriter&lt;User&gt; <span class=\"title function_\">writerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  RepositoryItemWriter&lt;User&gt; repositoryItemWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">RepositoryItemWriter</span>&lt;&gt;();</span><br><span class=\"line\">  repositoryItemWriter.setRepository(userRepository);</span><br><span class=\"line\">  repositoryItemWriter.setMethodName(<span class=\"string\">&quot;save&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemWriter;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考网址\"><a href=\"#参考网址\" class=\"headerlink\" title=\"参考网址\"></a>参考网址</h2><p><a href=\"https://www.cnblogs.com/ealenxie/p/9647703.html\">https://www.cnblogs.com/ealenxie/p/9647703.html</a></p>\n"},{"title":"Vue学习一","date":"2021-12-07T12:56:41.000Z","_content":"\n## Vue 学习一\n\n### vue 基础\n\n一套用于构建用户界面的渐进式 JavaScript 框架\n渐进式：Vue 可以自底向上逐层的应用\n简单应用：只需要一个轻量小巧的核心库\n复杂应用：可以引入各式各样的 Vue 插件\n特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范\nES6 模块化\n包管理器：npm、yarn\n原型、原型链\n数组常用方法\naxios\npromise\n\n### 教程\n\n#### 初识 Vue\n\n    1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n    2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n    3.root容器里面的代码被称为【Vue模板】；\n    4.Vue实例和容器是一一对应的；\n    5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n    6.{{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n    7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n\njs 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方\n(1) a\n(2) a+b\n(3) demo(1)\njs 代码：\n(1) if(){}\n(2) for(){}\n\n#### 模板语法\n\n```js\n// 创建Vue实例\nnew Vue({\n  el: \"#root\", // el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串\n  data: {\n    // data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。\n    name: \"EDG FANS\",\n  },\n});\n```\n\nVue 模板语法有 2 大类： 1.插值语法：\n功能：用于解析标签体内容。\n写法：{{xxx}}，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法\n功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）\n举例：v-bind:href=\"xxx\"或者简写为 :href=\"xxx\"，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。\n\n#### 数据绑定\n\n     Vue中有两种数据绑定的方式\n        1.单向绑定(v-bind)：数据只能从data流向页面\n        2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n          备注：\n            1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n            2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n","source":"_posts/Vue学习一.md","raw":"---\ntitle: Vue学习一\ndate: 2021-12-07 20:56:41\ntags:\n  - 引入JS\n  - 模板语法\n\ncategories: [前端, Vue]\n---\n\n## Vue 学习一\n\n### vue 基础\n\n一套用于构建用户界面的渐进式 JavaScript 框架\n渐进式：Vue 可以自底向上逐层的应用\n简单应用：只需要一个轻量小巧的核心库\n复杂应用：可以引入各式各样的 Vue 插件\n特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范\nES6 模块化\n包管理器：npm、yarn\n原型、原型链\n数组常用方法\naxios\npromise\n\n### 教程\n\n#### 初识 Vue\n\n    1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n    2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n    3.root容器里面的代码被称为【Vue模板】；\n    4.Vue实例和容器是一一对应的；\n    5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n    6.{{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n    7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n\njs 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方\n(1) a\n(2) a+b\n(3) demo(1)\njs 代码：\n(1) if(){}\n(2) for(){}\n\n#### 模板语法\n\n```js\n// 创建Vue实例\nnew Vue({\n  el: \"#root\", // el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串\n  data: {\n    // data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。\n    name: \"EDG FANS\",\n  },\n});\n```\n\nVue 模板语法有 2 大类： 1.插值语法：\n功能：用于解析标签体内容。\n写法：{{xxx}}，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法\n功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）\n举例：v-bind:href=\"xxx\"或者简写为 :href=\"xxx\"，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。\n\n#### 数据绑定\n\n     Vue中有两种数据绑定的方式\n        1.单向绑定(v-bind)：数据只能从data流向页面\n        2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n          备注：\n            1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n            2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n","slug":"Vue学习一","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjk001iscacdm0p5h6x","content":"<h2 id=\"Vue-学习一\"><a href=\"#Vue-学习一\" class=\"headerlink\" title=\"Vue 学习一\"></a>Vue 学习一</h2><h3 id=\"vue-基础\"><a href=\"#vue-基础\" class=\"headerlink\" title=\"vue 基础\"></a>vue 基础</h3><p>一套用于构建用户界面的渐进式 JavaScript 框架<br>渐进式：Vue 可以自底向上逐层的应用<br>简单应用：只需要一个轻量小巧的核心库<br>复杂应用：可以引入各式各样的 Vue 插件<br>特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范<br>ES6 模块化<br>包管理器：npm、yarn<br>原型、原型链<br>数组常用方法<br>axios<br>promise</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><h4 id=\"初识-Vue\"><a href=\"#初识-Vue\" class=\"headerlink\" title=\"初识 Vue\"></a>初识 Vue</h4><pre><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n3.root容器里面的代码被称为【Vue模板】；\n4.Vue实例和容器是一一对应的；\n5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n</code></pre>\n<p>js 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方<br>(1) a<br>(2) a+b<br>(3) demo(1)<br>js 代码：<br>(1) if(){}<br>(2) for(){}</p>\n<h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#root&quot;</span>, <span class=\"comment\">// el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;EDG FANS&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Vue 模板语法有 2 大类： 1.插值语法：<br>功能：用于解析标签体内容。<br>写法：，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法<br>功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href=”xxx”或者简写为 :href=”xxx”，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。</p>\n<h4 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h4><pre><code> Vue中有两种数据绑定的方式\n    1.单向绑定(v-bind)：数据只能从data流向页面\n    2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n      备注：\n        1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n        2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-学习一\"><a href=\"#Vue-学习一\" class=\"headerlink\" title=\"Vue 学习一\"></a>Vue 学习一</h2><h3 id=\"vue-基础\"><a href=\"#vue-基础\" class=\"headerlink\" title=\"vue 基础\"></a>vue 基础</h3><p>一套用于构建用户界面的渐进式 JavaScript 框架<br>渐进式：Vue 可以自底向上逐层的应用<br>简单应用：只需要一个轻量小巧的核心库<br>复杂应用：可以引入各式各样的 Vue 插件<br>特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范<br>ES6 模块化<br>包管理器：npm、yarn<br>原型、原型链<br>数组常用方法<br>axios<br>promise</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><h4 id=\"初识-Vue\"><a href=\"#初识-Vue\" class=\"headerlink\" title=\"初识 Vue\"></a>初识 Vue</h4><pre><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n3.root容器里面的代码被称为【Vue模板】；\n4.Vue实例和容器是一一对应的；\n5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n</code></pre>\n<p>js 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方<br>(1) a<br>(2) a+b<br>(3) demo(1)<br>js 代码：<br>(1) if(){}<br>(2) for(){}</p>\n<h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#root&quot;</span>, <span class=\"comment\">// el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;EDG FANS&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Vue 模板语法有 2 大类： 1.插值语法：<br>功能：用于解析标签体内容。<br>写法：，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法<br>功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href=”xxx”或者简写为 :href=”xxx”，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。</p>\n<h4 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h4><pre><code> Vue中有两种数据绑定的方式\n    1.单向绑定(v-bind)：数据只能从data流向页面\n    2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n      备注：\n        1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n        2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n</code></pre>\n"},{"title":"Vue函数防抖和函数节流","date":"2021-03-18T09:40:22.000Z","_content":"\n## 函数防抖（debounce）\n\n### 应用场景\n\n- 登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖\n- 调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖\n- 文本编辑器实时保存，当无任何更改操作一秒后进行保存\n\n### 实现方法，防抖重在清零\n\n```js\n    function debounce(f, wait){\n        let timer\n        return (...args) => {\n            clearTimeout(timer)\n            timer = setTimeout(() => {\n                f(..args)\n            }, wait)\n        }\n    }\n```\n\n## 函数节流（throttle）\n\n### 应用场景\n\n- `scroll`事件，每隔一秒计算一次位置信息等\n- 浏览器播放事件，每隔一秒计算一次进度信息等\n- input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求\n\n#### 实现方法，节流重在开关锁\n\n```js\n    function throttle(f, wait){\n        let timer\n        return (..args) => {\n            if (timer) { return }\n            timer = setTimeout(() => {\n                f(..args)\n                timer = null\n            }, wait)\n        }\n    }\n```\n\n## 总结\n\n- 防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零`clearTimeout`\n- 节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁`timer=timeout；timer=null`\n","source":"_posts/Vue函数防抖和函数节流.md","raw":"---\ntitle: Vue函数防抖和函数节流\ndate: 2021-03-18 17:40:22\ntags:\n  - 防抖\n  - 节流\n\ncategories: [前端, Vue]\n---\n\n## 函数防抖（debounce）\n\n### 应用场景\n\n- 登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖\n- 调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖\n- 文本编辑器实时保存，当无任何更改操作一秒后进行保存\n\n### 实现方法，防抖重在清零\n\n```js\n    function debounce(f, wait){\n        let timer\n        return (...args) => {\n            clearTimeout(timer)\n            timer = setTimeout(() => {\n                f(..args)\n            }, wait)\n        }\n    }\n```\n\n## 函数节流（throttle）\n\n### 应用场景\n\n- `scroll`事件，每隔一秒计算一次位置信息等\n- 浏览器播放事件，每隔一秒计算一次进度信息等\n- input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求\n\n#### 实现方法，节流重在开关锁\n\n```js\n    function throttle(f, wait){\n        let timer\n        return (..args) => {\n            if (timer) { return }\n            timer = setTimeout(() => {\n                f(..args)\n                timer = null\n            }, wait)\n        }\n    }\n```\n\n## 总结\n\n- 防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零`clearTimeout`\n- 节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁`timer=timeout；timer=null`\n","slug":"Vue函数防抖和函数节流","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjl001lscacd1zw46w0","content":"<h2 id=\"函数防抖（debounce）\"><a href=\"#函数防抖（debounce）\" class=\"headerlink\" title=\"函数防抖（debounce）\"></a>函数防抖（debounce）</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>\n<li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>\n<li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>\n</ul>\n<h3 id=\"实现方法，防抖重在清零\"><a href=\"#实现方法，防抖重在清零\" class=\"headerlink\" title=\"实现方法，防抖重在清零\"></a>实现方法，防抖重在清零</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数节流（throttle）\"><a href=\"#函数节流（throttle）\" class=\"headerlink\" title=\"函数节流（throttle）\"></a>函数节流（throttle）</h2><h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><code>scroll</code>事件，每隔一秒计算一次位置信息等</li>\n<li>浏览器播放事件，每隔一秒计算一次进度信息等</li>\n<li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求</li>\n</ul>\n<h4 id=\"实现方法，节流重在开关锁\"><a href=\"#实现方法，节流重在开关锁\" class=\"headerlink\" title=\"实现方法，节流重在开关锁\"></a>实现方法，节流重在开关锁</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">..args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零<code>clearTimeout</code></li>\n<li>节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁<code>timer=timeout；timer=null</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数防抖（debounce）\"><a href=\"#函数防抖（debounce）\" class=\"headerlink\" title=\"函数防抖（debounce）\"></a>函数防抖（debounce）</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>\n<li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>\n<li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>\n</ul>\n<h3 id=\"实现方法，防抖重在清零\"><a href=\"#实现方法，防抖重在清零\" class=\"headerlink\" title=\"实现方法，防抖重在清零\"></a>实现方法，防抖重在清零</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数节流（throttle）\"><a href=\"#函数节流（throttle）\" class=\"headerlink\" title=\"函数节流（throttle）\"></a>函数节流（throttle）</h2><h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><code>scroll</code>事件，每隔一秒计算一次位置信息等</li>\n<li>浏览器播放事件，每隔一秒计算一次进度信息等</li>\n<li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求</li>\n</ul>\n<h4 id=\"实现方法，节流重在开关锁\"><a href=\"#实现方法，节流重在开关锁\" class=\"headerlink\" title=\"实现方法，节流重在开关锁\"></a>实现方法，节流重在开关锁</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">..args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零<code>clearTimeout</code></li>\n<li>节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁<code>timer=timeout；timer=null</code></li>\n</ul>\n"},{"title":"Vue学习二","date":"2021-12-08T12:32:35.000Z","_content":"\n## Vue 学习二\n\n### el 与 data 的两种写法\n\nel 有两种写法\n(1)new Vue 时配置 el 属性\n(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。\ndata 有两种写法\n(1)对象式\n\n```js\ndata: {\n  name: \"尚硅谷\";\n}\n```\n\n(2)函数式\n\n```js\ndata() { // 这里写成箭头函数时，this是window\n       console.log(this) // 此处的this是Vue实例对象\n       return {\n         name: '尚硅谷'\n       }\n     }\n```\n\n### MVVM 模型\n\nM：模型(Model)，对应 data 中的数据\nV：视图(View)，模板\nVM：视图模型(ViewModel)，Vue 实例对象\n\n![avatar](https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg)\n观察发现：\n1.data 中所有的属性，最后都出现在了 vm 上。\n2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。\n\n### 数据代理\n\n#### 回顾 Object.defineProperty 方法\n\n```js\nlet number = 18;\nlet person = {\n  name: \"张三\",\n  sex: \"男\",\n};\nObject.defineProperty(person, \"age\", {\n  // value: 18,\n  // enumerable: true, // 控制属性是否可以枚举，默认值是false\n  // writable: true, // 控制属性是否可以被修改，默认值是false\n  // configurable: true // 控制属性是否可以被删除，默认值是false\n  // 当person的age的属性被调用时，get函数就会被调用\n  get() {\n    return number;\n  },\n  set(value) {\n    number = value;\n  },\n});\nconsole.log(person);\nconsole.log(Object.keys(person));\n```\n","source":"_posts/Vue学习二.md","raw":"---\ntitle: Vue学习二\ndate: 2021-12-08 20:32:35\ntags:\n  - el与data\n  - MVVM模型\n\ncategories: [前端, Vue]\n---\n\n## Vue 学习二\n\n### el 与 data 的两种写法\n\nel 有两种写法\n(1)new Vue 时配置 el 属性\n(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。\ndata 有两种写法\n(1)对象式\n\n```js\ndata: {\n  name: \"尚硅谷\";\n}\n```\n\n(2)函数式\n\n```js\ndata() { // 这里写成箭头函数时，this是window\n       console.log(this) // 此处的this是Vue实例对象\n       return {\n         name: '尚硅谷'\n       }\n     }\n```\n\n### MVVM 模型\n\nM：模型(Model)，对应 data 中的数据\nV：视图(View)，模板\nVM：视图模型(ViewModel)，Vue 实例对象\n\n![avatar](https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg)\n观察发现：\n1.data 中所有的属性，最后都出现在了 vm 上。\n2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。\n\n### 数据代理\n\n#### 回顾 Object.defineProperty 方法\n\n```js\nlet number = 18;\nlet person = {\n  name: \"张三\",\n  sex: \"男\",\n};\nObject.defineProperty(person, \"age\", {\n  // value: 18,\n  // enumerable: true, // 控制属性是否可以枚举，默认值是false\n  // writable: true, // 控制属性是否可以被修改，默认值是false\n  // configurable: true // 控制属性是否可以被删除，默认值是false\n  // 当person的age的属性被调用时，get函数就会被调用\n  get() {\n    return number;\n  },\n  set(value) {\n    number = value;\n  },\n});\nconsole.log(person);\nconsole.log(Object.keys(person));\n```\n","slug":"Vue学习二","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjm001oscacgsyqfj9n","content":"<h2 id=\"Vue-学习二\"><a href=\"#Vue-学习二\" class=\"headerlink\" title=\"Vue 学习二\"></a>Vue 学习二</h2><h3 id=\"el-与-data-的两种写法\"><a href=\"#el-与-data-的两种写法\" class=\"headerlink\" title=\"el 与 data 的两种写法\"></a>el 与 data 的两种写法</h3><p>el 有两种写法<br>(1)new Vue 时配置 el 属性<br>(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。<br>data 有两种写法<br>(1)对象式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;尚硅谷&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)函数式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 这里写成箭头函数时，this是window</span></span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 此处的this是Vue实例对象</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;尚硅谷&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MVVM-模型\"><a href=\"#MVVM-模型\" class=\"headerlink\" title=\"MVVM 模型\"></a>MVVM 模型</h3><p>M：模型(Model)，对应 data 中的数据<br>V：视图(View)，模板<br>VM：视图模型(ViewModel)，Vue 实例对象</p>\n<p><img src=\"https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br>观察发现：<br>1.data 中所有的属性，最后都出现在了 vm 上。<br>2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。</p>\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><h4 id=\"回顾-Object-defineProperty-方法\"><a href=\"#回顾-Object-defineProperty-方法\" class=\"headerlink\" title=\"回顾 Object.defineProperty 方法\"></a>回顾 Object.defineProperty 方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&quot;age&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// value: 18,</span></span><br><span class=\"line\">  <span class=\"comment\">// enumerable: true, // 控制属性是否可以枚举，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// writable: true, // 控制属性是否可以被修改，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// configurable: true // 控制属性是否可以被删除，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// 当person的age的属性被调用时，get函数就会被调用</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    number = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(person));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-学习二\"><a href=\"#Vue-学习二\" class=\"headerlink\" title=\"Vue 学习二\"></a>Vue 学习二</h2><h3 id=\"el-与-data-的两种写法\"><a href=\"#el-与-data-的两种写法\" class=\"headerlink\" title=\"el 与 data 的两种写法\"></a>el 与 data 的两种写法</h3><p>el 有两种写法<br>(1)new Vue 时配置 el 属性<br>(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。<br>data 有两种写法<br>(1)对象式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;尚硅谷&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)函数式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 这里写成箭头函数时，this是window</span></span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 此处的this是Vue实例对象</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;尚硅谷&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MVVM-模型\"><a href=\"#MVVM-模型\" class=\"headerlink\" title=\"MVVM 模型\"></a>MVVM 模型</h3><p>M：模型(Model)，对应 data 中的数据<br>V：视图(View)，模板<br>VM：视图模型(ViewModel)，Vue 实例对象</p>\n<p><img src=\"https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg\" alt=\"avatar\"><br>观察发现：<br>1.data 中所有的属性，最后都出现在了 vm 上。<br>2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。</p>\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><h4 id=\"回顾-Object-defineProperty-方法\"><a href=\"#回顾-Object-defineProperty-方法\" class=\"headerlink\" title=\"回顾 Object.defineProperty 方法\"></a>回顾 Object.defineProperty 方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&quot;age&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// value: 18,</span></span><br><span class=\"line\">  <span class=\"comment\">// enumerable: true, // 控制属性是否可以枚举，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// writable: true, // 控制属性是否可以被修改，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// configurable: true // 控制属性是否可以被删除，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// 当person的age的属性被调用时，get函数就会被调用</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    number = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(person));</span><br></pre></td></tr></table></figure>\n"},{"title":"WinForm设置控件居中","date":"2021-03-19T03:10:36.000Z","_content":"\n## 简单阐述\n\n    在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n\n## 以 Label 控件为例\n\n    (1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n    (2)重写居中的代码如下：\n\n``` C#\nprotected override void OnResize(EventArgs e)\n    {\n            base.OnResize(e);\n            int x = (int)(0.5 * (this.Width - label1.Width));\n            int y = label1.Location.Y;\n            label1.Location = new System.Drawing.Point(x,y);\n    }\n```\n\n## 参考地址\n\n<https://blog.csdn.net/mingyueyixi/article/details/55035935>\n","source":"_posts/WinForm设置控件居中.md","raw":"---\ntitle: WinForm设置控件居中\ndate: 2021-03-19 11:10:36\ntags:\n  - 控件\n  - 居中\n\ncategories: [.Net, Winform]\n---\n\n## 简单阐述\n\n    在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n\n## 以 Label 控件为例\n\n    (1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n    (2)重写居中的代码如下：\n\n``` C#\nprotected override void OnResize(EventArgs e)\n    {\n            base.OnResize(e);\n            int x = (int)(0.5 * (this.Width - label1.Width));\n            int y = label1.Location.Y;\n            label1.Location = new System.Drawing.Point(x,y);\n    }\n```\n\n## 参考地址\n\n<https://blog.csdn.net/mingyueyixi/article/details/55035935>\n","slug":"WinForm设置控件居中","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjn001qscaccnx54ksc","content":"<h2 id=\"简单阐述\"><a href=\"#简单阐述\" class=\"headerlink\" title=\"简单阐述\"></a>简单阐述</h2><pre><code>在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n</code></pre>\n<h2 id=\"以-Label-控件为例\"><a href=\"#以-Label-控件为例\" class=\"headerlink\" title=\"以 Label 控件为例\"></a>以 Label 控件为例</h2><pre><code>(1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n(2)重写居中的代码如下：\n</code></pre>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResize</span>(<span class=\"params\">EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnResize(e);</span><br><span class=\"line\">            <span class=\"built_in\">int</span> x = (<span class=\"built_in\">int</span>)(<span class=\"number\">0.5</span> * (<span class=\"keyword\">this</span>.Width - label1.Width));</span><br><span class=\"line\">            <span class=\"built_in\">int</span> y = label1.Location.Y;</span><br><span class=\"line\">            label1.Location = <span class=\"keyword\">new</span> System.Drawing.Point(x,y);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://blog.csdn.net/mingyueyixi/article/details/55035935\">https://blog.csdn.net/mingyueyixi/article/details/55035935</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单阐述\"><a href=\"#简单阐述\" class=\"headerlink\" title=\"简单阐述\"></a>简单阐述</h2><pre><code>在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n</code></pre>\n<h2 id=\"以-Label-控件为例\"><a href=\"#以-Label-控件为例\" class=\"headerlink\" title=\"以 Label 控件为例\"></a>以 Label 控件为例</h2><pre><code>(1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n(2)重写居中的代码如下：\n</code></pre>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResize</span>(<span class=\"params\">EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnResize(e);</span><br><span class=\"line\">            <span class=\"built_in\">int</span> x = (<span class=\"built_in\">int</span>)(<span class=\"number\">0.5</span> * (<span class=\"keyword\">this</span>.Width - label1.Width));</span><br><span class=\"line\">            <span class=\"built_in\">int</span> y = label1.Location.Y;</span><br><span class=\"line\">            label1.Location = <span class=\"keyword\">new</span> System.Drawing.Point(x,y);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://blog.csdn.net/mingyueyixi/article/details/55035935\">https://blog.csdn.net/mingyueyixi/article/details/55035935</a></p>\n"},{"title":"Windows安装Hive","date":"2021-12-07T12:56:41.000Z","_content":"\n## 安装包版本\n\nJDK1.8.0.232(java1.8就可以，小版本号不强求)\n链接：<https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg>\n提取码：ei07\nHadoop2.7.7\n链接：<https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ>\n提取码：9aln\nHive2.2.1\n链接：<https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g>\n提取码：02hg\nmysql-connector-java-5.1.46.jar\n链接：<https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA>\n提取码：ae9a\n\n## JDK安装\n\n下载解压，安装到非默认路径\n\n### JDK环境变量配置\n\n配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：\n\n![avatar](https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png)\n\n编辑系统变量`Path`，添加如下图所示两个值\n\n![avatar](https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png)\n\n## Hadoop安装\n\n下载解压即可\n\n### Hadoop环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hadoop`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png)\n\n### 修改配置文件\n\n#### 新建目录\n\n新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录\n\n![avatar](https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png)\n\n#### 修改core-site.xml文件\n\n文件目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop`，将下面的代码复制到core_site.xml，并保存\n\n```xml\n<configuration>\n    <property>\n        <name>fs.defaultFS</name>\n        <value>hdfs://localhost:9000</value>\n    </property>\n</configuration>\n```\n\n#### 修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\n\n```xml\n<configuration>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode</value>\n    </property>\n    <property>\n        <name>dfs.datanode.data.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode</value>\n    </property>\n</configuration>\n```\n\n#### 修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\n\n```xml\n<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n</configuration>\n```\n\n#### 修改yarn-site.xml文件（目录和core_site一致）\n\n```xml\n<configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n    <property>\n        <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>\n        <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n    </property>\n</configuration>\n```\n\n#### 修改hadoop-env.cmd文件（目录和core_site一致）\n\n其实就是设置java的目录\n\n```shell\n@rem set JAVA_HOME=%JAVA_HOME%\nset JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232\n```\n\n### 格式化HDFS，打开Hadoop\n\n至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功\n\n格式化HDFS，打开cmd，输入`hdfs namenode -format`，结果如下即为成功\n\n![avatar](https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png)\n\n切换到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录，执行`start-all.cmd`，会打开4个窗口即为成功\n然后，输入`jps`命令测试是否成功，如下图\n![avatar](https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png)\n\n### 结果测试\n\n在`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录下创建新的文件，然后在`http://localhost:50070/explorer.html#/`查看结果\n\n```text\n    hadoop fs -mkdir /tmp\n    hadoop fs -mkdir /user/\n    hadoop fs -mkdir /user/hive/\n    hadoop fs -mkdir /user/hive/warehouse\n    hadoop fs -chmod g+w /tmp\n    hadoop fs -chmod g+w /user/hive/warehouse\n```\n\n![avatar](https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png)\n\n## HVIE安装\n\n### 环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hive`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png)\n\n### 文件配置\n\n#### 目录更改\n\n修改目录`E:\\tools\\hive\\conf`中的4个默认的配置文件模板拷贝成新的文件名\n\n```text\n    hive-default.xml.template -----> hive-site.xml\n    hive-env.sh.template -----> hive-env.sh\n    hive-exec-log4j.properties.template -----> hive-exec-log4j2.properties\n    hive-log4j.properties.template -----> hive-log4j2.properties\n```\n\n#### 创建新目录\n\n创建以下几个空目录\n\n```text\n    E:\\tools\\hive\\my_hive\\operation_logs_dir\n    E:\\tools\\hive\\my_hive\\querylog_dir\n    E:\\tools\\hive\\my_hive\\resources_dir\n    E:\\tools\\hive\\my_hive\\scratch_dir\n```\n\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png)\n\n#### mysql驱动配置\n\n将mysql-connector-java-5.1.46-bin.jar复制到`E:\\tools\\hive\\lib`目录下\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png)\n\n#### 修改hive-env.sh文件\n\n新增以下内容，路径注意修改为自己的\n\n```text\n# Set HADOOP_HOME to point to a specific hadoop install directory\nHADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7\n\n# Hive Configuration Directory can be controlled by:\nexport HIVE_CONF_DIR=E:\\tools\\hive\\conf\n\n# Folder containing extra ibraries required for hive compilation/execution can be controlled by:\nexport HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib\n```\n\n#### 修改hive-site.xml文件\n\n文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可\n\n链接：<https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw>\n提取码：12gz\n\n按照下图所示，查找修改即可\n![avatar](https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png)\n![avatar](https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png)\n\n### 创建数据库\n\n配置文件完成后，创建数据库，注意字符集和排序规则的设置属性\n![avatar](https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png)\n\n### 启动hive，结果测试\n\n#### 启动hadoop\n\n打开windows命令窗口，切换目录到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`，输入命令`start-dfs.cmd`并回车，启动两个窗口服务即成功\n\n#### 启动hive metastore\n\n在目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`的命令窗口输入`hive -service meatstore`，如果在hive数据库中出现如下所示众多表，则说明开启成功\n\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png)\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png)\n\n上述方式启动结果如下\n![avatar](https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png)\n\n此外，如果要操作hive，需要使用命令`hive Starting Hive Metastore Server`，进入hive操作系统\n![avatar](https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png)\n\n此时，可以直接执行HQL语句进行测试，例如执行`create table stu(id int, name string);`，然后去\n<http://localhost:50070/explorer.html#/user/hive/warehouse>查看结果，\n![avatar](https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png)\n\n如上所示，则hive在windows的安装成功。\n","source":"_posts/Windows安装Hive.md","raw":"---\ntitle: Windows安装Hive\ndate: 2021-12-07 20:56:41\ntags:\n  - Hive\n  - 数据库\ncategories: [Windows, 数据库]\n---\n\n## 安装包版本\n\nJDK1.8.0.232(java1.8就可以，小版本号不强求)\n链接：<https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg>\n提取码：ei07\nHadoop2.7.7\n链接：<https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ>\n提取码：9aln\nHive2.2.1\n链接：<https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g>\n提取码：02hg\nmysql-connector-java-5.1.46.jar\n链接：<https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA>\n提取码：ae9a\n\n## JDK安装\n\n下载解压，安装到非默认路径\n\n### JDK环境变量配置\n\n配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：\n\n![avatar](https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png)\n\n编辑系统变量`Path`，添加如下图所示两个值\n\n![avatar](https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png)\n\n## Hadoop安装\n\n下载解压即可\n\n### Hadoop环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hadoop`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png)\n\n### 修改配置文件\n\n#### 新建目录\n\n新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录\n\n![avatar](https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png)\n\n#### 修改core-site.xml文件\n\n文件目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop`，将下面的代码复制到core_site.xml，并保存\n\n```xml\n<configuration>\n    <property>\n        <name>fs.defaultFS</name>\n        <value>hdfs://localhost:9000</value>\n    </property>\n</configuration>\n```\n\n#### 修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\n\n```xml\n<configuration>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode</value>\n    </property>\n    <property>\n        <name>dfs.datanode.data.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode</value>\n    </property>\n</configuration>\n```\n\n#### 修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\n\n```xml\n<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n</configuration>\n```\n\n#### 修改yarn-site.xml文件（目录和core_site一致）\n\n```xml\n<configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n    <property>\n        <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>\n        <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n    </property>\n</configuration>\n```\n\n#### 修改hadoop-env.cmd文件（目录和core_site一致）\n\n其实就是设置java的目录\n\n```shell\n@rem set JAVA_HOME=%JAVA_HOME%\nset JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232\n```\n\n### 格式化HDFS，打开Hadoop\n\n至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功\n\n格式化HDFS，打开cmd，输入`hdfs namenode -format`，结果如下即为成功\n\n![avatar](https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png)\n\n切换到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录，执行`start-all.cmd`，会打开4个窗口即为成功\n然后，输入`jps`命令测试是否成功，如下图\n![avatar](https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png)\n\n### 结果测试\n\n在`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录下创建新的文件，然后在`http://localhost:50070/explorer.html#/`查看结果\n\n```text\n    hadoop fs -mkdir /tmp\n    hadoop fs -mkdir /user/\n    hadoop fs -mkdir /user/hive/\n    hadoop fs -mkdir /user/hive/warehouse\n    hadoop fs -chmod g+w /tmp\n    hadoop fs -chmod g+w /user/hive/warehouse\n```\n\n![avatar](https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png)\n\n## HVIE安装\n\n### 环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hive`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png)\n\n### 文件配置\n\n#### 目录更改\n\n修改目录`E:\\tools\\hive\\conf`中的4个默认的配置文件模板拷贝成新的文件名\n\n```text\n    hive-default.xml.template -----> hive-site.xml\n    hive-env.sh.template -----> hive-env.sh\n    hive-exec-log4j.properties.template -----> hive-exec-log4j2.properties\n    hive-log4j.properties.template -----> hive-log4j2.properties\n```\n\n#### 创建新目录\n\n创建以下几个空目录\n\n```text\n    E:\\tools\\hive\\my_hive\\operation_logs_dir\n    E:\\tools\\hive\\my_hive\\querylog_dir\n    E:\\tools\\hive\\my_hive\\resources_dir\n    E:\\tools\\hive\\my_hive\\scratch_dir\n```\n\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png)\n\n#### mysql驱动配置\n\n将mysql-connector-java-5.1.46-bin.jar复制到`E:\\tools\\hive\\lib`目录下\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png)\n\n#### 修改hive-env.sh文件\n\n新增以下内容，路径注意修改为自己的\n\n```text\n# Set HADOOP_HOME to point to a specific hadoop install directory\nHADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7\n\n# Hive Configuration Directory can be controlled by:\nexport HIVE_CONF_DIR=E:\\tools\\hive\\conf\n\n# Folder containing extra ibraries required for hive compilation/execution can be controlled by:\nexport HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib\n```\n\n#### 修改hive-site.xml文件\n\n文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可\n\n链接：<https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw>\n提取码：12gz\n\n按照下图所示，查找修改即可\n![avatar](https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png)\n![avatar](https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png)\n\n### 创建数据库\n\n配置文件完成后，创建数据库，注意字符集和排序规则的设置属性\n![avatar](https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png)\n\n### 启动hive，结果测试\n\n#### 启动hadoop\n\n打开windows命令窗口，切换目录到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`，输入命令`start-dfs.cmd`并回车，启动两个窗口服务即成功\n\n#### 启动hive metastore\n\n在目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`的命令窗口输入`hive -service meatstore`，如果在hive数据库中出现如下所示众多表，则说明开启成功\n\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png)\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png)\n\n上述方式启动结果如下\n![avatar](https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png)\n\n此外，如果要操作hive，需要使用命令`hive Starting Hive Metastore Server`，进入hive操作系统\n![avatar](https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png)\n\n此时，可以直接执行HQL语句进行测试，例如执行`create table stu(id int, name string);`，然后去\n<http://localhost:50070/explorer.html#/user/hive/warehouse>查看结果，\n![avatar](https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png)\n\n如上所示，则hive在windows的安装成功。\n","slug":"Windows安装Hive","published":1,"updated":"2022-12-05T03:00:24.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjo001tscacapa727ye","content":"<h2 id=\"安装包版本\"><a href=\"#安装包版本\" class=\"headerlink\" title=\"安装包版本\"></a>安装包版本</h2><p>JDK1.8.0.232(java1.8就可以，小版本号不强求)<br>链接：<a href=\"https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg\">https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg</a><br>提取码：ei07<br>Hadoop2.7.7<br>链接：<a href=\"https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ\">https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ</a><br>提取码：9aln<br>Hive2.2.1<br>链接：<a href=\"https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g\">https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g</a><br>提取码：02hg<br>mysql-connector-java-5.1.46.jar<br>链接：<a href=\"https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA\">https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA</a><br>提取码：ae9a</p>\n<h2 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h2><p>下载解压，安装到非默认路径</p>\n<h3 id=\"JDK环境变量配置\"><a href=\"#JDK环境变量配置\" class=\"headerlink\" title=\"JDK环境变量配置\"></a>JDK环境变量配置</h3><p>配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示两个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><p>下载解压即可</p>\n<h3 id=\"Hadoop环境变量配置\"><a href=\"#Hadoop环境变量配置\" class=\"headerlink\" title=\"Hadoop环境变量配置\"></a>Hadoop环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hadoop</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><h4 id=\"新建目录\"><a href=\"#新建目录\" class=\"headerlink\" title=\"新建目录\"></a>新建目录</h4><p>新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"修改core-site-xml文件\"><a href=\"#修改core-site-xml文件\" class=\"headerlink\" title=\"修改core-site.xml文件\"></a>修改core-site.xml文件</h4><p>文件目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop</code>，将下面的代码复制到core_site.xml，并保存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\"><a href=\"#修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\" class=\"headerlink\" title=\"修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\"></a>修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\"><a href=\"#修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\" class=\"headerlink\" title=\"修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\"></a>修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改yarn-site-xml文件（目录和core-site一致）\"><a href=\"#修改yarn-site-xml文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改yarn-site.xml文件（目录和core_site一致）\"></a>修改yarn-site.xml文件（目录和core_site一致）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hadoop-env-cmd文件（目录和core-site一致）\"><a href=\"#修改hadoop-env-cmd文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改hadoop-env.cmd文件（目录和core_site一致）\"></a>修改hadoop-env.cmd文件（目录和core_site一致）</h4><p>其实就是设置java的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@rem set JAVA_HOME=%JAVA_HOME%</span><br><span class=\"line\">set JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化HDFS，打开Hadoop\"><a href=\"#格式化HDFS，打开Hadoop\" class=\"headerlink\" title=\"格式化HDFS，打开Hadoop\"></a>格式化HDFS，打开Hadoop</h3><p>至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功</p>\n<p>格式化HDFS，打开cmd，输入<code>hdfs namenode -format</code>，结果如下即为成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>切换到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录，执行<code>start-all.cmd</code>，会打开4个窗口即为成功<br>然后，输入<code>jps</code>命令测试是否成功，如下图<br><img src=\"https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"结果测试\"><a href=\"#结果测试\" class=\"headerlink\" title=\"结果测试\"></a>结果测试</h3><p>在<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录下创建新的文件，然后在<code>http://localhost:50070/explorer.html#/</code>查看结果</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /tmp</span><br><span class=\"line\">hadoop fs -mkdir /user/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/warehouse</span><br><span class=\"line\">hadoop fs -chmod g+w /tmp</span><br><span class=\"line\">hadoop fs -chmod g+w /user/hive/warehouse</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h2 id=\"HVIE安装\"><a href=\"#HVIE安装\" class=\"headerlink\" title=\"HVIE安装\"></a>HVIE安装</h2><h3 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hive</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h3><h4 id=\"目录更改\"><a href=\"#目录更改\" class=\"headerlink\" title=\"目录更改\"></a>目录更改</h4><p>修改目录<code>E:\\tools\\hive\\conf</code>中的4个默认的配置文件模板拷贝成新的文件名</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive-default.xml.template -----&gt; hive-site.xml</span><br><span class=\"line\">hive-env.sh.template -----&gt; hive-env.sh</span><br><span class=\"line\">hive-exec-log4j.properties.template -----&gt; hive-exec-log4j2.properties</span><br><span class=\"line\">hive-log4j.properties.template -----&gt; hive-log4j2.properties</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新目录\"><a href=\"#创建新目录\" class=\"headerlink\" title=\"创建新目录\"></a>创建新目录</h4><p>创建以下几个空目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\tools\\hive\\my_hive\\operation_logs_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\querylog_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\resources_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\scratch_dir</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"mysql驱动配置\"><a href=\"#mysql驱动配置\" class=\"headerlink\" title=\"mysql驱动配置\"></a>mysql驱动配置</h4><p>将mysql-connector-java-5.1.46-bin.jar复制到<code>E:\\tools\\hive\\lib</code>目录下<br>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"修改hive-env-sh文件\"><a href=\"#修改hive-env-sh文件\" class=\"headerlink\" title=\"修改hive-env.sh文件\"></a>修改hive-env.sh文件</h4><p>新增以下内容，路径注意修改为自己的</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set HADOOP_HOME to point to a specific hadoop install directory</span><br><span class=\"line\">HADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7</span><br><span class=\"line\"></span><br><span class=\"line\"># Hive Configuration Directory can be controlled by:</span><br><span class=\"line\">export HIVE_CONF_DIR=E:\\tools\\hive\\conf</span><br><span class=\"line\"></span><br><span class=\"line\"># Folder containing extra ibraries required for hive compilation/execution can be controlled by:</span><br><span class=\"line\">export HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hive-site-xml文件\"><a href=\"#修改hive-site-xml文件\" class=\"headerlink\" title=\"修改hive-site.xml文件\"></a>修改hive-site.xml文件</h4><p>文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw\">https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw</a><br>提取码：12gz</p>\n<p>按照下图所示，查找修改即可<br><img src=\"https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br><img src=\"https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>配置文件完成后，创建数据库，注意字符集和排序规则的设置属性<br><img src=\"https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"启动hive，结果测试\"><a href=\"#启动hive，结果测试\" class=\"headerlink\" title=\"启动hive，结果测试\"></a>启动hive，结果测试</h3><h4 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h4><p>打开windows命令窗口，切换目录到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>，输入命令<code>start-dfs.cmd</code>并回车，启动两个窗口服务即成功</p>\n<h4 id=\"启动hive-metastore\"><a href=\"#启动hive-metastore\" class=\"headerlink\" title=\"启动hive metastore\"></a>启动hive metastore</h4><p>在目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>的命令窗口输入<code>hive -service meatstore</code>，如果在hive数据库中出现如下所示众多表，则说明开启成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>上述方式启动结果如下<br><img src=\"https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>此外，如果要操作hive，需要使用命令<code>hive Starting Hive Metastore Server</code>，进入hive操作系统<br><img src=\"https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>此时，可以直接执行HQL语句进行测试，例如执行<code>create table stu(id int, name string);</code>，然后去<br><a href=\"http://localhost:50070/explorer.html#/user/hive/warehouse\">http://localhost:50070/explorer.html#/user/hive/warehouse</a>查看结果，<br><img src=\"https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>如上所示，则hive在windows的安装成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装包版本\"><a href=\"#安装包版本\" class=\"headerlink\" title=\"安装包版本\"></a>安装包版本</h2><p>JDK1.8.0.232(java1.8就可以，小版本号不强求)<br>链接：<a href=\"https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg\">https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg</a><br>提取码：ei07<br>Hadoop2.7.7<br>链接：<a href=\"https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ\">https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ</a><br>提取码：9aln<br>Hive2.2.1<br>链接：<a href=\"https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g\">https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g</a><br>提取码：02hg<br>mysql-connector-java-5.1.46.jar<br>链接：<a href=\"https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA\">https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA</a><br>提取码：ae9a</p>\n<h2 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h2><p>下载解压，安装到非默认路径</p>\n<h3 id=\"JDK环境变量配置\"><a href=\"#JDK环境变量配置\" class=\"headerlink\" title=\"JDK环境变量配置\"></a>JDK环境变量配置</h3><p>配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示两个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png\" alt=\"avatar\"></p>\n<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><p>下载解压即可</p>\n<h3 id=\"Hadoop环境变量配置\"><a href=\"#Hadoop环境变量配置\" class=\"headerlink\" title=\"Hadoop环境变量配置\"></a>Hadoop环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hadoop</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png\" alt=\"avatar\"></p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><h4 id=\"新建目录\"><a href=\"#新建目录\" class=\"headerlink\" title=\"新建目录\"></a>新建目录</h4><p>新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png\" alt=\"avatar\"></p>\n<h4 id=\"修改core-site-xml文件\"><a href=\"#修改core-site-xml文件\" class=\"headerlink\" title=\"修改core-site.xml文件\"></a>修改core-site.xml文件</h4><p>文件目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop</code>，将下面的代码复制到core_site.xml，并保存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\"><a href=\"#修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\" class=\"headerlink\" title=\"修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\"></a>修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\"><a href=\"#修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\" class=\"headerlink\" title=\"修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\"></a>修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改yarn-site-xml文件（目录和core-site一致）\"><a href=\"#修改yarn-site-xml文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改yarn-site.xml文件（目录和core_site一致）\"></a>修改yarn-site.xml文件（目录和core_site一致）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hadoop-env-cmd文件（目录和core-site一致）\"><a href=\"#修改hadoop-env-cmd文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改hadoop-env.cmd文件（目录和core_site一致）\"></a>修改hadoop-env.cmd文件（目录和core_site一致）</h4><p>其实就是设置java的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@rem set JAVA_HOME=%JAVA_HOME%</span><br><span class=\"line\">set JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化HDFS，打开Hadoop\"><a href=\"#格式化HDFS，打开Hadoop\" class=\"headerlink\" title=\"格式化HDFS，打开Hadoop\"></a>格式化HDFS，打开Hadoop</h3><p>至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功</p>\n<p>格式化HDFS，打开cmd，输入<code>hdfs namenode -format</code>，结果如下即为成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png\" alt=\"avatar\"></p>\n<p>切换到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录，执行<code>start-all.cmd</code>，会打开4个窗口即为成功<br>然后，输入<code>jps</code>命令测试是否成功，如下图<br><img src=\"https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png\" alt=\"avatar\"></p>\n<h3 id=\"结果测试\"><a href=\"#结果测试\" class=\"headerlink\" title=\"结果测试\"></a>结果测试</h3><p>在<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录下创建新的文件，然后在<code>http://localhost:50070/explorer.html#/</code>查看结果</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /tmp</span><br><span class=\"line\">hadoop fs -mkdir /user/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/warehouse</span><br><span class=\"line\">hadoop fs -chmod g+w /tmp</span><br><span class=\"line\">hadoop fs -chmod g+w /user/hive/warehouse</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png\" alt=\"avatar\"></p>\n<h2 id=\"HVIE安装\"><a href=\"#HVIE安装\" class=\"headerlink\" title=\"HVIE安装\"></a>HVIE安装</h2><h3 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hive</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png\" alt=\"avatar\"></p>\n<h3 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h3><h4 id=\"目录更改\"><a href=\"#目录更改\" class=\"headerlink\" title=\"目录更改\"></a>目录更改</h4><p>修改目录<code>E:\\tools\\hive\\conf</code>中的4个默认的配置文件模板拷贝成新的文件名</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive-default.xml.template -----&gt; hive-site.xml</span><br><span class=\"line\">hive-env.sh.template -----&gt; hive-env.sh</span><br><span class=\"line\">hive-exec-log4j.properties.template -----&gt; hive-exec-log4j2.properties</span><br><span class=\"line\">hive-log4j.properties.template -----&gt; hive-log4j2.properties</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新目录\"><a href=\"#创建新目录\" class=\"headerlink\" title=\"创建新目录\"></a>创建新目录</h4><p>创建以下几个空目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\tools\\hive\\my_hive\\operation_logs_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\querylog_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\resources_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\scratch_dir</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png\" alt=\"avatar\"></p>\n<h4 id=\"mysql驱动配置\"><a href=\"#mysql驱动配置\" class=\"headerlink\" title=\"mysql驱动配置\"></a>mysql驱动配置</h4><p>将mysql-connector-java-5.1.46-bin.jar复制到<code>E:\\tools\\hive\\lib</code>目录下<br>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png\" alt=\"avatar\"></p>\n<h4 id=\"修改hive-env-sh文件\"><a href=\"#修改hive-env-sh文件\" class=\"headerlink\" title=\"修改hive-env.sh文件\"></a>修改hive-env.sh文件</h4><p>新增以下内容，路径注意修改为自己的</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set HADOOP_HOME to point to a specific hadoop install directory</span><br><span class=\"line\">HADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7</span><br><span class=\"line\"></span><br><span class=\"line\"># Hive Configuration Directory can be controlled by:</span><br><span class=\"line\">export HIVE_CONF_DIR=E:\\tools\\hive\\conf</span><br><span class=\"line\"></span><br><span class=\"line\"># Folder containing extra ibraries required for hive compilation/execution can be controlled by:</span><br><span class=\"line\">export HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hive-site-xml文件\"><a href=\"#修改hive-site-xml文件\" class=\"headerlink\" title=\"修改hive-site.xml文件\"></a>修改hive-site.xml文件</h4><p>文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw\">https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw</a><br>提取码：12gz</p>\n<p>按照下图所示，查找修改即可<br><img src=\"https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png\" alt=\"avatar\"><br><img src=\"https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png\" alt=\"avatar\"></p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>配置文件完成后，创建数据库，注意字符集和排序规则的设置属性<br><img src=\"https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png\" alt=\"avatar\"></p>\n<h3 id=\"启动hive，结果测试\"><a href=\"#启动hive，结果测试\" class=\"headerlink\" title=\"启动hive，结果测试\"></a>启动hive，结果测试</h3><h4 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h4><p>打开windows命令窗口，切换目录到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>，输入命令<code>start-dfs.cmd</code>并回车，启动两个窗口服务即成功</p>\n<h4 id=\"启动hive-metastore\"><a href=\"#启动hive-metastore\" class=\"headerlink\" title=\"启动hive metastore\"></a>启动hive metastore</h4><p>在目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>的命令窗口输入<code>hive -service meatstore</code>，如果在hive数据库中出现如下所示众多表，则说明开启成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png\" alt=\"avatar\"><br><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png\" alt=\"avatar\"></p>\n<p>上述方式启动结果如下<br><img src=\"https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png\" alt=\"avatar\"></p>\n<p>此外，如果要操作hive，需要使用命令<code>hive Starting Hive Metastore Server</code>，进入hive操作系统<br><img src=\"https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png\" alt=\"avatar\"></p>\n<p>此时，可以直接执行HQL语句进行测试，例如执行<code>create table stu(id int, name string);</code>，然后去<br><a href=\"http://localhost:50070/explorer.html#/user/hive/warehouse\">http://localhost:50070/explorer.html#/user/hive/warehouse</a>查看结果，<br><img src=\"https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png\" alt=\"avatar\"></p>\n<p>如上所示，则hive在windows的安装成功。</p>\n"},{"title":"Windows端口被占用解决方法","date":"2021-03-19T05:40:56.000Z","_content":"\n## Error 场景\n\n启动 Java 项目失败，控制台显示\n\n```text\n\nError starting ApplicationContext. To display the conditions report`re-run your application with 'debug' enabled.\n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nThe Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.\n\nAction:\n\nVerify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port.\n```\n\n## 解决方法\n\n- 查看那些进程占用了我们的端口号`8080`\n\n  打开 Windows 控制台，输入命令\n\n`netstat -nao | findstr \"8080\"`\n\n可以看到占用 `8080` 端口的进程 PID 为 `8404`\n\n- 杀死相应进程：\n\n  在 Windows 控制台，继续输入命令\n\n`taskkill /pid 8404 /f`\n\n![avatar](https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg)\n","source":"_posts/Windows端口被占用解决方法.md","raw":"---\ntitle: Windows端口被占用解决方法\ndate: 2021-03-19 13:40:56\ntags:\n  - 端口占用\n\ncategories: [操作系统, Windows]\n---\n\n## Error 场景\n\n启动 Java 项目失败，控制台显示\n\n```text\n\nError starting ApplicationContext. To display the conditions report`re-run your application with 'debug' enabled.\n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nThe Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.\n\nAction:\n\nVerify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port.\n```\n\n## 解决方法\n\n- 查看那些进程占用了我们的端口号`8080`\n\n  打开 Windows 控制台，输入命令\n\n`netstat -nao | findstr \"8080\"`\n\n可以看到占用 `8080` 端口的进程 PID 为 `8404`\n\n- 杀死相应进程：\n\n  在 Windows 控制台，继续输入命令\n\n`taskkill /pid 8404 /f`\n\n![avatar](https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg)\n","slug":"Windows端口被占用解决方法","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjo001xscace5lq5h3o","content":"<h2 id=\"Error-场景\"><a href=\"#Error-场景\" class=\"headerlink\" title=\"Error 场景\"></a>Error 场景</h2><p>启动 Java 项目失败，控制台显示</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Error starting ApplicationContext. To display the conditions report`re-run your application with &#x27;debug&#x27; enabled.</span><br><span class=\"line\"></span><br><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Verify the connector&#x27;s configuration, identify and stop any process that&#x27;s listening on port 8080, or configure this application to listen on another port.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>查看那些进程占用了我们的端口号<code>8080</code></p>\n<p>打开 Windows 控制台，输入命令</p>\n</li>\n</ul>\n<p><code>netstat -nao | findstr &quot;8080&quot;</code></p>\n<p>可以看到占用 <code>8080</code> 端口的进程 PID 为 <code>8404</code></p>\n<ul>\n<li><p>杀死相应进程：</p>\n<p>在 Windows 控制台，继续输入命令</p>\n</li>\n</ul>\n<p><code>taskkill /pid 8404 /f</code></p>\n<p><img src=\"https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Error-场景\"><a href=\"#Error-场景\" class=\"headerlink\" title=\"Error 场景\"></a>Error 场景</h2><p>启动 Java 项目失败，控制台显示</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Error starting ApplicationContext. To display the conditions report`re-run your application with &#x27;debug&#x27; enabled.</span><br><span class=\"line\"></span><br><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Verify the connector&#x27;s configuration, identify and stop any process that&#x27;s listening on port 8080, or configure this application to listen on another port.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>查看那些进程占用了我们的端口号<code>8080</code></p>\n<p>打开 Windows 控制台，输入命令</p>\n</li>\n</ul>\n<p><code>netstat -nao | findstr &quot;8080&quot;</code></p>\n<p>可以看到占用 <code>8080</code> 端口的进程 PID 为 <code>8404</code></p>\n<ul>\n<li><p>杀死相应进程：</p>\n<p>在 Windows 控制台，继续输入命令</p>\n</li>\n</ul>\n<p><code>taskkill /pid 8404 /f</code></p>\n<p><img src=\"https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg\" alt=\"avatar\"></p>\n"},{"title":"Windows系统修改jar包中的文件或者依赖","date":"2022-07-29T01:20:52.000Z","_content":"## 场景\n\n应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/Mr_7777777/article/details/125152748\n```\n\n本文主要说一下Windows系统，如何达到上述目的。\n\n### 操作步骤\n\n下面是具体的操作步骤\n\n#### 打开windows命令窗口，查看jar命令是否可用\n\n![avatar](https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png)\n如果提示，`jar`不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置\n\n##### jar环境变量配置\n\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/sinat_20593627/article/details/109613547\n```\n\n如果是java1.8版本，会提示`bin\\jlink.exe`不是内部或外部命令，也不是可运行的程序，这个忽略即可。\n\n#### 解压jar包并手动替换，然后再重新打包\n\n- 解压原jar包\n\n  ```text\n  jar -xvf xxx.jar\n  ```\n\n- 手动替换文件或者依赖\n- 重新打包\n  \n  ```text\n  jar -cfM0 test.jar BOOT-INF/ META-INF/ org/\n  ```\n\n以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。\n","source":"_posts/Windows系统修改jar内容.md","raw":"---\ntitle: Windows系统修改jar包中的文件或者依赖\ndate: 2022-07-29 09:20:52\ntags:\n  - jar包\n\ncategories: [操作系统, Windows]\n---\n## 场景\n\n应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/Mr_7777777/article/details/125152748\n```\n\n本文主要说一下Windows系统，如何达到上述目的。\n\n### 操作步骤\n\n下面是具体的操作步骤\n\n#### 打开windows命令窗口，查看jar命令是否可用\n\n![avatar](https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png)\n如果提示，`jar`不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置\n\n##### jar环境变量配置\n\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/sinat_20593627/article/details/109613547\n```\n\n如果是java1.8版本，会提示`bin\\jlink.exe`不是内部或外部命令，也不是可运行的程序，这个忽略即可。\n\n#### 解压jar包并手动替换，然后再重新打包\n\n- 解压原jar包\n\n  ```text\n  jar -xvf xxx.jar\n  ```\n\n- 手动替换文件或者依赖\n- 重新打包\n  \n  ```text\n  jar -cfM0 test.jar BOOT-INF/ META-INF/ org/\n  ```\n\n以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。\n","slug":"Windows系统修改jar内容","published":1,"updated":"2022-10-27T06:40:13.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjp0020scacdiu69980","content":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。<br>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/Mr_7777777/article/details/125152748</span><br></pre></td></tr></table></figure>\n\n<p>本文主要说一下Windows系统，如何达到上述目的。</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><p>下面是具体的操作步骤</p>\n<h4 id=\"打开windows命令窗口，查看jar命令是否可用\"><a href=\"#打开windows命令窗口，查看jar命令是否可用\" class=\"headerlink\" title=\"打开windows命令窗口，查看jar命令是否可用\"></a>打开windows命令窗口，查看jar命令是否可用</h4><p><img src=\"https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br>如果提示，<code>jar</code>不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置</p>\n<h5 id=\"jar环境变量配置\"><a href=\"#jar环境变量配置\" class=\"headerlink\" title=\"jar环境变量配置\"></a>jar环境变量配置</h5><p>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/sinat_20593627/article/details/109613547</span><br></pre></td></tr></table></figure>\n\n<p>如果是java1.8版本，会提示<code>bin\\jlink.exe</code>不是内部或外部命令，也不是可运行的程序，这个忽略即可。</p>\n<h4 id=\"解压jar包并手动替换，然后再重新打包\"><a href=\"#解压jar包并手动替换，然后再重新打包\" class=\"headerlink\" title=\"解压jar包并手动替换，然后再重新打包\"></a>解压jar包并手动替换，然后再重新打包</h4><ul>\n<li><p>解压原jar包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -xvf xxx.jar</span><br></pre></td></tr></table></figure></li>\n<li><p>手动替换文件或者依赖</p>\n</li>\n<li><p>重新打包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -cfM0 test.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。<br>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/Mr_7777777/article/details/125152748</span><br></pre></td></tr></table></figure>\n\n<p>本文主要说一下Windows系统，如何达到上述目的。</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><p>下面是具体的操作步骤</p>\n<h4 id=\"打开windows命令窗口，查看jar命令是否可用\"><a href=\"#打开windows命令窗口，查看jar命令是否可用\" class=\"headerlink\" title=\"打开windows命令窗口，查看jar命令是否可用\"></a>打开windows命令窗口，查看jar命令是否可用</h4><p><img src=\"https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png\" alt=\"avatar\"><br>如果提示，<code>jar</code>不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置</p>\n<h5 id=\"jar环境变量配置\"><a href=\"#jar环境变量配置\" class=\"headerlink\" title=\"jar环境变量配置\"></a>jar环境变量配置</h5><p>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/sinat_20593627/article/details/109613547</span><br></pre></td></tr></table></figure>\n\n<p>如果是java1.8版本，会提示<code>bin\\jlink.exe</code>不是内部或外部命令，也不是可运行的程序，这个忽略即可。</p>\n<h4 id=\"解压jar包并手动替换，然后再重新打包\"><a href=\"#解压jar包并手动替换，然后再重新打包\" class=\"headerlink\" title=\"解压jar包并手动替换，然后再重新打包\"></a>解压jar包并手动替换，然后再重新打包</h4><ul>\n<li><p>解压原jar包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -xvf xxx.jar</span><br></pre></td></tr></table></figure></li>\n<li><p>手动替换文件或者依赖</p>\n</li>\n<li><p>重新打包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -cfM0 test.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。</p>\n"},{"title":"关于我","date":"2021-03-18T09:44:17.000Z","_content":"\n## 个人信息\n\n- 张凯/男/1996.12.28\n- 本科/淮阴工学院（计算机科学与技术专业）\n- 工作年限：4 年\n- 技术博客：<https://zhkaif.github.io/>\n\n## 联系方式\n\n- 手机：13182353591\n- 邮箱：2572429235@qq.com\n- QQ/微信手机号：2572429235/13182353591\n\n## 工作经历\n\n南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）\n南京软通动力（2021 年 5 月 ~ 至今）\n\n### 3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）\n\n帮助 3M 公司使用系统自动处理经销商的销售数据。\n包括对数据的自动定时抽取上传、校验、转换等基础，以及错误数据回滚、经销商管理、日志管理等配套功能。\n\n#### 职责\n\n- WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。\n- 客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。\n- 经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。\n- 系统操作手册和客户端安装手册的编写。\n- 系统后续功能的开发和运维工作。\n\n#### 项目总结\n\n##### 使用技术\n\n- WEB：Vue + Element-ui\n- API：SpringBoot + Jpa + Hibernate + Swagger\n- 数据库：SQLSERVER\n- 客户端：Winform + Cefsharp\n- 此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。\n\n##### 业绩成果\n\n目前已经成功上线 7 家经销商，后续上线正则有序进行，2021 年计划上线 100 家经销商。\n\n### ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）\n\n面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。\n\n- 在线查询航班并将所查航班信息发送到邮箱服务\n- 个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。\n- 航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。\n- 航空公司新闻和注意事项提示信息的展示\n- Web 端管理新闻和注意事项\n\n#### 职责\n\n- 后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。\n- 航班查询页面的开发。\n- 为适应手机、平板、WEB 对多个页面进行调整。\n- 测试式样书的编写。\n\n#### 项目总结\n\n##### 使用技术\n\n- WEB：Kony + Node.js\n- API：JavaService\n- 数据库：Mysql\n- 收获：进一步理解了 Kony 的开发生态圈，并通过 Kony 的云平台发布后端的 API，很便捷。\n\n### 爬虫开发与部署\n\n使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。\n\n### 职责\n\n- Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写\n- 爬虫发布到部署好的 Crawlab 定期执行\n- 3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能\n\n#### 项目总结\n\n##### 使用技术\n\n- 爬虫：Python + Scrapy\n- 数据库：MongoDB + ElasticSearch + Redis\n- 发布平台：crawlab\n- 收获：更熟悉 Python，学会了多种存储方式以及各自的优势。反爬虫的初步了解和应对方法。\n\n### ElasticSearch 管理及新闻检索平台\n\n将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。\n\n### 职责\n\n整个项目的搭建和前后台开发。\n\n#### 项目总结\n\n##### 使用技术\n\n- WEB：Vue + Elemen-ui\n- API：Python + FastApi\n- 数据库：Mysql + ElasticSearch\n- 收获：加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。\n\n## 技能清单\n\n- 开发语言：Java/C#/Python\n- 前端框架：Vue/Angular\n- 数据库相关：MySQL/SQLSERVER/MongoDB/ES\n- 版本管理：Git/Svn\n- 单元测试：Junit/Pytest\n- 开发工具：Idea/STS/VsCode\n","source":"_posts/about.md","raw":"---\ntitle: 关于我\ndate: 2021-03-18 17:44:17\ntags:\n  - 简历\n\ncategories: [个人]\n---\n\n## 个人信息\n\n- 张凯/男/1996.12.28\n- 本科/淮阴工学院（计算机科学与技术专业）\n- 工作年限：4 年\n- 技术博客：<https://zhkaif.github.io/>\n\n## 联系方式\n\n- 手机：13182353591\n- 邮箱：2572429235@qq.com\n- QQ/微信手机号：2572429235/13182353591\n\n## 工作经历\n\n南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）\n南京软通动力（2021 年 5 月 ~ 至今）\n\n### 3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）\n\n帮助 3M 公司使用系统自动处理经销商的销售数据。\n包括对数据的自动定时抽取上传、校验、转换等基础，以及错误数据回滚、经销商管理、日志管理等配套功能。\n\n#### 职责\n\n- WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。\n- 客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。\n- 经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。\n- 系统操作手册和客户端安装手册的编写。\n- 系统后续功能的开发和运维工作。\n\n#### 项目总结\n\n##### 使用技术\n\n- WEB：Vue + Element-ui\n- API：SpringBoot + Jpa + Hibernate + Swagger\n- 数据库：SQLSERVER\n- 客户端：Winform + Cefsharp\n- 此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。\n\n##### 业绩成果\n\n目前已经成功上线 7 家经销商，后续上线正则有序进行，2021 年计划上线 100 家经销商。\n\n### ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）\n\n面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。\n\n- 在线查询航班并将所查航班信息发送到邮箱服务\n- 个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。\n- 航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。\n- 航空公司新闻和注意事项提示信息的展示\n- Web 端管理新闻和注意事项\n\n#### 职责\n\n- 后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。\n- 航班查询页面的开发。\n- 为适应手机、平板、WEB 对多个页面进行调整。\n- 测试式样书的编写。\n\n#### 项目总结\n\n##### 使用技术\n\n- WEB：Kony + Node.js\n- API：JavaService\n- 数据库：Mysql\n- 收获：进一步理解了 Kony 的开发生态圈，并通过 Kony 的云平台发布后端的 API，很便捷。\n\n### 爬虫开发与部署\n\n使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。\n\n### 职责\n\n- Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写\n- 爬虫发布到部署好的 Crawlab 定期执行\n- 3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能\n\n#### 项目总结\n\n##### 使用技术\n\n- 爬虫：Python + Scrapy\n- 数据库：MongoDB + ElasticSearch + Redis\n- 发布平台：crawlab\n- 收获：更熟悉 Python，学会了多种存储方式以及各自的优势。反爬虫的初步了解和应对方法。\n\n### ElasticSearch 管理及新闻检索平台\n\n将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。\n\n### 职责\n\n整个项目的搭建和前后台开发。\n\n#### 项目总结\n\n##### 使用技术\n\n- WEB：Vue + Elemen-ui\n- API：Python + FastApi\n- 数据库：Mysql + ElasticSearch\n- 收获：加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。\n\n## 技能清单\n\n- 开发语言：Java/C#/Python\n- 前端框架：Vue/Angular\n- 数据库相关：MySQL/SQLSERVER/MongoDB/ES\n- 版本管理：Git/Svn\n- 单元测试：Junit/Pytest\n- 开发工具：Idea/STS/VsCode\n","slug":"about","published":1,"updated":"2022-10-27T06:40:13.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjq0023scacb418gslv","content":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>张凯/男/1996.12.28</li>\n<li>本科/淮阴工学院（计算机科学与技术专业）</li>\n<li>工作年限：4 年</li>\n<li>技术博客：<a href=\"https://zhkaif.github.io/\">https://zhkaif.github.io/</a></li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>手机：13182353591</li>\n<li>邮箱：<a href=\"mailto:&#x32;&#53;&#55;&#50;&#52;&#50;&#57;&#50;&#x33;&#x35;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#x32;&#53;&#55;&#50;&#52;&#50;&#57;&#50;&#x33;&#x35;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a></li>\n<li>QQ/微信手机号：2572429235/13182353591</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）<br>南京软通动力（2021 年 5 月 ~ 至今）</p>\n<h3 id=\"3M-POS-数据收集系统（2020-年-10-月-2021-年-5月）\"><a href=\"#3M-POS-数据收集系统（2020-年-10-月-2021-年-5月）\" class=\"headerlink\" title=\"3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）\"></a>3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）</h3><p>帮助 3M 公司使用系统自动处理经销商的销售数据。<br>包括对数据的自动定时抽取上传、校验、转换等基础，以及错误数据回滚、经销商管理、日志管理等配套功能。</p>\n<h4 id=\"职责\"><a href=\"#职责\" class=\"headerlink\" title=\"职责\"></a>职责</h4><ul>\n<li>WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。</li>\n<li>客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。</li>\n<li>经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。</li>\n<li>系统操作手册和客户端安装手册的编写。</li>\n<li>系统后续功能的开发和运维工作。</li>\n</ul>\n<h4 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>WEB：Vue + Element-ui</li>\n<li>API：SpringBoot + Jpa + Hibernate + Swagger</li>\n<li>数据库：SQLSERVER</li>\n<li>客户端：Winform + Cefsharp</li>\n<li>此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。</li>\n</ul>\n<h5 id=\"业绩成果\"><a href=\"#业绩成果\" class=\"headerlink\" title=\"业绩成果\"></a>业绩成果</h5><p>目前已经成功上线 7 家经销商，后续上线正则有序进行，2021 年计划上线 100 家经销商。</p>\n<h3 id=\"ANA-航空到着案内（2019-年-11-月-2020-年-6-月）\"><a href=\"#ANA-航空到着案内（2019-年-11-月-2020-年-6-月）\" class=\"headerlink\" title=\"ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）\"></a>ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）</h3><p>面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。</p>\n<ul>\n<li>在线查询航班并将所查航班信息发送到邮箱服务</li>\n<li>个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。</li>\n<li>航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。</li>\n<li>航空公司新闻和注意事项提示信息的展示</li>\n<li>Web 端管理新闻和注意事项</li>\n</ul>\n<h4 id=\"职责-1\"><a href=\"#职责-1\" class=\"headerlink\" title=\"职责\"></a>职责</h4><ul>\n<li>后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。</li>\n<li>航班查询页面的开发。</li>\n<li>为适应手机、平板、WEB 对多个页面进行调整。</li>\n<li>测试式样书的编写。</li>\n</ul>\n<h4 id=\"项目总结-1\"><a href=\"#项目总结-1\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术-1\"><a href=\"#使用技术-1\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>WEB：Kony + Node.js</li>\n<li>API：JavaService</li>\n<li>数据库：Mysql</li>\n<li>收获：进一步理解了 Kony 的开发生态圈，并通过 Kony 的云平台发布后端的 API，很便捷。</li>\n</ul>\n<h3 id=\"爬虫开发与部署\"><a href=\"#爬虫开发与部署\" class=\"headerlink\" title=\"爬虫开发与部署\"></a>爬虫开发与部署</h3><p>使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。</p>\n<h3 id=\"职责-2\"><a href=\"#职责-2\" class=\"headerlink\" title=\"职责\"></a>职责</h3><ul>\n<li>Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写</li>\n<li>爬虫发布到部署好的 Crawlab 定期执行</li>\n<li>3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能</li>\n</ul>\n<h4 id=\"项目总结-2\"><a href=\"#项目总结-2\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术-2\"><a href=\"#使用技术-2\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>爬虫：Python + Scrapy</li>\n<li>数据库：MongoDB + ElasticSearch + Redis</li>\n<li>发布平台：crawlab</li>\n<li>收获：更熟悉 Python，学会了多种存储方式以及各自的优势。反爬虫的初步了解和应对方法。</li>\n</ul>\n<h3 id=\"ElasticSearch-管理及新闻检索平台\"><a href=\"#ElasticSearch-管理及新闻检索平台\" class=\"headerlink\" title=\"ElasticSearch 管理及新闻检索平台\"></a>ElasticSearch 管理及新闻检索平台</h3><p>将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。</p>\n<h3 id=\"职责-3\"><a href=\"#职责-3\" class=\"headerlink\" title=\"职责\"></a>职责</h3><p>整个项目的搭建和前后台开发。</p>\n<h4 id=\"项目总结-3\"><a href=\"#项目总结-3\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术-3\"><a href=\"#使用技术-3\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>WEB：Vue + Elemen-ui</li>\n<li>API：Python + FastApi</li>\n<li>数据库：Mysql + ElasticSearch</li>\n<li>收获：加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。</li>\n</ul>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ul>\n<li>开发语言：Java/C#/Python</li>\n<li>前端框架：Vue/Angular</li>\n<li>数据库相关：MySQL/SQLSERVER/MongoDB/ES</li>\n<li>版本管理：Git/Svn</li>\n<li>单元测试：Junit/Pytest</li>\n<li>开发工具：Idea/STS/VsCode</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>张凯/男/1996.12.28</li>\n<li>本科/淮阴工学院（计算机科学与技术专业）</li>\n<li>工作年限：4 年</li>\n<li>技术博客：<a href=\"https://zhkaif.github.io/\">https://zhkaif.github.io/</a></li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>手机：13182353591</li>\n<li>邮箱：<a href=\"mailto:&#x32;&#53;&#55;&#50;&#52;&#50;&#57;&#50;&#x33;&#x35;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#x32;&#53;&#55;&#50;&#52;&#50;&#57;&#50;&#x33;&#x35;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a></li>\n<li>QQ/微信手机号：2572429235/13182353591</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）<br>南京软通动力（2021 年 5 月 ~ 至今）</p>\n<h3 id=\"3M-POS-数据收集系统（2020-年-10-月-2021-年-5月）\"><a href=\"#3M-POS-数据收集系统（2020-年-10-月-2021-年-5月）\" class=\"headerlink\" title=\"3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）\"></a>3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）</h3><p>帮助 3M 公司使用系统自动处理经销商的销售数据。<br>包括对数据的自动定时抽取上传、校验、转换等基础，以及错误数据回滚、经销商管理、日志管理等配套功能。</p>\n<h4 id=\"职责\"><a href=\"#职责\" class=\"headerlink\" title=\"职责\"></a>职责</h4><ul>\n<li>WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。</li>\n<li>客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。</li>\n<li>经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。</li>\n<li>系统操作手册和客户端安装手册的编写。</li>\n<li>系统后续功能的开发和运维工作。</li>\n</ul>\n<h4 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>WEB：Vue + Element-ui</li>\n<li>API：SpringBoot + Jpa + Hibernate + Swagger</li>\n<li>数据库：SQLSERVER</li>\n<li>客户端：Winform + Cefsharp</li>\n<li>此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。</li>\n</ul>\n<h5 id=\"业绩成果\"><a href=\"#业绩成果\" class=\"headerlink\" title=\"业绩成果\"></a>业绩成果</h5><p>目前已经成功上线 7 家经销商，后续上线正则有序进行，2021 年计划上线 100 家经销商。</p>\n<h3 id=\"ANA-航空到着案内（2019-年-11-月-2020-年-6-月）\"><a href=\"#ANA-航空到着案内（2019-年-11-月-2020-年-6-月）\" class=\"headerlink\" title=\"ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）\"></a>ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）</h3><p>面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。</p>\n<ul>\n<li>在线查询航班并将所查航班信息发送到邮箱服务</li>\n<li>个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。</li>\n<li>航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。</li>\n<li>航空公司新闻和注意事项提示信息的展示</li>\n<li>Web 端管理新闻和注意事项</li>\n</ul>\n<h4 id=\"职责-1\"><a href=\"#职责-1\" class=\"headerlink\" title=\"职责\"></a>职责</h4><ul>\n<li>后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。</li>\n<li>航班查询页面的开发。</li>\n<li>为适应手机、平板、WEB 对多个页面进行调整。</li>\n<li>测试式样书的编写。</li>\n</ul>\n<h4 id=\"项目总结-1\"><a href=\"#项目总结-1\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术-1\"><a href=\"#使用技术-1\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>WEB：Kony + Node.js</li>\n<li>API：JavaService</li>\n<li>数据库：Mysql</li>\n<li>收获：进一步理解了 Kony 的开发生态圈，并通过 Kony 的云平台发布后端的 API，很便捷。</li>\n</ul>\n<h3 id=\"爬虫开发与部署\"><a href=\"#爬虫开发与部署\" class=\"headerlink\" title=\"爬虫开发与部署\"></a>爬虫开发与部署</h3><p>使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。</p>\n<h3 id=\"职责-2\"><a href=\"#职责-2\" class=\"headerlink\" title=\"职责\"></a>职责</h3><ul>\n<li>Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写</li>\n<li>爬虫发布到部署好的 Crawlab 定期执行</li>\n<li>3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能</li>\n</ul>\n<h4 id=\"项目总结-2\"><a href=\"#项目总结-2\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术-2\"><a href=\"#使用技术-2\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>爬虫：Python + Scrapy</li>\n<li>数据库：MongoDB + ElasticSearch + Redis</li>\n<li>发布平台：crawlab</li>\n<li>收获：更熟悉 Python，学会了多种存储方式以及各自的优势。反爬虫的初步了解和应对方法。</li>\n</ul>\n<h3 id=\"ElasticSearch-管理及新闻检索平台\"><a href=\"#ElasticSearch-管理及新闻检索平台\" class=\"headerlink\" title=\"ElasticSearch 管理及新闻检索平台\"></a>ElasticSearch 管理及新闻检索平台</h3><p>将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。</p>\n<h3 id=\"职责-3\"><a href=\"#职责-3\" class=\"headerlink\" title=\"职责\"></a>职责</h3><p>整个项目的搭建和前后台开发。</p>\n<h4 id=\"项目总结-3\"><a href=\"#项目总结-3\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h4><h5 id=\"使用技术-3\"><a href=\"#使用技术-3\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h5><ul>\n<li>WEB：Vue + Elemen-ui</li>\n<li>API：Python + FastApi</li>\n<li>数据库：Mysql + ElasticSearch</li>\n<li>收获：加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。</li>\n</ul>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ul>\n<li>开发语言：Java/C#/Python</li>\n<li>前端框架：Vue/Angular</li>\n<li>数据库相关：MySQL/SQLSERVER/MongoDB/ES</li>\n<li>版本管理：Git/Svn</li>\n<li>单元测试：Junit/Pytest</li>\n<li>开发工具：Idea/STS/VsCode</li>\n</ul>\n"},{"title":"async/await的理解","date":"2022-03-27T07:22:54.000Z","_content":"## async/await的理解\n\n遇到个五连回调的代码，真的是地狱级拷打，用`async await`进行了一波改写，顿时神清气爽，总结一下。\n顾名思义，`async`是异步的简写，`await`是 `async await`的简写。所以async就是用于声明一个`function`是异步的，而`await`就是用来等待这个异步方法执行完成的。另外，规定`await`只能在`async`中使用。\n\n### async作用及工作原理\n\n先看下`async`是怎么处理返回值的\n\n```js\n    async function testAsync() {\n    return \"hello world\";\n    }\n\n    const result = testAsync();\n    console.log(result);// Promise {'hello world'}\n```\n\n可见，`async`返回一个`Promise`对象。如果在`async`函数中直接`return`一个值，那么`async`会把这个值通过`Promise.resolve()`封装成`Promise`对象。`Promise`的特点——无等待，所以在没有使用`await`的情况下，`async`会立即执行，不会阻塞后面的代码。\n\n### await在等谁呢？\n\n原以为，`await`在等待`async`的函数完成，等`async`的讯息。看了文档后，`await`等待的其实是一个表达式，这个表达式的计算结果是`Promise`对象或者其它值。\n`await`不仅仅用于等`Promise`对象，它可以等任意表达式的结果，所以`await`是可以接普通函数的。\n\n```js\n    function getValue() {\n        return 123;\n    }\n\n    async function testAsync() {\n        return Promise.resolve(\"hello world\");\n    }\n\n    async function test() {\n        const v1 = await getValue();\n        const v2 = await testAsync();\n        console.log(v1, v2);// 123 hello world\n    }\n\n    test();\n```\n\n### await等到结果之后\n\n返回`Promise`对象的处理结果，如果等待的不是`Promise`对象，则返回值本身。\n`await`会在暂停`async`函数，等待`Promise`处理完成。\n如果`Promise`正常处理，则回调的`resolve`函数参数作为`await`的值，继续执行`async`函数。\n如果`Promise`处理异常，`await`会把Promise的异常原因抛出。\n\n### 为啥要使用async/await\n\n反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。\n\n```js\n    function mockApi() {\n        return new Promise((resolve) => {\n            setTimeout(() => resolve(\"hello world\"), 1000);\n        });\n    }\n\n    // then写法\n    mockApi().then(v => {\n        console.log(\"then\", v);\n    })\n\n    // async/await写法\n    async function test() {\n        const v = await mockApi();\n        console.log(v);\n    }\n\ntest();\n```\n\n`async/await`反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂\n不要着急，脱裤子肯定不是为了...\n单一的`Promise`链并不能发现`async/await`的妙用😏，当遇到多个`Promise`组成的`then`链时，你会发现`async/await`就是救世主。\n试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。\n`setTimeout`受累一下😙😙😙\n\n```js\n/**\n * 传入参数value，表示这个函数执行的时间\n * 执行结果增加1000，用于下一步\n * @param {*} value 时间\n * @returns 时间+1000ms\n */\n    function mockApi(value) {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(value + 1000), value);\n    });\n    }\n\n    function step1(value) {\n    console.log(`step1 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step2(value) {\n    console.log(`step2 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step3(value) {\n    console.log(`step3 with ${value}`);\n    return mockApi(value);\n    }\n\n    // then写法\n\n    function testThen() {\n    console.time(\"testThen\");\n    const time1 = 300;\n    step1(time1).then((time2) => {\n        step2(time2).then((time3) => {\n        step3(time3).then((result) => {\n            console.log(`result is ${result}`); // 我已经晕了😵😵😵😵\n            console.timeEnd(\"testThen\");\n        });\n        });\n    });\n    }\n\n    testThen();\n    // step1 with 300\n    // step2 with 1300\n    // step3 with 2300\n    // result is 3300\n    // testThen: 3921.948ms\n\n    // async/await写法\n    async function testAsync() {\n        console.time(\"testAsync\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time2 = await step3(time1);\n        const result = await step3(time1);\n        console.log(`result is ${result}`); // YYDS\n        console.timeEnd(\"testAsync\");\n    }\n\n    testAsync();\n```\n\n`async/await`有多清晰，不用多说了吧。\n\n## 附庸风雅😳😳😳\n\n**<font size=4>梅花引</font>** <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font>\n\n**白鸥问我泊孤舟**\n\n*是身留？是心留？*\n\n**心若留时，何事锁眉头？**\n\n*风拍小帘灯晕舞*\n\n**对闲影，冷清清，忆旧游。**\n\n*旧游旧游今在不？*\n\n**花外楼，柳下舟。**\n\n*梦也梦也，梦不到，寒水空流。*\n\n**漠漠黄云，湿透木棉裘。**\n\n*都道无人愁似我*\n\n**今夜雪，有梅花，似我愁。**\n","source":"_posts/async-await的理解.md","raw":"---\ntitle: async/await的理解\ndate: 2022-03-27 15:22:54\ntags:\n    - 异步\n    - async/await\ncategories: [前端]\n---\n## async/await的理解\n\n遇到个五连回调的代码，真的是地狱级拷打，用`async await`进行了一波改写，顿时神清气爽，总结一下。\n顾名思义，`async`是异步的简写，`await`是 `async await`的简写。所以async就是用于声明一个`function`是异步的，而`await`就是用来等待这个异步方法执行完成的。另外，规定`await`只能在`async`中使用。\n\n### async作用及工作原理\n\n先看下`async`是怎么处理返回值的\n\n```js\n    async function testAsync() {\n    return \"hello world\";\n    }\n\n    const result = testAsync();\n    console.log(result);// Promise {'hello world'}\n```\n\n可见，`async`返回一个`Promise`对象。如果在`async`函数中直接`return`一个值，那么`async`会把这个值通过`Promise.resolve()`封装成`Promise`对象。`Promise`的特点——无等待，所以在没有使用`await`的情况下，`async`会立即执行，不会阻塞后面的代码。\n\n### await在等谁呢？\n\n原以为，`await`在等待`async`的函数完成，等`async`的讯息。看了文档后，`await`等待的其实是一个表达式，这个表达式的计算结果是`Promise`对象或者其它值。\n`await`不仅仅用于等`Promise`对象，它可以等任意表达式的结果，所以`await`是可以接普通函数的。\n\n```js\n    function getValue() {\n        return 123;\n    }\n\n    async function testAsync() {\n        return Promise.resolve(\"hello world\");\n    }\n\n    async function test() {\n        const v1 = await getValue();\n        const v2 = await testAsync();\n        console.log(v1, v2);// 123 hello world\n    }\n\n    test();\n```\n\n### await等到结果之后\n\n返回`Promise`对象的处理结果，如果等待的不是`Promise`对象，则返回值本身。\n`await`会在暂停`async`函数，等待`Promise`处理完成。\n如果`Promise`正常处理，则回调的`resolve`函数参数作为`await`的值，继续执行`async`函数。\n如果`Promise`处理异常，`await`会把Promise的异常原因抛出。\n\n### 为啥要使用async/await\n\n反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。\n\n```js\n    function mockApi() {\n        return new Promise((resolve) => {\n            setTimeout(() => resolve(\"hello world\"), 1000);\n        });\n    }\n\n    // then写法\n    mockApi().then(v => {\n        console.log(\"then\", v);\n    })\n\n    // async/await写法\n    async function test() {\n        const v = await mockApi();\n        console.log(v);\n    }\n\ntest();\n```\n\n`async/await`反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂\n不要着急，脱裤子肯定不是为了...\n单一的`Promise`链并不能发现`async/await`的妙用😏，当遇到多个`Promise`组成的`then`链时，你会发现`async/await`就是救世主。\n试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。\n`setTimeout`受累一下😙😙😙\n\n```js\n/**\n * 传入参数value，表示这个函数执行的时间\n * 执行结果增加1000，用于下一步\n * @param {*} value 时间\n * @returns 时间+1000ms\n */\n    function mockApi(value) {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(value + 1000), value);\n    });\n    }\n\n    function step1(value) {\n    console.log(`step1 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step2(value) {\n    console.log(`step2 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step3(value) {\n    console.log(`step3 with ${value}`);\n    return mockApi(value);\n    }\n\n    // then写法\n\n    function testThen() {\n    console.time(\"testThen\");\n    const time1 = 300;\n    step1(time1).then((time2) => {\n        step2(time2).then((time3) => {\n        step3(time3).then((result) => {\n            console.log(`result is ${result}`); // 我已经晕了😵😵😵😵\n            console.timeEnd(\"testThen\");\n        });\n        });\n    });\n    }\n\n    testThen();\n    // step1 with 300\n    // step2 with 1300\n    // step3 with 2300\n    // result is 3300\n    // testThen: 3921.948ms\n\n    // async/await写法\n    async function testAsync() {\n        console.time(\"testAsync\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time2 = await step3(time1);\n        const result = await step3(time1);\n        console.log(`result is ${result}`); // YYDS\n        console.timeEnd(\"testAsync\");\n    }\n\n    testAsync();\n```\n\n`async/await`有多清晰，不用多说了吧。\n\n## 附庸风雅😳😳😳\n\n**<font size=4>梅花引</font>** <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font>\n\n**白鸥问我泊孤舟**\n\n*是身留？是心留？*\n\n**心若留时，何事锁眉头？**\n\n*风拍小帘灯晕舞*\n\n**对闲影，冷清清，忆旧游。**\n\n*旧游旧游今在不？*\n\n**花外楼，柳下舟。**\n\n*梦也梦也，梦不到，寒水空流。*\n\n**漠漠黄云，湿透木棉裘。**\n\n*都道无人愁似我*\n\n**今夜雪，有梅花，似我愁。**\n","slug":"async-await的理解","published":1,"updated":"2022-10-27T06:40:13.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjr0027scacgm6t9mto","content":"<h2 id=\"async-await的理解\"><a href=\"#async-await的理解\" class=\"headerlink\" title=\"async/await的理解\"></a>async/await的理解</h2><p>遇到个五连回调的代码，真的是地狱级拷打，用<code>async await</code>进行了一波改写，顿时神清气爽，总结一下。<br>顾名思义，<code>async</code>是异步的简写，<code>await</code>是 <code>async await</code>的简写。所以async就是用于声明一个<code>function</code>是异步的，而<code>await</code>就是用来等待这个异步方法执行完成的。另外，规定<code>await</code>只能在<code>async</code>中使用。</p>\n<h3 id=\"async作用及工作原理\"><a href=\"#async作用及工作原理\" class=\"headerlink\" title=\"async作用及工作原理\"></a>async作用及工作原理</h3><p>先看下<code>async</code>是怎么处理返回值的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);<span class=\"comment\">// Promise &#123;&#x27;hello world&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可见，<code>async</code>返回一个<code>Promise</code>对象。如果在<code>async</code>函数中直接<code>return</code>一个值，那么<code>async</code>会把这个值通过<code>Promise.resolve()</code>封装成<code>Promise</code>对象。<code>Promise</code>的特点——无等待，所以在没有使用<code>await</code>的情况下，<code>async</code>会立即执行，不会阻塞后面的代码。</p>\n<h3 id=\"await在等谁呢？\"><a href=\"#await在等谁呢？\" class=\"headerlink\" title=\"await在等谁呢？\"></a>await在等谁呢？</h3><p>原以为，<code>await</code>在等待<code>async</code>的函数完成，等<code>async</code>的讯息。看了文档后，<code>await</code>等待的其实是一个表达式，这个表达式的计算结果是<code>Promise</code>对象或者其它值。<br><code>await</code>不仅仅用于等<code>Promise</code>对象，它可以等任意表达式的结果，所以<code>await</code>是可以接普通函数的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v1 = <span class=\"keyword\">await</span> <span class=\"title function_\">getValue</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v2 = <span class=\"keyword\">await</span> <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v1, v2);<span class=\"comment\">// 123 hello world</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"await等到结果之后\"><a href=\"#await等到结果之后\" class=\"headerlink\" title=\"await等到结果之后\"></a>await等到结果之后</h3><p>返回<code>Promise</code>对象的处理结果，如果等待的不是<code>Promise</code>对象，则返回值本身。<br><code>await</code>会在暂停<code>async</code>函数，等待<code>Promise</code>处理完成。<br>如果<code>Promise</code>正常处理，则回调的<code>resolve</code>函数参数作为<code>await</code>的值，继续执行<code>async</code>函数。<br>如果<code>Promise</code>处理异常，<code>await</code>会把Promise的异常原因抛出。</p>\n<h3 id=\"为啥要使用async-await\"><a href=\"#为啥要使用async-await\" class=\"headerlink\" title=\"为啥要使用async/await\"></a>为啥要使用async/await</h3><p>反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\">    <span class=\"title function_\">mockApi</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;then&quot;</span>, v);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> v = <span class=\"keyword\">await</span> <span class=\"title function_\">mockApi</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂<br>不要着急，脱裤子肯定不是为了…<br>单一的<code>Promise</code>链并不能发现<code>async/await</code>的妙用😏，当遇到多个<code>Promise</code>组成的<code>then</code>链时，你会发现<code>async/await</code>就是救世主。<br>试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。<br><code>setTimeout</code>受累一下😙😙😙</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入参数value，表示这个函数执行的时间</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行结果增加1000，用于下一步</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 时间+1000ms</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(value + <span class=\"number\">1000</span>), value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">testThen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"title function_\">step1</span>(time1).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step2</span>(time2).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time3</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step3</span>(time3).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// 我已经晕了😵😵😵😵</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testThen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// step1 with 300</span></span><br><span class=\"line\">    <span class=\"comment\">// step2 with 1300</span></span><br><span class=\"line\">    <span class=\"comment\">// step3 with 2300</span></span><br><span class=\"line\">    <span class=\"comment\">// result is 3300</span></span><br><span class=\"line\">    <span class=\"comment\">// testThen: 3921.948ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// YYDS</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testAsync</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>有多清晰，不用多说了吧。</p>\n<h2 id=\"附庸风雅😳😳😳\"><a href=\"#附庸风雅😳😳😳\" class=\"headerlink\" title=\"附庸风雅😳😳😳\"></a>附庸风雅😳😳😳</h2><p><strong><font size=4>梅花引</font></strong> <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font></p>\n<p><strong>白鸥问我泊孤舟</strong></p>\n<p><em>是身留？是心留？</em></p>\n<p><strong>心若留时，何事锁眉头？</strong></p>\n<p><em>风拍小帘灯晕舞</em></p>\n<p><strong>对闲影，冷清清，忆旧游。</strong></p>\n<p><em>旧游旧游今在不？</em></p>\n<p><strong>花外楼，柳下舟。</strong></p>\n<p><em>梦也梦也，梦不到，寒水空流。</em></p>\n<p><strong>漠漠黄云，湿透木棉裘。</strong></p>\n<p><em>都道无人愁似我</em></p>\n<p><strong>今夜雪，有梅花，似我愁。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"async-await的理解\"><a href=\"#async-await的理解\" class=\"headerlink\" title=\"async/await的理解\"></a>async/await的理解</h2><p>遇到个五连回调的代码，真的是地狱级拷打，用<code>async await</code>进行了一波改写，顿时神清气爽，总结一下。<br>顾名思义，<code>async</code>是异步的简写，<code>await</code>是 <code>async await</code>的简写。所以async就是用于声明一个<code>function</code>是异步的，而<code>await</code>就是用来等待这个异步方法执行完成的。另外，规定<code>await</code>只能在<code>async</code>中使用。</p>\n<h3 id=\"async作用及工作原理\"><a href=\"#async作用及工作原理\" class=\"headerlink\" title=\"async作用及工作原理\"></a>async作用及工作原理</h3><p>先看下<code>async</code>是怎么处理返回值的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);<span class=\"comment\">// Promise &#123;&#x27;hello world&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可见，<code>async</code>返回一个<code>Promise</code>对象。如果在<code>async</code>函数中直接<code>return</code>一个值，那么<code>async</code>会把这个值通过<code>Promise.resolve()</code>封装成<code>Promise</code>对象。<code>Promise</code>的特点——无等待，所以在没有使用<code>await</code>的情况下，<code>async</code>会立即执行，不会阻塞后面的代码。</p>\n<h3 id=\"await在等谁呢？\"><a href=\"#await在等谁呢？\" class=\"headerlink\" title=\"await在等谁呢？\"></a>await在等谁呢？</h3><p>原以为，<code>await</code>在等待<code>async</code>的函数完成，等<code>async</code>的讯息。看了文档后，<code>await</code>等待的其实是一个表达式，这个表达式的计算结果是<code>Promise</code>对象或者其它值。<br><code>await</code>不仅仅用于等<code>Promise</code>对象，它可以等任意表达式的结果，所以<code>await</code>是可以接普通函数的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v1 = <span class=\"keyword\">await</span> <span class=\"title function_\">getValue</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v2 = <span class=\"keyword\">await</span> <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v1, v2);<span class=\"comment\">// 123 hello world</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"await等到结果之后\"><a href=\"#await等到结果之后\" class=\"headerlink\" title=\"await等到结果之后\"></a>await等到结果之后</h3><p>返回<code>Promise</code>对象的处理结果，如果等待的不是<code>Promise</code>对象，则返回值本身。<br><code>await</code>会在暂停<code>async</code>函数，等待<code>Promise</code>处理完成。<br>如果<code>Promise</code>正常处理，则回调的<code>resolve</code>函数参数作为<code>await</code>的值，继续执行<code>async</code>函数。<br>如果<code>Promise</code>处理异常，<code>await</code>会把Promise的异常原因抛出。</p>\n<h3 id=\"为啥要使用async-await\"><a href=\"#为啥要使用async-await\" class=\"headerlink\" title=\"为啥要使用async/await\"></a>为啥要使用async/await</h3><p>反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\">    <span class=\"title function_\">mockApi</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;then&quot;</span>, v);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> v = <span class=\"keyword\">await</span> <span class=\"title function_\">mockApi</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂<br>不要着急，脱裤子肯定不是为了…<br>单一的<code>Promise</code>链并不能发现<code>async/await</code>的妙用😏，当遇到多个<code>Promise</code>组成的<code>then</code>链时，你会发现<code>async/await</code>就是救世主。<br>试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。<br><code>setTimeout</code>受累一下😙😙😙</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入参数value，表示这个函数执行的时间</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行结果增加1000，用于下一步</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 时间+1000ms</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(value + <span class=\"number\">1000</span>), value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">testThen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"title function_\">step1</span>(time1).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step2</span>(time2).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time3</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step3</span>(time3).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// 我已经晕了😵😵😵😵</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testThen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// step1 with 300</span></span><br><span class=\"line\">    <span class=\"comment\">// step2 with 1300</span></span><br><span class=\"line\">    <span class=\"comment\">// step3 with 2300</span></span><br><span class=\"line\">    <span class=\"comment\">// result is 3300</span></span><br><span class=\"line\">    <span class=\"comment\">// testThen: 3921.948ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// YYDS</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testAsync</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>有多清晰，不用多说了吧。</p>\n<h2 id=\"附庸风雅😳😳😳\"><a href=\"#附庸风雅😳😳😳\" class=\"headerlink\" title=\"附庸风雅😳😳😳\"></a>附庸风雅😳😳😳</h2><p><strong><font size=4>梅花引</font></strong> <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font></p>\n<p><strong>白鸥问我泊孤舟</strong></p>\n<p><em>是身留？是心留？</em></p>\n<p><strong>心若留时，何事锁眉头？</strong></p>\n<p><em>风拍小帘灯晕舞</em></p>\n<p><strong>对闲影，冷清清，忆旧游。</strong></p>\n<p><em>旧游旧游今在不？</em></p>\n<p><strong>花外楼，柳下舟。</strong></p>\n<p><em>梦也梦也，梦不到，寒水空流。</em></p>\n<p><strong>漠漠黄云，湿透木棉裘。</strong></p>\n<p><em>都道无人愁似我</em></p>\n<p><strong>今夜雪，有梅花，似我愁。</strong></p>\n"},{"title":"css学习三","date":"2022-04-05T03:18:10.000Z","_content":"\n## CSS 学习三\n\n继续\n\n### CSS Fonts\n\n- `font-family`：指定字体\n\n- `font-size`：字体大小\n\n- `font-style`：字体样式\n  - `normal`：默认值\n  - `italic`：斜体\n  - `oblique`：斜体\n  - `inherit`：继承父元素\n\n- `font-variant`：将小写字母转为大写，但是字体尺寸更小\n  - `normal`：默认值，不做任何样式调整\n  - `small-caps`：小型大写字母的字体\n  - `inherit`：继承父元素\n\n- `font-weight`：字体的粗细\n  - `normal`：默认\n  - `bold`：粗体\n  - `bloder`：更粗的粗体\n  - `lighter`：更细的字体\n  - `数字`：400等于normal，700等于bold\n  - `inherit`：继承父元素\n\n### CSS Link\n\n- `a:link`：未访问链接\n- `a:visited`：已访问链接\n- `a:hover`：鼠标移动到链接上\n- `a:active`：鼠标点击时\n\n### CSS 列表\n\n- `list-style-image`：将图像设置为列表标志\n- `list-style-position`：标志位置\n  - `outside`：放置在文本以内，并环绕文本对齐\n  - `inside`：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐\n  - `inherit`：继承父元素\n\n### 盒子模型\n\n封装周围的HTML元素，包括边距、边框、填充和内容\n\n- `Margin`：外边距，透明，用以清除边框外的区域\n- `Boder`：边框\n- `Padding`：内边距，透明，用以清除内容周围的区域\n- `Content`：内容\n\n### CSS Border\n\n- `boder-style`：设置四个边框的样式\n  - `none`：无边框，优先级最低，如果存在重叠边框，会显示为其他边框\n  - `hidden`：无边框，优先级最高，如果存在重叠边框，则不显示边框\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n\n- `border-width`：设置四个边框的宽度\n  - `thin`：细边框\n  - `medium`：中等边框（默认）\n  - `thick`：粗边框\n  - `length`：自定义值\n  - `inherit`：继承父元素\n\n- `boder-color`：设置四个边框颜色\n  - `color`：指定颜色\n  - `transparent`：透明（默认）\n  - `inherit`：继承父元素\n\n- `border-radius`：外边框圆角\n\n瑞了瑞了，满脑子英文单词\n\n### 美则美矣，未尽善焉😕😕😕\n\n**<font size=4>浪淘沙</font>**</font> <font size=2>欧阳修</font>\n\n**把酒祝东风，**\n\n*且共从容。*\n\n**垂杨紫陌洛城东。**\n\n*总是当时携手处，*\n\n**游遍芳丛。**\n\n*聚散苦匆匆，*\n\n**此恨无穷。**\n\n*今年花胜去年红。*\n\n**可惜明年花更好，**\n\n*知与谁同？*\n","source":"_posts/css学习三.md","raw":"---\ntitle: css学习三\ndate: 2022-04-05 11:18:10\ntags:\n  - css\ncategories: [前端]\n---\n\n## CSS 学习三\n\n继续\n\n### CSS Fonts\n\n- `font-family`：指定字体\n\n- `font-size`：字体大小\n\n- `font-style`：字体样式\n  - `normal`：默认值\n  - `italic`：斜体\n  - `oblique`：斜体\n  - `inherit`：继承父元素\n\n- `font-variant`：将小写字母转为大写，但是字体尺寸更小\n  - `normal`：默认值，不做任何样式调整\n  - `small-caps`：小型大写字母的字体\n  - `inherit`：继承父元素\n\n- `font-weight`：字体的粗细\n  - `normal`：默认\n  - `bold`：粗体\n  - `bloder`：更粗的粗体\n  - `lighter`：更细的字体\n  - `数字`：400等于normal，700等于bold\n  - `inherit`：继承父元素\n\n### CSS Link\n\n- `a:link`：未访问链接\n- `a:visited`：已访问链接\n- `a:hover`：鼠标移动到链接上\n- `a:active`：鼠标点击时\n\n### CSS 列表\n\n- `list-style-image`：将图像设置为列表标志\n- `list-style-position`：标志位置\n  - `outside`：放置在文本以内，并环绕文本对齐\n  - `inside`：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐\n  - `inherit`：继承父元素\n\n### 盒子模型\n\n封装周围的HTML元素，包括边距、边框、填充和内容\n\n- `Margin`：外边距，透明，用以清除边框外的区域\n- `Boder`：边框\n- `Padding`：内边距，透明，用以清除内容周围的区域\n- `Content`：内容\n\n### CSS Border\n\n- `boder-style`：设置四个边框的样式\n  - `none`：无边框，优先级最低，如果存在重叠边框，会显示为其他边框\n  - `hidden`：无边框，优先级最高，如果存在重叠边框，则不显示边框\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n\n- `border-width`：设置四个边框的宽度\n  - `thin`：细边框\n  - `medium`：中等边框（默认）\n  - `thick`：粗边框\n  - `length`：自定义值\n  - `inherit`：继承父元素\n\n- `boder-color`：设置四个边框颜色\n  - `color`：指定颜色\n  - `transparent`：透明（默认）\n  - `inherit`：继承父元素\n\n- `border-radius`：外边框圆角\n\n瑞了瑞了，满脑子英文单词\n\n### 美则美矣，未尽善焉😕😕😕\n\n**<font size=4>浪淘沙</font>**</font> <font size=2>欧阳修</font>\n\n**把酒祝东风，**\n\n*且共从容。*\n\n**垂杨紫陌洛城东。**\n\n*总是当时携手处，*\n\n**游遍芳丛。**\n\n*聚散苦匆匆，*\n\n**此恨无穷。**\n\n*今年花胜去年红。*\n\n**可惜明年花更好，**\n\n*知与谁同？*\n","slug":"css学习三","published":1,"updated":"2022-10-27T06:40:13.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjr002ascac8okghjfe","content":"<h2 id=\"CSS-学习三\"><a href=\"#CSS-学习三\" class=\"headerlink\" title=\"CSS 学习三\"></a>CSS 学习三</h2><p>继续</p>\n<h3 id=\"CSS-Fonts\"><a href=\"#CSS-Fonts\" class=\"headerlink\" title=\"CSS Fonts\"></a>CSS Fonts</h3><ul>\n<li><p><code>font-family</code>：指定字体</p>\n</li>\n<li><p><code>font-size</code>：字体大小</p>\n</li>\n<li><p><code>font-style</code>：字体样式</p>\n<ul>\n<li><code>normal</code>：默认值</li>\n<li><code>italic</code>：斜体</li>\n<li><code>oblique</code>：斜体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-variant</code>：将小写字母转为大写，但是字体尺寸更小</p>\n<ul>\n<li><code>normal</code>：默认值，不做任何样式调整</li>\n<li><code>small-caps</code>：小型大写字母的字体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-weight</code>：字体的粗细</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>bold</code>：粗体</li>\n<li><code>bloder</code>：更粗的粗体</li>\n<li><code>lighter</code>：更细的字体</li>\n<li><code>数字</code>：400等于normal，700等于bold</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS-Link\"><a href=\"#CSS-Link\" class=\"headerlink\" title=\"CSS Link\"></a>CSS Link</h3><ul>\n<li><code>a:link</code>：未访问链接</li>\n<li><code>a:visited</code>：已访问链接</li>\n<li><code>a:hover</code>：鼠标移动到链接上</li>\n<li><code>a:active</code>：鼠标点击时</li>\n</ul>\n<h3 id=\"CSS-列表\"><a href=\"#CSS-列表\" class=\"headerlink\" title=\"CSS 列表\"></a>CSS 列表</h3><ul>\n<li><code>list-style-image</code>：将图像设置为列表标志</li>\n<li><code>list-style-position</code>：标志位置<ul>\n<li><code>outside</code>：放置在文本以内，并环绕文本对齐</li>\n<li><code>inside</code>：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>封装周围的HTML元素，包括边距、边框、填充和内容</p>\n<ul>\n<li><code>Margin</code>：外边距，透明，用以清除边框外的区域</li>\n<li><code>Boder</code>：边框</li>\n<li><code>Padding</code>：内边距，透明，用以清除内容周围的区域</li>\n<li><code>Content</code>：内容</li>\n</ul>\n<h3 id=\"CSS-Border\"><a href=\"#CSS-Border\" class=\"headerlink\" title=\"CSS Border\"></a>CSS Border</h3><ul>\n<li><p><code>boder-style</code>：设置四个边框的样式</p>\n<ul>\n<li><code>none</code>：无边框，优先级最低，如果存在重叠边框，会显示为其他边框</li>\n<li><code>hidden</code>：无边框，优先级最高，如果存在重叠边框，则不显示边框</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-width</code>：设置四个边框的宽度</p>\n<ul>\n<li><code>thin</code>：细边框</li>\n<li><code>medium</code>：中等边框（默认）</li>\n<li><code>thick</code>：粗边框</li>\n<li><code>length</code>：自定义值</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>boder-color</code>：设置四个边框颜色</p>\n<ul>\n<li><code>color</code>：指定颜色</li>\n<li><code>transparent</code>：透明（默认）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-radius</code>：外边框圆角</p>\n</li>\n</ul>\n<p>瑞了瑞了，满脑子英文单词</p>\n<h3 id=\"美则美矣，未尽善焉😕😕😕\"><a href=\"#美则美矣，未尽善焉😕😕😕\" class=\"headerlink\" title=\"美则美矣，未尽善焉😕😕😕\"></a>美则美矣，未尽善焉😕😕😕</h3><p><strong><font size=4>浪淘沙</font></strong></font> <font size=2>欧阳修</font></p>\n<p><strong>把酒祝东风，</strong></p>\n<p><em>且共从容。</em></p>\n<p><strong>垂杨紫陌洛城东。</strong></p>\n<p><em>总是当时携手处，</em></p>\n<p><strong>游遍芳丛。</strong></p>\n<p><em>聚散苦匆匆，</em></p>\n<p><strong>此恨无穷。</strong></p>\n<p><em>今年花胜去年红。</em></p>\n<p><strong>可惜明年花更好，</strong></p>\n<p><em>知与谁同？</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-学习三\"><a href=\"#CSS-学习三\" class=\"headerlink\" title=\"CSS 学习三\"></a>CSS 学习三</h2><p>继续</p>\n<h3 id=\"CSS-Fonts\"><a href=\"#CSS-Fonts\" class=\"headerlink\" title=\"CSS Fonts\"></a>CSS Fonts</h3><ul>\n<li><p><code>font-family</code>：指定字体</p>\n</li>\n<li><p><code>font-size</code>：字体大小</p>\n</li>\n<li><p><code>font-style</code>：字体样式</p>\n<ul>\n<li><code>normal</code>：默认值</li>\n<li><code>italic</code>：斜体</li>\n<li><code>oblique</code>：斜体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-variant</code>：将小写字母转为大写，但是字体尺寸更小</p>\n<ul>\n<li><code>normal</code>：默认值，不做任何样式调整</li>\n<li><code>small-caps</code>：小型大写字母的字体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-weight</code>：字体的粗细</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>bold</code>：粗体</li>\n<li><code>bloder</code>：更粗的粗体</li>\n<li><code>lighter</code>：更细的字体</li>\n<li><code>数字</code>：400等于normal，700等于bold</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS-Link\"><a href=\"#CSS-Link\" class=\"headerlink\" title=\"CSS Link\"></a>CSS Link</h3><ul>\n<li><code>a:link</code>：未访问链接</li>\n<li><code>a:visited</code>：已访问链接</li>\n<li><code>a:hover</code>：鼠标移动到链接上</li>\n<li><code>a:active</code>：鼠标点击时</li>\n</ul>\n<h3 id=\"CSS-列表\"><a href=\"#CSS-列表\" class=\"headerlink\" title=\"CSS 列表\"></a>CSS 列表</h3><ul>\n<li><code>list-style-image</code>：将图像设置为列表标志</li>\n<li><code>list-style-position</code>：标志位置<ul>\n<li><code>outside</code>：放置在文本以内，并环绕文本对齐</li>\n<li><code>inside</code>：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>封装周围的HTML元素，包括边距、边框、填充和内容</p>\n<ul>\n<li><code>Margin</code>：外边距，透明，用以清除边框外的区域</li>\n<li><code>Boder</code>：边框</li>\n<li><code>Padding</code>：内边距，透明，用以清除内容周围的区域</li>\n<li><code>Content</code>：内容</li>\n</ul>\n<h3 id=\"CSS-Border\"><a href=\"#CSS-Border\" class=\"headerlink\" title=\"CSS Border\"></a>CSS Border</h3><ul>\n<li><p><code>boder-style</code>：设置四个边框的样式</p>\n<ul>\n<li><code>none</code>：无边框，优先级最低，如果存在重叠边框，会显示为其他边框</li>\n<li><code>hidden</code>：无边框，优先级最高，如果存在重叠边框，则不显示边框</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-width</code>：设置四个边框的宽度</p>\n<ul>\n<li><code>thin</code>：细边框</li>\n<li><code>medium</code>：中等边框（默认）</li>\n<li><code>thick</code>：粗边框</li>\n<li><code>length</code>：自定义值</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>boder-color</code>：设置四个边框颜色</p>\n<ul>\n<li><code>color</code>：指定颜色</li>\n<li><code>transparent</code>：透明（默认）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-radius</code>：外边框圆角</p>\n</li>\n</ul>\n<p>瑞了瑞了，满脑子英文单词</p>\n<h3 id=\"美则美矣，未尽善焉😕😕😕\"><a href=\"#美则美矣，未尽善焉😕😕😕\" class=\"headerlink\" title=\"美则美矣，未尽善焉😕😕😕\"></a>美则美矣，未尽善焉😕😕😕</h3><p><strong><font size=4>浪淘沙</font></strong></font> <font size=2>欧阳修</font></p>\n<p><strong>把酒祝东风，</strong></p>\n<p><em>且共从容。</em></p>\n<p><strong>垂杨紫陌洛城东。</strong></p>\n<p><em>总是当时携手处，</em></p>\n<p><strong>游遍芳丛。</strong></p>\n<p><em>聚散苦匆匆，</em></p>\n<p><strong>此恨无穷。</strong></p>\n<p><em>今年花胜去年红。</em></p>\n<p><strong>可惜明年花更好，</strong></p>\n<p><em>知与谁同？</em></p>\n"},{"title":"css学习二","date":"2022-04-04T00:52:38.000Z","_content":"\n## CSS 学习二\n\n继续\n\n### CSS 单位\n\n#### 相对长度\n\n- `em`：当前元素的字体尺寸\n- `ex`：英文字母小x的高度\n- `ch`：数字0的高度\n- `vw`：视窗宽度，1vm=视窗宽度的1%\n- `vh`：视窗高度，1vm=视窗高度的1%\n- `vmin`：vm和vh中较小的那个\n- `vmax`：vm和vh中较大的那个\n- `%`：😁😁😁\n\n#### 绝对长度\n\n- `cm`：厘米\n- `mm`：毫米\n- `in`：英寸\n- `px`：像素\n- `pt`：1pt = 1/72in\n- `pc`：1pc = 12 pt\n\n### CSS Text\n\n- `color`：设置文本颜色\n- `direction`：设置文字方向\n  - `ltr`：从左向右（默认）\n  - `rtl`：从右向左\n  - `ingerit`：继承父元素\n\n- `letter-spacing`：设置字符间距\n  - `noraml`：字符间没有额外的空间\n  - `length`：使用固定空间（可以为负值）\n  - `inherit`：继承父元素\n\n- `line-height`：设置行间距\n  - `normal`：默认\n  - `number`：设置数字，会与字体尺寸相乘得到行间距\n  - `length`：固定值\n  - `%`：字体尺寸的百分比为行间距\n  - `inherit`：继承父元素\n\n- `text-align`：文本的水平对齐方式\n  - `left`：左对齐（默认）\n  - `right`：右对齐\n  - `center`：居中\n  - `justify`：两端对齐\n  - `inherit`：继承父元素\n\n- `text-decoration`：添加文本修饰\n  - `none`：无修饰（默认）\n  - `underline`：下划线\n  - `overline`：上划线\n  - `line-through`：删除线\n  - `blink`：闪烁效果\n  - `inherit`：继承父元素\n\n- `text-indent`：首行缩进\n  - `length`：固定缩进\n  - `%`：基于父元素宽度的百分比缩进\n  - `inherit`：继承父元素\n\n- `text-shadow`：文本阴影\n  - `h-shadow`：必需，允许负值，水平阴影位置\n  - `v-shadow`：必需，允许负值，垂直阴影位置\n  - `blur`：模糊的距离\n  - `color`：阴影的颜色\n\n- `text-transform`：字母样式\n  - `none`：默认\n  - `capitalize`：每个单词以大写字母开头\n  - `uppercase`：全部大写\n  - `lowercase`：全部小写\n  - `inherit`：继承父元素\n\n- `unicode-bidi`：是否重写文本，需要配合`direction`使用\n  - `normal`：默认\n  - `embed`：创建一个附加的嵌入层面\n  - `bidi-override`：创建一个附加的嵌入层面，按照`direction`属性重新排序\n  - `initial`：设置默认值\n  - `inherit`：继承父元素\n这里`embed`属性和`normal`属性如果单独使用，最终样式看来是没有区别的。\n但是`embed`会创建一个附加的嵌入层面，因为在`bidi-override`属性值里面，`normal`是不会起作用的，因为`bidi-override`也创建了一个嵌入层面，这个时候就可以使用`embed`了\n\n- `vertical-align`：文本的垂直对齐方式\n  - `baseline`：默认\n  - `sub`：垂直对齐文本下标\n  - `super`：垂直对齐文本上标\n  - `top`：元素顶端与行中最高元素的顶端对齐\n  - `text-top`：元素顶端与父元素字体的顶端对齐\n  - `middle`：元素放于父元素的中部\n  - `bottom`：使元素及其后代元素的底部与整行的底部对齐\n  - `text-bottom`：元素底端与父元素字体的底端对齐\n  - `length`：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。\n  - `%`：使用 \"line-height\" 属性的百分比值来排列此元素。允许使用负值。\n  - `inherit`：继承父元素\n\n- `white-space`：空白处理方式\n  - `noraml`：连续的空白符会被合并，换行符会被当作空白符来处理\n  - `nowwrap`：和 normal 一样，连续的空白符会被合并。但文本内的换行无效\n  - `pre`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-wrap`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-line`：连续的空白符会被合并。在遇到换行符或者`<br>`元素时会换行\n  - `inherit`：继承父元素\n\n    |    | 换行符 | 空格和制表符 | 文字换行 | 行尾空格 |\n    | ---- | ---- | ---- | ---- | ---- |\n    | `normal` | 合并 | 合并 | 换行 | 删除 |\n    | `nowwrap` | 合并 | 合并 | 不换行 | 删除 |\n    | `pre` | 保留 | 保留 | 不换行 | 保留 |\n    | `pre-wrap` | 保留 | 保留 | 换行 | 挂起 |\n    | `pre-line` | 保留 | 保留 | 换行 | 换行 |\n\n- `word-spacing`：字间距\n  - `normal`：默认，使用标准空间\n  - `length`：使用指定空间\n  - `inherit`：继承父元素\n\n瑞了瑞了！！！\n\n### 有垣曰苑，无垣曰囿😉😉\n\n**<font size=4>临江仙</font>** <font size=1>夜归临皋</font> <font size=2>苏轼</font>\n\n**夜饮东坡醒复醉，**\n\n*归来仿佛三更。*\n\n**家童鼻息已雷鸣。**\n\n*敲门都不应，*\n\n**倚杖听江声。**\n\n*长恨此身非我有，*\n\n**何时忘却营营？**\n\n*夜阑风静彀纹平。*\n\n**小舟从此逝，**\n\n*江海寄余生。*\n","source":"_posts/css学习二.md","raw":"---\ntitle: css学习二\ndate: 2022-04-04 08:52:38\ntags:\n  - css\ncategories: [前端]\n---\n\n## CSS 学习二\n\n继续\n\n### CSS 单位\n\n#### 相对长度\n\n- `em`：当前元素的字体尺寸\n- `ex`：英文字母小x的高度\n- `ch`：数字0的高度\n- `vw`：视窗宽度，1vm=视窗宽度的1%\n- `vh`：视窗高度，1vm=视窗高度的1%\n- `vmin`：vm和vh中较小的那个\n- `vmax`：vm和vh中较大的那个\n- `%`：😁😁😁\n\n#### 绝对长度\n\n- `cm`：厘米\n- `mm`：毫米\n- `in`：英寸\n- `px`：像素\n- `pt`：1pt = 1/72in\n- `pc`：1pc = 12 pt\n\n### CSS Text\n\n- `color`：设置文本颜色\n- `direction`：设置文字方向\n  - `ltr`：从左向右（默认）\n  - `rtl`：从右向左\n  - `ingerit`：继承父元素\n\n- `letter-spacing`：设置字符间距\n  - `noraml`：字符间没有额外的空间\n  - `length`：使用固定空间（可以为负值）\n  - `inherit`：继承父元素\n\n- `line-height`：设置行间距\n  - `normal`：默认\n  - `number`：设置数字，会与字体尺寸相乘得到行间距\n  - `length`：固定值\n  - `%`：字体尺寸的百分比为行间距\n  - `inherit`：继承父元素\n\n- `text-align`：文本的水平对齐方式\n  - `left`：左对齐（默认）\n  - `right`：右对齐\n  - `center`：居中\n  - `justify`：两端对齐\n  - `inherit`：继承父元素\n\n- `text-decoration`：添加文本修饰\n  - `none`：无修饰（默认）\n  - `underline`：下划线\n  - `overline`：上划线\n  - `line-through`：删除线\n  - `blink`：闪烁效果\n  - `inherit`：继承父元素\n\n- `text-indent`：首行缩进\n  - `length`：固定缩进\n  - `%`：基于父元素宽度的百分比缩进\n  - `inherit`：继承父元素\n\n- `text-shadow`：文本阴影\n  - `h-shadow`：必需，允许负值，水平阴影位置\n  - `v-shadow`：必需，允许负值，垂直阴影位置\n  - `blur`：模糊的距离\n  - `color`：阴影的颜色\n\n- `text-transform`：字母样式\n  - `none`：默认\n  - `capitalize`：每个单词以大写字母开头\n  - `uppercase`：全部大写\n  - `lowercase`：全部小写\n  - `inherit`：继承父元素\n\n- `unicode-bidi`：是否重写文本，需要配合`direction`使用\n  - `normal`：默认\n  - `embed`：创建一个附加的嵌入层面\n  - `bidi-override`：创建一个附加的嵌入层面，按照`direction`属性重新排序\n  - `initial`：设置默认值\n  - `inherit`：继承父元素\n这里`embed`属性和`normal`属性如果单独使用，最终样式看来是没有区别的。\n但是`embed`会创建一个附加的嵌入层面，因为在`bidi-override`属性值里面，`normal`是不会起作用的，因为`bidi-override`也创建了一个嵌入层面，这个时候就可以使用`embed`了\n\n- `vertical-align`：文本的垂直对齐方式\n  - `baseline`：默认\n  - `sub`：垂直对齐文本下标\n  - `super`：垂直对齐文本上标\n  - `top`：元素顶端与行中最高元素的顶端对齐\n  - `text-top`：元素顶端与父元素字体的顶端对齐\n  - `middle`：元素放于父元素的中部\n  - `bottom`：使元素及其后代元素的底部与整行的底部对齐\n  - `text-bottom`：元素底端与父元素字体的底端对齐\n  - `length`：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。\n  - `%`：使用 \"line-height\" 属性的百分比值来排列此元素。允许使用负值。\n  - `inherit`：继承父元素\n\n- `white-space`：空白处理方式\n  - `noraml`：连续的空白符会被合并，换行符会被当作空白符来处理\n  - `nowwrap`：和 normal 一样，连续的空白符会被合并。但文本内的换行无效\n  - `pre`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-wrap`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-line`：连续的空白符会被合并。在遇到换行符或者`<br>`元素时会换行\n  - `inherit`：继承父元素\n\n    |    | 换行符 | 空格和制表符 | 文字换行 | 行尾空格 |\n    | ---- | ---- | ---- | ---- | ---- |\n    | `normal` | 合并 | 合并 | 换行 | 删除 |\n    | `nowwrap` | 合并 | 合并 | 不换行 | 删除 |\n    | `pre` | 保留 | 保留 | 不换行 | 保留 |\n    | `pre-wrap` | 保留 | 保留 | 换行 | 挂起 |\n    | `pre-line` | 保留 | 保留 | 换行 | 换行 |\n\n- `word-spacing`：字间距\n  - `normal`：默认，使用标准空间\n  - `length`：使用指定空间\n  - `inherit`：继承父元素\n\n瑞了瑞了！！！\n\n### 有垣曰苑，无垣曰囿😉😉\n\n**<font size=4>临江仙</font>** <font size=1>夜归临皋</font> <font size=2>苏轼</font>\n\n**夜饮东坡醒复醉，**\n\n*归来仿佛三更。*\n\n**家童鼻息已雷鸣。**\n\n*敲门都不应，*\n\n**倚杖听江声。**\n\n*长恨此身非我有，*\n\n**何时忘却营营？**\n\n*夜阑风静彀纹平。*\n\n**小舟从此逝，**\n\n*江海寄余生。*\n","slug":"css学习二","published":1,"updated":"2022-10-27T06:40:13.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjs002dscac68az6k7v","content":"<h2 id=\"CSS-学习二\"><a href=\"#CSS-学习二\" class=\"headerlink\" title=\"CSS 学习二\"></a>CSS 学习二</h2><p>继续</p>\n<h3 id=\"CSS-单位\"><a href=\"#CSS-单位\" class=\"headerlink\" title=\"CSS 单位\"></a>CSS 单位</h3><h4 id=\"相对长度\"><a href=\"#相对长度\" class=\"headerlink\" title=\"相对长度\"></a>相对长度</h4><ul>\n<li><code>em</code>：当前元素的字体尺寸</li>\n<li><code>ex</code>：英文字母小x的高度</li>\n<li><code>ch</code>：数字0的高度</li>\n<li><code>vw</code>：视窗宽度，1vm=视窗宽度的1%</li>\n<li><code>vh</code>：视窗高度，1vm=视窗高度的1%</li>\n<li><code>vmin</code>：vm和vh中较小的那个</li>\n<li><code>vmax</code>：vm和vh中较大的那个</li>\n<li><code>%</code>：😁😁😁</li>\n</ul>\n<h4 id=\"绝对长度\"><a href=\"#绝对长度\" class=\"headerlink\" title=\"绝对长度\"></a>绝对长度</h4><ul>\n<li><code>cm</code>：厘米</li>\n<li><code>mm</code>：毫米</li>\n<li><code>in</code>：英寸</li>\n<li><code>px</code>：像素</li>\n<li><code>pt</code>：1pt = 1/72in</li>\n<li><code>pc</code>：1pc = 12 pt</li>\n</ul>\n<h3 id=\"CSS-Text\"><a href=\"#CSS-Text\" class=\"headerlink\" title=\"CSS Text\"></a>CSS Text</h3><ul>\n<li><p><code>color</code>：设置文本颜色</p>\n</li>\n<li><p><code>direction</code>：设置文字方向</p>\n<ul>\n<li><code>ltr</code>：从左向右（默认）</li>\n<li><code>rtl</code>：从右向左</li>\n<li><code>ingerit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>letter-spacing</code>：设置字符间距</p>\n<ul>\n<li><code>noraml</code>：字符间没有额外的空间</li>\n<li><code>length</code>：使用固定空间（可以为负值）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>line-height</code>：设置行间距</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>number</code>：设置数字，会与字体尺寸相乘得到行间距</li>\n<li><code>length</code>：固定值</li>\n<li><code>%</code>：字体尺寸的百分比为行间距</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-align</code>：文本的水平对齐方式</p>\n<ul>\n<li><code>left</code>：左对齐（默认）</li>\n<li><code>right</code>：右对齐</li>\n<li><code>center</code>：居中</li>\n<li><code>justify</code>：两端对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-decoration</code>：添加文本修饰</p>\n<ul>\n<li><code>none</code>：无修饰（默认）</li>\n<li><code>underline</code>：下划线</li>\n<li><code>overline</code>：上划线</li>\n<li><code>line-through</code>：删除线</li>\n<li><code>blink</code>：闪烁效果</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-indent</code>：首行缩进</p>\n<ul>\n<li><code>length</code>：固定缩进</li>\n<li><code>%</code>：基于父元素宽度的百分比缩进</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-shadow</code>：文本阴影</p>\n<ul>\n<li><code>h-shadow</code>：必需，允许负值，水平阴影位置</li>\n<li><code>v-shadow</code>：必需，允许负值，垂直阴影位置</li>\n<li><code>blur</code>：模糊的距离</li>\n<li><code>color</code>：阴影的颜色</li>\n</ul>\n</li>\n<li><p><code>text-transform</code>：字母样式</p>\n<ul>\n<li><code>none</code>：默认</li>\n<li><code>capitalize</code>：每个单词以大写字母开头</li>\n<li><code>uppercase</code>：全部大写</li>\n<li><code>lowercase</code>：全部小写</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>unicode-bidi</code>：是否重写文本，需要配合<code>direction</code>使用</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>embed</code>：创建一个附加的嵌入层面</li>\n<li><code>bidi-override</code>：创建一个附加的嵌入层面，按照<code>direction</code>属性重新排序</li>\n<li><code>initial</code>：设置默认值</li>\n<li><code>inherit</code>：继承父元素<br>这里<code>embed</code>属性和<code>normal</code>属性如果单独使用，最终样式看来是没有区别的。<br>但是<code>embed</code>会创建一个附加的嵌入层面，因为在<code>bidi-override</code>属性值里面，<code>normal</code>是不会起作用的，因为<code>bidi-override</code>也创建了一个嵌入层面，这个时候就可以使用<code>embed</code>了</li>\n</ul>\n</li>\n<li><p><code>vertical-align</code>：文本的垂直对齐方式</p>\n<ul>\n<li><code>baseline</code>：默认</li>\n<li><code>sub</code>：垂直对齐文本下标</li>\n<li><code>super</code>：垂直对齐文本上标</li>\n<li><code>top</code>：元素顶端与行中最高元素的顶端对齐</li>\n<li><code>text-top</code>：元素顶端与父元素字体的顶端对齐</li>\n<li><code>middle</code>：元素放于父元素的中部</li>\n<li><code>bottom</code>：使元素及其后代元素的底部与整行的底部对齐</li>\n<li><code>text-bottom</code>：元素底端与父元素字体的底端对齐</li>\n<li><code>length</code>：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。</li>\n<li><code>%</code>：使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>white-space</code>：空白处理方式</p>\n<ul>\n<li><p><code>noraml</code>：连续的空白符会被合并，换行符会被当作空白符来处理</p>\n</li>\n<li><p><code>nowwrap</code>：和 normal 一样，连续的空白符会被合并。但文本内的换行无效</p>\n</li>\n<li><p><code>pre</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-wrap</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-line</code>：连续的空白符会被合并。在遇到换行符或者<code>&lt;br&gt;</code>元素时会换行</p>\n</li>\n<li><p><code>inherit</code>：继承父元素</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>换行符</th>\n<th>空格和制表符</th>\n<th>文字换行</th>\n<th>行尾空格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>normal</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>nowwrap</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>不换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>pre</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>不换行</td>\n<td>保留</td>\n</tr>\n<tr>\n<td><code>pre-wrap</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>挂起</td>\n</tr>\n<tr>\n<td><code>pre-line</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>换行</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p><code>word-spacing</code>：字间距</p>\n<ul>\n<li><code>normal</code>：默认，使用标准空间</li>\n<li><code>length</code>：使用指定空间</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<p>瑞了瑞了！！！</p>\n<h3 id=\"有垣曰苑，无垣曰囿😉😉\"><a href=\"#有垣曰苑，无垣曰囿😉😉\" class=\"headerlink\" title=\"有垣曰苑，无垣曰囿😉😉\"></a>有垣曰苑，无垣曰囿😉😉</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>夜归临皋</font> <font size=2>苏轼</font></p>\n<p><strong>夜饮东坡醒复醉，</strong></p>\n<p><em>归来仿佛三更。</em></p>\n<p><strong>家童鼻息已雷鸣。</strong></p>\n<p><em>敲门都不应，</em></p>\n<p><strong>倚杖听江声。</strong></p>\n<p><em>长恨此身非我有，</em></p>\n<p><strong>何时忘却营营？</strong></p>\n<p><em>夜阑风静彀纹平。</em></p>\n<p><strong>小舟从此逝，</strong></p>\n<p><em>江海寄余生。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-学习二\"><a href=\"#CSS-学习二\" class=\"headerlink\" title=\"CSS 学习二\"></a>CSS 学习二</h2><p>继续</p>\n<h3 id=\"CSS-单位\"><a href=\"#CSS-单位\" class=\"headerlink\" title=\"CSS 单位\"></a>CSS 单位</h3><h4 id=\"相对长度\"><a href=\"#相对长度\" class=\"headerlink\" title=\"相对长度\"></a>相对长度</h4><ul>\n<li><code>em</code>：当前元素的字体尺寸</li>\n<li><code>ex</code>：英文字母小x的高度</li>\n<li><code>ch</code>：数字0的高度</li>\n<li><code>vw</code>：视窗宽度，1vm=视窗宽度的1%</li>\n<li><code>vh</code>：视窗高度，1vm=视窗高度的1%</li>\n<li><code>vmin</code>：vm和vh中较小的那个</li>\n<li><code>vmax</code>：vm和vh中较大的那个</li>\n<li><code>%</code>：😁😁😁</li>\n</ul>\n<h4 id=\"绝对长度\"><a href=\"#绝对长度\" class=\"headerlink\" title=\"绝对长度\"></a>绝对长度</h4><ul>\n<li><code>cm</code>：厘米</li>\n<li><code>mm</code>：毫米</li>\n<li><code>in</code>：英寸</li>\n<li><code>px</code>：像素</li>\n<li><code>pt</code>：1pt = 1/72in</li>\n<li><code>pc</code>：1pc = 12 pt</li>\n</ul>\n<h3 id=\"CSS-Text\"><a href=\"#CSS-Text\" class=\"headerlink\" title=\"CSS Text\"></a>CSS Text</h3><ul>\n<li><p><code>color</code>：设置文本颜色</p>\n</li>\n<li><p><code>direction</code>：设置文字方向</p>\n<ul>\n<li><code>ltr</code>：从左向右（默认）</li>\n<li><code>rtl</code>：从右向左</li>\n<li><code>ingerit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>letter-spacing</code>：设置字符间距</p>\n<ul>\n<li><code>noraml</code>：字符间没有额外的空间</li>\n<li><code>length</code>：使用固定空间（可以为负值）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>line-height</code>：设置行间距</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>number</code>：设置数字，会与字体尺寸相乘得到行间距</li>\n<li><code>length</code>：固定值</li>\n<li><code>%</code>：字体尺寸的百分比为行间距</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-align</code>：文本的水平对齐方式</p>\n<ul>\n<li><code>left</code>：左对齐（默认）</li>\n<li><code>right</code>：右对齐</li>\n<li><code>center</code>：居中</li>\n<li><code>justify</code>：两端对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-decoration</code>：添加文本修饰</p>\n<ul>\n<li><code>none</code>：无修饰（默认）</li>\n<li><code>underline</code>：下划线</li>\n<li><code>overline</code>：上划线</li>\n<li><code>line-through</code>：删除线</li>\n<li><code>blink</code>：闪烁效果</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-indent</code>：首行缩进</p>\n<ul>\n<li><code>length</code>：固定缩进</li>\n<li><code>%</code>：基于父元素宽度的百分比缩进</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-shadow</code>：文本阴影</p>\n<ul>\n<li><code>h-shadow</code>：必需，允许负值，水平阴影位置</li>\n<li><code>v-shadow</code>：必需，允许负值，垂直阴影位置</li>\n<li><code>blur</code>：模糊的距离</li>\n<li><code>color</code>：阴影的颜色</li>\n</ul>\n</li>\n<li><p><code>text-transform</code>：字母样式</p>\n<ul>\n<li><code>none</code>：默认</li>\n<li><code>capitalize</code>：每个单词以大写字母开头</li>\n<li><code>uppercase</code>：全部大写</li>\n<li><code>lowercase</code>：全部小写</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>unicode-bidi</code>：是否重写文本，需要配合<code>direction</code>使用</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>embed</code>：创建一个附加的嵌入层面</li>\n<li><code>bidi-override</code>：创建一个附加的嵌入层面，按照<code>direction</code>属性重新排序</li>\n<li><code>initial</code>：设置默认值</li>\n<li><code>inherit</code>：继承父元素<br>这里<code>embed</code>属性和<code>normal</code>属性如果单独使用，最终样式看来是没有区别的。<br>但是<code>embed</code>会创建一个附加的嵌入层面，因为在<code>bidi-override</code>属性值里面，<code>normal</code>是不会起作用的，因为<code>bidi-override</code>也创建了一个嵌入层面，这个时候就可以使用<code>embed</code>了</li>\n</ul>\n</li>\n<li><p><code>vertical-align</code>：文本的垂直对齐方式</p>\n<ul>\n<li><code>baseline</code>：默认</li>\n<li><code>sub</code>：垂直对齐文本下标</li>\n<li><code>super</code>：垂直对齐文本上标</li>\n<li><code>top</code>：元素顶端与行中最高元素的顶端对齐</li>\n<li><code>text-top</code>：元素顶端与父元素字体的顶端对齐</li>\n<li><code>middle</code>：元素放于父元素的中部</li>\n<li><code>bottom</code>：使元素及其后代元素的底部与整行的底部对齐</li>\n<li><code>text-bottom</code>：元素底端与父元素字体的底端对齐</li>\n<li><code>length</code>：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。</li>\n<li><code>%</code>：使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>white-space</code>：空白处理方式</p>\n<ul>\n<li><p><code>noraml</code>：连续的空白符会被合并，换行符会被当作空白符来处理</p>\n</li>\n<li><p><code>nowwrap</code>：和 normal 一样，连续的空白符会被合并。但文本内的换行无效</p>\n</li>\n<li><p><code>pre</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-wrap</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-line</code>：连续的空白符会被合并。在遇到换行符或者<code>&lt;br&gt;</code>元素时会换行</p>\n</li>\n<li><p><code>inherit</code>：继承父元素</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>换行符</th>\n<th>空格和制表符</th>\n<th>文字换行</th>\n<th>行尾空格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>normal</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>nowwrap</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>不换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>pre</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>不换行</td>\n<td>保留</td>\n</tr>\n<tr>\n<td><code>pre-wrap</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>挂起</td>\n</tr>\n<tr>\n<td><code>pre-line</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>换行</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p><code>word-spacing</code>：字间距</p>\n<ul>\n<li><code>normal</code>：默认，使用标准空间</li>\n<li><code>length</code>：使用指定空间</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<p>瑞了瑞了！！！</p>\n<h3 id=\"有垣曰苑，无垣曰囿😉😉\"><a href=\"#有垣曰苑，无垣曰囿😉😉\" class=\"headerlink\" title=\"有垣曰苑，无垣曰囿😉😉\"></a>有垣曰苑，无垣曰囿😉😉</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>夜归临皋</font> <font size=2>苏轼</font></p>\n<p><strong>夜饮东坡醒复醉，</strong></p>\n<p><em>归来仿佛三更。</em></p>\n<p><strong>家童鼻息已雷鸣。</strong></p>\n<p><em>敲门都不应，</em></p>\n<p><strong>倚杖听江声。</strong></p>\n<p><em>长恨此身非我有，</em></p>\n<p><strong>何时忘却营营？</strong></p>\n<p><em>夜阑风静彀纹平。</em></p>\n<p><strong>小舟从此逝，</strong></p>\n<p><em>江海寄余生。</em></p>\n"},{"title":"css学习一","date":"2022-04-03T01:55:57.000Z","_content":"\n## CSS 学习一\n\n从涉及前端开发到现在，差不多有四年了，框架有`Vue`、`Angular`，组件库用了`ElementUI`、`NG-Zorro`、`Ant-Design`。\n而对于`CSS`，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下`CSS`，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）\n\n### 定义\n\n层叠样式表，用于设计`HTML`的风格和布局，字体、颜色、大小、间距等等。\n\n### 语法\n\n`CSS`由两部分组成：选择器，以及声明。\n一个熟悉与值的键值被称为声明，而将一个或者多个声明用`{}`括起来，就是声明块。\n声明作用到对应的`HTML`元素，就要加上选择器。\n\n### 选择器\n\n#### 基础选择器\n\n- 标签选择器：`h1`\n- 类选择器：`.checked`\n- ID 选择器：`#picker`\n- 通配选择器：`*`\n\n#### 属性选择器\n\n- [attr]：指定属性的元素\n- [attr=val]：属性等于指定值的元素\n- [attr*=val]：属性包含指定值的元素\n- [attr^=val]：属性以指定值开头的元素\n- [attr$=val]：属性以指定值结尾的元素\n- [attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）\n- [attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）\n\n#### 组合选择器\n\n- 相邻兄弟选择器：`A+B`\n- 普通兄弟选择器：`A~B`\n- 子选择器：`A>B`\n- 后代选择器：`AB`\n\n#### 伪类\n\n##### 条件伪类\n\n- `:lang()`：基于元素语言来匹配页面元素\n- `:dir()`：匹配特定文字书写方向的元素\n- `:has()`：匹配包含指定元素的元素\n- `:is()`：匹配指定选择器列表里的元素\n- `:not()`：用来匹配不符合一组选择器的元素\n\n##### 行为伪类\n\n-`:active`：鼠标激活的元素 -`:hover`：鼠标悬浮的元素 -`::selection`：鼠标选中的元素\n\n##### 状态伪类\n\n- `:target`：当前锚点的元素\n- `:link`：未访问的链接元素\n- `:visited`：已访问的链接元素\n- `:focus`：输入聚焦的表单元素\n- `:required`：输入必填的表单元素\n- `:valid`：输入合法的表单元素\n- `：invalid`：输入非法的表单元素\n- `:in-range`：输入范围以内的表单元素\n- `out-of-range`：输入范围以外的表单元素\n- `checked`：选项选中的表单元素\n- `optional`：选项可选的表单元素\n- `enabled`：事件启用的表单元素\n- `disabled`：事件禁用的表单元素\n- `read-only`：只读的表单元素\n- `read-write`：可读可写的表单元素\n- `blank`：输入为空的表单元素\n- `current()`：浏览中的元素\n- `past()`：已浏览的元素\n- `future`：未浏览的元素\n\n##### 结构伪类\n\n- `：root`：文档的根元素\n- `:empty`： 无子元素的元素\n- `:first-letter`：元素的首字母\n- `:first-line`：元素的首行\n- `:nth-child(n)`：元素中指定书序索引的元素\n- `:nth-last-child(n)`：元素中指定逆序索引的元素\n- `:first-child`：元素中为首的元素\n- `:last-child`：元素中为尾的元素\n- `:only-child`：父元素仅有该元素的元素\n- `:nth-of-type(n)`：标签中指定顺序索引的标签\n- `:nth-last-of-type(n)`：标签中指定逆序索引的标签\n- `:first-of-type`：标签中为首的标签\n- `:last-of-type`：标签中为尾标签\n- `:only-of-type`：父元素仅有该标签的标签\n\n##### 伪元素\n\n- `::before`：在元素前插入内容\n- `::after`：在元素后插入内容\n\n#### 优先级\n\n- !important\n- 内联样式\n- ID 选择器\n- 类选择、伪类选择器、属性选择器\n- 元素选择器、伪元素选择器\n- 通配选择器、后代选择器、兄弟选择器\n\n### CSS Backgrounds\n\n- `background`：将背景属性设置在一个声明中\n\n- `background-attachment`：背景图像是否固定或者随着页面的其余部分滚动\n  - `scroll`：随着页面的滚动而滚动（默认值）\n  - `fixed`：不会随着页面的滚动而滚动\n  - `local`：随着元素的内容的滚动而滚动\n  - `initial`：使用默认值\n  - `inherit`：继承父元素的属性\n\n- `background-color`：设置元素的背景颜色\n  - `color`：背景颜色\n  - `transparent`：背景颜色透明\n  - `inherit`：继承父元素\n\n- `background-image`：把图像设置为背景\n  - `linear-gradient()`：创建一个线性渐变的\"图像\"（从上而下）\n  - `radial-gradient()`：用径向渐变创建\"图像\"\n  - `repeating-linear-gradient()`：创建重复的线性渐变\"图像\"\n  - `repeating-radial-gradient()`：创建重复的径向渐变\"图像\"\n  - `inherit`：继承父元素\n\n- `background-position`：设置起始位置\n  - `left/top/centet/bottom/right`：仅指定一个时，其他值会是center\n  - `x% y%`：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%\n  - `xpos ypos`：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%\n  - `inherit`：继承父元素\n  \n- `background-repeat`：设置是否及如何重复\n  - `repeat`：垂直和水平方向重复（默认值）\n  - `repeat-x`：水平重复\n  - `repeat-y`：垂直重复\n  - `no-repeat`：不重复\n  - `inherit`：继承父元素的属性\n\n## 喟然叹息😒😒\n\n**<font size=4>凤栖梧** </font><font size=2>柳永</font>\n\n**伫倚危楼风细细，**\n\n*望极春愁，*\n\n**黯黯生天际。**\n\n*草色烟光残照里，*\n\n**无言谁会凭栏意。**\n\n*拟把疏狂图一醉，*\n\n**对酒当歌，**\n\n*强乐还无味。*\n\n**衣带渐宽终不悔，**\n\n*为伊消得人憔悴。*\n","source":"_posts/css学习一.md","raw":"---\ntitle: css学习一\ndate: 2022-04-03 09:55:57\ntags:\n  - css\ncategories: [前端]\n---\n\n## CSS 学习一\n\n从涉及前端开发到现在，差不多有四年了，框架有`Vue`、`Angular`，组件库用了`ElementUI`、`NG-Zorro`、`Ant-Design`。\n而对于`CSS`，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下`CSS`，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）\n\n### 定义\n\n层叠样式表，用于设计`HTML`的风格和布局，字体、颜色、大小、间距等等。\n\n### 语法\n\n`CSS`由两部分组成：选择器，以及声明。\n一个熟悉与值的键值被称为声明，而将一个或者多个声明用`{}`括起来，就是声明块。\n声明作用到对应的`HTML`元素，就要加上选择器。\n\n### 选择器\n\n#### 基础选择器\n\n- 标签选择器：`h1`\n- 类选择器：`.checked`\n- ID 选择器：`#picker`\n- 通配选择器：`*`\n\n#### 属性选择器\n\n- [attr]：指定属性的元素\n- [attr=val]：属性等于指定值的元素\n- [attr*=val]：属性包含指定值的元素\n- [attr^=val]：属性以指定值开头的元素\n- [attr$=val]：属性以指定值结尾的元素\n- [attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）\n- [attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）\n\n#### 组合选择器\n\n- 相邻兄弟选择器：`A+B`\n- 普通兄弟选择器：`A~B`\n- 子选择器：`A>B`\n- 后代选择器：`AB`\n\n#### 伪类\n\n##### 条件伪类\n\n- `:lang()`：基于元素语言来匹配页面元素\n- `:dir()`：匹配特定文字书写方向的元素\n- `:has()`：匹配包含指定元素的元素\n- `:is()`：匹配指定选择器列表里的元素\n- `:not()`：用来匹配不符合一组选择器的元素\n\n##### 行为伪类\n\n-`:active`：鼠标激活的元素 -`:hover`：鼠标悬浮的元素 -`::selection`：鼠标选中的元素\n\n##### 状态伪类\n\n- `:target`：当前锚点的元素\n- `:link`：未访问的链接元素\n- `:visited`：已访问的链接元素\n- `:focus`：输入聚焦的表单元素\n- `:required`：输入必填的表单元素\n- `:valid`：输入合法的表单元素\n- `：invalid`：输入非法的表单元素\n- `:in-range`：输入范围以内的表单元素\n- `out-of-range`：输入范围以外的表单元素\n- `checked`：选项选中的表单元素\n- `optional`：选项可选的表单元素\n- `enabled`：事件启用的表单元素\n- `disabled`：事件禁用的表单元素\n- `read-only`：只读的表单元素\n- `read-write`：可读可写的表单元素\n- `blank`：输入为空的表单元素\n- `current()`：浏览中的元素\n- `past()`：已浏览的元素\n- `future`：未浏览的元素\n\n##### 结构伪类\n\n- `：root`：文档的根元素\n- `:empty`： 无子元素的元素\n- `:first-letter`：元素的首字母\n- `:first-line`：元素的首行\n- `:nth-child(n)`：元素中指定书序索引的元素\n- `:nth-last-child(n)`：元素中指定逆序索引的元素\n- `:first-child`：元素中为首的元素\n- `:last-child`：元素中为尾的元素\n- `:only-child`：父元素仅有该元素的元素\n- `:nth-of-type(n)`：标签中指定顺序索引的标签\n- `:nth-last-of-type(n)`：标签中指定逆序索引的标签\n- `:first-of-type`：标签中为首的标签\n- `:last-of-type`：标签中为尾标签\n- `:only-of-type`：父元素仅有该标签的标签\n\n##### 伪元素\n\n- `::before`：在元素前插入内容\n- `::after`：在元素后插入内容\n\n#### 优先级\n\n- !important\n- 内联样式\n- ID 选择器\n- 类选择、伪类选择器、属性选择器\n- 元素选择器、伪元素选择器\n- 通配选择器、后代选择器、兄弟选择器\n\n### CSS Backgrounds\n\n- `background`：将背景属性设置在一个声明中\n\n- `background-attachment`：背景图像是否固定或者随着页面的其余部分滚动\n  - `scroll`：随着页面的滚动而滚动（默认值）\n  - `fixed`：不会随着页面的滚动而滚动\n  - `local`：随着元素的内容的滚动而滚动\n  - `initial`：使用默认值\n  - `inherit`：继承父元素的属性\n\n- `background-color`：设置元素的背景颜色\n  - `color`：背景颜色\n  - `transparent`：背景颜色透明\n  - `inherit`：继承父元素\n\n- `background-image`：把图像设置为背景\n  - `linear-gradient()`：创建一个线性渐变的\"图像\"（从上而下）\n  - `radial-gradient()`：用径向渐变创建\"图像\"\n  - `repeating-linear-gradient()`：创建重复的线性渐变\"图像\"\n  - `repeating-radial-gradient()`：创建重复的径向渐变\"图像\"\n  - `inherit`：继承父元素\n\n- `background-position`：设置起始位置\n  - `left/top/centet/bottom/right`：仅指定一个时，其他值会是center\n  - `x% y%`：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%\n  - `xpos ypos`：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%\n  - `inherit`：继承父元素\n  \n- `background-repeat`：设置是否及如何重复\n  - `repeat`：垂直和水平方向重复（默认值）\n  - `repeat-x`：水平重复\n  - `repeat-y`：垂直重复\n  - `no-repeat`：不重复\n  - `inherit`：继承父元素的属性\n\n## 喟然叹息😒😒\n\n**<font size=4>凤栖梧** </font><font size=2>柳永</font>\n\n**伫倚危楼风细细，**\n\n*望极春愁，*\n\n**黯黯生天际。**\n\n*草色烟光残照里，*\n\n**无言谁会凭栏意。**\n\n*拟把疏狂图一醉，*\n\n**对酒当歌，**\n\n*强乐还无味。*\n\n**衣带渐宽终不悔，**\n\n*为伊消得人憔悴。*\n","slug":"css学习一","published":1,"updated":"2022-10-27T06:40:13.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjt002gscac0i9mb74c","content":"<h2 id=\"CSS-学习一\"><a href=\"#CSS-学习一\" class=\"headerlink\" title=\"CSS 学习一\"></a>CSS 学习一</h2><p>从涉及前端开发到现在，差不多有四年了，框架有<code>Vue</code>、<code>Angular</code>，组件库用了<code>ElementUI</code>、<code>NG-Zorro</code>、<code>Ant-Design</code>。<br>而对于<code>CSS</code>，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下<code>CSS</code>，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>层叠样式表，用于设计<code>HTML</code>的风格和布局，字体、颜色、大小、间距等等。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>CSS</code>由两部分组成：选择器，以及声明。<br>一个熟悉与值的键值被称为声明，而将一个或者多个声明用<code>&#123;&#125;</code>括起来，就是声明块。<br>声明作用到对应的<code>HTML</code>元素，就要加上选择器。</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h4><ul>\n<li>标签选择器：<code>h1</code></li>\n<li>类选择器：<code>.checked</code></li>\n<li>ID 选择器：<code>#picker</code></li>\n<li>通配选择器：<code>*</code></li>\n</ul>\n<h4 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h4><ul>\n<li>[attr]：指定属性的元素</li>\n<li>[attr=val]：属性等于指定值的元素</li>\n<li>[attr*=val]：属性包含指定值的元素</li>\n<li>[attr^=val]：属性以指定值开头的元素</li>\n<li>[attr$=val]：属性以指定值结尾的元素</li>\n<li>[attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）</li>\n<li>[attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）</li>\n</ul>\n<h4 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h4><ul>\n<li>相邻兄弟选择器：<code>A+B</code></li>\n<li>普通兄弟选择器：<code>A~B</code></li>\n<li>子选择器：<code>A&gt;B</code></li>\n<li>后代选择器：<code>AB</code></li>\n</ul>\n<h4 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h4><h5 id=\"条件伪类\"><a href=\"#条件伪类\" class=\"headerlink\" title=\"条件伪类\"></a>条件伪类</h5><ul>\n<li><code>:lang()</code>：基于元素语言来匹配页面元素</li>\n<li><code>:dir()</code>：匹配特定文字书写方向的元素</li>\n<li><code>:has()</code>：匹配包含指定元素的元素</li>\n<li><code>:is()</code>：匹配指定选择器列表里的元素</li>\n<li><code>:not()</code>：用来匹配不符合一组选择器的元素</li>\n</ul>\n<h5 id=\"行为伪类\"><a href=\"#行为伪类\" class=\"headerlink\" title=\"行为伪类\"></a>行为伪类</h5><p>-<code>:active</code>：鼠标激活的元素 -<code>:hover</code>：鼠标悬浮的元素 -<code>::selection</code>：鼠标选中的元素</p>\n<h5 id=\"状态伪类\"><a href=\"#状态伪类\" class=\"headerlink\" title=\"状态伪类\"></a>状态伪类</h5><ul>\n<li><code>:target</code>：当前锚点的元素</li>\n<li><code>:link</code>：未访问的链接元素</li>\n<li><code>:visited</code>：已访问的链接元素</li>\n<li><code>:focus</code>：输入聚焦的表单元素</li>\n<li><code>:required</code>：输入必填的表单元素</li>\n<li><code>:valid</code>：输入合法的表单元素</li>\n<li><code>：invalid</code>：输入非法的表单元素</li>\n<li><code>:in-range</code>：输入范围以内的表单元素</li>\n<li><code>out-of-range</code>：输入范围以外的表单元素</li>\n<li><code>checked</code>：选项选中的表单元素</li>\n<li><code>optional</code>：选项可选的表单元素</li>\n<li><code>enabled</code>：事件启用的表单元素</li>\n<li><code>disabled</code>：事件禁用的表单元素</li>\n<li><code>read-only</code>：只读的表单元素</li>\n<li><code>read-write</code>：可读可写的表单元素</li>\n<li><code>blank</code>：输入为空的表单元素</li>\n<li><code>current()</code>：浏览中的元素</li>\n<li><code>past()</code>：已浏览的元素</li>\n<li><code>future</code>：未浏览的元素</li>\n</ul>\n<h5 id=\"结构伪类\"><a href=\"#结构伪类\" class=\"headerlink\" title=\"结构伪类\"></a>结构伪类</h5><ul>\n<li><code>：root</code>：文档的根元素</li>\n<li><code>:empty</code>： 无子元素的元素</li>\n<li><code>:first-letter</code>：元素的首字母</li>\n<li><code>:first-line</code>：元素的首行</li>\n<li><code>:nth-child(n)</code>：元素中指定书序索引的元素</li>\n<li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素</li>\n<li><code>:first-child</code>：元素中为首的元素</li>\n<li><code>:last-child</code>：元素中为尾的元素</li>\n<li><code>:only-child</code>：父元素仅有该元素的元素</li>\n<li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签</li>\n<li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签</li>\n<li><code>:first-of-type</code>：标签中为首的标签</li>\n<li><code>:last-of-type</code>：标签中为尾标签</li>\n<li><code>:only-of-type</code>：父元素仅有该标签的标签</li>\n</ul>\n<h5 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h5><ul>\n<li><code>::before</code>：在元素前插入内容</li>\n<li><code>::after</code>：在元素后插入内容</li>\n</ul>\n<h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li>!important</li>\n<li>内联样式</li>\n<li>ID 选择器</li>\n<li>类选择、伪类选择器、属性选择器</li>\n<li>元素选择器、伪元素选择器</li>\n<li>通配选择器、后代选择器、兄弟选择器</li>\n</ul>\n<h3 id=\"CSS-Backgrounds\"><a href=\"#CSS-Backgrounds\" class=\"headerlink\" title=\"CSS Backgrounds\"></a>CSS Backgrounds</h3><ul>\n<li><p><code>background</code>：将背景属性设置在一个声明中</p>\n</li>\n<li><p><code>background-attachment</code>：背景图像是否固定或者随着页面的其余部分滚动</p>\n<ul>\n<li><code>scroll</code>：随着页面的滚动而滚动（默认值）</li>\n<li><code>fixed</code>：不会随着页面的滚动而滚动</li>\n<li><code>local</code>：随着元素的内容的滚动而滚动</li>\n<li><code>initial</code>：使用默认值</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n<li><p><code>background-color</code>：设置元素的背景颜色</p>\n<ul>\n<li><code>color</code>：背景颜色</li>\n<li><code>transparent</code>：背景颜色透明</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-image</code>：把图像设置为背景</p>\n<ul>\n<li><code>linear-gradient()</code>：创建一个线性渐变的”图像”（从上而下）</li>\n<li><code>radial-gradient()</code>：用径向渐变创建”图像”</li>\n<li><code>repeating-linear-gradient()</code>：创建重复的线性渐变”图像”</li>\n<li><code>repeating-radial-gradient()</code>：创建重复的径向渐变”图像”</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-position</code>：设置起始位置</p>\n<ul>\n<li><code>left/top/centet/bottom/right</code>：仅指定一个时，其他值会是center</li>\n<li><code>x% y%</code>：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%</li>\n<li><code>xpos ypos</code>：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-repeat</code>：设置是否及如何重复</p>\n<ul>\n<li><code>repeat</code>：垂直和水平方向重复（默认值）</li>\n<li><code>repeat-x</code>：水平重复</li>\n<li><code>repeat-y</code>：垂直重复</li>\n<li><code>no-repeat</code>：不重复</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"喟然叹息😒😒\"><a href=\"#喟然叹息😒😒\" class=\"headerlink\" title=\"喟然叹息😒😒\"></a>喟然叹息😒😒</h2><p><strong><font size=4>凤栖梧</strong> </font><font size=2>柳永</font></p>\n<p><strong>伫倚危楼风细细，</strong></p>\n<p><em>望极春愁，</em></p>\n<p><strong>黯黯生天际。</strong></p>\n<p><em>草色烟光残照里，</em></p>\n<p><strong>无言谁会凭栏意。</strong></p>\n<p><em>拟把疏狂图一醉，</em></p>\n<p><strong>对酒当歌，</strong></p>\n<p><em>强乐还无味。</em></p>\n<p><strong>衣带渐宽终不悔，</strong></p>\n<p><em>为伊消得人憔悴。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-学习一\"><a href=\"#CSS-学习一\" class=\"headerlink\" title=\"CSS 学习一\"></a>CSS 学习一</h2><p>从涉及前端开发到现在，差不多有四年了，框架有<code>Vue</code>、<code>Angular</code>，组件库用了<code>ElementUI</code>、<code>NG-Zorro</code>、<code>Ant-Design</code>。<br>而对于<code>CSS</code>，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下<code>CSS</code>，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>层叠样式表，用于设计<code>HTML</code>的风格和布局，字体、颜色、大小、间距等等。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>CSS</code>由两部分组成：选择器，以及声明。<br>一个熟悉与值的键值被称为声明，而将一个或者多个声明用<code>&#123;&#125;</code>括起来，就是声明块。<br>声明作用到对应的<code>HTML</code>元素，就要加上选择器。</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h4><ul>\n<li>标签选择器：<code>h1</code></li>\n<li>类选择器：<code>.checked</code></li>\n<li>ID 选择器：<code>#picker</code></li>\n<li>通配选择器：<code>*</code></li>\n</ul>\n<h4 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h4><ul>\n<li>[attr]：指定属性的元素</li>\n<li>[attr=val]：属性等于指定值的元素</li>\n<li>[attr*=val]：属性包含指定值的元素</li>\n<li>[attr^=val]：属性以指定值开头的元素</li>\n<li>[attr$=val]：属性以指定值结尾的元素</li>\n<li>[attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）</li>\n<li>[attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）</li>\n</ul>\n<h4 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h4><ul>\n<li>相邻兄弟选择器：<code>A+B</code></li>\n<li>普通兄弟选择器：<code>A~B</code></li>\n<li>子选择器：<code>A&gt;B</code></li>\n<li>后代选择器：<code>AB</code></li>\n</ul>\n<h4 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h4><h5 id=\"条件伪类\"><a href=\"#条件伪类\" class=\"headerlink\" title=\"条件伪类\"></a>条件伪类</h5><ul>\n<li><code>:lang()</code>：基于元素语言来匹配页面元素</li>\n<li><code>:dir()</code>：匹配特定文字书写方向的元素</li>\n<li><code>:has()</code>：匹配包含指定元素的元素</li>\n<li><code>:is()</code>：匹配指定选择器列表里的元素</li>\n<li><code>:not()</code>：用来匹配不符合一组选择器的元素</li>\n</ul>\n<h5 id=\"行为伪类\"><a href=\"#行为伪类\" class=\"headerlink\" title=\"行为伪类\"></a>行为伪类</h5><p>-<code>:active</code>：鼠标激活的元素 -<code>:hover</code>：鼠标悬浮的元素 -<code>::selection</code>：鼠标选中的元素</p>\n<h5 id=\"状态伪类\"><a href=\"#状态伪类\" class=\"headerlink\" title=\"状态伪类\"></a>状态伪类</h5><ul>\n<li><code>:target</code>：当前锚点的元素</li>\n<li><code>:link</code>：未访问的链接元素</li>\n<li><code>:visited</code>：已访问的链接元素</li>\n<li><code>:focus</code>：输入聚焦的表单元素</li>\n<li><code>:required</code>：输入必填的表单元素</li>\n<li><code>:valid</code>：输入合法的表单元素</li>\n<li><code>：invalid</code>：输入非法的表单元素</li>\n<li><code>:in-range</code>：输入范围以内的表单元素</li>\n<li><code>out-of-range</code>：输入范围以外的表单元素</li>\n<li><code>checked</code>：选项选中的表单元素</li>\n<li><code>optional</code>：选项可选的表单元素</li>\n<li><code>enabled</code>：事件启用的表单元素</li>\n<li><code>disabled</code>：事件禁用的表单元素</li>\n<li><code>read-only</code>：只读的表单元素</li>\n<li><code>read-write</code>：可读可写的表单元素</li>\n<li><code>blank</code>：输入为空的表单元素</li>\n<li><code>current()</code>：浏览中的元素</li>\n<li><code>past()</code>：已浏览的元素</li>\n<li><code>future</code>：未浏览的元素</li>\n</ul>\n<h5 id=\"结构伪类\"><a href=\"#结构伪类\" class=\"headerlink\" title=\"结构伪类\"></a>结构伪类</h5><ul>\n<li><code>：root</code>：文档的根元素</li>\n<li><code>:empty</code>： 无子元素的元素</li>\n<li><code>:first-letter</code>：元素的首字母</li>\n<li><code>:first-line</code>：元素的首行</li>\n<li><code>:nth-child(n)</code>：元素中指定书序索引的元素</li>\n<li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素</li>\n<li><code>:first-child</code>：元素中为首的元素</li>\n<li><code>:last-child</code>：元素中为尾的元素</li>\n<li><code>:only-child</code>：父元素仅有该元素的元素</li>\n<li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签</li>\n<li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签</li>\n<li><code>:first-of-type</code>：标签中为首的标签</li>\n<li><code>:last-of-type</code>：标签中为尾标签</li>\n<li><code>:only-of-type</code>：父元素仅有该标签的标签</li>\n</ul>\n<h5 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h5><ul>\n<li><code>::before</code>：在元素前插入内容</li>\n<li><code>::after</code>：在元素后插入内容</li>\n</ul>\n<h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li>!important</li>\n<li>内联样式</li>\n<li>ID 选择器</li>\n<li>类选择、伪类选择器、属性选择器</li>\n<li>元素选择器、伪元素选择器</li>\n<li>通配选择器、后代选择器、兄弟选择器</li>\n</ul>\n<h3 id=\"CSS-Backgrounds\"><a href=\"#CSS-Backgrounds\" class=\"headerlink\" title=\"CSS Backgrounds\"></a>CSS Backgrounds</h3><ul>\n<li><p><code>background</code>：将背景属性设置在一个声明中</p>\n</li>\n<li><p><code>background-attachment</code>：背景图像是否固定或者随着页面的其余部分滚动</p>\n<ul>\n<li><code>scroll</code>：随着页面的滚动而滚动（默认值）</li>\n<li><code>fixed</code>：不会随着页面的滚动而滚动</li>\n<li><code>local</code>：随着元素的内容的滚动而滚动</li>\n<li><code>initial</code>：使用默认值</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n<li><p><code>background-color</code>：设置元素的背景颜色</p>\n<ul>\n<li><code>color</code>：背景颜色</li>\n<li><code>transparent</code>：背景颜色透明</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-image</code>：把图像设置为背景</p>\n<ul>\n<li><code>linear-gradient()</code>：创建一个线性渐变的”图像”（从上而下）</li>\n<li><code>radial-gradient()</code>：用径向渐变创建”图像”</li>\n<li><code>repeating-linear-gradient()</code>：创建重复的线性渐变”图像”</li>\n<li><code>repeating-radial-gradient()</code>：创建重复的径向渐变”图像”</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-position</code>：设置起始位置</p>\n<ul>\n<li><code>left/top/centet/bottom/right</code>：仅指定一个时，其他值会是center</li>\n<li><code>x% y%</code>：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%</li>\n<li><code>xpos ypos</code>：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-repeat</code>：设置是否及如何重复</p>\n<ul>\n<li><code>repeat</code>：垂直和水平方向重复（默认值）</li>\n<li><code>repeat-x</code>：水平重复</li>\n<li><code>repeat-y</code>：垂直重复</li>\n<li><code>no-repeat</code>：不重复</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"喟然叹息😒😒\"><a href=\"#喟然叹息😒😒\" class=\"headerlink\" title=\"喟然叹息😒😒\"></a>喟然叹息😒😒</h2><p><strong><font size=4>凤栖梧</strong> </font><font size=2>柳永</font></p>\n<p><strong>伫倚危楼风细细，</strong></p>\n<p><em>望极春愁，</em></p>\n<p><strong>黯黯生天际。</strong></p>\n<p><em>草色烟光残照里，</em></p>\n<p><strong>无言谁会凭栏意。</strong></p>\n<p><em>拟把疏狂图一醉，</em></p>\n<p><strong>对酒当歌，</strong></p>\n<p><em>强乐还无味。</em></p>\n<p><strong>衣带渐宽终不悔，</strong></p>\n<p><em>为伊消得人憔悴。</em></p>\n"},{"title":"css学习四","date":"2022-04-09T02:00:37.000Z","_content":"\n继续\n\n### outline\n\n设置轮廓属性，不占用空间\n\n- `outline-color`：轮廓颜色\n- `out-style`：样式\n  - `none`：默认，不设置样式\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n- `out-width`：轮廓宽带\n\n### display visibility\n\n`display`设置一个元素如何显示，设置`none`时，元素会被隐藏且不占用空间，但是不会被继承\n`visibility`知道一个元素可见还是隐藏，设置为`hidden`时，元素会被隐藏但空间仍被占用，可以被继承\n\n#### display属性\n\n- `block`：会独占一行，多个元素会另起一行，可以设置`width`、`height`、`margin`、`padding`属性\n- `inline`：不会独占一行，设置`width`、`height`属性无效，可以设置水平方向的`margin`和`padding`属性，不能设置垂直方向的`padding`和`margin`\n- `inline-block`：将对象设置为`inline`对象，但对象的内容作为`block`对象呈现，之后的内联对象会被排列在同一行内。\n\n#### 行内元素和块级元素\n\n- 行内元素\n  - 设置宽度无效\n  - 可以设置水平方向的`margin`和`padding`属性，但不能设置垂直方向的`padding`和`margin`属性\n  - 不会自动换行\n- 块级元素\n  - 可以设置宽度\n  - 设置`margin`和`padding`都可以\n  - 可以自动换行\n  - 多个块级元素，默认排列从上到下\n\n### position\n\n`absolute`：生成绝对定位的元素，相对于`static`定位以外的一个父元素进行定位。\n元素的位置通过`left、top、right、bottom`属性进行规定。\n浏览器会递归查找该元素的所有父元素，如果找到了设置`position：relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位\n\n`relative`：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过`left、top、right、bottom`属性进行规定。`relative`永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。\n\n`fiexd`：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位\n\n`static`：默认值，没有定位，会忽略`top、bottom、left、rioght`或者`z-index`属性。块级元素从上往下排布，行级元素从左到右排列\n\n#### absolute和fixed比较\n\n共同点：\n\n- 改变行内元素的呈现方式，将`display`置为`inline-block`\n- 使元素脱离普通文档流，不再占用文档物理空间\n- 覆盖非定位文档元素\n不同点：\n\n- `absolute`和`fixed`根元素不同，`absolute`的根元素可以设置，`fixed`的根元素是浏览器\n- 在有滚动条的页面中，a`bsolute`会跟着父元素移动，`fiexd`固定在页面的具体位置不变\n\n### display float position 关系\n\n- 首先判断`display`属性是否为`none`，如果为`none`，则`position`和`float`属性的值不影响元素最后的表现\n- 然后判断`position`的值是否为`absolute`或者fixed，如果是，则`float`属性失效，并且`displa`y的值应该被设置为`table`或者`block`\n- 如果`position`的值补位`absolute`或者`fixed`，则判断`float`属性的值是否为`none`，如果不是，则`display`的值则按上面的规则转换。注意，如果`position`的值为`relative`并且`float`属性的值存在，则`relative`相对于浮动后的最终位置定位\n- 如果`float`的值为`none`，则判断元素是否为根元素，如果是根元素则`display`属性按照上面的规则转换，如果不是，则保持指定的`display`属性值不变\n\n总的来说，可以把它看作是类似优先级的机制，`position:absolute`和`position:fixed`优先级最高，有它存在对的时候，浮动不起作用，`display`的值也需要调整。其次，元素的`float`特性的值不是`none`的时候或者它是根元素的时候，调整`display`的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，`display`特性值同设置值\n\n### 一与人同，未免屈意以循之😜😜😜\n\n**<font size=4>临江仙</font>** <font size=1>送钱穆父</font> <font size=2>苏轼</font>\n\n**一别都门三改火，**\n\n*天涯踏尽红尘。*\n\n**依然一笑作春温，**\n\n*无波真古井，*\n\n**有节是秋筠。**\n\n*惆怅孤帆连夜发，*\n\n**送行淡月微云。**\n\n*尊前不用翠眉颦。*\n\n**人生如逆旅，**\n\n*我亦是行人。*\n","source":"_posts/css学习四.md","raw":"---\ntitle: css学习四\ndate: 2022-04-09 10:00:37\ntags:\n  - css\ncategories: [前端]\n---\n\n继续\n\n### outline\n\n设置轮廓属性，不占用空间\n\n- `outline-color`：轮廓颜色\n- `out-style`：样式\n  - `none`：默认，不设置样式\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n- `out-width`：轮廓宽带\n\n### display visibility\n\n`display`设置一个元素如何显示，设置`none`时，元素会被隐藏且不占用空间，但是不会被继承\n`visibility`知道一个元素可见还是隐藏，设置为`hidden`时，元素会被隐藏但空间仍被占用，可以被继承\n\n#### display属性\n\n- `block`：会独占一行，多个元素会另起一行，可以设置`width`、`height`、`margin`、`padding`属性\n- `inline`：不会独占一行，设置`width`、`height`属性无效，可以设置水平方向的`margin`和`padding`属性，不能设置垂直方向的`padding`和`margin`\n- `inline-block`：将对象设置为`inline`对象，但对象的内容作为`block`对象呈现，之后的内联对象会被排列在同一行内。\n\n#### 行内元素和块级元素\n\n- 行内元素\n  - 设置宽度无效\n  - 可以设置水平方向的`margin`和`padding`属性，但不能设置垂直方向的`padding`和`margin`属性\n  - 不会自动换行\n- 块级元素\n  - 可以设置宽度\n  - 设置`margin`和`padding`都可以\n  - 可以自动换行\n  - 多个块级元素，默认排列从上到下\n\n### position\n\n`absolute`：生成绝对定位的元素，相对于`static`定位以外的一个父元素进行定位。\n元素的位置通过`left、top、right、bottom`属性进行规定。\n浏览器会递归查找该元素的所有父元素，如果找到了设置`position：relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位\n\n`relative`：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过`left、top、right、bottom`属性进行规定。`relative`永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。\n\n`fiexd`：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位\n\n`static`：默认值，没有定位，会忽略`top、bottom、left、rioght`或者`z-index`属性。块级元素从上往下排布，行级元素从左到右排列\n\n#### absolute和fixed比较\n\n共同点：\n\n- 改变行内元素的呈现方式，将`display`置为`inline-block`\n- 使元素脱离普通文档流，不再占用文档物理空间\n- 覆盖非定位文档元素\n不同点：\n\n- `absolute`和`fixed`根元素不同，`absolute`的根元素可以设置，`fixed`的根元素是浏览器\n- 在有滚动条的页面中，a`bsolute`会跟着父元素移动，`fiexd`固定在页面的具体位置不变\n\n### display float position 关系\n\n- 首先判断`display`属性是否为`none`，如果为`none`，则`position`和`float`属性的值不影响元素最后的表现\n- 然后判断`position`的值是否为`absolute`或者fixed，如果是，则`float`属性失效，并且`displa`y的值应该被设置为`table`或者`block`\n- 如果`position`的值补位`absolute`或者`fixed`，则判断`float`属性的值是否为`none`，如果不是，则`display`的值则按上面的规则转换。注意，如果`position`的值为`relative`并且`float`属性的值存在，则`relative`相对于浮动后的最终位置定位\n- 如果`float`的值为`none`，则判断元素是否为根元素，如果是根元素则`display`属性按照上面的规则转换，如果不是，则保持指定的`display`属性值不变\n\n总的来说，可以把它看作是类似优先级的机制，`position:absolute`和`position:fixed`优先级最高，有它存在对的时候，浮动不起作用，`display`的值也需要调整。其次，元素的`float`特性的值不是`none`的时候或者它是根元素的时候，调整`display`的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，`display`特性值同设置值\n\n### 一与人同，未免屈意以循之😜😜😜\n\n**<font size=4>临江仙</font>** <font size=1>送钱穆父</font> <font size=2>苏轼</font>\n\n**一别都门三改火，**\n\n*天涯踏尽红尘。*\n\n**依然一笑作春温，**\n\n*无波真古井，*\n\n**有节是秋筠。**\n\n*惆怅孤帆连夜发，*\n\n**送行淡月微云。**\n\n*尊前不用翠眉颦。*\n\n**人生如逆旅，**\n\n*我亦是行人。*\n","slug":"css学习四","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjt002kscac4thnh5mq","content":"<p>继续</p>\n<h3 id=\"outline\"><a href=\"#outline\" class=\"headerlink\" title=\"outline\"></a>outline</h3><p>设置轮廓属性，不占用空间</p>\n<ul>\n<li><code>outline-color</code>：轮廓颜色</li>\n<li><code>out-style</code>：样式<ul>\n<li><code>none</code>：默认，不设置样式</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><code>out-width</code>：轮廓宽带</li>\n</ul>\n<h3 id=\"display-visibility\"><a href=\"#display-visibility\" class=\"headerlink\" title=\"display visibility\"></a>display visibility</h3><p><code>display</code>设置一个元素如何显示，设置<code>none</code>时，元素会被隐藏且不占用空间，但是不会被继承<br><code>visibility</code>知道一个元素可见还是隐藏，设置为<code>hidden</code>时，元素会被隐藏但空间仍被占用，可以被继承</p>\n<h4 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h4><ul>\n<li><code>block</code>：会独占一行，多个元素会另起一行，可以设置<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>属性</li>\n<li><code>inline</code>：不会独占一行，设置<code>width</code>、<code>height</code>属性无效，可以设置水平方向的<code>margin</code>和<code>padding</code>属性，不能设置垂直方向的<code>padding</code>和<code>margin</code></li>\n<li><code>inline-block</code>：将对象设置为<code>inline</code>对象，但对象的内容作为<code>block</code>对象呈现，之后的内联对象会被排列在同一行内。</li>\n</ul>\n<h4 id=\"行内元素和块级元素\"><a href=\"#行内元素和块级元素\" class=\"headerlink\" title=\"行内元素和块级元素\"></a>行内元素和块级元素</h4><ul>\n<li>行内元素<ul>\n<li>设置宽度无效</li>\n<li>可以设置水平方向的<code>margin</code>和<code>padding</code>属性，但不能设置垂直方向的<code>padding</code>和<code>margin</code>属性</li>\n<li>不会自动换行</li>\n</ul>\n</li>\n<li>块级元素<ul>\n<li>可以设置宽度</li>\n<li>设置<code>margin</code>和<code>padding</code>都可以</li>\n<li>可以自动换行</li>\n<li>多个块级元素，默认排列从上到下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h3><p><code>absolute</code>：生成绝对定位的元素，相对于<code>static</code>定位以外的一个父元素进行定位。<br>元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<br>浏览器会递归查找该元素的所有父元素，如果找到了设置<code>position：relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位</p>\n<p><code>relative</code>：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<code>relative</code>永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。</p>\n<p><code>fiexd</code>：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位</p>\n<p><code>static</code>：默认值，没有定位，会忽略<code>top、bottom、left、rioght</code>或者<code>z-index</code>属性。块级元素从上往下排布，行级元素从左到右排列</p>\n<h4 id=\"absolute和fixed比较\"><a href=\"#absolute和fixed比较\" class=\"headerlink\" title=\"absolute和fixed比较\"></a>absolute和fixed比较</h4><p>共同点：</p>\n<ul>\n<li><p>改变行内元素的呈现方式，将<code>display</code>置为<code>inline-block</code></p>\n</li>\n<li><p>使元素脱离普通文档流，不再占用文档物理空间</p>\n</li>\n<li><p>覆盖非定位文档元素<br>不同点：</p>\n</li>\n<li><p><code>absolute</code>和<code>fixed</code>根元素不同，<code>absolute</code>的根元素可以设置，<code>fixed</code>的根元素是浏览器</p>\n</li>\n<li><p>在有滚动条的页面中，a<code>bsolute</code>会跟着父元素移动，<code>fiexd</code>固定在页面的具体位置不变</p>\n</li>\n</ul>\n<h3 id=\"display-float-position-关系\"><a href=\"#display-float-position-关系\" class=\"headerlink\" title=\"display float position 关系\"></a>display float position 关系</h3><ul>\n<li>首先判断<code>display</code>属性是否为<code>none</code>，如果为<code>none</code>，则<code>position</code>和<code>float</code>属性的值不影响元素最后的表现</li>\n<li>然后判断<code>position</code>的值是否为<code>absolute</code>或者fixed，如果是，则<code>float</code>属性失效，并且<code>displa</code>y的值应该被设置为<code>table</code>或者<code>block</code></li>\n<li>如果<code>position</code>的值补位<code>absolute</code>或者<code>fixed</code>，则判断<code>float</code>属性的值是否为<code>none</code>，如果不是，则<code>display</code>的值则按上面的规则转换。注意，如果<code>position</code>的值为<code>relative</code>并且<code>float</code>属性的值存在，则<code>relative</code>相对于浮动后的最终位置定位</li>\n<li>如果<code>float</code>的值为<code>none</code>，则判断元素是否为根元素，如果是根元素则<code>display</code>属性按照上面的规则转换，如果不是，则保持指定的<code>display</code>属性值不变</li>\n</ul>\n<p>总的来说，可以把它看作是类似优先级的机制，<code>position:absolute</code>和<code>position:fixed</code>优先级最高，有它存在对的时候，浮动不起作用，<code>display</code>的值也需要调整。其次，元素的<code>float</code>特性的值不是<code>none</code>的时候或者它是根元素的时候，调整<code>display</code>的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，<code>display</code>特性值同设置值</p>\n<h3 id=\"一与人同，未免屈意以循之😜😜😜\"><a href=\"#一与人同，未免屈意以循之😜😜😜\" class=\"headerlink\" title=\"一与人同，未免屈意以循之😜😜😜\"></a>一与人同，未免屈意以循之😜😜😜</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>送钱穆父</font> <font size=2>苏轼</font></p>\n<p><strong>一别都门三改火，</strong></p>\n<p><em>天涯踏尽红尘。</em></p>\n<p><strong>依然一笑作春温，</strong></p>\n<p><em>无波真古井，</em></p>\n<p><strong>有节是秋筠。</strong></p>\n<p><em>惆怅孤帆连夜发，</em></p>\n<p><strong>送行淡月微云。</strong></p>\n<p><em>尊前不用翠眉颦。</em></p>\n<p><strong>人生如逆旅，</strong></p>\n<p><em>我亦是行人。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>继续</p>\n<h3 id=\"outline\"><a href=\"#outline\" class=\"headerlink\" title=\"outline\"></a>outline</h3><p>设置轮廓属性，不占用空间</p>\n<ul>\n<li><code>outline-color</code>：轮廓颜色</li>\n<li><code>out-style</code>：样式<ul>\n<li><code>none</code>：默认，不设置样式</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><code>out-width</code>：轮廓宽带</li>\n</ul>\n<h3 id=\"display-visibility\"><a href=\"#display-visibility\" class=\"headerlink\" title=\"display visibility\"></a>display visibility</h3><p><code>display</code>设置一个元素如何显示，设置<code>none</code>时，元素会被隐藏且不占用空间，但是不会被继承<br><code>visibility</code>知道一个元素可见还是隐藏，设置为<code>hidden</code>时，元素会被隐藏但空间仍被占用，可以被继承</p>\n<h4 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h4><ul>\n<li><code>block</code>：会独占一行，多个元素会另起一行，可以设置<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>属性</li>\n<li><code>inline</code>：不会独占一行，设置<code>width</code>、<code>height</code>属性无效，可以设置水平方向的<code>margin</code>和<code>padding</code>属性，不能设置垂直方向的<code>padding</code>和<code>margin</code></li>\n<li><code>inline-block</code>：将对象设置为<code>inline</code>对象，但对象的内容作为<code>block</code>对象呈现，之后的内联对象会被排列在同一行内。</li>\n</ul>\n<h4 id=\"行内元素和块级元素\"><a href=\"#行内元素和块级元素\" class=\"headerlink\" title=\"行内元素和块级元素\"></a>行内元素和块级元素</h4><ul>\n<li>行内元素<ul>\n<li>设置宽度无效</li>\n<li>可以设置水平方向的<code>margin</code>和<code>padding</code>属性，但不能设置垂直方向的<code>padding</code>和<code>margin</code>属性</li>\n<li>不会自动换行</li>\n</ul>\n</li>\n<li>块级元素<ul>\n<li>可以设置宽度</li>\n<li>设置<code>margin</code>和<code>padding</code>都可以</li>\n<li>可以自动换行</li>\n<li>多个块级元素，默认排列从上到下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h3><p><code>absolute</code>：生成绝对定位的元素，相对于<code>static</code>定位以外的一个父元素进行定位。<br>元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<br>浏览器会递归查找该元素的所有父元素，如果找到了设置<code>position：relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位</p>\n<p><code>relative</code>：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<code>relative</code>永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。</p>\n<p><code>fiexd</code>：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位</p>\n<p><code>static</code>：默认值，没有定位，会忽略<code>top、bottom、left、rioght</code>或者<code>z-index</code>属性。块级元素从上往下排布，行级元素从左到右排列</p>\n<h4 id=\"absolute和fixed比较\"><a href=\"#absolute和fixed比较\" class=\"headerlink\" title=\"absolute和fixed比较\"></a>absolute和fixed比较</h4><p>共同点：</p>\n<ul>\n<li><p>改变行内元素的呈现方式，将<code>display</code>置为<code>inline-block</code></p>\n</li>\n<li><p>使元素脱离普通文档流，不再占用文档物理空间</p>\n</li>\n<li><p>覆盖非定位文档元素<br>不同点：</p>\n</li>\n<li><p><code>absolute</code>和<code>fixed</code>根元素不同，<code>absolute</code>的根元素可以设置，<code>fixed</code>的根元素是浏览器</p>\n</li>\n<li><p>在有滚动条的页面中，a<code>bsolute</code>会跟着父元素移动，<code>fiexd</code>固定在页面的具体位置不变</p>\n</li>\n</ul>\n<h3 id=\"display-float-position-关系\"><a href=\"#display-float-position-关系\" class=\"headerlink\" title=\"display float position 关系\"></a>display float position 关系</h3><ul>\n<li>首先判断<code>display</code>属性是否为<code>none</code>，如果为<code>none</code>，则<code>position</code>和<code>float</code>属性的值不影响元素最后的表现</li>\n<li>然后判断<code>position</code>的值是否为<code>absolute</code>或者fixed，如果是，则<code>float</code>属性失效，并且<code>displa</code>y的值应该被设置为<code>table</code>或者<code>block</code></li>\n<li>如果<code>position</code>的值补位<code>absolute</code>或者<code>fixed</code>，则判断<code>float</code>属性的值是否为<code>none</code>，如果不是，则<code>display</code>的值则按上面的规则转换。注意，如果<code>position</code>的值为<code>relative</code>并且<code>float</code>属性的值存在，则<code>relative</code>相对于浮动后的最终位置定位</li>\n<li>如果<code>float</code>的值为<code>none</code>，则判断元素是否为根元素，如果是根元素则<code>display</code>属性按照上面的规则转换，如果不是，则保持指定的<code>display</code>属性值不变</li>\n</ul>\n<p>总的来说，可以把它看作是类似优先级的机制，<code>position:absolute</code>和<code>position:fixed</code>优先级最高，有它存在对的时候，浮动不起作用，<code>display</code>的值也需要调整。其次，元素的<code>float</code>特性的值不是<code>none</code>的时候或者它是根元素的时候，调整<code>display</code>的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，<code>display</code>特性值同设置值</p>\n<h3 id=\"一与人同，未免屈意以循之😜😜😜\"><a href=\"#一与人同，未免屈意以循之😜😜😜\" class=\"headerlink\" title=\"一与人同，未免屈意以循之😜😜😜\"></a>一与人同，未免屈意以循之😜😜😜</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>送钱穆父</font> <font size=2>苏轼</font></p>\n<p><strong>一别都门三改火，</strong></p>\n<p><em>天涯踏尽红尘。</em></p>\n<p><strong>依然一笑作春温，</strong></p>\n<p><em>无波真古井，</em></p>\n<p><strong>有节是秋筠。</strong></p>\n<p><em>惆怅孤帆连夜发，</em></p>\n<p><strong>送行淡月微云。</strong></p>\n<p><em>尊前不用翠眉颦。</em></p>\n<p><strong>人生如逆旅，</strong></p>\n<p><em>我亦是行人。</em></p>\n"},{"title":"一款智能的日期解析工具","date":"2021-03-19T01:26:03.000Z","_content":"\n## 前言\n\n`Java` 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `ZoneDateTime` 、 `OffsetDateTime` 等等。针对这些时间类型又通过 `SimpleDateFormat` 和 `DateTimeFormatter` 实现不同的日期与字符串之间的格式化和解析。\n\n为了应对各种各样的日期解析，我们通常会封装类似于 `DateUtils` 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 `DateUtils` 通常会面临性能与兼容性的两难问题。\n\n而本文要介绍的，是一个截然不同的日期解析工具 `dateparser` ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。\n\n## DateUtils 的两难问题\n\n一个比较典型的日期解析函数类似这样（这是 `commons-lang3` 在其 `DateUtils` 中提供的函数）：\n\n```java\n    public static Date parseDate(final String str, final String... parsePatterns) {\n        return parseDate(str, null, parsePatterns);\n    }\n```\n\n这种日期解析函数的内部逻辑，往往是根据一批 `DATE_FORMAT` 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。\n\n首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。\n\n其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 `2` 微秒，而一次日期解析可能消耗 `0.75` 微秒。如果提供的 `parsePatterns` 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 `Redis` 读写操作。\n\n那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？\n\n## `dateparser`\n\n这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。\n\n为了实现高性能与可扩展性，它并没有采用 `SimpleDateFormat` 或 `DateTimeFormatter` ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 `year` , `month` , `day` , `hour` , `minute` , `second` , `zone` 等熟悉。\n\n这些预定义的正则表达式片段包括：\n\n`(?<week>%s)\\W*` 可以将 `Monday` 解析为 `week`\n\n`?(?<year>\\d{4})$` 可以将 `2019` 解析为 `year`\n\n`^(?<year>\\d{4})(?<month>\\d{2})$` 可以抽取出 `201909` 内部的 `year` 和 `month`\n\n`?(?<hour>\\d{1,2}) o’clock\\W*` 可以将 `12 o’clock` 解析为 `hour`\n\n更多规则参见 `DateParserBuilder.java`\n\n如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 `java.util.regex` 包来进行循环匹配，随着规则增加，确实会有性能问题。\n但是 `dateparser` 使用 `retree` 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。\n\n## 安装 Maven 依赖\n\n可以通过此 `maven` 坐标引入依赖\n\n```xml\n    <dependency>\n        <groupId>com.github.sisyphsu</groupId>\n        <artifactId>dateparser</artifactId>\n        <version>1.0.2</version>\n    </dependency>\n```\n\n## 基础使用\n\n`dateparser` 提供了一个 `DateParserUtils` 工具类，可以直接使用它将字符串解析为 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `OffsetDateTime` 等：\n\n```java\n    Date date = DateParserUtils.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n    Calendar calendar =\n    DateParserUtils.parseCalendar(\"Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\");\n    // 2015-07-03T17:04:07Z\n    LocalDateTime dateTime =\n    DateParserUtils.parseDateTime(\"2019-09-20 10:20:30.12345678 +0200\");\n    // 2019-09-20T16:20:30.123456780\n    OffsetDateTime offsetDateTime =\n    DateParserUtils.parseOffsetDateTime(\"2015-09-30 18:48:56.35272715 +0000 UTC\");\n    // 2015-09-30T18:48:56.352727150Z\n```\n\n需要注意的是，它会根据字符串中标明的 `TimeZon` e 或 `ZoneOffset` 自动进行偏移量转换。\n\n## 创建新 DateParser 实例\n\n由于 `DateParser` 不是线程安全的，同时 `parse` 操作通常非常快速（1us），因此 `DateParserUtils` 内部直接维护了一个 `DateParser` 单例，然后通过 `synchronized` 进行并发控制。\n\n如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 `DateParser` 实例：\n\n```java\n    DateParser parser = DateParser.newBuilder().build();\n    Date date = parser.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n```\n\n`DateParser` 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。\n\n## `MM/dd` 与 `dd/MM` 的优先级\n\n多数情况下， `dateparser` 可以按照规则自动地识别出字符串内部的 `month` 与 `day` 片段。\n\n但是对于 `MM/dd/yy` 和 `dd/MM/yy` ，有时候它就难以区分了。因为世界上多数国家会使用 `dd/MM/yy` 作为日期的格式，但是也有少数国家会特立独行地使用 `MM/dd/yy` 作为日期格式，最典型的就是美帝国主义。\n\n因此当 `dateparser` 遇到类似于 `7.8.2019` 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。\n\n为解决这个难题， `dateparser` 内部增加了一个名为 `preferMonthFirst` 的选项，用于辅助解决这个问题：\n\n```java\n    DateParserUtils.preferMonthFirst(true);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-08-03\n    DateParserUtils.preferMonthFirst(false);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-03-08\n```\n\n默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 `preferMonthFirst` 为 `true` ，则试为月在前。\n\n## 自定义 Parser\n\n你可以使用 `DateParserBuilder` 构建自己的日期解析器，通过此 `builder` ，你可以自定义新的解析规则。\n\n例如，如果你想支持 `【2019】` 这样的 `year` 字符串，可以这样做：\n\n```java\n    DateParser parser = DateParser.newBuilder().addRule(\"【(?<year>\\\\d{4})】\").build();\n    Calendar calendar = parser.parseCalendar(\"【1991】\");\n    assert calendar.get(Calendar.YEAR) == 1991;\n```\n\n需要注意的是，正则表达式 `【(?<year>\\\\d{4})】` 里面的 `year` 非常重要，它是 `dateparser` 内置的捕捉关键词。\n\n你也可以增加更加灵活的解析规则，就像这样：\n\n```java\n    DateParser parser = DateParser.newBuilder()\n    .addRule(\"民国(\\\\d{3})年\", (input, matcher, dt) -> {\n        int offset = matcher.start(1);\n        int i0 = input.charAt(offset) - '0';\n        int i1 = input.charAt(offset + 1) - '0';\n        int i2 = input.charAt(offset + 2) - '0';\n        dt.setYear(i0 * 100 + i1 * 10 + i2 + 1911);\n    })\n    .build();\n    Calendar calendar = parser.parseCalendar(\"民国101年\");\n    assert calendar.get(Calendar.YEAR) == 2012;\n```\n\n这个例子里面，新增了一个捕捉并解析 `民国xxx年` 的日期规则。\n\n## 性能对比\n\n首先，在单一日期格式下，对比一下 `dateparser` 与 `SimpleDateFormat` 的性能表现：\n\n```text\n    Benchmark               Mode  Cnt     Score    Error  Units\n    SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op\n    SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op\n```\n\n可以看到，在日期格式固定且单一的情况下， `dateparser` 在性能上处于下风，这也在预料之中。\n\n然后，在单一日期格式下，对比一下 `dateparser` 与 `DateTimeFormatter` 的性能表现：\n\n```text\n    Benchmark                       Mode  Cnt     Score    Error  Units\n    SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op\n    SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op\n```\n\n可以看到， `DateTimeFormatter` 的性能表现确实比 S `impleDateFormat` 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。\n\n如果我们将日期格式增加为 16 种时，性能表现就不一样了：\n\n```text\n    Benchmark              Mode  Cnt      Score      Error  Units\n    MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op\n    MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op\n```\n\n如果换算一下，无论日期格式是一种还是 16 中， `dateparser` 的性能始终维持在 `1.5us` ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失\n\n## 支持的日期格式（部分）\n\n以下为 `dateparser` 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：\n\n```text\n    May 8, 2009 5:57:51 PM\n    oct 7, 1970\n    oct 7, '70\n    oct. 7, 1970\n    oct. 7, 70\n    Mon Jan  2 15:04:05 2006\n    Mon Jan  2 15:04:05 MST 2006\n    Mon Jan 02 15:04:05 -0700 2006\n    Monday, 02-Jan-06 15:04:05 MST\n    Mon, 02 Jan 2006 15:04:05 MST\n    Tue, 11 Jul 2017 16:28:13 +0200 (CEST)\n    Mon, 02 Jan 2006 15:04:05 -0700\n    Thu, 4 Jan 2018 17:53:36 +0000\n    Mon Aug 10 15:44:11 UTC+0100 2015\n    Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\n    September 17, 2012 10:09am\n    September 17, 2012 at 10:09am PST-08\n    September 17, 2012, 10:10:09\n    October 7, 1970\n    October 7th, 1970\n    12 Feb 2006, 19:17\n    12 Feb 2006 19:17\n    7 oct 70\n    7 oct 1970\n    03 February 2013\n    1 July 2013\n    2013-Feb-03\n    3/31/2014\n    03/31/2014\n    08/21/71\n    8/1/71\n    4/8/2014 22:05\n    04/08/2014 22:05\n    4/8/14 22:05\n    04/2/2014 03:00:51\n    8/8/1965 12:00:00 AM\n    8/8/1965 01:00:01 PM\n    8/8/1965 01:00 PM\n    8/8/1965 1:00 PM\n    8/8/1965 12:00 AM\n    4/02/2014 03:00:51\n    03/19/2012 10:11:59\n    03/19/2012 10:11:59.3186369\n    2014/3/31\n    2014/03/31\n    2014/4/8 22:05\n    2014/04/08 22:05\n    2014/04/2 03:00:51\n    2014/4/02 03:00:51\n    2012/03/19 10:11:59\n    2012/03/19 10:11:59.3186369\n    2014年04月08日\n    2006-01-02T15:04:05+0000\n    2009-08-12T22:15:09-07:00\n    2009-08-12T22:15:09\n    2009-08-12T22:15:09Z\n    2014-04-26 17:24:37.3186369\n    2012-08-03 18:31:59.257000000\n    2014-04-26 17:24:37.123\n    2013-04-01 22:43\n    2013-04-01 22:43:22\n    2014-12-16 06:20:00 UTC\n    2014-12-16 06:20:00 GMT\n    2014-04-26 05:24:37 PM\n    2014-04-26 13:13:43 +0800\n    2014-04-26 13:13:43 +0800 +08\n    2014-04-26 13:13:44 +09:00\n    2012-08-03 18:31:59.257000000 +0000 UTC\n    2015-09-30 18:48:56.35272715 +0000 UTC\n    2015-02-18 00:12:00 +0000 GMT\n    2015-02-18 00:12:00 +0000 UTC\n    2015-02-08 03:02:00 +0300 MSK m=+0.000000001\n    2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001\n    2017-07-19 03:21:51+00:00\n    2014-04-26\n    2014-04\n    2014\n    2014-05-11 08:20:13,787\n    3.31.2014\n    03.31.2014\n    08.21.71\n    2014.03\n    2014.03.30\n    20140601\n    20140722105203\n    1332151919\n    1384216367189\n    1384216367111222\n    1384216367111222333\n```\n\n## 原文地址\n\n本文转载至<https://sulin.me/2019/38Z4HAT.html>\n","source":"_posts/一款智能的日期解析工具.md","raw":"---\ntitle: 一款智能的日期解析工具\ndate: 2021-03-19 09:26:03\ntags:\n  - 日期解析\n  - Utils\n\ncategories: [后端, Java]\n---\n\n## 前言\n\n`Java` 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `ZoneDateTime` 、 `OffsetDateTime` 等等。针对这些时间类型又通过 `SimpleDateFormat` 和 `DateTimeFormatter` 实现不同的日期与字符串之间的格式化和解析。\n\n为了应对各种各样的日期解析，我们通常会封装类似于 `DateUtils` 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 `DateUtils` 通常会面临性能与兼容性的两难问题。\n\n而本文要介绍的，是一个截然不同的日期解析工具 `dateparser` ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。\n\n## DateUtils 的两难问题\n\n一个比较典型的日期解析函数类似这样（这是 `commons-lang3` 在其 `DateUtils` 中提供的函数）：\n\n```java\n    public static Date parseDate(final String str, final String... parsePatterns) {\n        return parseDate(str, null, parsePatterns);\n    }\n```\n\n这种日期解析函数的内部逻辑，往往是根据一批 `DATE_FORMAT` 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。\n\n首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。\n\n其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 `2` 微秒，而一次日期解析可能消耗 `0.75` 微秒。如果提供的 `parsePatterns` 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 `Redis` 读写操作。\n\n那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？\n\n## `dateparser`\n\n这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。\n\n为了实现高性能与可扩展性，它并没有采用 `SimpleDateFormat` 或 `DateTimeFormatter` ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 `year` , `month` , `day` , `hour` , `minute` , `second` , `zone` 等熟悉。\n\n这些预定义的正则表达式片段包括：\n\n`(?<week>%s)\\W*` 可以将 `Monday` 解析为 `week`\n\n`?(?<year>\\d{4})$` 可以将 `2019` 解析为 `year`\n\n`^(?<year>\\d{4})(?<month>\\d{2})$` 可以抽取出 `201909` 内部的 `year` 和 `month`\n\n`?(?<hour>\\d{1,2}) o’clock\\W*` 可以将 `12 o’clock` 解析为 `hour`\n\n更多规则参见 `DateParserBuilder.java`\n\n如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 `java.util.regex` 包来进行循环匹配，随着规则增加，确实会有性能问题。\n但是 `dateparser` 使用 `retree` 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。\n\n## 安装 Maven 依赖\n\n可以通过此 `maven` 坐标引入依赖\n\n```xml\n    <dependency>\n        <groupId>com.github.sisyphsu</groupId>\n        <artifactId>dateparser</artifactId>\n        <version>1.0.2</version>\n    </dependency>\n```\n\n## 基础使用\n\n`dateparser` 提供了一个 `DateParserUtils` 工具类，可以直接使用它将字符串解析为 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `OffsetDateTime` 等：\n\n```java\n    Date date = DateParserUtils.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n    Calendar calendar =\n    DateParserUtils.parseCalendar(\"Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\");\n    // 2015-07-03T17:04:07Z\n    LocalDateTime dateTime =\n    DateParserUtils.parseDateTime(\"2019-09-20 10:20:30.12345678 +0200\");\n    // 2019-09-20T16:20:30.123456780\n    OffsetDateTime offsetDateTime =\n    DateParserUtils.parseOffsetDateTime(\"2015-09-30 18:48:56.35272715 +0000 UTC\");\n    // 2015-09-30T18:48:56.352727150Z\n```\n\n需要注意的是，它会根据字符串中标明的 `TimeZon` e 或 `ZoneOffset` 自动进行偏移量转换。\n\n## 创建新 DateParser 实例\n\n由于 `DateParser` 不是线程安全的，同时 `parse` 操作通常非常快速（1us），因此 `DateParserUtils` 内部直接维护了一个 `DateParser` 单例，然后通过 `synchronized` 进行并发控制。\n\n如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 `DateParser` 实例：\n\n```java\n    DateParser parser = DateParser.newBuilder().build();\n    Date date = parser.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n```\n\n`DateParser` 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。\n\n## `MM/dd` 与 `dd/MM` 的优先级\n\n多数情况下， `dateparser` 可以按照规则自动地识别出字符串内部的 `month` 与 `day` 片段。\n\n但是对于 `MM/dd/yy` 和 `dd/MM/yy` ，有时候它就难以区分了。因为世界上多数国家会使用 `dd/MM/yy` 作为日期的格式，但是也有少数国家会特立独行地使用 `MM/dd/yy` 作为日期格式，最典型的就是美帝国主义。\n\n因此当 `dateparser` 遇到类似于 `7.8.2019` 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。\n\n为解决这个难题， `dateparser` 内部增加了一个名为 `preferMonthFirst` 的选项，用于辅助解决这个问题：\n\n```java\n    DateParserUtils.preferMonthFirst(true);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-08-03\n    DateParserUtils.preferMonthFirst(false);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-03-08\n```\n\n默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 `preferMonthFirst` 为 `true` ，则试为月在前。\n\n## 自定义 Parser\n\n你可以使用 `DateParserBuilder` 构建自己的日期解析器，通过此 `builder` ，你可以自定义新的解析规则。\n\n例如，如果你想支持 `【2019】` 这样的 `year` 字符串，可以这样做：\n\n```java\n    DateParser parser = DateParser.newBuilder().addRule(\"【(?<year>\\\\d{4})】\").build();\n    Calendar calendar = parser.parseCalendar(\"【1991】\");\n    assert calendar.get(Calendar.YEAR) == 1991;\n```\n\n需要注意的是，正则表达式 `【(?<year>\\\\d{4})】` 里面的 `year` 非常重要，它是 `dateparser` 内置的捕捉关键词。\n\n你也可以增加更加灵活的解析规则，就像这样：\n\n```java\n    DateParser parser = DateParser.newBuilder()\n    .addRule(\"民国(\\\\d{3})年\", (input, matcher, dt) -> {\n        int offset = matcher.start(1);\n        int i0 = input.charAt(offset) - '0';\n        int i1 = input.charAt(offset + 1) - '0';\n        int i2 = input.charAt(offset + 2) - '0';\n        dt.setYear(i0 * 100 + i1 * 10 + i2 + 1911);\n    })\n    .build();\n    Calendar calendar = parser.parseCalendar(\"民国101年\");\n    assert calendar.get(Calendar.YEAR) == 2012;\n```\n\n这个例子里面，新增了一个捕捉并解析 `民国xxx年` 的日期规则。\n\n## 性能对比\n\n首先，在单一日期格式下，对比一下 `dateparser` 与 `SimpleDateFormat` 的性能表现：\n\n```text\n    Benchmark               Mode  Cnt     Score    Error  Units\n    SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op\n    SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op\n```\n\n可以看到，在日期格式固定且单一的情况下， `dateparser` 在性能上处于下风，这也在预料之中。\n\n然后，在单一日期格式下，对比一下 `dateparser` 与 `DateTimeFormatter` 的性能表现：\n\n```text\n    Benchmark                       Mode  Cnt     Score    Error  Units\n    SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op\n    SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op\n```\n\n可以看到， `DateTimeFormatter` 的性能表现确实比 S `impleDateFormat` 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。\n\n如果我们将日期格式增加为 16 种时，性能表现就不一样了：\n\n```text\n    Benchmark              Mode  Cnt      Score      Error  Units\n    MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op\n    MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op\n```\n\n如果换算一下，无论日期格式是一种还是 16 中， `dateparser` 的性能始终维持在 `1.5us` ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失\n\n## 支持的日期格式（部分）\n\n以下为 `dateparser` 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：\n\n```text\n    May 8, 2009 5:57:51 PM\n    oct 7, 1970\n    oct 7, '70\n    oct. 7, 1970\n    oct. 7, 70\n    Mon Jan  2 15:04:05 2006\n    Mon Jan  2 15:04:05 MST 2006\n    Mon Jan 02 15:04:05 -0700 2006\n    Monday, 02-Jan-06 15:04:05 MST\n    Mon, 02 Jan 2006 15:04:05 MST\n    Tue, 11 Jul 2017 16:28:13 +0200 (CEST)\n    Mon, 02 Jan 2006 15:04:05 -0700\n    Thu, 4 Jan 2018 17:53:36 +0000\n    Mon Aug 10 15:44:11 UTC+0100 2015\n    Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\n    September 17, 2012 10:09am\n    September 17, 2012 at 10:09am PST-08\n    September 17, 2012, 10:10:09\n    October 7, 1970\n    October 7th, 1970\n    12 Feb 2006, 19:17\n    12 Feb 2006 19:17\n    7 oct 70\n    7 oct 1970\n    03 February 2013\n    1 July 2013\n    2013-Feb-03\n    3/31/2014\n    03/31/2014\n    08/21/71\n    8/1/71\n    4/8/2014 22:05\n    04/08/2014 22:05\n    4/8/14 22:05\n    04/2/2014 03:00:51\n    8/8/1965 12:00:00 AM\n    8/8/1965 01:00:01 PM\n    8/8/1965 01:00 PM\n    8/8/1965 1:00 PM\n    8/8/1965 12:00 AM\n    4/02/2014 03:00:51\n    03/19/2012 10:11:59\n    03/19/2012 10:11:59.3186369\n    2014/3/31\n    2014/03/31\n    2014/4/8 22:05\n    2014/04/08 22:05\n    2014/04/2 03:00:51\n    2014/4/02 03:00:51\n    2012/03/19 10:11:59\n    2012/03/19 10:11:59.3186369\n    2014年04月08日\n    2006-01-02T15:04:05+0000\n    2009-08-12T22:15:09-07:00\n    2009-08-12T22:15:09\n    2009-08-12T22:15:09Z\n    2014-04-26 17:24:37.3186369\n    2012-08-03 18:31:59.257000000\n    2014-04-26 17:24:37.123\n    2013-04-01 22:43\n    2013-04-01 22:43:22\n    2014-12-16 06:20:00 UTC\n    2014-12-16 06:20:00 GMT\n    2014-04-26 05:24:37 PM\n    2014-04-26 13:13:43 +0800\n    2014-04-26 13:13:43 +0800 +08\n    2014-04-26 13:13:44 +09:00\n    2012-08-03 18:31:59.257000000 +0000 UTC\n    2015-09-30 18:48:56.35272715 +0000 UTC\n    2015-02-18 00:12:00 +0000 GMT\n    2015-02-18 00:12:00 +0000 UTC\n    2015-02-08 03:02:00 +0300 MSK m=+0.000000001\n    2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001\n    2017-07-19 03:21:51+00:00\n    2014-04-26\n    2014-04\n    2014\n    2014-05-11 08:20:13,787\n    3.31.2014\n    03.31.2014\n    08.21.71\n    2014.03\n    2014.03.30\n    20140601\n    20140722105203\n    1332151919\n    1384216367189\n    1384216367111222\n    1384216367111222333\n```\n\n## 原文地址\n\n本文转载至<https://sulin.me/2019/38Z4HAT.html>\n","slug":"一款智能的日期解析工具","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bju002nscac682nc3cu","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>Java</code> 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>ZoneDateTime</code> 、 <code>OffsetDateTime</code> 等等。针对这些时间类型又通过 <code>SimpleDateFormat</code> 和 <code>DateTimeFormatter</code> 实现不同的日期与字符串之间的格式化和解析。</p>\n<p>为了应对各种各样的日期解析，我们通常会封装类似于 <code>DateUtils</code> 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 <code>DateUtils</code> 通常会面临性能与兼容性的两难问题。</p>\n<p>而本文要介绍的，是一个截然不同的日期解析工具 <code>dateparser</code> ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。</p>\n<h2 id=\"DateUtils-的两难问题\"><a href=\"#DateUtils-的两难问题\" class=\"headerlink\" title=\"DateUtils 的两难问题\"></a>DateUtils 的两难问题</h2><p>一个比较典型的日期解析函数类似这样（这是 <code>commons-lang3</code> 在其 <code>DateUtils</code> 中提供的函数）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">parseDate</span><span class=\"params\">(<span class=\"keyword\">final</span> String str, <span class=\"keyword\">final</span> String... parsePatterns)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseDate(str, <span class=\"literal\">null</span>, parsePatterns);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种日期解析函数的内部逻辑，往往是根据一批 <code>DATE_FORMAT</code> 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。</p>\n<p>首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。</p>\n<p>其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 <code>2</code> 微秒，而一次日期解析可能消耗 <code>0.75</code> 微秒。如果提供的 <code>parsePatterns</code> 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 <code>Redis</code> 读写操作。</p>\n<p>那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？</p>\n<h2 id=\"dateparser\"><a href=\"#dateparser\" class=\"headerlink\" title=\"dateparser\"></a><code>dateparser</code></h2><p>这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。</p>\n<p>为了实现高性能与可扩展性，它并没有采用 <code>SimpleDateFormat</code> 或 <code>DateTimeFormatter</code> ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 <code>year</code> , <code>month</code> , <code>day</code> , <code>hour</code> , <code>minute</code> , <code>second</code> , <code>zone</code> 等熟悉。</p>\n<p>这些预定义的正则表达式片段包括：</p>\n<p><code>(?&lt;week&gt;%s)\\W*</code> 可以将 <code>Monday</code> 解析为 <code>week</code></p>\n<p><code>?(?&lt;year&gt;\\d&#123;4&#125;)$</code> 可以将 <code>2019</code> 解析为 <code>year</code></p>\n<p><code>^(?&lt;year&gt;\\d&#123;4&#125;)(?&lt;month&gt;\\d&#123;2&#125;)$</code> 可以抽取出 <code>201909</code> 内部的 <code>year</code> 和 <code>month</code></p>\n<p><code>?(?&lt;hour&gt;\\d&#123;1,2&#125;) o’clock\\W*</code> 可以将 <code>12 o’clock</code> 解析为 <code>hour</code></p>\n<p>更多规则参见 <code>DateParserBuilder.java</code></p>\n<p>如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 <code>java.util.regex</code> 包来进行循环匹配，随着规则增加，确实会有性能问题。<br>但是 <code>dateparser</code> 使用 <code>retree</code> 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。</p>\n<h2 id=\"安装-Maven-依赖\"><a href=\"#安装-Maven-依赖\" class=\"headerlink\" title=\"安装 Maven 依赖\"></a>安装 Maven 依赖</h2><p>可以通过此 <code>maven</code> 坐标引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sisyphsu<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dateparser<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><p><code>dateparser</code> 提供了一个 <code>DateParserUtils</code> 工具类，可以直接使用它将字符串解析为 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>OffsetDateTime</code> 等：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> DateParserUtils.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-07-03T17:04:07Z</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseDateTime(<span class=\"string\">&quot;2019-09-20 10:20:30.12345678 +0200&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2019-09-20T16:20:30.123456780</span></span><br><span class=\"line\"><span class=\"type\">OffsetDateTime</span> <span class=\"variable\">offsetDateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseOffsetDateTime(<span class=\"string\">&quot;2015-09-30 18:48:56.35272715 +0000 UTC&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-09-30T18:48:56.352727150Z</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，它会根据字符串中标明的 <code>TimeZon</code> e 或 <code>ZoneOffset</code> 自动进行偏移量转换。</p>\n<h2 id=\"创建新-DateParser-实例\"><a href=\"#创建新-DateParser-实例\" class=\"headerlink\" title=\"创建新 DateParser 实例\"></a>创建新 DateParser 实例</h2><p>由于 <code>DateParser</code> 不是线程安全的，同时 <code>parse</code> 操作通常非常快速（1us），因此 <code>DateParserUtils</code> 内部直接维护了一个 <code>DateParser</code> 单例，然后通过 <code>synchronized</code> 进行并发控制。</p>\n<p>如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 <code>DateParser</code> 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().build();</span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> parser.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br></pre></td></tr></table></figure>\n\n<p><code>DateParser</code> 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。</p>\n<h2 id=\"MM-dd-与-dd-MM-的优先级\"><a href=\"#MM-dd-与-dd-MM-的优先级\" class=\"headerlink\" title=\"MM/dd 与 dd/MM 的优先级\"></a><code>MM/dd</code> 与 <code>dd/MM</code> 的优先级</h2><p>多数情况下， <code>dateparser</code> 可以按照规则自动地识别出字符串内部的 <code>month</code> 与 <code>day</code> 片段。</p>\n<p>但是对于 <code>MM/dd/yy</code> 和 <code>dd/MM/yy</code> ，有时候它就难以区分了。因为世界上多数国家会使用 <code>dd/MM/yy</code> 作为日期的格式，但是也有少数国家会特立独行地使用 <code>MM/dd/yy</code> 作为日期格式，最典型的就是美帝国主义。</p>\n<p>因此当 <code>dateparser</code> 遇到类似于 <code>7.8.2019</code> 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。</p>\n<p>为解决这个难题， <code>dateparser</code> 内部增加了一个名为 <code>preferMonthFirst</code> 的选项，用于辅助解决这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">true</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-08-03</span></span><br><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">false</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-03-08</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 <code>preferMonthFirst</code> 为 <code>true</code> ，则试为月在前。</p>\n<h2 id=\"自定义-Parser\"><a href=\"#自定义-Parser\" class=\"headerlink\" title=\"自定义 Parser\"></a>自定义 Parser</h2><p>你可以使用 <code>DateParserBuilder</code> 构建自己的日期解析器，通过此 <code>builder</code> ，你可以自定义新的解析规则。</p>\n<p>例如，如果你想支持 <code>【2019】</code> 这样的 <code>year</code> 字符串，可以这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().addRule(<span class=\"string\">&quot;【(?&lt;year&gt;\\\\d&#123;4&#125;)】&quot;</span>).build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;【1991】&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">1991</span>;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，正则表达式 <code>【(?&lt;year&gt;\\\\d&#123;4&#125;)】</code> 里面的 <code>year</code> 非常重要，它是 <code>dateparser</code> 内置的捕捉关键词。</p>\n<p>你也可以增加更加灵活的解析规则，就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder()</span><br><span class=\"line\">.addRule(<span class=\"string\">&quot;民国(\\\\d&#123;3&#125;)年&quot;</span>, (input, matcher, dt) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> matcher.start(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i0</span> <span class=\"operator\">=</span> input.charAt(offset) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">1</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">2</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    dt.setYear(i0 * <span class=\"number\">100</span> + i1 * <span class=\"number\">10</span> + i2 + <span class=\"number\">1911</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;民国101年&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">2012</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子里面，新增了一个捕捉并解析 <code>民国xxx年</code> 的日期规则。</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>SimpleDateFormat</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark               Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op</span><br><span class=\"line\">SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在日期格式固定且单一的情况下， <code>dateparser</code> 在性能上处于下风，这也在预料之中。</p>\n<p>然后，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>DateTimeFormatter</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark                       Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op</span><br><span class=\"line\">SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到， <code>DateTimeFormatter</code> 的性能表现确实比 S <code>impleDateFormat</code> 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。</p>\n<p>如果我们将日期格式增加为 16 种时，性能表现就不一样了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark              Mode  Cnt      Score      Error  Units</span><br><span class=\"line\">MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op</span><br><span class=\"line\">MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>如果换算一下，无论日期格式是一种还是 16 中， <code>dateparser</code> 的性能始终维持在 <code>1.5us</code> ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失</p>\n<h2 id=\"支持的日期格式（部分）\"><a href=\"#支持的日期格式（部分）\" class=\"headerlink\" title=\"支持的日期格式（部分）\"></a>支持的日期格式（部分）</h2><p>以下为 <code>dateparser</code> 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">May 8, 2009 5:57:51 PM</span><br><span class=\"line\">oct 7, 1970</span><br><span class=\"line\">oct 7, &#x27;70</span><br><span class=\"line\">oct. 7, 1970</span><br><span class=\"line\">oct. 7, 70</span><br><span class=\"line\">Mon Jan  2 15:04:05 2006</span><br><span class=\"line\">Mon Jan  2 15:04:05 MST 2006</span><br><span class=\"line\">Mon Jan 02 15:04:05 -0700 2006</span><br><span class=\"line\">Monday, 02-Jan-06 15:04:05 MST</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 MST</span><br><span class=\"line\">Tue, 11 Jul 2017 16:28:13 +0200 (CEST)</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 -0700</span><br><span class=\"line\">Thu, 4 Jan 2018 17:53:36 +0000</span><br><span class=\"line\">Mon Aug 10 15:44:11 UTC+0100 2015</span><br><span class=\"line\">Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)</span><br><span class=\"line\">September 17, 2012 10:09am</span><br><span class=\"line\">September 17, 2012 at 10:09am PST-08</span><br><span class=\"line\">September 17, 2012, 10:10:09</span><br><span class=\"line\">October 7, 1970</span><br><span class=\"line\">October 7th, 1970</span><br><span class=\"line\">12 Feb 2006, 19:17</span><br><span class=\"line\">12 Feb 2006 19:17</span><br><span class=\"line\">7 oct 70</span><br><span class=\"line\">7 oct 1970</span><br><span class=\"line\">03 February 2013</span><br><span class=\"line\">1 July 2013</span><br><span class=\"line\">2013-Feb-03</span><br><span class=\"line\">3/31/2014</span><br><span class=\"line\">03/31/2014</span><br><span class=\"line\">08/21/71</span><br><span class=\"line\">8/1/71</span><br><span class=\"line\">4/8/2014 22:05</span><br><span class=\"line\">04/08/2014 22:05</span><br><span class=\"line\">4/8/14 22:05</span><br><span class=\"line\">04/2/2014 03:00:51</span><br><span class=\"line\">8/8/1965 12:00:00 AM</span><br><span class=\"line\">8/8/1965 01:00:01 PM</span><br><span class=\"line\">8/8/1965 01:00 PM</span><br><span class=\"line\">8/8/1965 1:00 PM</span><br><span class=\"line\">8/8/1965 12:00 AM</span><br><span class=\"line\">4/02/2014 03:00:51</span><br><span class=\"line\">03/19/2012 10:11:59</span><br><span class=\"line\">03/19/2012 10:11:59.3186369</span><br><span class=\"line\">2014/3/31</span><br><span class=\"line\">2014/03/31</span><br><span class=\"line\">2014/4/8 22:05</span><br><span class=\"line\">2014/04/08 22:05</span><br><span class=\"line\">2014/04/2 03:00:51</span><br><span class=\"line\">2014/4/02 03:00:51</span><br><span class=\"line\">2012/03/19 10:11:59</span><br><span class=\"line\">2012/03/19 10:11:59.3186369</span><br><span class=\"line\">2014年04月08日</span><br><span class=\"line\">2006-01-02T15:04:05+0000</span><br><span class=\"line\">2009-08-12T22:15:09-07:00</span><br><span class=\"line\">2009-08-12T22:15:09</span><br><span class=\"line\">2009-08-12T22:15:09Z</span><br><span class=\"line\">2014-04-26 17:24:37.3186369</span><br><span class=\"line\">2012-08-03 18:31:59.257000000</span><br><span class=\"line\">2014-04-26 17:24:37.123</span><br><span class=\"line\">2013-04-01 22:43</span><br><span class=\"line\">2013-04-01 22:43:22</span><br><span class=\"line\">2014-12-16 06:20:00 UTC</span><br><span class=\"line\">2014-12-16 06:20:00 GMT</span><br><span class=\"line\">2014-04-26 05:24:37 PM</span><br><span class=\"line\">2014-04-26 13:13:43 +0800</span><br><span class=\"line\">2014-04-26 13:13:43 +0800 +08</span><br><span class=\"line\">2014-04-26 13:13:44 +09:00</span><br><span class=\"line\">2012-08-03 18:31:59.257000000 +0000 UTC</span><br><span class=\"line\">2015-09-30 18:48:56.35272715 +0000 UTC</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 GMT</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 UTC</span><br><span class=\"line\">2015-02-08 03:02:00 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2017-07-19 03:21:51+00:00</span><br><span class=\"line\">2014-04-26</span><br><span class=\"line\">2014-04</span><br><span class=\"line\">2014</span><br><span class=\"line\">2014-05-11 08:20:13,787</span><br><span class=\"line\">3.31.2014</span><br><span class=\"line\">03.31.2014</span><br><span class=\"line\">08.21.71</span><br><span class=\"line\">2014.03</span><br><span class=\"line\">2014.03.30</span><br><span class=\"line\">20140601</span><br><span class=\"line\">20140722105203</span><br><span class=\"line\">1332151919</span><br><span class=\"line\">1384216367189</span><br><span class=\"line\">1384216367111222</span><br><span class=\"line\">1384216367111222333</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a>原文地址</h2><p>本文转载至<a href=\"https://sulin.me/2019/38Z4HAT.html\">https://sulin.me/2019/38Z4HAT.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>Java</code> 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>ZoneDateTime</code> 、 <code>OffsetDateTime</code> 等等。针对这些时间类型又通过 <code>SimpleDateFormat</code> 和 <code>DateTimeFormatter</code> 实现不同的日期与字符串之间的格式化和解析。</p>\n<p>为了应对各种各样的日期解析，我们通常会封装类似于 <code>DateUtils</code> 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 <code>DateUtils</code> 通常会面临性能与兼容性的两难问题。</p>\n<p>而本文要介绍的，是一个截然不同的日期解析工具 <code>dateparser</code> ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。</p>\n<h2 id=\"DateUtils-的两难问题\"><a href=\"#DateUtils-的两难问题\" class=\"headerlink\" title=\"DateUtils 的两难问题\"></a>DateUtils 的两难问题</h2><p>一个比较典型的日期解析函数类似这样（这是 <code>commons-lang3</code> 在其 <code>DateUtils</code> 中提供的函数）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">parseDate</span><span class=\"params\">(<span class=\"keyword\">final</span> String str, <span class=\"keyword\">final</span> String... parsePatterns)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseDate(str, <span class=\"literal\">null</span>, parsePatterns);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种日期解析函数的内部逻辑，往往是根据一批 <code>DATE_FORMAT</code> 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。</p>\n<p>首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。</p>\n<p>其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 <code>2</code> 微秒，而一次日期解析可能消耗 <code>0.75</code> 微秒。如果提供的 <code>parsePatterns</code> 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 <code>Redis</code> 读写操作。</p>\n<p>那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？</p>\n<h2 id=\"dateparser\"><a href=\"#dateparser\" class=\"headerlink\" title=\"dateparser\"></a><code>dateparser</code></h2><p>这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。</p>\n<p>为了实现高性能与可扩展性，它并没有采用 <code>SimpleDateFormat</code> 或 <code>DateTimeFormatter</code> ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 <code>year</code> , <code>month</code> , <code>day</code> , <code>hour</code> , <code>minute</code> , <code>second</code> , <code>zone</code> 等熟悉。</p>\n<p>这些预定义的正则表达式片段包括：</p>\n<p><code>(?&lt;week&gt;%s)\\W*</code> 可以将 <code>Monday</code> 解析为 <code>week</code></p>\n<p><code>?(?&lt;year&gt;\\d&#123;4&#125;)$</code> 可以将 <code>2019</code> 解析为 <code>year</code></p>\n<p><code>^(?&lt;year&gt;\\d&#123;4&#125;)(?&lt;month&gt;\\d&#123;2&#125;)$</code> 可以抽取出 <code>201909</code> 内部的 <code>year</code> 和 <code>month</code></p>\n<p><code>?(?&lt;hour&gt;\\d&#123;1,2&#125;) o’clock\\W*</code> 可以将 <code>12 o’clock</code> 解析为 <code>hour</code></p>\n<p>更多规则参见 <code>DateParserBuilder.java</code></p>\n<p>如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 <code>java.util.regex</code> 包来进行循环匹配，随着规则增加，确实会有性能问题。<br>但是 <code>dateparser</code> 使用 <code>retree</code> 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。</p>\n<h2 id=\"安装-Maven-依赖\"><a href=\"#安装-Maven-依赖\" class=\"headerlink\" title=\"安装 Maven 依赖\"></a>安装 Maven 依赖</h2><p>可以通过此 <code>maven</code> 坐标引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sisyphsu<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dateparser<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><p><code>dateparser</code> 提供了一个 <code>DateParserUtils</code> 工具类，可以直接使用它将字符串解析为 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>OffsetDateTime</code> 等：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> DateParserUtils.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-07-03T17:04:07Z</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseDateTime(<span class=\"string\">&quot;2019-09-20 10:20:30.12345678 +0200&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2019-09-20T16:20:30.123456780</span></span><br><span class=\"line\"><span class=\"type\">OffsetDateTime</span> <span class=\"variable\">offsetDateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseOffsetDateTime(<span class=\"string\">&quot;2015-09-30 18:48:56.35272715 +0000 UTC&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-09-30T18:48:56.352727150Z</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，它会根据字符串中标明的 <code>TimeZon</code> e 或 <code>ZoneOffset</code> 自动进行偏移量转换。</p>\n<h2 id=\"创建新-DateParser-实例\"><a href=\"#创建新-DateParser-实例\" class=\"headerlink\" title=\"创建新 DateParser 实例\"></a>创建新 DateParser 实例</h2><p>由于 <code>DateParser</code> 不是线程安全的，同时 <code>parse</code> 操作通常非常快速（1us），因此 <code>DateParserUtils</code> 内部直接维护了一个 <code>DateParser</code> 单例，然后通过 <code>synchronized</code> 进行并发控制。</p>\n<p>如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 <code>DateParser</code> 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().build();</span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> parser.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br></pre></td></tr></table></figure>\n\n<p><code>DateParser</code> 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。</p>\n<h2 id=\"MM-dd-与-dd-MM-的优先级\"><a href=\"#MM-dd-与-dd-MM-的优先级\" class=\"headerlink\" title=\"MM/dd 与 dd/MM 的优先级\"></a><code>MM/dd</code> 与 <code>dd/MM</code> 的优先级</h2><p>多数情况下， <code>dateparser</code> 可以按照规则自动地识别出字符串内部的 <code>month</code> 与 <code>day</code> 片段。</p>\n<p>但是对于 <code>MM/dd/yy</code> 和 <code>dd/MM/yy</code> ，有时候它就难以区分了。因为世界上多数国家会使用 <code>dd/MM/yy</code> 作为日期的格式，但是也有少数国家会特立独行地使用 <code>MM/dd/yy</code> 作为日期格式，最典型的就是美帝国主义。</p>\n<p>因此当 <code>dateparser</code> 遇到类似于 <code>7.8.2019</code> 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。</p>\n<p>为解决这个难题， <code>dateparser</code> 内部增加了一个名为 <code>preferMonthFirst</code> 的选项，用于辅助解决这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">true</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-08-03</span></span><br><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">false</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-03-08</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 <code>preferMonthFirst</code> 为 <code>true</code> ，则试为月在前。</p>\n<h2 id=\"自定义-Parser\"><a href=\"#自定义-Parser\" class=\"headerlink\" title=\"自定义 Parser\"></a>自定义 Parser</h2><p>你可以使用 <code>DateParserBuilder</code> 构建自己的日期解析器，通过此 <code>builder</code> ，你可以自定义新的解析规则。</p>\n<p>例如，如果你想支持 <code>【2019】</code> 这样的 <code>year</code> 字符串，可以这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().addRule(<span class=\"string\">&quot;【(?&lt;year&gt;\\\\d&#123;4&#125;)】&quot;</span>).build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;【1991】&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">1991</span>;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，正则表达式 <code>【(?&lt;year&gt;\\\\d&#123;4&#125;)】</code> 里面的 <code>year</code> 非常重要，它是 <code>dateparser</code> 内置的捕捉关键词。</p>\n<p>你也可以增加更加灵活的解析规则，就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder()</span><br><span class=\"line\">.addRule(<span class=\"string\">&quot;民国(\\\\d&#123;3&#125;)年&quot;</span>, (input, matcher, dt) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> matcher.start(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i0</span> <span class=\"operator\">=</span> input.charAt(offset) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">1</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">2</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    dt.setYear(i0 * <span class=\"number\">100</span> + i1 * <span class=\"number\">10</span> + i2 + <span class=\"number\">1911</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;民国101年&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">2012</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子里面，新增了一个捕捉并解析 <code>民国xxx年</code> 的日期规则。</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>SimpleDateFormat</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark               Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op</span><br><span class=\"line\">SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在日期格式固定且单一的情况下， <code>dateparser</code> 在性能上处于下风，这也在预料之中。</p>\n<p>然后，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>DateTimeFormatter</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark                       Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op</span><br><span class=\"line\">SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到， <code>DateTimeFormatter</code> 的性能表现确实比 S <code>impleDateFormat</code> 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。</p>\n<p>如果我们将日期格式增加为 16 种时，性能表现就不一样了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark              Mode  Cnt      Score      Error  Units</span><br><span class=\"line\">MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op</span><br><span class=\"line\">MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>如果换算一下，无论日期格式是一种还是 16 中， <code>dateparser</code> 的性能始终维持在 <code>1.5us</code> ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失</p>\n<h2 id=\"支持的日期格式（部分）\"><a href=\"#支持的日期格式（部分）\" class=\"headerlink\" title=\"支持的日期格式（部分）\"></a>支持的日期格式（部分）</h2><p>以下为 <code>dateparser</code> 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">May 8, 2009 5:57:51 PM</span><br><span class=\"line\">oct 7, 1970</span><br><span class=\"line\">oct 7, &#x27;70</span><br><span class=\"line\">oct. 7, 1970</span><br><span class=\"line\">oct. 7, 70</span><br><span class=\"line\">Mon Jan  2 15:04:05 2006</span><br><span class=\"line\">Mon Jan  2 15:04:05 MST 2006</span><br><span class=\"line\">Mon Jan 02 15:04:05 -0700 2006</span><br><span class=\"line\">Monday, 02-Jan-06 15:04:05 MST</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 MST</span><br><span class=\"line\">Tue, 11 Jul 2017 16:28:13 +0200 (CEST)</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 -0700</span><br><span class=\"line\">Thu, 4 Jan 2018 17:53:36 +0000</span><br><span class=\"line\">Mon Aug 10 15:44:11 UTC+0100 2015</span><br><span class=\"line\">Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)</span><br><span class=\"line\">September 17, 2012 10:09am</span><br><span class=\"line\">September 17, 2012 at 10:09am PST-08</span><br><span class=\"line\">September 17, 2012, 10:10:09</span><br><span class=\"line\">October 7, 1970</span><br><span class=\"line\">October 7th, 1970</span><br><span class=\"line\">12 Feb 2006, 19:17</span><br><span class=\"line\">12 Feb 2006 19:17</span><br><span class=\"line\">7 oct 70</span><br><span class=\"line\">7 oct 1970</span><br><span class=\"line\">03 February 2013</span><br><span class=\"line\">1 July 2013</span><br><span class=\"line\">2013-Feb-03</span><br><span class=\"line\">3/31/2014</span><br><span class=\"line\">03/31/2014</span><br><span class=\"line\">08/21/71</span><br><span class=\"line\">8/1/71</span><br><span class=\"line\">4/8/2014 22:05</span><br><span class=\"line\">04/08/2014 22:05</span><br><span class=\"line\">4/8/14 22:05</span><br><span class=\"line\">04/2/2014 03:00:51</span><br><span class=\"line\">8/8/1965 12:00:00 AM</span><br><span class=\"line\">8/8/1965 01:00:01 PM</span><br><span class=\"line\">8/8/1965 01:00 PM</span><br><span class=\"line\">8/8/1965 1:00 PM</span><br><span class=\"line\">8/8/1965 12:00 AM</span><br><span class=\"line\">4/02/2014 03:00:51</span><br><span class=\"line\">03/19/2012 10:11:59</span><br><span class=\"line\">03/19/2012 10:11:59.3186369</span><br><span class=\"line\">2014/3/31</span><br><span class=\"line\">2014/03/31</span><br><span class=\"line\">2014/4/8 22:05</span><br><span class=\"line\">2014/04/08 22:05</span><br><span class=\"line\">2014/04/2 03:00:51</span><br><span class=\"line\">2014/4/02 03:00:51</span><br><span class=\"line\">2012/03/19 10:11:59</span><br><span class=\"line\">2012/03/19 10:11:59.3186369</span><br><span class=\"line\">2014年04月08日</span><br><span class=\"line\">2006-01-02T15:04:05+0000</span><br><span class=\"line\">2009-08-12T22:15:09-07:00</span><br><span class=\"line\">2009-08-12T22:15:09</span><br><span class=\"line\">2009-08-12T22:15:09Z</span><br><span class=\"line\">2014-04-26 17:24:37.3186369</span><br><span class=\"line\">2012-08-03 18:31:59.257000000</span><br><span class=\"line\">2014-04-26 17:24:37.123</span><br><span class=\"line\">2013-04-01 22:43</span><br><span class=\"line\">2013-04-01 22:43:22</span><br><span class=\"line\">2014-12-16 06:20:00 UTC</span><br><span class=\"line\">2014-12-16 06:20:00 GMT</span><br><span class=\"line\">2014-04-26 05:24:37 PM</span><br><span class=\"line\">2014-04-26 13:13:43 +0800</span><br><span class=\"line\">2014-04-26 13:13:43 +0800 +08</span><br><span class=\"line\">2014-04-26 13:13:44 +09:00</span><br><span class=\"line\">2012-08-03 18:31:59.257000000 +0000 UTC</span><br><span class=\"line\">2015-09-30 18:48:56.35272715 +0000 UTC</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 GMT</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 UTC</span><br><span class=\"line\">2015-02-08 03:02:00 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2017-07-19 03:21:51+00:00</span><br><span class=\"line\">2014-04-26</span><br><span class=\"line\">2014-04</span><br><span class=\"line\">2014</span><br><span class=\"line\">2014-05-11 08:20:13,787</span><br><span class=\"line\">3.31.2014</span><br><span class=\"line\">03.31.2014</span><br><span class=\"line\">08.21.71</span><br><span class=\"line\">2014.03</span><br><span class=\"line\">2014.03.30</span><br><span class=\"line\">20140601</span><br><span class=\"line\">20140722105203</span><br><span class=\"line\">1332151919</span><br><span class=\"line\">1384216367189</span><br><span class=\"line\">1384216367111222</span><br><span class=\"line\">1384216367111222333</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a>原文地址</h2><p>本文转载至<a href=\"https://sulin.me/2019/38Z4HAT.html\">https://sulin.me/2019/38Z4HAT.html</a></p>\n"},{"title":"双向绑定和单向绑定","date":"2021-04-07T05:15:40.000Z","_content":"\n## 数据绑定\n\n所谓数据绑定，就是指`View`层和`Model`层之间的映射关系\n\n### 单向绑定\n\n`Model`的更新会触发 View 的更新，而 View 的更新不会触发`Model`的更新，它们的作用是单向的。\n\n### 双向绑定\n\n`Model`的更新会触发`View`的更新，`View`的更新也会触发`Model`的更新，它们的作用是相互的。\n\n![avatar](https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg)\n\n### React 采用单向数据绑定\n\n![avatar](https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg)\n当用户访问`View`时，通过触发`Events`进行交互，而在相应`Events Handlers`中，会触发相应的`Actions`，而`Actions`通过调用`setState`方法对`View`的`State`进行更新，`State`更新后会触发`View`的重新渲染。\n\n单向数据绑定的优缺点：\n优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。\n缺点：会有很多类似的样板代码，代码量会相应的上升。\n\n### Vue 支持单向数据绑定和双向数据绑定\n\n- 单项数据绑定：使用`v-bind`属性绑定、`v-on`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`v-model`指令，用户对`View`的更改会直接同步到`Model`。\n\nVue 的双向数据绑定就是指使用`v-model`指令进行数据绑定，而`v-model`本质上是`v-bind`和`v-on`相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。\n\n双向数据绑定的优缺点：\n\n优点：在操作表单时使用`v-model`方便简单，可以省略繁琐或重复的`onChange`事件去处理每个表单数据的变化（减少代码量）。\n缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。\n\n### Angular 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`[x]`属性绑定，`(x)`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`[(x)]`语法，用户对`View`的更改会直接同步到`Model`。\n\n### AngularJS 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`ng-bind`指令或插值形式`{{data}}`。\n- 双向数据绑定：使用`ng-model`指令，用户对`View`的更改会直接同步到`Model`。\n\n## 参考地址\n\n<https://juejin.cn/post/6854573208646090765>\n","source":"_posts/双向绑定和单向绑定.md","raw":"---\ntitle: 双向绑定和单向绑定\ndate: 2021-04-07 13:15:40\ntags:\n  - 双向绑定\n  - 单向绑定\n\ncategories: [前端, Vue]\n---\n\n## 数据绑定\n\n所谓数据绑定，就是指`View`层和`Model`层之间的映射关系\n\n### 单向绑定\n\n`Model`的更新会触发 View 的更新，而 View 的更新不会触发`Model`的更新，它们的作用是单向的。\n\n### 双向绑定\n\n`Model`的更新会触发`View`的更新，`View`的更新也会触发`Model`的更新，它们的作用是相互的。\n\n![avatar](https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg)\n\n### React 采用单向数据绑定\n\n![avatar](https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg)\n当用户访问`View`时，通过触发`Events`进行交互，而在相应`Events Handlers`中，会触发相应的`Actions`，而`Actions`通过调用`setState`方法对`View`的`State`进行更新，`State`更新后会触发`View`的重新渲染。\n\n单向数据绑定的优缺点：\n优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。\n缺点：会有很多类似的样板代码，代码量会相应的上升。\n\n### Vue 支持单向数据绑定和双向数据绑定\n\n- 单项数据绑定：使用`v-bind`属性绑定、`v-on`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`v-model`指令，用户对`View`的更改会直接同步到`Model`。\n\nVue 的双向数据绑定就是指使用`v-model`指令进行数据绑定，而`v-model`本质上是`v-bind`和`v-on`相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。\n\n双向数据绑定的优缺点：\n\n优点：在操作表单时使用`v-model`方便简单，可以省略繁琐或重复的`onChange`事件去处理每个表单数据的变化（减少代码量）。\n缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。\n\n### Angular 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`[x]`属性绑定，`(x)`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`[(x)]`语法，用户对`View`的更改会直接同步到`Model`。\n\n### AngularJS 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`ng-bind`指令或插值形式`{{data}}`。\n- 双向数据绑定：使用`ng-model`指令，用户对`View`的更改会直接同步到`Model`。\n\n## 参考地址\n\n<https://juejin.cn/post/6854573208646090765>\n","slug":"双向绑定和单向绑定","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bju002rscacfqni5s9o","content":"<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>所谓数据绑定，就是指<code>View</code>层和<code>Model</code>层之间的映射关系</p>\n<h3 id=\"单向绑定\"><a href=\"#单向绑定\" class=\"headerlink\" title=\"单向绑定\"></a>单向绑定</h3><p><code>Model</code>的更新会触发 View 的更新，而 View 的更新不会触发<code>Model</code>的更新，它们的作用是单向的。</p>\n<h3 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h3><p><code>Model</code>的更新会触发<code>View</code>的更新，<code>View</code>的更新也会触发<code>Model</code>的更新，它们的作用是相互的。</p>\n<p><img src=\"https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"React-采用单向数据绑定\"><a href=\"#React-采用单向数据绑定\" class=\"headerlink\" title=\"React 采用单向数据绑定\"></a>React 采用单向数据绑定</h3><p><img src=\"https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br>当用户访问<code>View</code>时，通过触发<code>Events</code>进行交互，而在相应<code>Events Handlers</code>中，会触发相应的<code>Actions</code>，而<code>Actions</code>通过调用<code>setState</code>方法对<code>View</code>的<code>State</code>进行更新，<code>State</code>更新后会触发<code>View</code>的重新渲染。</p>\n<p>单向数据绑定的优缺点：<br>优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。<br>缺点：会有很多类似的样板代码，代码量会相应的上升。</p>\n<h3 id=\"Vue-支持单向数据绑定和双向数据绑定\"><a href=\"#Vue-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Vue 支持单向数据绑定和双向数据绑定\"></a>Vue 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单项数据绑定：使用<code>v-bind</code>属性绑定、<code>v-on</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>v-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<p>Vue 的双向数据绑定就是指使用<code>v-model</code>指令进行数据绑定，而<code>v-model</code>本质上是<code>v-bind</code>和<code>v-on</code>相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。</p>\n<p>双向数据绑定的优缺点：</p>\n<p>优点：在操作表单时使用<code>v-model</code>方便简单，可以省略繁琐或重复的<code>onChange</code>事件去处理每个表单数据的变化（减少代码量）。<br>缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。</p>\n<h3 id=\"Angular-支持单向数据绑定和双向数据绑定\"><a href=\"#Angular-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Angular 支持单向数据绑定和双向数据绑定\"></a>Angular 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>[x]</code>属性绑定，<code>(x)</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>[(x)]</code>语法，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h3 id=\"AngularJS-支持单向数据绑定和双向数据绑定\"><a href=\"#AngularJS-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"AngularJS 支持单向数据绑定和双向数据绑定\"></a>AngularJS 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>ng-bind</code>指令或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>ng-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://juejin.cn/post/6854573208646090765\">https://juejin.cn/post/6854573208646090765</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>所谓数据绑定，就是指<code>View</code>层和<code>Model</code>层之间的映射关系</p>\n<h3 id=\"单向绑定\"><a href=\"#单向绑定\" class=\"headerlink\" title=\"单向绑定\"></a>单向绑定</h3><p><code>Model</code>的更新会触发 View 的更新，而 View 的更新不会触发<code>Model</code>的更新，它们的作用是单向的。</p>\n<h3 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h3><p><code>Model</code>的更新会触发<code>View</code>的更新，<code>View</code>的更新也会触发<code>Model</code>的更新，它们的作用是相互的。</p>\n<p><img src=\"https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg\" alt=\"avatar\"></p>\n<h3 id=\"React-采用单向数据绑定\"><a href=\"#React-采用单向数据绑定\" class=\"headerlink\" title=\"React 采用单向数据绑定\"></a>React 采用单向数据绑定</h3><p><img src=\"https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg\" alt=\"avatar\"><br>当用户访问<code>View</code>时，通过触发<code>Events</code>进行交互，而在相应<code>Events Handlers</code>中，会触发相应的<code>Actions</code>，而<code>Actions</code>通过调用<code>setState</code>方法对<code>View</code>的<code>State</code>进行更新，<code>State</code>更新后会触发<code>View</code>的重新渲染。</p>\n<p>单向数据绑定的优缺点：<br>优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。<br>缺点：会有很多类似的样板代码，代码量会相应的上升。</p>\n<h3 id=\"Vue-支持单向数据绑定和双向数据绑定\"><a href=\"#Vue-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Vue 支持单向数据绑定和双向数据绑定\"></a>Vue 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单项数据绑定：使用<code>v-bind</code>属性绑定、<code>v-on</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>v-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<p>Vue 的双向数据绑定就是指使用<code>v-model</code>指令进行数据绑定，而<code>v-model</code>本质上是<code>v-bind</code>和<code>v-on</code>相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。</p>\n<p>双向数据绑定的优缺点：</p>\n<p>优点：在操作表单时使用<code>v-model</code>方便简单，可以省略繁琐或重复的<code>onChange</code>事件去处理每个表单数据的变化（减少代码量）。<br>缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。</p>\n<h3 id=\"Angular-支持单向数据绑定和双向数据绑定\"><a href=\"#Angular-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Angular 支持单向数据绑定和双向数据绑定\"></a>Angular 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>[x]</code>属性绑定，<code>(x)</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>[(x)]</code>语法，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h3 id=\"AngularJS-支持单向数据绑定和双向数据绑定\"><a href=\"#AngularJS-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"AngularJS 支持单向数据绑定和双向数据绑定\"></a>AngularJS 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>ng-bind</code>指令或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>ng-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://juejin.cn/post/6854573208646090765\">https://juejin.cn/post/6854573208646090765</a></p>\n"},{"title":"在浏览器输入URL回车之后发生了什么？","date":"2021-04-08T06:26:23.000Z","categies":["面试题"],"_content":"\n## 大致流程\n\n- URL 解析\n- DNS 查询\n- TCP 连接\n- 处理请求\n- 接受响应\n- 渲染页面\n","source":"_posts/在浏览器输入URL回车之后发生了什么？.md","raw":"---\ntitle: 在浏览器输入URL回车之后发生了什么？\ndate: 2021-04-08 14:26:23\ntags:\n  - 浏览器\n  - URL\ncategies: [面试题]\n---\n\n## 大致流程\n\n- URL 解析\n- DNS 查询\n- TCP 连接\n- 处理请求\n- 接受响应\n- 渲染页面\n","slug":"在浏览器输入URL回车之后发生了什么？","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjv002tscac8t2k9jpj","content":"<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><ul>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><ul>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ul>\n"},{"title":"常用插件备份","date":"2022-07-29T02:12:27.000Z","_content":"\n## Vscode插件备份\n\nVscode插件备份\n\n### Auto Close Tag\n\n### Auto Rename Tag\n\n### Blockman - Highlight Nested Code Blocks\n\n### Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\n\n### Class autocomplete for HTML\n\n### Code Runner\n\n### Color Info\n\n### CSS Peek\n\n### css-auto-prefix\n\n### Easy Sass\n\n### EditorConfig for VS Code\n\n### ESLint\n\n### GitHub Theme\n\n### GitLens — Git supercharged\n\n### HTML CSS Support\n\n### IntelliSense for CSS class names in HTML\n\n### JavaScript (ES6) code snippets\n\n### koroFileHeader\n\n### Live Server\n\n### Markdown\n\n### Markdown All in One\n\n### Markdown Extended\n\n### Markdown Preview Enhanced\n\n### markdownlint\n\n### npm Intellisense\n\n### Paste Image\n\n### Path Intellisense\n\n### Project Manager\n\n### Stylelint\n\n### Vetur\n\n### vscode-icons\n\n### vscode-json\n\n### Vue 3 Snippets\n\n### Vue Airbnb Style VSCode Snippets\n\n### Vue Language Features (Volar)\n\n### Vue Peek\n\n### Vue VSCode Snippets\n\n### vue-helper\n","source":"_posts/常用插件备份.md","raw":"---\ntitle: 常用插件备份\ndate: 2022-07-29 10:12:27\ntags:\n    Vscode\ncategories: [Vscode, 插件]\n---\n\n## Vscode插件备份\n\nVscode插件备份\n\n### Auto Close Tag\n\n### Auto Rename Tag\n\n### Blockman - Highlight Nested Code Blocks\n\n### Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\n\n### Class autocomplete for HTML\n\n### Code Runner\n\n### Color Info\n\n### CSS Peek\n\n### css-auto-prefix\n\n### Easy Sass\n\n### EditorConfig for VS Code\n\n### ESLint\n\n### GitHub Theme\n\n### GitLens — Git supercharged\n\n### HTML CSS Support\n\n### IntelliSense for CSS class names in HTML\n\n### JavaScript (ES6) code snippets\n\n### koroFileHeader\n\n### Live Server\n\n### Markdown\n\n### Markdown All in One\n\n### Markdown Extended\n\n### Markdown Preview Enhanced\n\n### markdownlint\n\n### npm Intellisense\n\n### Paste Image\n\n### Path Intellisense\n\n### Project Manager\n\n### Stylelint\n\n### Vetur\n\n### vscode-icons\n\n### vscode-json\n\n### Vue 3 Snippets\n\n### Vue Airbnb Style VSCode Snippets\n\n### Vue Language Features (Volar)\n\n### Vue Peek\n\n### Vue VSCode Snippets\n\n### vue-helper\n","slug":"常用插件备份","published":1,"updated":"2022-10-27T06:40:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjw002yscacdwtoh1wc","content":"<h2 id=\"Vscode插件备份\"><a href=\"#Vscode插件备份\" class=\"headerlink\" title=\"Vscode插件备份\"></a>Vscode插件备份</h2><p>Vscode插件备份</p>\n<h3 id=\"Auto-Close-Tag\"><a href=\"#Auto-Close-Tag\" class=\"headerlink\" title=\"Auto Close Tag\"></a>Auto Close Tag</h3><h3 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h3><h3 id=\"Blockman-Highlight-Nested-Code-Blocks\"><a href=\"#Blockman-Highlight-Nested-Code-Blocks\" class=\"headerlink\" title=\"Blockman - Highlight Nested Code Blocks\"></a>Blockman - Highlight Nested Code Blocks</h3><h3 id=\"Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</h3><h3 id=\"Class-autocomplete-for-HTML\"><a href=\"#Class-autocomplete-for-HTML\" class=\"headerlink\" title=\"Class autocomplete for HTML\"></a>Class autocomplete for HTML</h3><h3 id=\"Code-Runner\"><a href=\"#Code-Runner\" class=\"headerlink\" title=\"Code Runner\"></a>Code Runner</h3><h3 id=\"Color-Info\"><a href=\"#Color-Info\" class=\"headerlink\" title=\"Color Info\"></a>Color Info</h3><h3 id=\"CSS-Peek\"><a href=\"#CSS-Peek\" class=\"headerlink\" title=\"CSS Peek\"></a>CSS Peek</h3><h3 id=\"css-auto-prefix\"><a href=\"#css-auto-prefix\" class=\"headerlink\" title=\"css-auto-prefix\"></a>css-auto-prefix</h3><h3 id=\"Easy-Sass\"><a href=\"#Easy-Sass\" class=\"headerlink\" title=\"Easy Sass\"></a>Easy Sass</h3><h3 id=\"EditorConfig-for-VS-Code\"><a href=\"#EditorConfig-for-VS-Code\" class=\"headerlink\" title=\"EditorConfig for VS Code\"></a>EditorConfig for VS Code</h3><h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><h3 id=\"GitHub-Theme\"><a href=\"#GitHub-Theme\" class=\"headerlink\" title=\"GitHub Theme\"></a>GitHub Theme</h3><h3 id=\"GitLens-—-Git-supercharged\"><a href=\"#GitLens-—-Git-supercharged\" class=\"headerlink\" title=\"GitLens — Git supercharged\"></a>GitLens — Git supercharged</h3><h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><h3 id=\"IntelliSense-for-CSS-class-names-in-HTML\"><a href=\"#IntelliSense-for-CSS-class-names-in-HTML\" class=\"headerlink\" title=\"IntelliSense for CSS class names in HTML\"></a>IntelliSense for CSS class names in HTML</h3><h3 id=\"JavaScript-ES6-code-snippets\"><a href=\"#JavaScript-ES6-code-snippets\" class=\"headerlink\" title=\"JavaScript (ES6) code snippets\"></a>JavaScript (ES6) code snippets</h3><h3 id=\"koroFileHeader\"><a href=\"#koroFileHeader\" class=\"headerlink\" title=\"koroFileHeader\"></a>koroFileHeader</h3><h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h3><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><h3 id=\"Markdown-All-in-One\"><a href=\"#Markdown-All-in-One\" class=\"headerlink\" title=\"Markdown All in One\"></a>Markdown All in One</h3><h3 id=\"Markdown-Extended\"><a href=\"#Markdown-Extended\" class=\"headerlink\" title=\"Markdown Extended\"></a>Markdown Extended</h3><h3 id=\"Markdown-Preview-Enhanced\"><a href=\"#Markdown-Preview-Enhanced\" class=\"headerlink\" title=\"Markdown Preview Enhanced\"></a>Markdown Preview Enhanced</h3><h3 id=\"markdownlint\"><a href=\"#markdownlint\" class=\"headerlink\" title=\"markdownlint\"></a>markdownlint</h3><h3 id=\"npm-Intellisense\"><a href=\"#npm-Intellisense\" class=\"headerlink\" title=\"npm Intellisense\"></a>npm Intellisense</h3><h3 id=\"Paste-Image\"><a href=\"#Paste-Image\" class=\"headerlink\" title=\"Paste Image\"></a>Paste Image</h3><h3 id=\"Path-Intellisense\"><a href=\"#Path-Intellisense\" class=\"headerlink\" title=\"Path Intellisense\"></a>Path Intellisense</h3><h3 id=\"Project-Manager\"><a href=\"#Project-Manager\" class=\"headerlink\" title=\"Project Manager\"></a>Project Manager</h3><h3 id=\"Stylelint\"><a href=\"#Stylelint\" class=\"headerlink\" title=\"Stylelint\"></a>Stylelint</h3><h3 id=\"Vetur\"><a href=\"#Vetur\" class=\"headerlink\" title=\"Vetur\"></a>Vetur</h3><h3 id=\"vscode-icons\"><a href=\"#vscode-icons\" class=\"headerlink\" title=\"vscode-icons\"></a>vscode-icons</h3><h3 id=\"vscode-json\"><a href=\"#vscode-json\" class=\"headerlink\" title=\"vscode-json\"></a>vscode-json</h3><h3 id=\"Vue-3-Snippets\"><a href=\"#Vue-3-Snippets\" class=\"headerlink\" title=\"Vue 3 Snippets\"></a>Vue 3 Snippets</h3><h3 id=\"Vue-Airbnb-Style-VSCode-Snippets\"><a href=\"#Vue-Airbnb-Style-VSCode-Snippets\" class=\"headerlink\" title=\"Vue Airbnb Style VSCode Snippets\"></a>Vue Airbnb Style VSCode Snippets</h3><h3 id=\"Vue-Language-Features-Volar\"><a href=\"#Vue-Language-Features-Volar\" class=\"headerlink\" title=\"Vue Language Features (Volar)\"></a>Vue Language Features (Volar)</h3><h3 id=\"Vue-Peek\"><a href=\"#Vue-Peek\" class=\"headerlink\" title=\"Vue Peek\"></a>Vue Peek</h3><h3 id=\"Vue-VSCode-Snippets\"><a href=\"#Vue-VSCode-Snippets\" class=\"headerlink\" title=\"Vue VSCode Snippets\"></a>Vue VSCode Snippets</h3><h3 id=\"vue-helper\"><a href=\"#vue-helper\" class=\"headerlink\" title=\"vue-helper\"></a>vue-helper</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vscode插件备份\"><a href=\"#Vscode插件备份\" class=\"headerlink\" title=\"Vscode插件备份\"></a>Vscode插件备份</h2><p>Vscode插件备份</p>\n<h3 id=\"Auto-Close-Tag\"><a href=\"#Auto-Close-Tag\" class=\"headerlink\" title=\"Auto Close Tag\"></a>Auto Close Tag</h3><h3 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h3><h3 id=\"Blockman-Highlight-Nested-Code-Blocks\"><a href=\"#Blockman-Highlight-Nested-Code-Blocks\" class=\"headerlink\" title=\"Blockman - Highlight Nested Code Blocks\"></a>Blockman - Highlight Nested Code Blocks</h3><h3 id=\"Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</h3><h3 id=\"Class-autocomplete-for-HTML\"><a href=\"#Class-autocomplete-for-HTML\" class=\"headerlink\" title=\"Class autocomplete for HTML\"></a>Class autocomplete for HTML</h3><h3 id=\"Code-Runner\"><a href=\"#Code-Runner\" class=\"headerlink\" title=\"Code Runner\"></a>Code Runner</h3><h3 id=\"Color-Info\"><a href=\"#Color-Info\" class=\"headerlink\" title=\"Color Info\"></a>Color Info</h3><h3 id=\"CSS-Peek\"><a href=\"#CSS-Peek\" class=\"headerlink\" title=\"CSS Peek\"></a>CSS Peek</h3><h3 id=\"css-auto-prefix\"><a href=\"#css-auto-prefix\" class=\"headerlink\" title=\"css-auto-prefix\"></a>css-auto-prefix</h3><h3 id=\"Easy-Sass\"><a href=\"#Easy-Sass\" class=\"headerlink\" title=\"Easy Sass\"></a>Easy Sass</h3><h3 id=\"EditorConfig-for-VS-Code\"><a href=\"#EditorConfig-for-VS-Code\" class=\"headerlink\" title=\"EditorConfig for VS Code\"></a>EditorConfig for VS Code</h3><h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><h3 id=\"GitHub-Theme\"><a href=\"#GitHub-Theme\" class=\"headerlink\" title=\"GitHub Theme\"></a>GitHub Theme</h3><h3 id=\"GitLens-—-Git-supercharged\"><a href=\"#GitLens-—-Git-supercharged\" class=\"headerlink\" title=\"GitLens — Git supercharged\"></a>GitLens — Git supercharged</h3><h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><h3 id=\"IntelliSense-for-CSS-class-names-in-HTML\"><a href=\"#IntelliSense-for-CSS-class-names-in-HTML\" class=\"headerlink\" title=\"IntelliSense for CSS class names in HTML\"></a>IntelliSense for CSS class names in HTML</h3><h3 id=\"JavaScript-ES6-code-snippets\"><a href=\"#JavaScript-ES6-code-snippets\" class=\"headerlink\" title=\"JavaScript (ES6) code snippets\"></a>JavaScript (ES6) code snippets</h3><h3 id=\"koroFileHeader\"><a href=\"#koroFileHeader\" class=\"headerlink\" title=\"koroFileHeader\"></a>koroFileHeader</h3><h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h3><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><h3 id=\"Markdown-All-in-One\"><a href=\"#Markdown-All-in-One\" class=\"headerlink\" title=\"Markdown All in One\"></a>Markdown All in One</h3><h3 id=\"Markdown-Extended\"><a href=\"#Markdown-Extended\" class=\"headerlink\" title=\"Markdown Extended\"></a>Markdown Extended</h3><h3 id=\"Markdown-Preview-Enhanced\"><a href=\"#Markdown-Preview-Enhanced\" class=\"headerlink\" title=\"Markdown Preview Enhanced\"></a>Markdown Preview Enhanced</h3><h3 id=\"markdownlint\"><a href=\"#markdownlint\" class=\"headerlink\" title=\"markdownlint\"></a>markdownlint</h3><h3 id=\"npm-Intellisense\"><a href=\"#npm-Intellisense\" class=\"headerlink\" title=\"npm Intellisense\"></a>npm Intellisense</h3><h3 id=\"Paste-Image\"><a href=\"#Paste-Image\" class=\"headerlink\" title=\"Paste Image\"></a>Paste Image</h3><h3 id=\"Path-Intellisense\"><a href=\"#Path-Intellisense\" class=\"headerlink\" title=\"Path Intellisense\"></a>Path Intellisense</h3><h3 id=\"Project-Manager\"><a href=\"#Project-Manager\" class=\"headerlink\" title=\"Project Manager\"></a>Project Manager</h3><h3 id=\"Stylelint\"><a href=\"#Stylelint\" class=\"headerlink\" title=\"Stylelint\"></a>Stylelint</h3><h3 id=\"Vetur\"><a href=\"#Vetur\" class=\"headerlink\" title=\"Vetur\"></a>Vetur</h3><h3 id=\"vscode-icons\"><a href=\"#vscode-icons\" class=\"headerlink\" title=\"vscode-icons\"></a>vscode-icons</h3><h3 id=\"vscode-json\"><a href=\"#vscode-json\" class=\"headerlink\" title=\"vscode-json\"></a>vscode-json</h3><h3 id=\"Vue-3-Snippets\"><a href=\"#Vue-3-Snippets\" class=\"headerlink\" title=\"Vue 3 Snippets\"></a>Vue 3 Snippets</h3><h3 id=\"Vue-Airbnb-Style-VSCode-Snippets\"><a href=\"#Vue-Airbnb-Style-VSCode-Snippets\" class=\"headerlink\" title=\"Vue Airbnb Style VSCode Snippets\"></a>Vue Airbnb Style VSCode Snippets</h3><h3 id=\"Vue-Language-Features-Volar\"><a href=\"#Vue-Language-Features-Volar\" class=\"headerlink\" title=\"Vue Language Features (Volar)\"></a>Vue Language Features (Volar)</h3><h3 id=\"Vue-Peek\"><a href=\"#Vue-Peek\" class=\"headerlink\" title=\"Vue Peek\"></a>Vue Peek</h3><h3 id=\"Vue-VSCode-Snippets\"><a href=\"#Vue-VSCode-Snippets\" class=\"headerlink\" title=\"Vue VSCode Snippets\"></a>Vue VSCode Snippets</h3><h3 id=\"vue-helper\"><a href=\"#vue-helper\" class=\"headerlink\" title=\"vue-helper\"></a>vue-helper</h3>"},{"title":"常用链接备忘","date":"2022-07-29T02:06:11.000Z","_content":"\n## 常用链接备忘\n\n### 聚合图床\n\n<https://www.superbed.cn/>\n\n### 冷熊简历\n\n<http://cv.ftqq.com/>\n","source":"_posts/常用链接备忘.md","raw":"---\ntitle: 常用链接备忘\ndate: 2022-07-29 10:06:11\ntags:\n    链接\ncategories: [链接]\n---\n\n## 常用链接备忘\n\n### 聚合图床\n\n<https://www.superbed.cn/>\n\n### 冷熊简历\n\n<http://cv.ftqq.com/>\n","slug":"常用链接备忘","published":1,"updated":"2022-10-27T06:40:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bjx0031scac5o505sgi","content":"<h2 id=\"常用链接备忘\"><a href=\"#常用链接备忘\" class=\"headerlink\" title=\"常用链接备忘\"></a>常用链接备忘</h2><h3 id=\"聚合图床\"><a href=\"#聚合图床\" class=\"headerlink\" title=\"聚合图床\"></a>聚合图床</h3><p><a href=\"https://www.superbed.cn/\">https://www.superbed.cn/</a></p>\n<h3 id=\"冷熊简历\"><a href=\"#冷熊简历\" class=\"headerlink\" title=\"冷熊简历\"></a>冷熊简历</h3><p><a href=\"http://cv.ftqq.com/\">http://cv.ftqq.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用链接备忘\"><a href=\"#常用链接备忘\" class=\"headerlink\" title=\"常用链接备忘\"></a>常用链接备忘</h2><h3 id=\"聚合图床\"><a href=\"#聚合图床\" class=\"headerlink\" title=\"聚合图床\"></a>聚合图床</h3><p><a href=\"https://www.superbed.cn/\">https://www.superbed.cn/</a></p>\n<h3 id=\"冷熊简历\"><a href=\"#冷熊简历\" class=\"headerlink\" title=\"冷熊简历\"></a>冷熊简历</h3><p><a href=\"http://cv.ftqq.com/\">http://cv.ftqq.com/</a></p>\n"},{"title":"维护java项目之==和equals","date":"2021-03-19T01:54:38.000Z","_content":"\n最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 `==` 来比较两个对象的属性，\n于是顺手就把 `==` 改成了 equals。悲剧发生......🤣🤣🤣\n\n## `==` 和 equals 的区别\n\n`==` ：对于基本类型来说是值比较，对于引用类型来说是引用比较\nequals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。\n\n## 使用 equals 的前提\n\n使用 equals 进行比较，如：\na 和 b 是两个对象\n\n```java\n  a.getId().equals(b.getId())\n```\n\n需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。\n\n## 各种对象使用 equals\n\nString 类型：\n可以使用 StringUtils.equals()进行比较，该方法内置非空校验\n其余封装类型：\n可以使用 Objects.equals()进行比较，该方法内置非空校验\n使用三目运算符：\n\n```java\n  a.getId() == null ? b.getId() == null ? false : true : a.getId().equals(b.getId())\n```\n","source":"_posts/维护java项目之-和equals.md","raw":"---\ntitle: 维护java项目之==和equals\ndate: 2021-03-19 09:54:38\ntags:\n  - equals\n\ncategories: [后端, Java]\n---\n\n最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 `==` 来比较两个对象的属性，\n于是顺手就把 `==` 改成了 equals。悲剧发生......🤣🤣🤣\n\n## `==` 和 equals 的区别\n\n`==` ：对于基本类型来说是值比较，对于引用类型来说是引用比较\nequals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。\n\n## 使用 equals 的前提\n\n使用 equals 进行比较，如：\na 和 b 是两个对象\n\n```java\n  a.getId().equals(b.getId())\n```\n\n需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。\n\n## 各种对象使用 equals\n\nString 类型：\n可以使用 StringUtils.equals()进行比较，该方法内置非空校验\n其余封装类型：\n可以使用 Objects.equals()进行比较，该方法内置非空校验\n使用三目运算符：\n\n```java\n  a.getId() == null ? b.getId() == null ? false : true : a.getId().equals(b.getId())\n```\n","slug":"维护java项目之-和equals","published":1,"updated":"2022-10-27T06:40:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf934bki0079scac48i72zno","content":"<p>最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 <code>==</code> 来比较两个对象的属性，<br>于是顺手就把 <code>==</code> 改成了 equals。悲剧发生……🤣🤣🤣</p>\n<h2 id=\"和-equals-的区别\"><a href=\"#和-equals-的区别\" class=\"headerlink\" title=\"== 和 equals 的区别\"></a><code>==</code> 和 equals 的区别</h2><p><code>==</code> ：对于基本类型来说是值比较，对于引用类型来说是引用比较<br>equals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。</p>\n<h2 id=\"使用-equals-的前提\"><a href=\"#使用-equals-的前提\" class=\"headerlink\" title=\"使用 equals 的前提\"></a>使用 equals 的前提</h2><p>使用 equals 进行比较，如：<br>a 和 b 是两个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n\n<p>需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。</p>\n<h2 id=\"各种对象使用-equals\"><a href=\"#各种对象使用-equals\" class=\"headerlink\" title=\"各种对象使用 equals\"></a>各种对象使用 equals</h2><p>String 类型：<br>可以使用 StringUtils.equals()进行比较，该方法内置非空校验<br>其余封装类型：<br>可以使用 Objects.equals()进行比较，该方法内置非空校验<br>使用三目运算符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId() == <span class=\"literal\">null</span> ? b.getId() == <span class=\"literal\">null</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span> : a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 <code>==</code> 来比较两个对象的属性，<br>于是顺手就把 <code>==</code> 改成了 equals。悲剧发生……🤣🤣🤣</p>\n<h2 id=\"和-equals-的区别\"><a href=\"#和-equals-的区别\" class=\"headerlink\" title=\"== 和 equals 的区别\"></a><code>==</code> 和 equals 的区别</h2><p><code>==</code> ：对于基本类型来说是值比较，对于引用类型来说是引用比较<br>equals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。</p>\n<h2 id=\"使用-equals-的前提\"><a href=\"#使用-equals-的前提\" class=\"headerlink\" title=\"使用 equals 的前提\"></a>使用 equals 的前提</h2><p>使用 equals 进行比较，如：<br>a 和 b 是两个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n\n<p>需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。</p>\n<h2 id=\"各种对象使用-equals\"><a href=\"#各种对象使用-equals\" class=\"headerlink\" title=\"各种对象使用 equals\"></a>各种对象使用 equals</h2><p>String 类型：<br>可以使用 StringUtils.equals()进行比较，该方法内置非空校验<br>其余封装类型：<br>可以使用 Objects.equals()进行比较，该方法内置非空校验<br>使用三目运算符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId() == <span class=\"literal\">null</span> ? b.getId() == <span class=\"literal\">null</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span> : a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clf934bj9000jscac56dj3gpb","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bjc000sscacejafdrg4"},{"post_id":"clf934biy0001scach1wm7aa6","category_id":"clf934bj10004scacdytg5s9i","_id":"clf934bjd000wscac9g1cbgwg"},{"post_id":"clf934biy0001scach1wm7aa6","category_id":"clf934bj9000lscac9aat9xeh","_id":"clf934bje0010scac231hg0rn"},{"post_id":"clf934bj6000dscacg6wd0o9y","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bjg0019scacebf4ejpv"},{"post_id":"clf934bj00003scac3gic6sy3","category_id":"clf934bj10004scacdytg5s9i","_id":"clf934bjk001fscac6msqf7pz"},{"post_id":"clf934bj00003scac3gic6sy3","category_id":"clf934bj9000lscac9aat9xeh","_id":"clf934bjk001jscac7mxb13bu"},{"post_id":"clf934bj8000hscac4ht0876h","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bjn001sscac5vzc2mye"},{"post_id":"clf934bj8000hscac4ht0876h","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bjo001vscac5c157xr9"},{"post_id":"clf934bj30007scacdfy36sup","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bjp001zscaceq5t89h4"},{"post_id":"clf934bj30007scacdfy36sup","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bjq0021scac07fz0xl2"},{"post_id":"clf934bjn001qscaccnx54ksc","category_id":"clf934bj10004scacdytg5s9i","_id":"clf934bjr0025scacfwbxfjtm"},{"post_id":"clf934bjn001qscaccnx54ksc","category_id":"clf934bj9000lscac9aat9xeh","_id":"clf934bjr0028scac1z9y2hmk"},{"post_id":"clf934bja000nscac0lvq48es","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bjs002bscacgfto1yyi"},{"post_id":"clf934bja000nscac0lvq48es","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bjs002escacbgj1hil9"},{"post_id":"clf934bja000oscacfl837uca","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bjt002hscac3uyeai63"},{"post_id":"clf934bja000oscacfl837uca","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bju002lscacgir29wwh"},{"post_id":"clf934bjr0027scacgm6t9mto","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bju002pscacfqbqfj3g"},{"post_id":"clf934bjc000rscac7tkqasrz","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bjv002sscacdbne7wfe"},{"post_id":"clf934bjc000rscac7tkqasrz","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bjw002vscac8j965hws"},{"post_id":"clf934bjr002ascac8okghjfe","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bjx002zscacaolq0cxx"},{"post_id":"clf934bjs002dscac68az6k7v","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bjy0033scac96vzdlor"},{"post_id":"clf934bj5000ascacacu9e4pe","category_id":"clf934bjb000pscac9t61crxw","_id":"clf934bjy0035scacddtdbuya"},{"post_id":"clf934bj5000ascacacu9e4pe","category_id":"clf934bjs002cscachki40qtq","_id":"clf934bjy0037scac9wofcu6v"},{"post_id":"clf934bjt002gscac0i9mb74c","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bjz003ascac9g6vhrjj"},{"post_id":"clf934bjt002kscac4thnh5mq","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bjz003dscac2y0p8zaj"},{"post_id":"clf934bjc000uscacbh8r3jlg","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk0003fscac9hnb4kvk"},{"post_id":"clf934bjc000uscacbh8r3jlg","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk0003hscac38n8czmu"},{"post_id":"clf934bju002nscac682nc3cu","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk0003kscaca63g654z"},{"post_id":"clf934bju002nscac682nc3cu","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bk1003nscac00vodzp9"},{"post_id":"clf934bjd000zscac99cshg96","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk1003pscac01wl2mbw"},{"post_id":"clf934bjd000zscac99cshg96","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk2003rscace5bscdog"},{"post_id":"clf934bje0012scac1qhp9z79","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk2003uscacgr33fwqk"},{"post_id":"clf934bje0012scac1qhp9z79","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk3003xscaceusw9wza"},{"post_id":"clf934bje0013scac5hrrgpec","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk3003zscac00oj4ggp"},{"post_id":"clf934bje0013scac5hrrgpec","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk30041scachulo7s07"},{"post_id":"clf934bjf0016scacfxns9b9v","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk40044scacbwl5fi4e"},{"post_id":"clf934bjf0016scacfxns9b9v","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk40047scach54i1ali"},{"post_id":"clf934bjg0017scac5y541yld","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk40049scacf32b4fu9"},{"post_id":"clf934bjg0017scac5y541yld","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk5004bscac05lq3i5n"},{"post_id":"clf934bji001bscaceglo79t7","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk5004escacam4y5nol"},{"post_id":"clf934bji001bscaceglo79t7","category_id":"clf934bjp001yscachs0z6z7r","_id":"clf934bk5004hscac4e8bb76z"},{"post_id":"clf934bj7000escac44y7cyuk","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk5004jscacc7ewgjlc"},{"post_id":"clf934bj7000escac44y7cyuk","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bk5004lscac21tk3av0"},{"post_id":"clf934bjj001dscaceiisfxll","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bk6004nscac5a808f4w"},{"post_id":"clf934bjj001dscaceiisfxll","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bk6004rscac0wun3mjp"},{"post_id":"clf934bjk001iscacdm0p5h6x","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bk6004sscac03xahnas"},{"post_id":"clf934bjk001iscacdm0p5h6x","category_id":"clf934bk3003yscac5x1ggh6r","_id":"clf934bk7004vscac2klmcwxy"},{"post_id":"clf934bjl001lscacd1zw46w0","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bk7004xscac2axahr3m"},{"post_id":"clf934bjl001lscacd1zw46w0","category_id":"clf934bk3003yscac5x1ggh6r","_id":"clf934bk70051scacbg1x98aw"},{"post_id":"clf934bjm001oscacgsyqfj9n","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bk80052scac9cpsgwfq"},{"post_id":"clf934bjm001oscacgsyqfj9n","category_id":"clf934bk3003yscac5x1ggh6r","_id":"clf934bk80055scac41l0ghoy"},{"post_id":"clf934bjq0023scacb418gslv","category_id":"clf934bk6004tscaccc6z63kv","_id":"clf934bk80057scac8bta94nt"},{"post_id":"clf934bju002rscacfqni5s9o","category_id":"clf934bjd000xscacf841fuhm","_id":"clf934bk8005ascacbism26vd"},{"post_id":"clf934bju002rscacfqni5s9o","category_id":"clf934bk3003yscac5x1ggh6r","_id":"clf934bk8005cscac1hp0aml3"},{"post_id":"clf934bjx0031scac5o505sgi","category_id":"clf934bk80059scac0isz482q","_id":"clf934bk9005gscacbbbv7jbi"},{"post_id":"clf934bjo001tscacapa727ye","category_id":"clf934bk5004dscacf6x5gos2","_id":"clf934bk9005kscaca87u9goq"},{"post_id":"clf934bjo001tscacapa727ye","category_id":"clf934bk9005dscacdzjwbjho","_id":"clf934bka005nscac1usx2s6p"},{"post_id":"clf934bjo001xscace5lq5h3o","category_id":"clf934bk5004iscacgt0z25hv","_id":"clf934bka005qscac1mom1n6o"},{"post_id":"clf934bjo001xscace5lq5h3o","category_id":"clf934bk9005iscac3mmm292o","_id":"clf934bka005tscacb3pa22za"},{"post_id":"clf934bjp0020scacdiu69980","category_id":"clf934bk5004iscacgt0z25hv","_id":"clf934bka005uscacddyb99nr"},{"post_id":"clf934bjp0020scacdiu69980","category_id":"clf934bk9005iscac3mmm292o","_id":"clf934bka005wscacfo0ih2vs"},{"post_id":"clf934bjw002yscacdwtoh1wc","category_id":"clf934bk80053scac80g13d8w","_id":"clf934bka005yscac3no35wef"},{"post_id":"clf934bjw002yscacdwtoh1wc","category_id":"clf934bka005pscacf99054lh","_id":"clf934bkb0061scac4bjrhnhh"},{"post_id":"clf934bki0079scac48i72zno","category_id":"clf934bj7000fscac00vwc5lb","_id":"clf934bki007bscaca8mm90yj"},{"post_id":"clf934bki0079scac48i72zno","category_id":"clf934bjj001escac3nhq1ed0","_id":"clf934bki007cscac9yy95wmv"}],"PostTag":[{"post_id":"clf934biy0001scach1wm7aa6","tag_id":"clf934bj30005scachnlz2xh1","_id":"clf934bj9000iscach2mkgbgv"},{"post_id":"clf934biy0001scach1wm7aa6","tag_id":"clf934bj5000cscacdemp4b2u","_id":"clf934bj9000kscacbsi07lmn"},{"post_id":"clf934bj00003scac3gic6sy3","tag_id":"clf934bj8000gscacajue66fw","_id":"clf934bjc000tscac3ft0cht8"},{"post_id":"clf934bj00003scac3gic6sy3","tag_id":"clf934bj5000cscacdemp4b2u","_id":"clf934bjd000vscac4kq8h739"},{"post_id":"clf934bj30007scacdfy36sup","tag_id":"clf934bjb000qscac391j0ont","_id":"clf934bje0011scac57bp2veg"},{"post_id":"clf934bj5000ascacacu9e4pe","tag_id":"clf934bjd000yscac27h5hnze","_id":"clf934bjj001cscacggnkey1c"},{"post_id":"clf934bj5000ascacacu9e4pe","tag_id":"clf934bjf0015scacc2khe6hg","_id":"clf934bjk001gscacbb34bkiv"},{"post_id":"clf934bj6000dscacg6wd0o9y","tag_id":"clf934bjh001ascac2aoucxjr","_id":"clf934bjk001kscac2o9x4s2p"},{"post_id":"clf934bj7000escac44y7cyuk","tag_id":"clf934bjk001hscaceb031401","_id":"clf934bjn001pscac6mhkbzcs"},{"post_id":"clf934bj8000hscac4ht0876h","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bjo001wscachz92etcz"},{"post_id":"clf934bj9000jscac56dj3gpb","tag_id":"clf934bjo001uscac19yx9ypu","_id":"clf934bjq0024scac6mz43ki3"},{"post_id":"clf934bja000nscac0lvq48es","tag_id":"clf934bjq0022scacfwgt505s","_id":"clf934bjt002iscac0fm4c9f4"},{"post_id":"clf934bja000nscac0lvq48es","tag_id":"clf934bjr0029scacd85c3r95","_id":"clf934bju002mscac32rzak3y"},{"post_id":"clf934bja000oscacfl837uca","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bjw002xscacdxau9m0d"},{"post_id":"clf934bja000oscacfl837uca","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bjx0030scac92sk16j8"},{"post_id":"clf934bjc000rscac7tkqasrz","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bjz0039scac4g3y40vi"},{"post_id":"clf934bjc000rscac7tkqasrz","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bjz003bscacg8yr4fkf"},{"post_id":"clf934bjc000uscacbh8r3jlg","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk0003jscacerncdy10"},{"post_id":"clf934bjc000uscacbh8r3jlg","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk1003lscacan2i1zdv"},{"post_id":"clf934bjd000zscac99cshg96","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk2003tscachd923pa8"},{"post_id":"clf934bjd000zscac99cshg96","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk2003vscac0qtpfvte"},{"post_id":"clf934bje0012scac1qhp9z79","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk30042scacajo259qi"},{"post_id":"clf934bje0012scac1qhp9z79","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk40045scacg38ogbvw"},{"post_id":"clf934bje0013scac5hrrgpec","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk5004cscac23189x5y"},{"post_id":"clf934bje0013scac5hrrgpec","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk5004fscacaxkyblfp"},{"post_id":"clf934bjf0016scacfxns9b9v","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk6004mscacg7z2096p"},{"post_id":"clf934bjf0016scacfxns9b9v","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk6004pscac3dms4qy0"},{"post_id":"clf934bjg0017scac5y541yld","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk7004wscacgqt6houv"},{"post_id":"clf934bjg0017scac5y541yld","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk7004zscacg1fg5as0"},{"post_id":"clf934bji001bscaceglo79t7","tag_id":"clf934bjs002fscac9aoqbdw9","_id":"clf934bk80056scacbi7e9iki"},{"post_id":"clf934bji001bscaceglo79t7","tag_id":"clf934bjm001nscac33q6ef4l","_id":"clf934bk80058scac6m4h5h2r"},{"post_id":"clf934bjj001dscaceiisfxll","tag_id":"clf934bk80054scac5dv17hgy","_id":"clf934bk9005fscac3c9c4g1s"},{"post_id":"clf934bjj001dscaceiisfxll","tag_id":"clf934bk8005bscac94h92iam","_id":"clf934bk9005hscac33dm9tri"},{"post_id":"clf934bjk001iscacdm0p5h6x","tag_id":"clf934bk9005escac4cbr94b5","_id":"clf934bka005oscac6opk5ahm"},{"post_id":"clf934bjk001iscacdm0p5h6x","tag_id":"clf934bk9005jscac34odfoc8","_id":"clf934bka005rscachd48fylh"},{"post_id":"clf934bjl001lscacd1zw46w0","tag_id":"clf934bk9005mscacc7ew546c","_id":"clf934bka005xscac0fxzc7p1"},{"post_id":"clf934bjl001lscacd1zw46w0","tag_id":"clf934bka005sscac0vhh5xja","_id":"clf934bka005zscac5tssg9qh"},{"post_id":"clf934bjm001oscacgsyqfj9n","tag_id":"clf934bka005vscachl4sg3my","_id":"clf934bkb0063scac80rf6p28"},{"post_id":"clf934bjm001oscacgsyqfj9n","tag_id":"clf934bka0060scacdjw3f831","_id":"clf934bkb0064scac3h2zek11"},{"post_id":"clf934bjn001qscaccnx54ksc","tag_id":"clf934bkb0062scacbuez2yzz","_id":"clf934bkb0067scac2zc5ejpx"},{"post_id":"clf934bjn001qscaccnx54ksc","tag_id":"clf934bkb0065scac84x1gakh","_id":"clf934bkb0068scachgcfcvin"},{"post_id":"clf934bjo001tscacapa727ye","tag_id":"clf934bkb0066scac98v5a541","_id":"clf934bkb006bscac4pgy3qtd"},{"post_id":"clf934bjo001tscacapa727ye","tag_id":"clf934bkb0069scac3do7bn3j","_id":"clf934bkb006cscacghtz5wfo"},{"post_id":"clf934bjo001xscace5lq5h3o","tag_id":"clf934bkb006ascac0g2f8ieq","_id":"clf934bkb006escac7ysxfk8o"},{"post_id":"clf934bjp0020scacdiu69980","tag_id":"clf934bkb006dscac90fc3bm0","_id":"clf934bkc006gscac0b0o65ew"},{"post_id":"clf934bjq0023scacb418gslv","tag_id":"clf934bkc006fscacgox407in","_id":"clf934bkc006iscacdada6apm"},{"post_id":"clf934bjr0027scacgm6t9mto","tag_id":"clf934bkc006hscacg1s11bla","_id":"clf934bkd006lscac2ohk5ffn"},{"post_id":"clf934bjr0027scacgm6t9mto","tag_id":"clf934bkc006jscacbd4rhv4c","_id":"clf934bkd006mscac7k4dgcjl"},{"post_id":"clf934bjr002ascac8okghjfe","tag_id":"clf934bkd006kscac873dhl7i","_id":"clf934bkd006oscac7x824zal"},{"post_id":"clf934bjs002dscac68az6k7v","tag_id":"clf934bkd006kscac873dhl7i","_id":"clf934bke006qscac5ojuh4aq"},{"post_id":"clf934bjt002gscac0i9mb74c","tag_id":"clf934bkd006kscac873dhl7i","_id":"clf934bke006sscacb7t59hf5"},{"post_id":"clf934bjt002kscac4thnh5mq","tag_id":"clf934bkd006kscac873dhl7i","_id":"clf934bkf006uscacfffq752a"},{"post_id":"clf934bju002nscac682nc3cu","tag_id":"clf934bke006tscacd0t821qe","_id":"clf934bkf006wscac6w66365n"},{"post_id":"clf934bju002nscac682nc3cu","tag_id":"clf934bjr0029scacd85c3r95","_id":"clf934bkf006xscac6jt766m8"},{"post_id":"clf934bju002rscacfqni5s9o","tag_id":"clf934bkf006vscac7im6bl8h","_id":"clf934bkg0070scacesbi1q4f"},{"post_id":"clf934bju002rscacfqni5s9o","tag_id":"clf934bkf006yscac6pv66luq","_id":"clf934bkg0071scac47691nxk"},{"post_id":"clf934bjv002tscac8t2k9jpj","tag_id":"clf934bkf006zscaccoetcz0c","_id":"clf934bkg0074scac27u46o6t"},{"post_id":"clf934bjv002tscac8t2k9jpj","tag_id":"clf934bkg0072scac67rw48lr","_id":"clf934bkg0075scace8hparp4"},{"post_id":"clf934bjw002yscacdwtoh1wc","tag_id":"clf934bkg0073scac755jd3l9","_id":"clf934bkg0077scac0yvu3r3l"},{"post_id":"clf934bjx0031scac5o505sgi","tag_id":"clf934bkg0076scach88vec11","_id":"clf934bkg0078scacd78h2np1"},{"post_id":"clf934bki0079scac48i72zno","tag_id":"clf934bki007ascac31hibm86","_id":"clf934bkj007dscac54bu2pu8"}],"Tag":[{"name":"AutoUpdater","_id":"clf934bj30005scachnlz2xh1"},{"name":"客户端","_id":"clf934bj5000cscacdemp4b2u"},{"name":"CefSharp","_id":"clf934bj8000gscacajue66fw"},{"name":"IO模型","_id":"clf934bjb000qscac391j0ont"},{"name":"Elasticsearch","_id":"clf934bjd000yscac27h5hnze"},{"name":"笔记","_id":"clf934bjf0015scacc2khe6hg"},{"name":"循环","_id":"clf934bjh001ascac2aoucxjr"},{"name":"JVM","_id":"clf934bjk001hscaceb031401"},{"name":"数组","_id":"clf934bjm001nscac33q6ef4l"},{"name":"文件处理","_id":"clf934bjo001uscac19yx9ypu"},{"name":"类型转换","_id":"clf934bjq0022scacfwgt505s"},{"name":"Utils","_id":"clf934bjr0029scacd85c3r95"},{"name":"LeetCode","_id":"clf934bjs002fscac9aoqbdw9"},{"name":"Spring Batch","_id":"clf934bk80054scac5dv17hgy"},{"name":"批处理","_id":"clf934bk8005bscac94h92iam"},{"name":"引入JS","_id":"clf934bk9005escac4cbr94b5"},{"name":"模板语法","_id":"clf934bk9005jscac34odfoc8"},{"name":"防抖","_id":"clf934bk9005mscacc7ew546c"},{"name":"节流","_id":"clf934bka005sscac0vhh5xja"},{"name":"el与data","_id":"clf934bka005vscachl4sg3my"},{"name":"MVVM模型","_id":"clf934bka0060scacdjw3f831"},{"name":"控件","_id":"clf934bkb0062scacbuez2yzz"},{"name":"居中","_id":"clf934bkb0065scac84x1gakh"},{"name":"Hive","_id":"clf934bkb0066scac98v5a541"},{"name":"数据库","_id":"clf934bkb0069scac3do7bn3j"},{"name":"端口占用","_id":"clf934bkb006ascac0g2f8ieq"},{"name":"jar包","_id":"clf934bkb006dscac90fc3bm0"},{"name":"简历","_id":"clf934bkc006fscacgox407in"},{"name":"异步","_id":"clf934bkc006hscacg1s11bla"},{"name":"async/await","_id":"clf934bkc006jscacbd4rhv4c"},{"name":"css","_id":"clf934bkd006kscac873dhl7i"},{"name":"日期解析","_id":"clf934bke006tscacd0t821qe"},{"name":"双向绑定","_id":"clf934bkf006vscac7im6bl8h"},{"name":"单向绑定","_id":"clf934bkf006yscac6pv66luq"},{"name":"浏览器","_id":"clf934bkf006zscaccoetcz0c"},{"name":"URL","_id":"clf934bkg0072scac67rw48lr"},{"name":"Vscode","_id":"clf934bkg0073scac755jd3l9"},{"name":"链接","_id":"clf934bkg0076scach88vec11"},{"name":"equals","_id":"clf934bki007ascac31hibm86"}]}}