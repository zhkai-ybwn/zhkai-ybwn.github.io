{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-bamboo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/css/animate.min.css","path":"css/animate.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/goTop.js","path":"js/goTop.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/jquery3.5.1.js","path":"js/jquery3.5.1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/local_search.js","path":"js/local_search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/ribbon.min.js","path":"js/ribbon.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/wrapImage.js","path":"js/wrapImage.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue2.6.11.js","path":"js/vue2.6.11.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","path":"js/aplayer/APlayer@1.10.1.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/bubble.js","path":"js/bubble/bubble.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/homeBubble.js","path":"js/bubble/homeBubble.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/fireworks.js","path":"js/cursor/fireworks.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/explosion.min.js","path":"js/cursor/explosion.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/text.js","path":"js/cursor/text.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/barrager.css","path":"js/danmu/barrager.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","path":"js/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/close.png","path":"js/danmu/close.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","path":"js/danmu/jquery.barrager.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/falling/sakura.js","path":"js/falling/sakura.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/falling/snow.js","path":"js/falling/snow.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","path":"js/fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","path":"js/fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/issues/index.js","path":"js/issues/index.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/loaded/index.css","path":"js/loaded/index.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/pjax@0.2.8/index.js","path":"js/pjax@0.2.8/index.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","path":"js/prism/prism-coy.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","path":"js/prism/prism-dark.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","path":"js/prism/prism-funky.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","path":"js/prism/prism-line-numbers.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","path":"js/prism/prism-okaidia.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","path":"js/prism/prism-tomorrow.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","path":"js/prism/prism-solarizedlight.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","path":"js/prism/prism-twilight.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism.min.css","path":"js/prism/prism.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/font.css","path":"js/shareJs/font.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/share.min.css","path":"js/shareJs/share.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","path":"js/shareJs/social-share.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/swiper@5.4.1.min.css","path":"js/swiper/swiper@5.4.1.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/swiper.min.js","path":"js/swiper/swiper.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/swiper.animate1.0.3.min.js","path":"js/swiper/swiper.animate1.0.3.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.css","path":"js/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/vue-awesome-swiper.js","path":"js/swiper/vue-awesome-swiper.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","path":"js/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","path":"js/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","path":"js/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/utils/index.js","path":"js/utils/index.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/valine/index.js","path":"js/valine/index.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.css","path":"js/vue-typed-js/index.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","path":"js/vue-seamless-scroll/index.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.js","path":"js/vue-typed-js/index.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/waline/waline.min.js","path":"js/waline/waline.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/cursor/Horizontal.cur","path":"medias/cursor/Horizontal.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/clicklove.js","path":"js/cursor/clicklove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","path":"js/shareJs/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","path":"js/shareJs/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","path":"js/shareJs/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","path":"js/shareJs/fonts/iconfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/AutoUpdater自动更新客户端.md","hash":"ab9d4536e6196d920c7c4bf13aabc2ec57889cc3","modified":1666852813617},{"_id":"source/_posts/BIO-NIO-AIO对比.md","hash":"b3139e67205d21e3e399356935a623f4ee3b3297","modified":1666852813618},{"_id":"source/_posts/CefSharp创建客户端.md","hash":"8ef7b87fe5fe900e73fb69a08815f2b4bd6b877f","modified":1666852813618},{"_id":"source/_posts/Elasticsearch的倒排索引.md","hash":"d1b2cd2072ef215086624334ff1dce05111dcc20","modified":1666852813618},{"_id":"source/_posts/JS循环总结.md","hash":"0eabb2e670e975a3e0af44e3f2c0b8c796b50bc8","modified":1676612615885},{"_id":"source/_posts/JVM结构详解.md","hash":"ab012fda82c6f0213909139f44bdc30b9d875676","modified":1666852813622},{"_id":"source/_posts/Elasticsearch入门.md","hash":"fdde577b4a946262bf9f78335d61327cff61626f","modified":1666852813618},{"_id":"source/_posts/Java交换数组元素.md","hash":"1c2a9d0e89f9c24467b784fa5dc499fafb690ae4","modified":1666852813622},{"_id":"source/_posts/Java文件处理常用方法.md","hash":"bb942c29ba24227f2ffbf7615babca4492e6d653","modified":1678947630894},{"_id":"source/_posts/Java类型转换工具类（持续更新）.md","hash":"06d6f537c090a9e1d036c7a9bbd82666b3e327a5","modified":1666852813622},{"_id":"source/_posts/LeetCode一维数组的动态和.md","hash":"08e534a3f654ab1b6cc4e13763ba7e2507a7505a","modified":1666852813623},{"_id":"source/_posts/LeetCode两数之和.md","hash":"d3f3a229e29ca22da69f2512c88c4825adaf44ca","modified":1666852813623},{"_id":"source/_posts/LeetCode二维数组中的查找.md","hash":"262caa17fbcd6ab08b3a57d3f3e9ee32564e76e8","modified":1666852813623},{"_id":"source/_posts/LeetCode子矩形查询.md","hash":"07c568b462cc297be39b3f98be7ceee527043d12","modified":1666852813623},{"_id":"source/_posts/LeetCode数组中重复的数字.md","hash":"0346ed47224a87012ab29fdf4a05fb4ddec7ddba","modified":1666852813624},{"_id":"source/_posts/LeetCode替换空格.md","hash":"c2ff6d31d78fd24c43fbb370adfd96ac2349667d","modified":1666852813624},{"_id":"source/_posts/LeetCode最富有客户的资产总量.md","hash":"ceacc3f0465fddae273e9698c0b926c81683b66c","modified":1666852813624},{"_id":"source/_posts/LeetCode缺失的第一个正数.md","hash":"871dd940925186d6b1d412365a5bf663f470394f","modified":1666852813625},{"_id":"source/_posts/LeetCode移除元素.md","hash":"09993280a1335dbeb432c1368e8dff75b13521ca","modified":1666852813625},{"_id":"source/_posts/Spring-Batch学习笔记（一）.md","hash":"34399149a7b6af32c4f3789185fa690f5687d910","modified":1679276567400},{"_id":"source/_posts/Vue3-Swiper开发轮播列表组件.md","hash":"367e227099b06389735d983beed69bf3710ff3f7","modified":1679893866054},{"_id":"source/_posts/Vue3中Mitt的使用.md","hash":"84eef9a3f508bb39cb449ee38bf92d03faf46e07","modified":1680160067685},{"_id":"source/_posts/Vue3中使用pinia.md","hash":"5aac18bb3ae5e5488581507154208a1ebd1150d3","modified":1679390389783},{"_id":"source/_posts/Vue函数防抖和函数节流.md","hash":"17df38d01d36b4c15bc06ae98f598decee502f51","modified":1666852813625},{"_id":"source/_posts/Vue学习二.md","hash":"ca76c14dac390bdbd50ad4ae7c5ed2d5ec06d59c","modified":1666852813626},{"_id":"source/_posts/Vue学习一.md","hash":"483a92d0412df80d7149bf5e1e63f24c2592e467","modified":1666852813626},{"_id":"source/_posts/WinForm设置控件居中.md","hash":"dfc6082d89ef341402fa2c887b9e07cb996fef97","modified":1666852813626},{"_id":"source/_posts/Windows端口被占用解决方法.md","hash":"9fd21aa2a4e49ac69c520b6d63a35f45c9d7eeaf","modified":1666852813626},{"_id":"source/_posts/Windows安装Hive.md","hash":"05d1ff9732ef0d75f8877354d55b6b92f43d1292","modified":1670209224780},{"_id":"source/_posts/about.md","hash":"5df695e3f1e9bc2abe1ad0d34ba5ca7aa31bcde3","modified":1687659113929},{"_id":"source/_posts/Windows系统修改jar内容.md","hash":"d23dfb1defdb87bcb403101844a85813a9f4c74e","modified":1666852813627},{"_id":"source/_posts/async-await的理解.md","hash":"205ecc3d6d327a3feab35d0284bb9de342968582","modified":1666852813627},{"_id":"source/_posts/css学习一.md","hash":"6245938e566b54c0a4c6cd4bdcf234788da78fee","modified":1666852813628},{"_id":"source/_posts/css学习二.md","hash":"eef29911b9f0a60a23332ecccf4b0c73f8cca926","modified":1666852813628},{"_id":"source/_posts/css学习四.md","hash":"28277777fb7162c28733591e9e7b38e24ae14443","modified":1666852813629},{"_id":"source/_posts/css学习三.md","hash":"a91cb4cf89ac58c2e169291c214915e4c080dd28","modified":1666852813628},{"_id":"source/_posts/html-js实现多文件上传、预览.md","hash":"18890489aa310d9f8508bc8d3d4bd382f221478b","modified":1680853809167},{"_id":"source/_posts/一款智能的日期解析工具.md","hash":"1507b472bd9cd0ef707948d59b5456f17e142b99","modified":1666852813629},{"_id":"source/_posts/双向绑定和单向绑定.md","hash":"1ce9d455231ba0d6c055ebaceb750cda9ed8266b","modified":1666852813629},{"_id":"source/_posts/在浏览器输入URL回车之后发生了什么？.md","hash":"083fb2fcca57b969a88de3799ca3e383e5083f04","modified":1666852813629},{"_id":"source/_posts/常用插件备份.md","hash":"c81b6d6a083b7e27662c6cc57684ad3b84cacaa0","modified":1666852813630},{"_id":"source/_posts/维护java项目之-和equals.md","hash":"41611876ba77e02c859f0e65df7c101f902e22c1","modified":1666852813630},{"_id":"source/_posts/常用链接备忘.md","hash":"2f42795972b0de4f9091b96766bcdbaaff635ac4","modified":1666852813630},{"_id":"source/categories/index.md","hash":"25fe757ef5434e38f42b4acb224131a2f1d3ed3e","modified":1678845374483},{"_id":"source/about/index.md","hash":"a1be0b9bc9a822b666c8c41a02020e0536ba9e4b","modified":1678845510419},{"_id":"source/friends/index.md","hash":"668d9d6c8176b853d9217a18f7fa4d4cfae350e6","modified":1678845499615},{"_id":"source/tags/index.md","hash":"503ae565e31321344f66e22a75d2b079fdf63d1d","modified":1678845402258},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/ghcard.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/package.json","hash":"098e250344c703b2c361d5772e018b75d464fea3","modified":1678858049786},{"_id":"node_modules/hexo-theme-bamboo/languages/zh-CN.yml","hash":"2bf66fefa219ee8152d35bb5f823ca5096fedcf2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/languages/default.yml","hash":"4c604dc1344630ae5ab50edc282a3e46982884c1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/languages/zh-TW.yml","hash":"bd3ef201b7dcbeeee54107301550d60e71d72ba7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/LICENSE","hash":"2f9d4d3c41f055757f8c86567cfe838846446e7b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/post.ejs","hash":"3e77ec60c2b7453df3baeb0f0fa586e4a48bd2d0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/categories.ejs","hash":"b0f71816ca4c0899eb82b6fa100abf91b56508ab","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/category.ejs","hash":"d0d19ac565414123c24b312f7158dbe1c9e275f8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/layout.ejs","hash":"3a4586f4e5ac835ae65764b446cdd6950ac8ee01","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/tag.ejs","hash":"1061f8a9b51d983590a3efc536142a9b10acebf5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/README.md","hash":"6dadb9e9ec0e81d9f498ebefb852fcd1b92fad49","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/_config.yml","hash":"636441f8f5353649a6bbe3e8370a927271f4dd17","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/index.ejs","hash":"fea918c473fe66846b7a7f94da4617610cff3d07","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/tags.ejs","hash":"0c6a171fa56cf8bfa180db32f10f75c6760fd983","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/lantern.ejs","hash":"225044aa82bf305e27a00adf1a8368146e860394","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/archive.ejs","hash":"246967d57c31bd873f98603536df79c1f67c96e2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/favicon.ico","hash":"801ff7b3f358b77a813787a97ef59148eec93fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/goTop.ejs","hash":"d7841037d77470a314d0c4265e6380a120262c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/motto.ejs","hash":"535af08125435651591be103f8e6d98c7222907d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/loaded.ejs","hash":"80084d3222c6776671201046d99a746ae9fd375f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/home_widget.ejs","hash":"0882e6992cfc2fbf1e0b05acbc1463de68f77aa4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/dark.ejs","hash":"cb74dcf56c40986eb8ab97bb6becf1b1202c3cd3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/paginator.ejs","hash":"26655627ce5b1eb7050b5e24cc262cf3fc46c400","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/notice.ejs","hash":"ed4cad963e1a9b747864bd3ceb76bf9e763c1150","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/events/index.js","hash":"9046faaf379c1e7ff6f80d2985d70792cd15de3d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/btn.js","hash":"0e628fa28e03f60e28f257af895b2e72a0cb8449","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/helpers/side_archives.js","hash":"a292f0a9e9242556b83219f519e3e92a4d85e904","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/swiper.ejs","hash":"767c0fcae79bf94fa718ba26ea4ad1fdb610fe10","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/btns.js","hash":"618e2f77ec244d8814f2b38c9820d1356580bbcd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/checkbox.js","hash":"49da9041bd41c57a547d42fb7a6741757b848f1c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side.ejs","hash":"17f52c2fa6d771da94644d4fd0983d054a606384","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/topArticle.ejs","hash":"9b321c75dbcbc424b2392e90426127182539a86d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/folding.js","hash":"832c55a45cfeeabcd2d317d42faaee09ee54d2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/file.js","hash":"260333b277073ba8f41472cdddb35ee3e8212267","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/gallery.js","hash":"694a6a81dd3b3aa4a37e39b35402e99322941ec1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/ghcard.js","hash":"4e893d79abc1e8e1e5b3bfe08249ff32b250314d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/getPhoto.js","hash":"e78765e6156ff261e564d8a22c6307ea98990a0d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/image.js","hash":"faa1d83114bc255cffc18bd0ab037f08b430f515","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/issues.js","hash":"7dcb40af462e4131f6a52d354ed3b147b4e874af","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/media.js","hash":"1d163ee349818baeb95504f82d3497da6f6556e2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/link.js","hash":"a11fe06f20669f4b64a1a0dcc9f005a9f32e29dc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/mermaid.js","hash":"1e69a5e4a4a5f88fdb76d0fe55ea651c14301816","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/site.js","hash":"1cb487b1435925a55eaf957d761bc08254092c36","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/note.js","hash":"9e990caa1fd815a760e31f1eaa02015d357fcef8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/progress.js","hash":"99a10305e3924aaab05135ef25afd10d04574bfe","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/swiper.js","hash":"26a587371f7d2f6715cdb0e5f4f7b63a7f7921cd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/span.js","hash":"d617b5a0056c4a0c983225513c89eed6f5b56833","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/tabs.js","hash":"133310460bdf70a7932b44c3ccca509b3f221e1c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/timeline.js","hash":"da2b0d7760dea698429f370aba5cded5bb24501e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/titleB.js","hash":"3dde507bf20477cd89e71549be8ddfc4964a76ed","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/title.js","hash":"8cfce58425366f805a5f2c88f01b76dca44f91ce","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/z-lazyload/index.js","hash":"58b935fb699a98f0a9ceb741d2105a977e24cf59","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/app.js","hash":"57f824da5f893a0c83c80522114797f09868ccf1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/animate.min.css","hash":"dc47ce9b8438909921b14e766febdabf3018e3c2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/activate-power-mode.js","hash":"2e14b0f48c55eaec543d96ec0eb2f16e80c20c01","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/goTop.js","hash":"2fc5be4f18b0963fca600a77cb12348fec3aa10c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/wrapImage.js","hash":"fd9072a35d48f120ac4c35e51882b83dc97b3101","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/ribbon.min.js","hash":"e6136a6243e04faca95844f47c21b070ade3661a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/local_search.js","hash":"131d74198aa41bdb74dc27ef3ed856bc3d752f8d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/style.styl","hash":"5d30954d92926b3ebe07bde429e45394ac06f6d5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/footer/busuanzi.ejs","hash":"bc3d2f6abc95b329dfe0186fa0364c48aab3772e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/analytics/baidu-analytics.ejs","hash":"9e1a9d6a678e4e86951630a17f95085942e0b7e3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/analytics/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/analytics/google-analytics.ejs","hash":"cb7d5c76508fe8db43dbd4af9a691398fffccadb","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/card/post.ejs","hash":"37fd6f4443620ff3b2963c19fc42bd21891428b0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/head/drawer.ejs","hash":"1f78c957b472a14c13301ea6a7ec59d5ecc777e6","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/footer/footer.ejs","hash":"3ed9b13b849c5a54dc667b9137beaa769d382980","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/head/header.ejs","hash":"f447c99eac5d9fe5da0898d64a9d65b3127c8178","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/head/head.ejs","hash":"57d8f04200aecf4fb5059f63bacbd7075bc6d306","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/math/mermaid.ejs","hash":"2c6894abc259167170e274728467c7c7aa1ef8e5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/head/search.ejs","hash":"7cbf73c577874de0b6cc89180680b1e19c5e8348","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/footer/fish.ejs","hash":"cc9fd78d1cb9a8e4202be880a95b2e2341b585f0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/math/mathjax.ejs","hash":"dc9a1270d34448606e87e52a3b003a89f4f5b3aa","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/meta/aplayer.ejs","hash":"8175c8dc578a1f57d365e5997ea3cfd619289e37","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/bgSwiper.ejs","hash":"77ade59920c57fda25c2be421b77adf7b0c943d9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/pjax/animate.ejs","hash":"72b0af79d0e00ea78675141972a24fe4dbae907b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/pjax/index.ejs","hash":"6ac774c816f9dcb7099612e2ef13bb0e7893476c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/comment.ejs","hash":"29e2fb7e343ce945a60030ce3ecd2a1b4018cd09","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/categories.ejs","hash":"15f33099ef5f653b9ceb3e27f089b36bff50cc4f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/donate.ejs","hash":"b54c1be4bf9a4b28a8c39d2835e8b4d9ee1e56ff","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/copyright.ejs","hash":"fd3af5c33895f907b1e5daa56d8d7266549dd019","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/tags.ejs","hash":"f92692427de2caa48033f975f193f9a8e4b02613","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/share.ejs","hash":"d6e134f460383d8e0d44a74a9177385a713cf9f8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/post-detail-header.ejs","hash":"f8365e9f530ff8c5641a7421d08d5c84049436df","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/post-nav.ejs","hash":"1e92a0ca46977f94ce27540ceb09ce05bc75accd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_2.ejs","hash":"d1df3a9050bae7cb7cf17d44359292999a1d0664","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/prismjs.ejs","hash":"62eb641fb1f9381166aa6c2752b4022e1a2ea52e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_3.ejs","hash":"1ef0876d3a2f3ae43eccdf3c88dbd9c642d22d62","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_4.ejs","hash":"458f5c179670b029178c037f1feb99f566b9408e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/toc.ejs","hash":"ab8a551ca8c18e4115d2708fb578d68b1c29c2b4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_6.ejs","hash":"7ce6bd6bf765d23acb30f1a054e56f265099a4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_8.ejs","hash":"2ab0a97498e0f35516c1db65949afd831a2800da","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_9.ejs","hash":"dc847b16f4fe38cf41d88c1575a2f531ed9aeaf1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_1.ejs","hash":"e82a5a888ba376080b21d4e39ac9b4fff2623d24","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_5.ejs","hash":"7db609c64eeabb8b68771097663d1ff427667e14","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/dark.ejs","hash":"340343fda6fb9bff2b853d44d3268a7fff1f4ac9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/cursor_effect.ejs","hash":"4c2a505655fb8c8d23d70584d8ea1968d1be4dcc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/head.ejs","hash":"4536885880315fb90efd75935c133051a729d45c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/danmu.ejs","hash":"ca20ae64fbd2527f8b54fc8618a3a0502728420c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/copy.ejs","hash":"fda84bf47a5e7c5692f682a45f8fdcfab90900b0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/global.ejs","hash":"16851de5516d2908787ed902b778c8f03f9ae63b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/falling.ejs","hash":"a8de433fc45883415a2d92c904fe7be111f6b8f0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/inputEffects.ejs","hash":"765c69436e021412dd8bbb852ea2403c97fc6adf","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/index.ejs","hash":"fbd74a8d1af22aaa50641902283e709edbc27aa1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/issues.ejs","hash":"cf5436f10fb9a2fb7238a1c528a5ed64a2345840","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/lazyload.ejs","hash":"b7e8071598a8dc70406aba8da949c5d6f5403e47","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/setHeader.ejs","hash":"c082c910282c3c96465b0812222874fbe87c58cd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/scrollreveal.ejs","hash":"4aba6d5b506b3a8fc7d84abe0d42875e0107d64e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/swiperTag.ejs","hash":"020d6cd78cd9ace5477a79e57e958a2f5a6d43f3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/typed.ejs","hash":"262725f946bb3ae8957b8e3d50c1a7cd564f8866","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/sideHeader.ejs","hash":"3985bd41e1310500d44d42b02863d4b16815154b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/preLoader/loader_7.ejs","hash":"3b6d1da24786682b5d248f5e59f8f48510a55d4d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/toc.ejs","hash":"af49e146385d28f5cbdaa6d7a5167fbbde25a917","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_archives.ejs","hash":"c82b7c669aaaa2b9575cf6daf6d0a133b64acfd0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_toc.ejs","hash":"670c9c8bbc0f8cadfaa1e5caca73fd641d2fe831","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_tagcloud.ejs","hash":"7e716ce939cb8dd4004896adf41559d57bcfff0e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_blogger.ejs","hash":"a2c637abf7943b273edfb69d0d8e0dc812c84127","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_recent_post.ejs","hash":"7fe61d14865e97988ff5d42047abb4a4ee8af7f0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/events/lib/stellar-tag-utils.js","hash":"315d9e8a8261e760e1001970e09c32a660c969e0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/z-lazyload/lib/process.js","hash":"48a29bdb7026c4a9c8a58190d044140a8a05a64c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_category.ejs","hash":"dccd4537a94cf6e210803d6ab2789e6cd57d755e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/widget_library_sticky.ejs","hash":"e3929f7edf85900e7becc71e0cbe14da2333f621","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/side/side_webinfo.ejs","hash":"1efe51b2685b7c4ad2ab42849c5ebe59e2d20def","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_defines/variable.styl","hash":"ff4fff39224138f8cce1fe82dd8e0ab4077804b3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/about.styl","hash":"0673f15fbb3649e221da3b20ba091d03bbd1cc3e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/base.styl","hash":"e3c5b4f828552be20a6f773f6a8c242d58a2dc23","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/archive.styl","hash":"caf5c83ba9897644582e60e29770f1bb7362ad5a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/copyRyght.styl","hash":"ed1377ceb86204fa6b6c7430d14a1366d9ca568e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/comment.styl","hash":"a023684d767291b9fac121892c14268d3d199c9e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/danmu.styl","hash":"8aaa764bb2b1c6a49c2f6c9ee868da24a0359669","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/category.styl","hash":"327d6d1f71d782f69fe0b365137b0abc331ca3bb","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/categories.styl","hash":"ad6d70243be366677293ff88c2eec715d2c29e9e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/donate.styl","hash":"a880996ca61f96ba1280d581a132deb924c4ff62","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/custom.styl","hash":"9e5c1049faa95def7f16dc5f51348ad20a6cd3d4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/drawer.styl","hash":"0498b0cf2819b681eeeec35193e491d1d039302d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/friends.styl","hash":"f7018f99210ccab74b2d315a55ba9c4350a12fc9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/dark.styl","hash":"28d5269fae1cbaec4f40c21daa0378c098c7d801","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/goTop.styl","hash":"08c3dc03570ca3738f18b99ebe95c79ec3d0ce0a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/footer.styl","hash":"598d193754645b22a0f1406303c1df66d95ffd9d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/header.styl","hash":"db725d2648fc740aa59360502628e6de959504a6","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/home.styl","hash":"0bd1214d90fcf7ae020ee0673da4a9fd7c225274","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/lantern.styl","hash":"04acde311d7b9f7a732340626dbe677814ab502f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/pace.styl","hash":"b666b9079262d2dcc2a7b6023f97f79c8535db0e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/motto.styl","hash":"cb484d25bc6f0bcda4cadffb5f1cdbe5df93919e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/notice.styl","hash":"8fd57b791e518c14e88c36510e1132c10288b86b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/paginator.styl","hash":"df1fd26976fd5be8418cd49a5c65ec651a680496","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/post-nav.styl","hash":"a7c7b33ad813885af485815d8c787c0fb3b6c8c8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/highlight.styl","hash":"55fc39472aba296434fab0ffdc6be5684f01778a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/posts.styl","hash":"9464726d962229149d38841c087f6207cd8c2adc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/tag.styl","hash":"f2b741dddc033f1989d3c4710f339ee122900e58","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/post-detail-header.styl","hash":"b316f4bcb9964bbfa4f6829e550578aa27d509a8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/post.styl","hash":"8fc9e5c000113b4237541a1ce58a01c0981e0630","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/search.styl","hash":"2f67103cd8cb9b92d1ca4f334e41c195e01c3ce3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/tags.styl","hash":"6fc3915d4a0f5d551b23f2281df868e0399bc13d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/btn.styl","hash":"dbba1c1f7d374bd7c69c5b9758a61371db334d87","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/topArticle.styl","hash":"910e24383b1009e27c0ebf26a5958051451da47c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/circle.styl","hash":"c2adc73eab52952140420c2b5fc8bf134432b695","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/side.styl","hash":"2999120872bff96f84381f76ad0a65015bd3f549","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/checkbox.styl","hash":"dbc18a5685879493b06016c85993d4522fe48564","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/folding.styl","hash":"7a88c350d302c6a89ab008b6ce2a98ed6f19c007","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/gallery.styl","hash":"d97e1caee6862df812a172679d76db2c7ac8de62","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/galleryGroup.styl","hash":"ea9f387bc1bc00b4d6d4bd34e2df9046bda3610a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/image.styl","hash":"ce0c9f758f0f0be385c38d65e9bf4fb708cbaf5c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/media.styl","hash":"6727008f95ad9b3146c609a2e890af009472f9e4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/link.styl","hash":"7181435bed445840bb61d655451494f83ac4d7e9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/swiper.styl","hash":"ff02b78ba54cb71eafad141c3e4ef4a9cd9085cd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/inline-label.styl","hash":"1903a258c5829c8370c4eb53fcb60df7f7921f08","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/site-card.styl","hash":"ee95cbf6072dbe3ae11e6f73a3b38a9c09e31994","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/note.styl","hash":"4487702c5348bf691e329fa8a9bbb6f42808436f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/span.styl","hash":"bede49e1edf1049d4ea2f3dd0a17787fe084b2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/tabs.styl","hash":"ca2dac222da40e13aa3b117d55b2da74d7ce9a35","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/progress.styl","hash":"de1e1b08d23f95493ffda2a5375888e9e678891b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/timeline.styl","hash":"ae8e4487a32606127d26dc27c74df592b2175f82","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/bubble.js","hash":"57f116efe2418a389913a46909e018fa4c9b9e84","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/title.styl","hash":"e17ce9da2937d314c71b459c43de5f01441fe421","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/homeBubble.js","hash":"8475e7ed2004b9791b3f7ad4162b7a2b89467874","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/text.js","hash":"7dd898cb00b46ceda065c92f2ac092c4ef41b4e4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/fireworks.js","hash":"86ad9484e40268952b5e32c240fb04d0268f86dd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/transition.styl","hash":"809b40b7214cda6691b2f22ae827cbdbfaf8c303","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/barrager.css","hash":"9de985f20d314f3f1182f30d1b0666e5eb9ca9b5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","hash":"72ec0d8bbd0811973152fcbb316b0dd839ffb8f3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","hash":"76fd19c15b1d0a2d7afc7b66ca5f80c9061aabe2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/falling/snow.js","hash":"99222d79ff36b05200b3ff7f54f8209d8f0a364b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_plugins/mathjax.styl","hash":"499f59db53e9c57d99bebe4722156aeca7adb8b7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/loaded/index.css","hash":"67970197fec47832162ea29c3cf795d315cea891","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/falling/sakura.js","hash":"b1566483a7d0deda2dd35db3d5a46f13aa5f1a86","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_plugins/pjaxanimate.styl","hash":"f8c2d14c041bb87bc7f37d82ac939320e3d110bf","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","hash":"c42732535ac61ac59a4356af3d89186a3071edf1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/issues/index.js","hash":"f02538ab609541489396a682879ce854519487ca","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/pjax@0.2.8/index.js","hash":"efb9166635c18f09f2c7604a8b15d6ac8aae4870","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/font.css","hash":"f6407017418989fb0ced993509543fb07c6b0b33","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/share.min.css","hash":"9bd0cd6c81b60e10085cdda6aa724f147ee76599","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.css","hash":"45e469dffa7b9ebc03f99fd09fb97274cdc5e9b4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/swiper@5.4.1.min.css","hash":"fd618d2bdf929821d9fa70ae377b840ffc47d756","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/vue-awesome-swiper.js","hash":"e6f36537ed091a6b69945b1acf49e426426f1cf0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/swiper.animate1.0.3.min.js","hash":"6a8d6aa926e552a563356c36d52d1e0e0c83521e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.css","hash":"b9dac4cfc5f0dc8854393d670b525fb63092fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/utils/index.js","hash":"fcea598ed253006d79f78d34cc36fdc6649639f3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/cursor/Horizontal.cur","hash":"c3c5e8485a67b7ab16079a96b53aff7ff52de756","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/gitalk/layout.ejs","hash":"8a4c57646ee0d4a4e94d568708fb85a8f9ac97e7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/beaudar/layout.ejs","hash":"52b9a55b6e83bd9a10fc3f66a18be98e3965475b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/livere/script.ejs","hash":"b33339cfa1429947cf44f9cb41a5996865467cc3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/changyan/layout.ejs","hash":"46192143a90303d8924b3d07d28df116bc833894","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/livere/layout.ejs","hash":"f88b32604056721e658c25f775866a1519e714f2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.js","hash":"c8e6f4510eb5fe55015401510ce03f5307556b1a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/gitalk/script.ejs","hash":"733947cad238d89c5a5694ecf19a83b1d5648ab9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/twikoo/script.ejs","hash":"655e305e6a9c189a49f88b086c8694e50ecfb37d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/twikoo/layout.ejs","hash":"c51eab2274374330820b29d3a9e69b3273433f9f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/gitment/layout.ejs","hash":"353820d6d6aade09cd21b31585afa20485008083","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/gitment/script.ejs","hash":"1e02cf43a347a612796aa188446605e213e0dd51","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/valine/layout.ejs","hash":"d8d7507d39f73fc3ce88a595194635da0e76d8d1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/waline/layout.ejs","hash":"a82f1c7819cadca142b7f3436957ddce5adf7fa0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/utterance/layout.ejs","hash":"eab867c580f6184d068d5fcc545a763a2919eb16","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/valine/script.ejs","hash":"c39459b0fb46bb1eb49823cc62375f04d3b4a48e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/waline/script.ejs","hash":"ddfc35b05d22d2ad0f5b41444ed47793546f4b9d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/changyan/script.ejs","hash":"c357b9052564e12754cf21a1cb1debd3bdfe1eac","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/utterance/script.ejs","hash":"5d4aa3f60f0f648a5347b29eceef3c7244cb7b96","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/beaudar/script.ejs","hash":"58b914569fbc9d5bf706674c1ea4d7a83b5540d1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_2.styl","hash":"a747723c71f5f65ab4dd833c6c0a92ada41185aa","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_1.styl","hash":"c22f3c767fcad7fea925f90499c8be78150f5e0f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_5.styl","hash":"93898247ac7a6eb696c59708b6bfaaeda49f5d23","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_7.styl","hash":"52938897509f3b7268eebf45f97be0e4cb8fa268","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_10.styl","hash":"01bcf630c126f7fa273892245e6e6c59b654bf56","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_8.styl","hash":"7e0cd7dbdf2a3e67e3e6932cd9047357397189ee","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_3.styl","hash":"4bc816888b7463faac4c12978ee7166bc7864b14","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_6.styl","hash":"64cee8bc81acaaa9c5b9c1efa5de290ff33fd1fc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/preLoader/loader_4.styl","hash":"1fd703fcd31ed6fc5cf5c26517d1da653c440d8d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_1.styl","hash":"f7fc1257c6b402b1ddec85d45ac8e665580dc14d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_11.styl","hash":"f7b6a4ab283029f649a0ae2732fa6e7079ecc435","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_12.styl","hash":"27792c767fa345b0dbe735a681c87cf790e19a8b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_2.styl","hash":"dbf766a7086bfb35a7fabc635edeb67a32d1828f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_14.styl","hash":"0ad1c7d9faaf46bc201d8c7c9b34e39ae7efec48","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_13.styl","hash":"a5015270d9d79fa2f4ed246939d48bf4c9c7f7f6","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_3.styl","hash":"083991d97f004f1f657c7a7649bd7b319dee652e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_7.styl","hash":"d75280def0358da644945744da22f6a5f2abd745","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_9.styl","hash":"6cdaa72cab01a2ca483eb7092372bcfcb2dc9b25","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_4.styl","hash":"ea0a0fbfb605d7d0592a06bb94e38f386830aa24","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_15.styl","hash":"fd9b1e87dfaed5db7d9d7b9dc272a5669056c278","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_5.styl","hash":"6fea986bd4c37188ce7da86b0839749ac188bd02","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_8.styl","hash":"4ce4323bc8a183533bbb1ab9ea2bf946350e5713","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_6.styl","hash":"7f6b7d34933921dbabee0937053cb288fcad9647","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/jquery3.5.1.js","hash":"29fa5ad995e9ec866ece1d3d0b698fc556580eee","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper/swiper.min.js","hash":"674fa0bd5973cc8124d6a711c725b119c025da0c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/valine/index.js","hash":"d520897b1bd3788aacb672b5cd9ff7ab0c81fc80","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/waline/waline.min.js","hash":"3a17de5f24e0437c3c681b15f147ceef3980736f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue2.6.11.js","hash":"1159f02f3f7191a5cf4c109734d0268173fab96d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":499162500000},{"_id":"public/atom.xml","hash":"d8c3dd604477ffa4a88971a508b11e14907e4792","modified":1687659338706},{"_id":"public/search.xml","hash":"e4b01bbca0fd60b2703f3a4f3c436834854c9402","modified":1687659338706},{"_id":"public/friends/index.html","hash":"ef476e89f1fa52b810bdca488e85213d0f3c0393","modified":1687659338706},{"_id":"public/categories/index.html","hash":"cbf641893dbae8c3bc04752a49f38b10635f82ad","modified":1687659338706},{"_id":"public/about/index.html","hash":"fce6644dba415c8fcbae54c5bb84e58e2b0c7256","modified":1687659338706},{"_id":"public/tags/index.html","hash":"db75051e53ef80b3079a473874fd345e9b46427e","modified":1687659338706},{"_id":"public/2023/04/07/html-js-shi-xian-duo-wen-jian-shang-chuan-yu-lan/index.html","hash":"994f3c3863c06f6abd458ae9dd344bfeee9268e9","modified":1687659338706},{"_id":"public/2023/03/30/vue3-zhong-mitt-de-shi-yong/index.html","hash":"9714c11e5808d7808b6ebc2a9f012c5efa6bc28d","modified":1687659338706},{"_id":"public/2023/03/20/vue3-zhong-shi-yong-pinia/index.html","hash":"f6c6fdf34fc2e15166de23c62ea86529143b346b","modified":1687659338706},{"_id":"public/2023/03/20/vue3-swiper-kai-fa-lun-bo-lie-biao-zu-jian/index.html","hash":"2183de2b60b7d9bde73f4f5d9ecb8dc700ff2fd3","modified":1687659338706},{"_id":"public/2023/02/17/java-wen-jian-chu-li-chang-yong-fang-fa/index.html","hash":"918e5e8d28ab0f39962bb7bc2323eb3cd00689c0","modified":1687659338706},{"_id":"public/2022/07/29/chang-yong-cha-jian-bei-fen/index.html","hash":"ec68f7570c621201db8aa546c7c0e0024e81008a","modified":1687659338706},{"_id":"public/2022/07/29/chang-yong-lian-jie-bei-wang/index.html","hash":"0be84192f58c067d271d721cb284550899a8ed91","modified":1687659338706},{"_id":"public/2022/07/29/windows-xi-tong-xiu-gai-jar-nei-rong/index.html","hash":"3d17a25caf624a87e7447939d845af42e99e7993","modified":1687659338706},{"_id":"public/2022/04/09/css-xue-xi-si/index.html","hash":"0832291c5e4d256dd0d5f089f8aaf500525f5d4c","modified":1687659338706},{"_id":"public/2022/04/05/css-xue-xi-san/index.html","hash":"e959402410477cb6e91352292c6d429f32bbc24b","modified":1687659338706},{"_id":"public/2022/04/04/css-xue-xi-er/index.html","hash":"32c8e24cbc6271c2067ac7badeacf82a8550ffb9","modified":1687659338706},{"_id":"public/2022/04/03/css-xue-xi-yi/index.html","hash":"d43c03adf0d23c87b38f4710cf55dcfe48afde4d","modified":1687659338706},{"_id":"public/2022/03/27/async-await-de-li-jie/index.html","hash":"216aab2b028d5ca0152d966dd59bd49f9efaa1b0","modified":1687659338706},{"_id":"public/2022/03/26/js-xun-huan-zong-jie/index.html","hash":"46782d0909426f1c2d38260f1c99a9fc0bfb128e","modified":1687659338706},{"_id":"public/2021/12/08/vue-xue-xi-er/index.html","hash":"641ddc2bf0ac4d139d80fa058dbbdf77581fe40f","modified":1687659338706},{"_id":"public/2021/12/07/vue-xue-xi-yi/index.html","hash":"43004d4bf59194bcfb3dfc767e9f061f7fac932c","modified":1687659338706},{"_id":"public/2021/12/07/windows-an-zhuang-hive/index.html","hash":"01ae7273e8ce84a1c37abaaff85cb987c40c9ba8","modified":1687659338706},{"_id":"public/2021/04/13/leetcode-ti-huan-kong-ge/index.html","hash":"3aab74f1e7be4d883ad8c21ee51f97c2f0e2d6be","modified":1687659338706},{"_id":"public/2021/04/09/leetcode-er-wei-shu-zu-zhong-de-cha-zhao/index.html","hash":"344508f23e9eaea26caa75657a113a487a13a191","modified":1687659338706},{"_id":"public/2021/04/08/zai-liu-lan-qi-shu-ru-url-hui-che-zhi-hou-fa-sheng-liao-shi-me/index.html","hash":"72a643eacf4994d97a5ca2289f1c248c398c3795","modified":1687659338706},{"_id":"public/2021/04/08/leetcode-shu-zu-zhong-chong-fu-de-shu-zi/index.html","hash":"74fc8030ab0bab60fb5c8b71ae90978eb674e26a","modified":1687659338706},{"_id":"public/2021/04/07/shuang-xiang-bang-ding-he-dan-xiang-bang-ding/index.html","hash":"49f0147956bea51e201d35415d831edc05be89d9","modified":1687659338706},{"_id":"public/2021/04/07/leetcode-zi-ju-xing-cha-xun/index.html","hash":"61b724dcf61875ecd4ecff69f984ca4abb974d26","modified":1687659338706},{"_id":"public/2021/04/06/leetcode-zui-fu-you-ke-hu-de-zi-chan-zong-liang/index.html","hash":"c0fc561b702030621900b8a013f8e0896967590f","modified":1687659338706},{"_id":"public/2021/03/31/jvm-jie-gou-xiang-jie/index.html","hash":"cbc2e39afd4004d156608aa21af30472b7ed8ce6","modified":1687659338706},{"_id":"public/2021/03/31/leetcode-yi-wei-shu-zu-de-dong-tai-he/index.html","hash":"b37dbfd0a6e911aacfb90e9a284ece5531b096b3","modified":1687659338706},{"_id":"public/2021/03/30/java-jiao-huan-shu-zu-yuan-su/index.html","hash":"24c8fe0f3f6148befac378c9572b089ff4f40378","modified":1687659338706},{"_id":"public/2021/03/25/elasticsearch-de-dao-pai-suo-yin/index.html","hash":"1e5194ace6b62ff92c8f80c0c8d8366a6191e3c3","modified":1687659338706},{"_id":"public/2021/03/29/leetcode-que-shi-de-di-yi-ge-zheng-shu/index.html","hash":"320933b28f653cad93629c57cd527b4944990834","modified":1687659338706},{"_id":"public/2021/03/25/leetcode-yi-chu-yuan-su/index.html","hash":"b9c66880a27ebb2794cda9068509db3e6caf1ec5","modified":1687659338706},{"_id":"public/2021/03/23/leetcode-liang-shu-zhi-he/index.html","hash":"da7674e94e67e2f789514827f82a2b2be1502e76","modified":1687659338706},{"_id":"public/2021/03/23/elasticsearch-ru-men/index.html","hash":"ad3c7b4974f97d140b6b2fad18946f1a8f381380","modified":1687659338706},{"_id":"public/2021/03/22/bio-nio-aio-dui-bi/index.html","hash":"75cf1021748eac106a9b34431ef21b1a8a05c89c","modified":1687659338706},{"_id":"public/2021/03/19/windows-duan-kou-bei-zhan-yong-jie-jue-fang-fa/index.html","hash":"6c99eacfa06c4bc62da18076e0f67138848a7ecc","modified":1687659338706},{"_id":"public/2021/03/19/autoupdater-zi-dong-geng-xin-ke-hu-duan/index.html","hash":"d6ef3886238f97d12cd0428418694a19da7a1cff","modified":1687659338706},{"_id":"public/2021/03/19/cefsharp-chuang-jian-ke-hu-duan/index.html","hash":"bc72b93181125b7f94451bb8031036fb5d8aa20d","modified":1687659338706},{"_id":"public/2021/03/19/spring-batch-xue-xi-bi-ji-yi/index.html","hash":"af904dbb90c65d5613c5b3bd2091b01fafa29d7b","modified":1687659338706},{"_id":"public/2021/03/19/winform-she-zhi-kong-jian-ju-zhong/index.html","hash":"77b5187b740aef916dd0f84acac645f93940b9b4","modified":1687659338706},{"_id":"public/2021/03/19/wei-hu-java-xiang-mu-zhi-he-equals/index.html","hash":"ac0e9639de998767b446ff3b73c4cfd265ebc822","modified":1687659338706},{"_id":"public/2021/03/18/about/index.html","hash":"7accbccd5ad11e91887b48cf4808d1fe2f5dddad","modified":1687659338706},{"_id":"public/2021/03/19/yi-kuan-zhi-neng-de-ri-qi-jie-xi-gong-ju/index.html","hash":"118592824d2b9b9b0ec82df468fbe4c9421703c0","modified":1687659338706},{"_id":"public/2021/03/19/java-lei-xing-zhuan-huan-gong-ju-lei-chi-xu-geng-xin/index.html","hash":"7781e7b04931416107879fbc3a00fe9eb1ff6ffc","modified":1687659338706},{"_id":"public/2021/03/18/vue-han-shu-fang-dou-he-han-shu-jie-liu/index.html","hash":"0fbfd4f661b3410ab92eb3b3f91b6e2bfae4ac00","modified":1687659338706},{"_id":"public/archives/index.html","hash":"76390709780a5879bf404fe1977a95eacba374d3","modified":1687659338706},{"_id":"public/archives/page/2/index.html","hash":"b5e05e8ace3f2a8008bf83ffa4598dab5f1817ee","modified":1687659338706},{"_id":"public/archives/page/3/index.html","hash":"31fc5506d01ac27f4a5fb1e8d80ecfe26c567d5d","modified":1687659338706},{"_id":"public/archives/page/4/index.html","hash":"9d312eb65d953a9dfad7a8d3d57988b95c9285b7","modified":1687659338706},{"_id":"public/archives/page/5/index.html","hash":"422284a5710d85ed30c95e6c909193415b678a1f","modified":1687659338706},{"_id":"public/archives/2021/index.html","hash":"2dec2f7ccd5b8207acbc57f084ae76fb6ae66995","modified":1683854248912},{"_id":"public/archives/2021/page/2/index.html","hash":"d07f1c2b9c63d0ae4ed3dddc2699f5b927414d84","modified":1683854248912},{"_id":"public/archives/2021/page/3/index.html","hash":"6ae83fe97f4cb966fa78094cb9fcf1681a9a333d","modified":1683854248912},{"_id":"public/archives/2021/03/index.html","hash":"bdd105e78d7e55c2a53af58e443f21f658a6a7fb","modified":1683854248912},{"_id":"public/archives/2021/03/page/2/index.html","hash":"ce08365a0131310c623a0a6e5867537b4aa0e26d","modified":1683854248912},{"_id":"public/archives/2021/04/index.html","hash":"ebf85f063e9869d9eb35840832834b5abb925518","modified":1683854248912},{"_id":"public/archives/2021/12/index.html","hash":"eca2b6aeeae28e51cbd5d1e8bcb0dfa72e3a6fd0","modified":1683854248912},{"_id":"public/archives/2022/index.html","hash":"b23dad46794b5b8f5f80ab7f453a46d9423b4cf0","modified":1683854248912},{"_id":"public/archives/2022/03/index.html","hash":"03aabb3fef76f04dae91a2637014f1e152e23629","modified":1683854248912},{"_id":"public/archives/2022/04/index.html","hash":"6d24037f0e105ea035b05397d0938acbb4c4849c","modified":1683854248912},{"_id":"public/archives/2022/07/index.html","hash":"b2a14f69e61226f4aaef0274bfb0da1f06f5de80","modified":1683854248912},{"_id":"public/archives/2023/index.html","hash":"cd1cdd8189fa5e0af27547d275672c659ce850af","modified":1687659338706},{"_id":"public/archives/2023/03/index.html","hash":"88b4c26422695884d5a3b1ef878373d71ff635ed","modified":1683854248912},{"_id":"public/archives/2023/04/index.html","hash":"c87714ca00e8b2c06770ff80fa4533a387c6d6ce","modified":1683854248912},{"_id":"public/archives/2023/02/index.html","hash":"767332ed7473db95f16a7affefc3949a328878a3","modified":1683854248912},{"_id":"public/categories/DB/index.html","hash":"527e453491f6340e05e59dbcbc339239cb678e32","modified":1683854248912},{"_id":"public/categories/Net/index.html","hash":"bd8de5893353da6d389f7d4de5b592e354d95d31","modified":1683854248912},{"_id":"public/categories/前端/index.html","hash":"011ca1e8ce5ea3362d1be28663d203f9b43e2a5f","modified":1687659338706},{"_id":"public/categories/Net/Winform/index.html","hash":"61adeef9877f233e7cb87d3702554039785a06b3","modified":1683854248912},{"_id":"public/categories/前端/page/2/index.html","hash":"d4ae584392652f70d417d479119eadec79966f7f","modified":1687659338706},{"_id":"public/categories/DB/Elasticsearch/index.html","hash":"0f068365a8557b056b13bec67515385c142d4159","modified":1683854248912},{"_id":"public/categories/后端/算法/index.html","hash":"95011dd31e52582f92654efeccc09f0b516d26f7","modified":1683854248912},{"_id":"public/categories/后端/commons-io/index.html","hash":"80ce770d921c701eaa9b8be6221bd17e0c61b52f","modified":1683854248912},{"_id":"public/categories/前端/Vue/index.html","hash":"dce91a8aa5000cb8e0306ceece27631247524c19","modified":1683854248912},{"_id":"public/categories/Windows/index.html","hash":"7e93bc11e1706551eb183c9090439f8059bda5f7","modified":1683854248912},{"_id":"public/categories/操作系统/index.html","hash":"98317d9253fb6a3bf2c5ca0f7f2480471a90b435","modified":1683854248912},{"_id":"public/categories/个人/index.html","hash":"08e7d30e9c17075aa43b42d35bad373e2d6b4a8e","modified":1687659338706},{"_id":"public/categories/Windows/数据库/index.html","hash":"b35069a68d3ecee692825665ceba90c94e920714","modified":1683854248912},{"_id":"public/categories/操作系统/Windows/index.html","hash":"2f28ae1676a327efe56054b5da2df917eed56d93","modified":1683854248912},{"_id":"public/categories/前端/HTML/index.html","hash":"50eeb67d07727f8ed5ea8b1705ef82c4f05ccaa4","modified":1683854248912},{"_id":"public/categories/Vscode/index.html","hash":"56449e1704db5713d24a91907c4084941372d09a","modified":1683854248912},{"_id":"public/categories/链接/index.html","hash":"cc946c99d8c10f694dd60bfdff9e24df43fe66ca","modified":1683854248912},{"_id":"public/categories/Vscode/插件/index.html","hash":"40f469a9e882d97231f15abd121add18761018b7","modified":1683854248912},{"_id":"public/index.html","hash":"f8dc44f7a1e47290eb011c6c10927bc11cec437e","modified":1687659338706},{"_id":"public/page/2/index.html","hash":"e1f6dce2322d98563e521560a246911f9c271ce4","modified":1687659338706},{"_id":"public/page/3/index.html","hash":"d97260a35e3d4aaddec085a163e74b51cc92aa28","modified":1687659338706},{"_id":"public/page/4/index.html","hash":"b5d8d3e220687cc52b104f5a3f8dc5b6cdb4e263","modified":1687659338706},{"_id":"public/page/5/index.html","hash":"bb520e17200d8c3ed7f304b6dab20240626a860a","modified":1687659338706},{"_id":"public/tags/AutoUpdater/index.html","hash":"c37d057f49c7eeead5415d741705b6125901fc6e","modified":1683854248912},{"_id":"public/tags/客户端/index.html","hash":"c44c8788f861a4acf86de29d78136bf5aa2b0862","modified":1683854248912},{"_id":"public/tags/CefSharp/index.html","hash":"f3cd5efb424bb7d1ff5d0b37d6c11a11e20dcabc","modified":1683854248912},{"_id":"public/tags/Elasticsearch/index.html","hash":"6725943fbc6ebcadb17faf69b9fcb2fd8e9c58ce","modified":1683854248912},{"_id":"public/tags/笔记/index.html","hash":"b1a9a616da46ca8d9f70cad21c8031d3164852f3","modified":1683854248912},{"_id":"public/tags/循环/index.html","hash":"7d47eba48b4a3492f1efb8023241dd2131a69149","modified":1683854248912},{"_id":"public/tags/IO模型/index.html","hash":"2a63998da0ffb80234fadf6cdda2abbfb250c618","modified":1683854248912},{"_id":"public/tags/类型转换/index.html","hash":"73edb8af68cb677125d9e3f965fc023799562d11","modified":1683854248912},{"_id":"public/tags/Utils/index.html","hash":"f0ec48a807ef4eee5d1ec416e16725f85d139c6f","modified":1683854248912},{"_id":"public/tags/JVM/index.html","hash":"713040981a1594627c5ce5bc5941cccde3d659fd","modified":1683854248912},{"_id":"public/tags/文件处理/index.html","hash":"57707cb5642e48ea6e2a2c4960aa0303a19c7e7a","modified":1683854248912},{"_id":"public/tags/数组/index.html","hash":"24d939d6ca052c008ee2eff3478206ecf6d00bde","modified":1683854248912},{"_id":"public/tags/LeetCode/index.html","hash":"4d725411dad40c3d9a088772a590101f9f570128","modified":1683854248912},{"_id":"public/tags/Spring-Batch/index.html","hash":"d87dcc8164fdaf2dae9d60d624bcfe45eaed3495","modified":1683854248912},{"_id":"public/tags/批处理/index.html","hash":"14c90d5e43e9ed5f51c4fee2e870c1b7785772cd","modified":1683854248912},{"_id":"public/tags/Vue/index.html","hash":"1ae9518d1548738700c47f344f4a117cb5686039","modified":1683854248912},{"_id":"public/tags/Swiper/index.html","hash":"d1019c3d40ac835fa6dc5fe2b946b7facedca019","modified":1683854248912},{"_id":"public/tags/Mitt/index.html","hash":"0114347cf264e4d758b48c63c27fff49c998d440","modified":1683854248912},{"_id":"public/tags/Pinia/index.html","hash":"59d9980613813b7a3fb9934f6c585cfe83d08acc","modified":1683854248912},{"_id":"public/tags/防抖/index.html","hash":"91755804f0c290c87aed0faab8446bf08bab9827","modified":1683854248912},{"_id":"public/tags/节流/index.html","hash":"12c9e865b0b63446ac53446083759d096484938a","modified":1683854248912},{"_id":"public/tags/引入JS/index.html","hash":"e4eb6cbc470b4788feb4e20447a7b35b5d500931","modified":1683854248912},{"_id":"public/tags/模板语法/index.html","hash":"a69a295657a9db82a5702f59bd667903c2258d97","modified":1683854248912},{"_id":"public/tags/el与data/index.html","hash":"4ecee009f3b8be6ca3fcbd50c76c153ec9db5768","modified":1683854248912},{"_id":"public/tags/MVVM模型/index.html","hash":"3650be9b4b978c5a3899c2e8da9d58d0c5e0442c","modified":1683854248912},{"_id":"public/tags/控件/index.html","hash":"c16569e403b650541c3cc6089fa039a8be75bbdd","modified":1683854248912},{"_id":"public/tags/居中/index.html","hash":"95cebf068d9bf40245856fff6e236b3225422726","modified":1683854248912},{"_id":"public/tags/Hive/index.html","hash":"74d396e3b309ec3015496251c854b5e8095f7e73","modified":1683854248912},{"_id":"public/tags/数据库/index.html","hash":"8d45cf60631a7c71c62a5a720b32f64c83606d0f","modified":1683854248912},{"_id":"public/tags/端口占用/index.html","hash":"2fa9cd934b2359cf5120d82b4c3bfa8a94977df7","modified":1683854248912},{"_id":"public/tags/jar包/index.html","hash":"a4ba3987689fe45a88843ff457575277ff08c63e","modified":1683854248912},{"_id":"public/categories/后端/Java/index.html","hash":"bbb3df5d635935590a30a1163cd10389e4525586","modified":1683854248912},{"_id":"public/categories/后端/page/2/index.html","hash":"1ffe089e21615a7c9d7c5bc9c381007f6826191a","modified":1683854248912},{"_id":"public/categories/后端/index.html","hash":"e072f2dc4ff6a654f70f6150dd15693d162ec4a0","modified":1683854248912},{"_id":"public/tags/简历/index.html","hash":"4b88b8e6cafeb7a5f8a03c8d10399e13c75f91fa","modified":1687659338706},{"_id":"public/tags/异步/index.html","hash":"429f2223af1c0174c0d9cbc9acae825d8cd8753c","modified":1683854248912},{"_id":"public/tags/async-await/index.html","hash":"f10793fb1d5693f4e42103170e81a9331d3f5998","modified":1683854248912},{"_id":"public/tags/css/index.html","hash":"089bf474af3c8c0c26dbf15cbffd86b53f071b9e","modified":1683854248912},{"_id":"public/tags/文件上传/index.html","hash":"e50f0bd835aa937443fe998a0044eb8687c80e1c","modified":1683854248912},{"_id":"public/tags/日期解析/index.html","hash":"8af1ed39b336941a9ec9d5fd87834bf695693f9c","modified":1683854248912},{"_id":"public/tags/双向绑定/index.html","hash":"826a4e9bfb4ae9534fb8b87cb34934b8d152eaed","modified":1683854248912},{"_id":"public/tags/单向绑定/index.html","hash":"2e0fae916d989b426a194c11d47bf415dd20ef7a","modified":1683854248912},{"_id":"public/tags/Vscode/index.html","hash":"50f9889083550920d1cf397ab8f628ada41dce4c","modified":1683854248912},{"_id":"public/tags/链接/index.html","hash":"4e8f354f8766513da8ca2e42992d8a5d06af0f9e","modified":1683854248912},{"_id":"public/tags/equals/index.html","hash":"31a18db8775551d155ec01a69a9cfed7db03b582","modified":1683854248912},{"_id":"public/tags/浏览器/index.html","hash":"5f979349eecf37177b149bbe7e9fbd3e3efc7910","modified":1683854248912},{"_id":"public/tags/URL/index.html","hash":"babe167c48f26cd37bfce0296d30665d4b06491c","modified":1683854248912},{"_id":"public/favicon.ico","hash":"801ff7b3f358b77a813787a97ef59148eec93fd8","modified":1683854248912},{"_id":"public/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1683854248912},{"_id":"public/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":1683854248912},{"_id":"public/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1683854248912},{"_id":"public/medias/cursor/Horizontal.cur","hash":"c3c5e8485a67b7ab16079a96b53aff7ff52de756","modified":1683854248912},{"_id":"public/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1683854248912},{"_id":"public/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1683854248912},{"_id":"public/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1683854248912},{"_id":"public/js/shareJs/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1683854248912},{"_id":"public/js/activate-power-mode.js","hash":"3d02584da9dd820d1d9a454c5a93a2c37a8e4e42","modified":1683854248912},{"_id":"public/js/app.js","hash":"38e8d7ce69449ee7fc28db92f6be88ae26e708b2","modified":1683854248912},{"_id":"public/js/goTop.js","hash":"dfcbf8a70cfb4465d0afabf5153bd069771a6a1c","modified":1683854248912},{"_id":"public/js/local_search.js","hash":"475dc0727cb85c22f15f86701dd93c4bf449a438","modified":1683854248912},{"_id":"public/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1683854248912},{"_id":"public/js/wrapImage.js","hash":"4b3cbceda7950c3fb2a17c4e169c4fdbc023ceab","modified":1683854248912},{"_id":"public/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1683854248912},{"_id":"public/js/bubble/bubble.js","hash":"40cbc57f98407216ba6dc412e2b75e18c036240f","modified":1683854248912},{"_id":"public/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1683854248912},{"_id":"public/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1683854248912},{"_id":"public/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1683854248912},{"_id":"public/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1683854248912},{"_id":"public/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1683854248912},{"_id":"public/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1683854248912},{"_id":"public/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1683854248912},{"_id":"public/js/falling/snow.js","hash":"6f4ef88304f874ef8bb8ea54f79b5d97f5a8f2f6","modified":1683854248912},{"_id":"public/js/issues/index.js","hash":"e5f7b37f9dd8e966c7a63b8b6da27d53510eddeb","modified":1683854248912},{"_id":"public/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1683854248912},{"_id":"public/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1683854248912},{"_id":"public/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1683854248912},{"_id":"public/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1683854248912},{"_id":"public/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1683854248912},{"_id":"public/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1683854248912},{"_id":"public/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1683854248912},{"_id":"public/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1683854248912},{"_id":"public/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1683854248912},{"_id":"public/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1683854248912},{"_id":"public/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1683854248912},{"_id":"public/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1683854248912},{"_id":"public/js/swiper/swiper@5.4.1.min.css","hash":"de2263f82e7bf0778f31fd05c53000799f60701a","modified":1683854248912},{"_id":"public/js/swiper/swiper.animate1.0.3.min.js","hash":"0e48f180ca2f18b787e4b7b6e55ee3b0c6067691","modified":1683854248912},{"_id":"public/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1683854248912},{"_id":"public/js/tocbot/tocbot.css","hash":"45e469dffa7b9ebc03f99fd09fb97274cdc5e9b4","modified":1683854248912},{"_id":"public/js/utils/index.js","hash":"54c66b0a396cc3743884cdb979e5c400218613ce","modified":1683854248912},{"_id":"public/js/tocbot/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1683854248912},{"_id":"public/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1683854248912},{"_id":"public/js/vue-typed-js/index.css","hash":"36a1d2f61d11ab328e349d6a523dd9dea2ec7ee1","modified":1683854248912},{"_id":"public/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1683854248912},{"_id":"public/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1683854248912},{"_id":"public/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1683854248912},{"_id":"public/css/style.css","hash":"0af136b7d092792d335a0c71c88977749fd2295d","modified":1683854248912},{"_id":"public/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1683854248912},{"_id":"public/js/falling/sakura.js","hash":"ab41921e8f6ea1bedfcc348924574dc0caa20858","modified":1683854248912},{"_id":"public/js/pjax@0.2.8/index.js","hash":"c9b1e349203e558dbe43665353e88c6eafc7dbcd","modified":1683854248912},{"_id":"public/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1683854248912},{"_id":"public/js/swiper/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1683854248912},{"_id":"public/js/swiper/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1683854248912},{"_id":"public/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1683854248912},{"_id":"public/js/valine/index.js","hash":"8809117760e0a7ce8dcc3f14b6421a4d415284a6","modified":1683854248912},{"_id":"public/js/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1683854248912},{"_id":"public/js/waline/waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1683854248912},{"_id":"public/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1683854248912},{"_id":"source/_posts/Echarts创建中国3D地图.md","hash":"ac1be6104399ff1945f29ce7765782be633fe401","modified":1686810286465},{"_id":"public/2023/06/15/echarts-chuang-jian-zhong-guo-3d-di-tu/index.html","hash":"51e012d78433303165ca8ca18231b2445a788c53","modified":1687659338706},{"_id":"public/archives/2023/06/index.html","hash":"c99ab4ae57688341fbc267296128fab6e4301b2a","modified":1687659338706},{"_id":"public/tags/echarts/index.html","hash":"bc9f11021962a763a2787637804a1c0e4a575f1d","modified":1687659338706},{"_id":"public/tags/vue3/index.html","hash":"c09d3940e41f0b5fd81536a23304cb357acccf44","modified":1687659338706}],"Category":[{"name":".Net","_id":"clhjvce050004hgac60u328ig"},{"name":"DB","_id":"clhjvce0a000fhgacg5uvdv59"},{"name":"Winform","parent":"clhjvce050004hgac60u328ig","_id":"clhjvce0d000lhgachyj36krd"},{"name":"前端","_id":"clhjvce0e000phgacf5tyf66b"},{"name":"后端","_id":"clhjvce0g000whgaccfj3b25g"},{"name":"Elasticsearch","parent":"clhjvce0a000fhgacg5uvdv59","_id":"clhjvce0n001ihgac9yxo5hyg"},{"name":"算法","parent":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0p0023hgac0dap1khv"},{"name":"Java","parent":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0q0027hgace9zdfdz0"},{"name":"commons-io","parent":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0t0033hgac4fq5eohh"},{"name":"Vue","parent":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce13004bhgac0fum0t0e"},{"name":"Windows","_id":"clhjvce19004uhgac4m6v1z9n"},{"name":"操作系统","_id":"clhjvce1b0052hgacc1eaa03m"},{"name":"个人","_id":"clhjvce1e005ghgacfh1m37yd"},{"name":"数据库","parent":"clhjvce19004uhgac4m6v1z9n","_id":"clhjvce1h005ohgac1ljvdym7"},{"name":"Windows","parent":"clhjvce1b0052hgacc1eaa03m","_id":"clhjvce1i005vhgacec1zguxe"},{"name":"HTML","parent":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1l0068hgac2k7w03yf"},{"name":"Vscode","_id":"clhjvce1l006dhgac2dbhgz5t"},{"name":"链接","_id":"clhjvce1l006jhgac5uce7sy6"},{"name":"插件","parent":"clhjvce1l006dhgac2dbhgz5t","_id":"clhjvce1m006ohgac1b1o242o"}],"Data":[],"Page":[{"title":"friends","date":"2023-03-15T01:58:05.000Z","onlyTitle":true,"toc":false,"_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-03-15 09:58:05\nonlyTitle: true # 只显示title\ntoc: false # 不显示文章目录\n---\n","updated":"2023-03-15T01:58:19.615Z","path":"friends/index.html","comments":1,"layout":"page","_id":"clhjvcdzy0000hgac78sd9exp","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2023-03-15T01:55:49.000Z","title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ndate: 2023-03-15 09:55:49\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-03-15T01:56:14.483Z","path":"categories/index.html","comments":1,"_id":"clhjvce030002hgacchfkf74t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-03-15T01:58:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-03-15 09:58:30\n---\n","updated":"2023-03-15T01:58:30.419Z","path":"about/index.html","comments":1,"layout":"page","_id":"clhjvce060006hgacfgn447au","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-03-15T01:56:32.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-15 09:56:32\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-03-15T01:56:42.258Z","path":"tags/index.html","comments":1,"_id":"clhjvce070008hgace1escg2m","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AutoUpdater自动更新客户端","date":"2021-03-19T03:11:06.000Z","_content":"\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n\n## 工作简介\n\n        从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n\n## XML 文件\n\n    ``` xml\n        <?xml version = \"1.0\" encoding = \"UTF-8\"?>\n        < item >\n            < version > 2.0.0.0 </ version >\n            < url > https://www.cnblogs.com</ url >\n            < changelog > https://www.cnblogs.com </ changelog >\n            < mandatory > false </ mandatory >\n        </ item >\n    ```\n\n    如上所示：\n        version(必填)：格式为X.X.X.X的版本标记。\n        url(必填)：最新版本安装程序文件的url。\n        changelog(可选)：程序更改日志的url。\n        mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n    选择使用以下代码将跳过update对话框，自动下载更新：\n\n    ``` xml\n        <mandatory mode=\"2\">true</mandatory>\n    ```\n\n        args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n        checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n    ```xml\n    <checksum algorithm=\"MD5\">Update file Checksum</checksum>\n    ```\n\n## 窗体代码\n\n    ``` c#\n    using AutoUpdaterDotNET;\n\n    private void button1_Click(object sender, EventArgs e)\n            {\n                //XML文件地址\n                AutoUpdater.Start(\"https://www.cnblogs.com\");\n            }\n    ```\n\n## 参考地址\n\n<https://github.com/ravibpatel/AutoUpdater.NET>\n","source":"_posts/AutoUpdater自动更新客户端.md","raw":"---\ntitle: AutoUpdater自动更新客户端\ndate: 2021-03-19 11:11:06\ntags:\n  - AutoUpdater\n  - 客户端\n\ncategories: [.Net, Winform]\n---\n\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n\n## 工作简介\n\n        从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n\n## XML 文件\n\n    ``` xml\n        <?xml version = \"1.0\" encoding = \"UTF-8\"?>\n        < item >\n            < version > 2.0.0.0 </ version >\n            < url > https://www.cnblogs.com</ url >\n            < changelog > https://www.cnblogs.com </ changelog >\n            < mandatory > false </ mandatory >\n        </ item >\n    ```\n\n    如上所示：\n        version(必填)：格式为X.X.X.X的版本标记。\n        url(必填)：最新版本安装程序文件的url。\n        changelog(可选)：程序更改日志的url。\n        mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n    选择使用以下代码将跳过update对话框，自动下载更新：\n\n    ``` xml\n        <mandatory mode=\"2\">true</mandatory>\n    ```\n\n        args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n        checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n    ```xml\n    <checksum algorithm=\"MD5\">Update file Checksum</checksum>\n    ```\n\n## 窗体代码\n\n    ``` c#\n    using AutoUpdaterDotNET;\n\n    private void button1_Click(object sender, EventArgs e)\n            {\n                //XML文件地址\n                AutoUpdater.Start(\"https://www.cnblogs.com\");\n            }\n    ```\n\n## 参考地址\n\n<https://github.com/ravibpatel/AutoUpdater.NET>\n","slug":"AutoUpdater自动更新客户端","published":1,"updated":"2022-10-27T06:40:13.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce000001hgacajfm2kvl","content":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n</code></pre>\n<h2 id=\"工作简介\"><a href=\"#工作简介\" class=\"headerlink\" title=\"工作简介\"></a>工作简介</h2><pre><code>    从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n</code></pre>\n<h2 id=\"XML-文件\"><a href=\"#XML-文件\" class=\"headerlink\" title=\"XML 文件\"></a>XML 文件</h2><pre><code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version = <span class=\"string\">&quot;1.0&quot;</span> encoding = <span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\">&lt; item &gt;</span><br><span class=\"line\">    &lt; version &gt; 2.0.0.0 &lt;/ version &gt;</span><br><span class=\"line\">    &lt; url &gt; https://www.cnblogs.com&lt;/ url &gt;</span><br><span class=\"line\">    &lt; changelog &gt; https://www.cnblogs.com &lt;/ changelog &gt;</span><br><span class=\"line\">    &lt; mandatory &gt; false &lt;/ mandatory &gt;</span><br><span class=\"line\">&lt;/ item &gt;</span><br></pre></td></tr></table></figure>\n\n如上所示：\n    version(必填)：格式为X.X.X.X的版本标记。\n    url(必填)：最新版本安装程序文件的url。\n    changelog(可选)：程序更改日志的url。\n    mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n选择使用以下代码将跳过update对话框，自动下载更新：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mandatory</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">mandatory</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n    args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n    checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">checksum</span> <span class=\"attr\">algorithm</span>=<span class=\"string\">&quot;MD5&quot;</span>&gt;</span>Update file Checksum<span class=\"tag\">&lt;/<span class=\"name\">checksum</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoUpdaterDotNET;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//XML文件地址</span></span><br><span class=\"line\">            AutoUpdater.Start(<span class=\"string\">&quot;https://www.cnblogs.com&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://github.com/ravibpatel/AutoUpdater.NET\">https://github.com/ravibpatel/AutoUpdater.NET</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。\n</code></pre>\n<h2 id=\"工作简介\"><a href=\"#工作简介\" class=\"headerlink\" title=\"工作简介\"></a>工作简介</h2><pre><code>    从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。\n</code></pre>\n<h2 id=\"XML-文件\"><a href=\"#XML-文件\" class=\"headerlink\" title=\"XML 文件\"></a>XML 文件</h2><pre><code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version = <span class=\"string\">&quot;1.0&quot;</span> encoding = <span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\">&lt; item &gt;</span><br><span class=\"line\">    &lt; version &gt; 2.0.0.0 &lt;/ version &gt;</span><br><span class=\"line\">    &lt; url &gt; https://www.cnblogs.com&lt;/ url &gt;</span><br><span class=\"line\">    &lt; changelog &gt; https://www.cnblogs.com &lt;/ changelog &gt;</span><br><span class=\"line\">    &lt; mandatory &gt; false &lt;/ mandatory &gt;</span><br><span class=\"line\">&lt;/ item &gt;</span><br></pre></td></tr></table></figure>\n\n如上所示：\n    version(必填)：格式为X.X.X.X的版本标记。\n    url(必填)：最新版本安装程序文件的url。\n    changelog(可选)：程序更改日志的url。\n    mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。\n选择使用以下代码将跳过update对话框，自动下载更新：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mandatory</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">mandatory</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n    args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。\n    checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">checksum</span> <span class=\"attr\">algorithm</span>=<span class=\"string\">&quot;MD5&quot;</span>&gt;</span>Update file Checksum<span class=\"tag\">&lt;/<span class=\"name\">checksum</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoUpdaterDotNET;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//XML文件地址</span></span><br><span class=\"line\">            AutoUpdater.Start(<span class=\"string\">&quot;https://www.cnblogs.com&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://github.com/ravibpatel/AutoUpdater.NET\">https://github.com/ravibpatel/AutoUpdater.NET</a></p>\n"},{"title":"CefSharp创建客户端","date":"2021-03-19T03:10:53.000Z","_content":"\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n\n## 配置工作\n\n    (1)首先右击项目选择属性，在\"生成\"选项中将\"首选32位\"勾上。\n\n    (2)其次在项目文件目录下找到\"项目名称.csproj\"文件，在第一个PropertyGroup中添加以下代码：\n\n    ``` xml\n        <CefSharpAnyCpuSupport>true</CefSharpAnyCpuSupport>\n    ```\n\n    (3)最后修改App.config文件，和<startup>标签并列地位，添加以下代码：\n\n    ``` xml\n\n    <runtime>\n        <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n            <probing privatePath=\"x86\"/>\n        </assemblyBinding>\n    </runtime>\n    ```\n\n## 窗体代码\n\n    ``` c#\n\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Windows.Forms;\n    using CefSharp;\n    using CefSharp.WinForms;\n\n    namespace embebbedChromium\n    {\n        public partial class Form1 : Form\n        {\n            public ChromiumWebBrowser chromeBrowser;\n\n            public Form1()\n            {\n                InitializeComponent();\n                // 初始化全局组件后启动浏览器\n                InitializeChromium();\n            }\n\n            private void Form1_Load(object sender, EventArgs e)\n            {\n\n            }\n\n            public void InitializeChromium()\n            {\n                CefSettings settings = new CefSettings();\n                //按照设置初始化cef\n                Cef.Initialize(settings);\n                // 创建一个浏览器组件\n                chromeBrowser = new ChromiumWebBrowser(\"http://baidu.com\");\n                // 将其添加到表单并将其填充到表单窗口\n                this.Controls.Add(chromeBrowser);\n                chromeBrowser.Dock = DockStyle.Fill;\n            }\n\n            private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n            {\n                Cef.Shutdown();\n            }\n        }\n    }\n    ```\n\n## 参考地址\n\n<https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application>\n","source":"_posts/CefSharp创建客户端.md","raw":"---\ntitle: CefSharp创建客户端\ndate: 2021-03-19 11:10:53\ntags:\n  - CefSharp\n  - 客户端\n\ncategories: [.Net, Winform]\n---\n\n## 安装 NuGet 包\n\n    在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n\n## 配置工作\n\n    (1)首先右击项目选择属性，在\"生成\"选项中将\"首选32位\"勾上。\n\n    (2)其次在项目文件目录下找到\"项目名称.csproj\"文件，在第一个PropertyGroup中添加以下代码：\n\n    ``` xml\n        <CefSharpAnyCpuSupport>true</CefSharpAnyCpuSupport>\n    ```\n\n    (3)最后修改App.config文件，和<startup>标签并列地位，添加以下代码：\n\n    ``` xml\n\n    <runtime>\n        <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n            <probing privatePath=\"x86\"/>\n        </assemblyBinding>\n    </runtime>\n    ```\n\n## 窗体代码\n\n    ``` c#\n\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Windows.Forms;\n    using CefSharp;\n    using CefSharp.WinForms;\n\n    namespace embebbedChromium\n    {\n        public partial class Form1 : Form\n        {\n            public ChromiumWebBrowser chromeBrowser;\n\n            public Form1()\n            {\n                InitializeComponent();\n                // 初始化全局组件后启动浏览器\n                InitializeChromium();\n            }\n\n            private void Form1_Load(object sender, EventArgs e)\n            {\n\n            }\n\n            public void InitializeChromium()\n            {\n                CefSettings settings = new CefSettings();\n                //按照设置初始化cef\n                Cef.Initialize(settings);\n                // 创建一个浏览器组件\n                chromeBrowser = new ChromiumWebBrowser(\"http://baidu.com\");\n                // 将其添加到表单并将其填充到表单窗口\n                this.Controls.Add(chromeBrowser);\n                chromeBrowser.Dock = DockStyle.Fill;\n            }\n\n            private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n            {\n                Cef.Shutdown();\n            }\n        }\n    }\n    ```\n\n## 参考地址\n\n<https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application>\n","slug":"CefSharp创建客户端","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce030003hgac13crgnjv","content":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n</code></pre>\n<h2 id=\"配置工作\"><a href=\"#配置工作\" class=\"headerlink\" title=\"配置工作\"></a>配置工作</h2><pre><code>(1)首先右击项目选择属性，在&quot;生成&quot;选项中将&quot;首选32位&quot;勾上。\n\n(2)其次在项目文件目录下找到&quot;项目名称.csproj&quot;文件，在第一个PropertyGroup中添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n(3)最后修改App.config文件，和&lt;startup&gt;标签并列地位，添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assemblyBinding</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">probing</span> <span class=\"attr\">privatePath</span>=<span class=\"string\">&quot;x86&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">assemblyBinding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">runtime</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Drawing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp.WinForms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">embebbedChromium</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Form1</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ChromiumWebBrowser chromeBrowser;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Form1</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化全局组件后启动浏览器</span></span><br><span class=\"line\">            InitializeChromium();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeChromium</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CefSettings settings = <span class=\"keyword\">new</span> CefSettings();</span><br><span class=\"line\">            <span class=\"comment\">//按照设置初始化cef</span></span><br><span class=\"line\">            Cef.Initialize(settings);</span><br><span class=\"line\">            <span class=\"comment\">// 创建一个浏览器组件</span></span><br><span class=\"line\">            chromeBrowser = <span class=\"keyword\">new</span> ChromiumWebBrowser(<span class=\"string\">&quot;http://baidu.com&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将其添加到表单并将其填充到表单窗口</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(chromeBrowser);</span><br><span class=\"line\">            chromeBrowser.Dock = DockStyle.Fill;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Cef.Shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application\">https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装-NuGet-包\"><a href=\"#安装-NuGet-包\" class=\"headerlink\" title=\"安装 NuGet 包\"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。\n</code></pre>\n<h2 id=\"配置工作\"><a href=\"#配置工作\" class=\"headerlink\" title=\"配置工作\"></a>配置工作</h2><pre><code>(1)首先右击项目选择属性，在&quot;生成&quot;选项中将&quot;首选32位&quot;勾上。\n\n(2)其次在项目文件目录下找到&quot;项目名称.csproj&quot;文件，在第一个PropertyGroup中添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">CefSharpAnyCpuSupport</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n(3)最后修改App.config文件，和&lt;startup&gt;标签并列地位，添加以下代码：\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assemblyBinding</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">probing</span> <span class=\"attr\">privatePath</span>=<span class=\"string\">&quot;x86&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">assemblyBinding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">runtime</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"窗体代码\"><a href=\"#窗体代码\" class=\"headerlink\" title=\"窗体代码\"></a>窗体代码</h2><pre><code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Drawing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp;</span><br><span class=\"line\"><span class=\"keyword\">using</span> CefSharp.WinForms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">embebbedChromium</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Form1</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ChromiumWebBrowser chromeBrowser;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Form1</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化全局组件后启动浏览器</span></span><br><span class=\"line\">            InitializeChromium();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeChromium</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CefSettings settings = <span class=\"keyword\">new</span> CefSettings();</span><br><span class=\"line\">            <span class=\"comment\">//按照设置初始化cef</span></span><br><span class=\"line\">            Cef.Initialize(settings);</span><br><span class=\"line\">            <span class=\"comment\">// 创建一个浏览器组件</span></span><br><span class=\"line\">            chromeBrowser = <span class=\"keyword\">new</span> ChromiumWebBrowser(<span class=\"string\">&quot;http://baidu.com&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将其添加到表单并将其填充到表单窗口</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(chromeBrowser);</span><br><span class=\"line\">            chromeBrowser.Dock = DockStyle.Fill;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Cef.Shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application\">https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application</a></p>\n"},{"title":"Elasticsearch入门","date":"2021-03-23T03:38:04.000Z","_content":"\n## Elasticsearch 简介\n\nElasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。\n\n### 应用场景\n\n- 应用或者网站的搜索框\n- 存储和分析日志、指标和安全事件数据\n- 机器学习用来实时自动模拟数据行为\n- 作为存储引擎，实现业务工作流的自动化\n- 作为地理信息系统（GIS）来管理、整合和分析空间信息\n- 作为生物信息学研究工具存储和处理遗传数据\n\n### 数据存储：文档和索引\n\nElasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。\n\nElasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。\n\n## Elasticsearch 安装\n\n### 下载\n\n下载链接 <https://www.elastic.co/cn/downloads/elasticsearch>\n\n### 安装使用\n\n直接将下载的压缩包解压，启动`bin`目录下面的`elasticsearch.bat`\n\n浏览器打开<http://localhost:9200/>查看 Elasticsearch 服务信息\n\n![avatar](https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg)\n\n### 配置远程访问\n\n打开`config`目录下的`elasticsearch.yml`配置文件\n\n`修改network.host: 你的IP地址`\n\n放开注释`#cluster.initial_master_nodes: [\"node-1\", \"node-2\"]`\n节点根据情况进行增删\n","source":"_posts/Elasticsearch入门.md","raw":"---\ntitle: Elasticsearch入门\ndate: 2021-03-23 11:38:04\ntags:\n  - Elasticsearch\n  - 笔记\ncategories: [DB, Elasticsearch]\n---\n\n## Elasticsearch 简介\n\nElasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。\n\n### 应用场景\n\n- 应用或者网站的搜索框\n- 存储和分析日志、指标和安全事件数据\n- 机器学习用来实时自动模拟数据行为\n- 作为存储引擎，实现业务工作流的自动化\n- 作为地理信息系统（GIS）来管理、整合和分析空间信息\n- 作为生物信息学研究工具存储和处理遗传数据\n\n### 数据存储：文档和索引\n\nElasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。\n\nElasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。\n\n## Elasticsearch 安装\n\n### 下载\n\n下载链接 <https://www.elastic.co/cn/downloads/elasticsearch>\n\n### 安装使用\n\n直接将下载的压缩包解压，启动`bin`目录下面的`elasticsearch.bat`\n\n浏览器打开<http://localhost:9200/>查看 Elasticsearch 服务信息\n\n![avatar](https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg)\n\n### 配置远程访问\n\n打开`config`目录下的`elasticsearch.yml`配置文件\n\n`修改network.host: 你的IP地址`\n\n放开注释`#cluster.initial_master_nodes: [\"node-1\", \"node-2\"]`\n节点根据情况进行增删\n","slug":"Elasticsearch入门","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce060007hgac8vzlcnhf","content":"<h2 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h2><p>Elasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>应用或者网站的搜索框</li>\n<li>存储和分析日志、指标和安全事件数据</li>\n<li>机器学习用来实时自动模拟数据行为</li>\n<li>作为存储引擎，实现业务工作流的自动化</li>\n<li>作为地理信息系统（GIS）来管理、整合和分析空间信息</li>\n<li>作为生物信息学研究工具存储和处理遗传数据</li>\n</ul>\n<h3 id=\"数据存储：文档和索引\"><a href=\"#数据存储：文档和索引\" class=\"headerlink\" title=\"数据存储：文档和索引\"></a>数据存储：文档和索引</h3><p>Elasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。</p>\n<p>Elasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。</p>\n<h2 id=\"Elasticsearch-安装\"><a href=\"#Elasticsearch-安装\" class=\"headerlink\" title=\"Elasticsearch 安装\"></a>Elasticsearch 安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载链接 <a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p>直接将下载的压缩包解压，启动<code>bin</code>目录下面的<code>elasticsearch.bat</code></p>\n<p>浏览器打开<a href=\"http://localhost:9200/\">http://localhost:9200/</a>查看 Elasticsearch 服务信息</p>\n<p><img src=\"https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h3><p>打开<code>config</code>目录下的<code>elasticsearch.yml</code>配置文件</p>\n<p><code>修改network.host: 你的IP地址</code></p>\n<p>放开注释<code>#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</code><br>节点根据情况进行增删</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h2><p>Elasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>应用或者网站的搜索框</li>\n<li>存储和分析日志、指标和安全事件数据</li>\n<li>机器学习用来实时自动模拟数据行为</li>\n<li>作为存储引擎，实现业务工作流的自动化</li>\n<li>作为地理信息系统（GIS）来管理、整合和分析空间信息</li>\n<li>作为生物信息学研究工具存储和处理遗传数据</li>\n</ul>\n<h3 id=\"数据存储：文档和索引\"><a href=\"#数据存储：文档和索引\" class=\"headerlink\" title=\"数据存储：文档和索引\"></a>数据存储：文档和索引</h3><p>Elasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。</p>\n<p>Elasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。</p>\n<h2 id=\"Elasticsearch-安装\"><a href=\"#Elasticsearch-安装\" class=\"headerlink\" title=\"Elasticsearch 安装\"></a>Elasticsearch 安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载链接 <a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p>直接将下载的压缩包解压，启动<code>bin</code>目录下面的<code>elasticsearch.bat</code></p>\n<p>浏览器打开<a href=\"http://localhost:9200/\">http://localhost:9200/</a>查看 Elasticsearch 服务信息</p>\n<p><img src=\"https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg\" alt=\"avatar\"></p>\n<h3 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h3><p>打开<code>config</code>目录下的<code>elasticsearch.yml</code>配置文件</p>\n<p><code>修改network.host: 你的IP地址</code></p>\n<p>放开注释<code>#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</code><br>节点根据情况进行增删</p>\n"},{"title":"Elasticsearch的倒排索引","date":"2021-03-25T07:37:40.000Z","_content":"","source":"_posts/Elasticsearch的倒排索引.md","raw":"---\ntitle: Elasticsearch的倒排索引\ndate: 2021-03-25 15:37:40\ntags:\n---\n","slug":"Elasticsearch的倒排索引","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce070009hgacg4bn6rh0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JS循环总结","date":"2022-03-26T03:07:01.000Z","_content":"\n## JS循环总结\n\n工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有`forEach`、`for in`、`for of`、`map`以及`for`，故对这些循环做些总结。\n\n### forEach（数组方法）\n\n#### 特性\n\n- 遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。\n- 没有返回值。\n- 不能使用break中断循环，不能使用return返回到外层函数。\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    let newArray = array.forEach(item => {\n        item+=1;\n        console.log(item);// 2 3 4\n    })\n    console.log(array); // [1, 2, 3]\n    console.log(newArray) // undefined\n```\n\n### for in\n\n#### 特性\n\n更适合遍历对象，可以遍历数组，但是会有一些局限性。\n\n#### 实例\n\n`for in`的索引为字符串型数字，不能直接进行几何运算\n\n```js\n    const array = [1, 2, 3];\n    for(const i in array) {\n        const res = i + 1;\n        console.log(res);\n    }\n    // 01 11 21\n```\n\n遍历顺序有可能不是按照实际数组的内部顺序，使用`for in`会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用`hasOwnProperty()`方法可以判断某属性是不是该对象的实例属性\n\n```js\n    const array = [1, 2, 3];\n    Array.prototype.a = 123;\n    for (const index in array) {\n        const res = array[index];\n        console.log(res);\n    }\n    // 1 2 3 123\n\n    for (const index in array) {\n        if (array.hasOwnProperty(index)) {\n            const res = array[index];\n            console.log(res);\n        }\n    }\n    // 1 2 3\n```\n\n### for of\n\n#### 特性\n\n- 可遍历map/objet/array/set/string等\n- 避免了`for in`的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。\n\n#### 实例\n\n`for of`是ES6的新语法，为了弥补`for in`的局限性。\n`for of`遍历的数组元素值，而且`for of`遍历的只是数组内的元素，不包括原型属性和索引\n\n```js\n    const array = [1, 2, 3];\n    array.a = 123;\n    Array.prototype.a = 123;\n    for(const value of array) {\n        console.log(value);\n    }\n    // 1 2 3\n```\n\n`for of`适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的`Object.keys()`方法\n\n```js\n    const myObject = {\n        a: 1,\n        b: 2,\n        c: 3\n    };\n    for (const key of Object.keys(myObject)) {\n        console.log(key + \"：\" + myObject[key]);\n    }\n    //> \"a：1\" \"b：2\" \"c：3\n```\n\n### map （数组方法）\n\n#### 特性\n\n- map不改变原数组但是会返回新数组\n- 可以使用break中断循环，可以使用return返回到外层函数\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    const newArray = array.map(index => {\n        return index+= 1;\n    })\n    console.log(array);// [1, 2 , 3]\n    console.log(newArray);//  [2, 3 , 4]\n```\n\n**在大地上我们只过一生。 ----叶赛宁**\n","source":"_posts/JS循环总结.md","raw":"---\ntitle: JS循环总结\ndate: 2022-03-26 11:07:01\ntags:\n    - 循环\ncategories: [前端]\n---\n\n## JS循环总结\n\n工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有`forEach`、`for in`、`for of`、`map`以及`for`，故对这些循环做些总结。\n\n### forEach（数组方法）\n\n#### 特性\n\n- 遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。\n- 没有返回值。\n- 不能使用break中断循环，不能使用return返回到外层函数。\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    let newArray = array.forEach(item => {\n        item+=1;\n        console.log(item);// 2 3 4\n    })\n    console.log(array); // [1, 2, 3]\n    console.log(newArray) // undefined\n```\n\n### for in\n\n#### 特性\n\n更适合遍历对象，可以遍历数组，但是会有一些局限性。\n\n#### 实例\n\n`for in`的索引为字符串型数字，不能直接进行几何运算\n\n```js\n    const array = [1, 2, 3];\n    for(const i in array) {\n        const res = i + 1;\n        console.log(res);\n    }\n    // 01 11 21\n```\n\n遍历顺序有可能不是按照实际数组的内部顺序，使用`for in`会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用`hasOwnProperty()`方法可以判断某属性是不是该对象的实例属性\n\n```js\n    const array = [1, 2, 3];\n    Array.prototype.a = 123;\n    for (const index in array) {\n        const res = array[index];\n        console.log(res);\n    }\n    // 1 2 3 123\n\n    for (const index in array) {\n        if (array.hasOwnProperty(index)) {\n            const res = array[index];\n            console.log(res);\n        }\n    }\n    // 1 2 3\n```\n\n### for of\n\n#### 特性\n\n- 可遍历map/objet/array/set/string等\n- 避免了`for in`的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。\n\n#### 实例\n\n`for of`是ES6的新语法，为了弥补`for in`的局限性。\n`for of`遍历的数组元素值，而且`for of`遍历的只是数组内的元素，不包括原型属性和索引\n\n```js\n    const array = [1, 2, 3];\n    array.a = 123;\n    Array.prototype.a = 123;\n    for(const value of array) {\n        console.log(value);\n    }\n    // 1 2 3\n```\n\n`for of`适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的`Object.keys()`方法\n\n```js\n    const myObject = {\n        a: 1,\n        b: 2,\n        c: 3\n    };\n    for (const key of Object.keys(myObject)) {\n        console.log(key + \"：\" + myObject[key]);\n    }\n    //> \"a：1\" \"b：2\" \"c：3\n```\n\n### map （数组方法）\n\n#### 特性\n\n- map不改变原数组但是会返回新数组\n- 可以使用break中断循环，可以使用return返回到外层函数\n\n#### 实例\n\n```js\n    const array = [1, 2, 3];\n    const newArray = array.map(index => {\n        return index+= 1;\n    })\n    console.log(array);// [1, 2 , 3]\n    console.log(newArray);//  [2, 3 , 4]\n```\n\n**在大地上我们只过一生。 ----叶赛宁**\n","slug":"JS循环总结","published":1,"updated":"2023-02-17T05:43:35.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce08000ahgacfuglcrxw","content":"<h2 id=\"JS循环总结\"><a href=\"#JS循环总结\" class=\"headerlink\" title=\"JS循环总结\"></a>JS循环总结</h2><p>工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有<code>forEach</code>、<code>for in</code>、<code>for of</code>、<code>map</code>以及<code>for</code>，故对这些循环做些总结。</p>\n<h3 id=\"forEach（数组方法）\"><a href=\"#forEach（数组方法）\" class=\"headerlink\" title=\"forEach（数组方法）\"></a>forEach（数组方法）</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。</li>\n<li>没有返回值。</li>\n<li>不能使用break中断循环，不能使用return返回到外层函数。</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArray = array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    item+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);<span class=\"comment\">// 2 3 4</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for in\"></a>for in</h3><h4 id=\"特性-1\"><a href=\"#特性-1\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>更适合遍历对象，可以遍历数组，但是会有一些局限性。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for in</code>的索引为字符串型数字，不能直接进行几何运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 01 11 21</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历顺序有可能不是按照实际数组的内部顺序，使用<code>for in</code>会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用<code>hasOwnProperty()</code>方法可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.<span class=\"title function_\">hasOwnProperty</span>(index)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-of\"><a href=\"#for-of\" class=\"headerlink\" title=\"for of\"></a>for of</h3><h4 id=\"特性-2\"><a href=\"#特性-2\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>可遍历map/objet/array/set/string等</li>\n<li>避免了<code>for in</code>的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。</li>\n</ul>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for of</code>是ES6的新语法，为了弥补<code>for in</code>的局限性。<br><code>for of</code>遍历的数组元素值，而且<code>for of</code>遍历的只是数组内的元素，不包括原型属性和索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">array.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for of</code>适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的<code>Object.keys()</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(myObject)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&quot;：&quot;</span> + myObject[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//&gt; &quot;a：1&quot; &quot;b：2&quot; &quot;c：3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map-（数组方法）\"><a href=\"#map-（数组方法）\" class=\"headerlink\" title=\"map （数组方法）\"></a>map （数组方法）</h3><h4 id=\"特性-3\"><a href=\"#特性-3\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>map不改变原数组但是会返回新数组</li>\n<li>可以使用break中断循环，可以使用return返回到外层函数</li>\n</ul>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = array.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index+= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array);<span class=\"comment\">// [1, 2 , 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray);<span class=\"comment\">//  [2, 3 , 4]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在大地上我们只过一生。 —-叶赛宁</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS循环总结\"><a href=\"#JS循环总结\" class=\"headerlink\" title=\"JS循环总结\"></a>JS循环总结</h2><p>工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有<code>forEach</code>、<code>for in</code>、<code>for of</code>、<code>map</code>以及<code>for</code>，故对这些循环做些总结。</p>\n<h3 id=\"forEach（数组方法）\"><a href=\"#forEach（数组方法）\" class=\"headerlink\" title=\"forEach（数组方法）\"></a>forEach（数组方法）</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。</li>\n<li>没有返回值。</li>\n<li>不能使用break中断循环，不能使用return返回到外层函数。</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArray = array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    item+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);<span class=\"comment\">// 2 3 4</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for in\"></a>for in</h3><h4 id=\"特性-1\"><a href=\"#特性-1\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>更适合遍历对象，可以遍历数组，但是会有一些局限性。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for in</code>的索引为字符串型数字，不能直接进行几何运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 01 11 21</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历顺序有可能不是按照实际数组的内部顺序，使用<code>for in</code>会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用<code>hasOwnProperty()</code>方法可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> index <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.<span class=\"title function_\">hasOwnProperty</span>(index)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = array[index];</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-of\"><a href=\"#for-of\" class=\"headerlink\" title=\"for of\"></a>for of</h3><h4 id=\"特性-2\"><a href=\"#特性-2\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>可遍历map/objet/array/set/string等</li>\n<li>避免了<code>for in</code>的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。</li>\n</ul>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><code>for of</code>是ES6的新语法，为了弥补<code>for in</code>的局限性。<br><code>for of</code>遍历的数组元素值，而且<code>for of</code>遍历的只是数组内的元素，不包括原型属性和索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">array.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for of</code>适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的<code>Object.keys()</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(myObject)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&quot;：&quot;</span> + myObject[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//&gt; &quot;a：1&quot; &quot;b：2&quot; &quot;c：3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map-（数组方法）\"><a href=\"#map-（数组方法）\" class=\"headerlink\" title=\"map （数组方法）\"></a>map （数组方法）</h3><h4 id=\"特性-3\"><a href=\"#特性-3\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>map不改变原数组但是会返回新数组</li>\n<li>可以使用break中断循环，可以使用return返回到外层函数</li>\n</ul>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = array.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index+= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array);<span class=\"comment\">// [1, 2 , 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArray);<span class=\"comment\">//  [2, 3 , 4]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在大地上我们只过一生。 —-叶赛宁</strong></p>\n"},{"title":"BIO/NIO/AIO对比","date":"2021-03-22T02:14:29.000Z","_content":"\n## IO 模型\n\n就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。\nJava 支持三种网络编程模型：BIO、NIO、AIO。\n\n- Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。\n\n- Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。\n\n- Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\n## BIO、NIO、AIO 使用场景\n\n- BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。\n- NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。\n- AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。\n\n## BIO 基本介绍\n\n- Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。\n- BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。\n\n### BIO 编程简要流程\n\n1. 服务器驱动一个 ServiceSocket。\n2. 客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。\n3. 客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。\n4. 如果有响应，客户端线程会等待请求结束后，再继续执行。\n\n### BIO 服务端代码案例\n\n```Java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:35:59\n */\npublic class Bio {\n\n\n    /**\n     * BIO 测试方法\n     */\n    public static void bioTest() throws IOException{\n        // 创建线程池\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        // 创建serverSocket\n        ServerSocket serverSocket = new ServerSocket(6666);\n        for (; ; ) {\n            System.out.println(\"等待连接中...\");\n            // 监听，等待客户端连接\n            Socket socket = serverSocket.accept();\n            System.out.println(\"连接到一个客户端\");\n            executorService.execute(() -> handler(socket));\n        }\n    }\n\n    /**\n     * 编写一个handler方法，和客户端通讯\n     *\n     * @param socket 套接字\n     */\n    public static void handler(Socket socket) {\n        byte[] bytes = new byte[1024];\n        System.out.println(\"当前线程信息：\" + Thread.currentThread().getName());\n        try {\n            // 通过socket获取输入流\n            InputStream inputStream = socket.getInputStream();\n            // 循环读取客户度发送的数据\n            while (inputStream.read(bytes) != -1) {\n                System.out.println(Thread.currentThread().getName() + \"：发送信息为：\" + new String(bytes, 0, bytes.length));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            System.out.println(\"关闭连接\");\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n- 启动该案例\n- 使用终端命令`telnet 127.0.0.1 6666`，打开 telnet 命令窗口\n  ![avatar](https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg)\n- 按下`ctrl+]`\n  ![avatar](https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg)\n- 输入`send hello world`，进行通信\n  ![avatar](https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg)\n- 输入`quit`退出 telnet 窗口，关闭连接\n  ![avatar](https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg)\n\n### BIO 问题分析\n\n1. 每个请求都需要创建独立的线程，与对应的客户端进行数据处理。\n2. 当并发数大时，需要创建大量线程来处理连接，系统资源占用大。\n3. 连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。\n\n## NIO 基本介绍\n\n1. Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。\n2. NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。\n3. NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。\n4. NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。\n5. Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。\n\n### NIO Buffer 的基本使用\n\n```Java\n  import java.nio.IntBuffer;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:39:49\n */\npublic class Nio {\n    /**\n     * NIO 测试方法\n     */\n    public static void nioTest() {\n        //同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer\n        //创建一个Buffer，大小为5\n        IntBuffer buffer = IntBuffer.allocate(5);\n        // 存放数据\n        int size = buffer.capacity();\n        for (int i = 0; i < size; i++) {\n            buffer.put(i);\n        }\n        // 切换成读模式，读写切换\n        buffer.flip();\n        while (buffer.hasRemaining()) {\n            System.out.println(buffer.get());\n        }\n    }\n\n}\n```\n\n### NIO 三大核心组件关系\n\n![avatar](https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png)\n\n#### 说明\n\n1. 每个 Channel 对应一个 Buffer。\n2. Selector 对应一个线程，一个线程对应多个 Channel。\n3. 该图反应了有三个 Channel 注册到该 Selector。\n4. 该程序切换到哪个 Channel 是由事件决定的（Event）。\n5. Selector 会根据不同的事件，在各个通道上切换。\n6. Buffer 就是一个内存块，底层是一个数组。\n7. 数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO\n\n### NIO 三大核心理解\n\n![avatar](https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg)\n\n#### Buffer 的机制及子类\n\n##### Buffer（缓冲区）基本介绍\n\n缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。\nChannel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。\n在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：\n\n```Java\npublic abstract class IntBuffer\n    extends Buffer\n    implements Comparable<IntBuffer>\n{\n\n    // These fields are declared here rather than in Heap-X-Buffer in order to\n    // reduce the number of virtual method invocations needed to access these\n    // values, which is especially costly when coding small buffers.\n    //\n    final int[] hb;                  // Non-null only for heap buffers\n    final int offset;\n    boolean isReadOnly;                 // Valid only for heap buffers\n\n    // Creates a new buffer with the given mark, position, limit, capacity,\n    // backing array, and array offset\n    //\n    IntBuffer(int mark, int pos, int lim, int cap,   // package-private\n                 int[] hb, int offset)\n    {\n        super(mark, pos, lim, cap);\n        this.hb = hb;\n        this.offset = offset;\n    }\n\n    // Creates a new buffer with the given mark, position, limit, and capacity\n    //\n    IntBuffer(int mark, int pos, int lim, int cap) { // package-private\n        this(mark, pos, lim, cap, null, 0);\n    }\n}\n```\n\n| Buffer 常用子类 | 描述                   |\n| --------------- | ---------------------- |\n| ByteBuffer      | 存储字节数据到缓冲区   |\n| ShortBuffer     | 存储字符创数据到缓冲区 |\n| CharBuffer      | 存储字符数据到缓冲区   |\n| IntBuffer       | 存储整数数据到缓冲区   |\n| LongBuffer      | 存储长整型数据到缓冲区 |\n| DoubleBuffer    | 存储浮点型数据到缓冲区 |\n| FloatBuffer     | 存储浮点型数据到缓冲区 |\n\nBuffer 中定义了四个属性来提供所有其包含的数据元素。\n\n```Java\n  // Invariants: mark <= position <= limit <= capacity\n  private int mark = -1;\n  private int position = 0;\n  private int limit;\n  private int capacity;\n```\n\n| 属性     | 描述                                                                                 |\n| -------- | ------------------------------------------------------------------------------------ |\n| capacity | 容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改                     |\n| limit    | 表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的     |\n| position | 当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备 |\n| Mark     | 标记当前 position 位置，当 reset 后回到标记位置                                      |\n\n#### Channel 的基本介绍\n\nNIO 的通道类似于流，但有如下区别：\n\n1. 通道是双向的可以进行读写，而流是单向的只能读，或者写。\n2. 通道可以实现已读读取数据。\n3. 通道可以从缓冲区读取数据，也可以写入数据到缓冲区。\n\n常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel\n\n##### FileChannel 类\n\nFileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：\n\n1. 使用 FileChannel 写入文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel写入文本文件\n     */\n    public static void nioFileChannelWrite() throws IOException {\n        String writeStr = \"Hello, Java菜鸟程序员\";\n        // 创建一个输出流\n        FileOutputStream fileOutputStream = new FileOutputStream(\"hello.txt\");\n        // 获取通道\n        FileChannel channel = fileOutputStream.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        // 写入byteBuffer\n        byteBuffer.put(writeStr.getBytes());\n        // 切换模式\n        byteBuffer.flip();\n        // 写入通道\n        channel.write(byteBuffer);\n        // 关闭\n        channel.close();\n        fileOutputStream.close();\n    }\n   ```\n\n2. 使用 FileChannel 读取文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel 读取文本文件\n     */\n    public static void nioFileChannelRead() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileChannel channel = fileInputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        channel.read(byteBuffer);\n        System.out.println(new String(byteBuffer.array(), 0, byteBuffer.limit()));\n        channel.close();\n        fileInputStream.close();\n    }\n   ```\n\n3. 使用 FileChannel 复制文件\n\n   ```Java\n    /**\n     * 使用FileChannel复制文件\n     */\n    public static void nioFileChannelCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1);\n        while (inChannel.read(byteBuffer) != -1){\n            byteBuffer.flip();\n            outChannel.write(byteBuffer);\n            // 清空重置\n            byteBuffer.clear();\n        }\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n4. 使用 transferFrom 复制文件\n\n   ```Java\n   /**\n     * 使用transferFrom复制文件\n     */\n    public static void nioTransferFromCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        // 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\n        outChannel.close();\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n##### Channel 和 Buffer 的注意事项\n\n1. ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。\n2. 可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。\n3. NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。\n4. NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。\n   - Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。\n   - Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。\n\n#### Selector 的基本介绍\n\n1. Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。\n2. Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。\n3. 只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。\n4. 避免了多线程之间上下文切换导致的开销。\n\n##### Selector 特点\n\nNetty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。\n\n当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。\n\n线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。\n\n由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。\n\n一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。\n\n##### Selector 常用方法\n\n```Java\npublic abstract class Selector implement Closeable{\n  public static Selector open(); // 得到一个选择器对象\n  public int select(long timeout); // 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间\n  public Set<SelectionKey> selectionKeys(); // 从内部集合中得到所有的SelectionKey\n}\n```\n\n##### Selector 相关方法说明\n\n- selector.select()：若监听到注册管道中有事件，则持续阻塞\n- selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回\n- selector.wakeup()：换线 selector\n- selector.selectNow()：不阻塞，立即返回\n\n#### NIO 非阻塞网络编程过程分析\n\n1. 当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。\n2. Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。\n3. 将 socketChannel 注册到 Selector 上，`public final SelectionKey register(Selector sel, int ops)`，一个 selector 上可以注册多个 SocketChannel。\n4. 注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。\n5. 进一步得到各个 SelectionKey，有事件发生。\n6. 再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。\n7. 可以通过得到的 channel，完成业务处理。\n\nSelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。\n\n##### SelectionKey 相关方法\n\n| 方法                                               | 描述                         |\n| -------------------------------------------------- | ---------------------------- |\n| public abstract Selector selector();               | 得到与之关联的 Selector 对象 |\n| public abstract SelectableChannel channel();       | 得到与之关联的通道           |\n| public final Object attachment();                  | 得到与之关联的共享数据       |\n| public abstract SelectionKey interestOps(int ops); | 设置或改变监听的事件类型     |\n| public final boolean isReadable();                 | 通道是否可读                 |\n| public final boolean usWritable();                 | 通道是否可写                 |\n| public final boolean isAcceptable();               | 是否可以建立连接 ACCEPT      |\n\n### NIO 和 BIO 对比\n\n1. BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。\n2. BIO 是阻塞的，而 NIO 是非阻塞的。\n3. BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。\n\n### AIO 基本介绍\n\nJDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。\n\nAIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。\n\nReactor 和 Proactor\n\n- 两种 IO 多路复用方案：Reactor and Proactor。\n- Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。\n","source":"_posts/BIO-NIO-AIO对比.md","raw":"---\ntitle: BIO/NIO/AIO对比\ndate: 2021-03-22 10:14:29\ntags:\n  - IO模型\ncategories: [后端, Java]\n---\n\n## IO 模型\n\n就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。\nJava 支持三种网络编程模型：BIO、NIO、AIO。\n\n- Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。\n\n- Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。\n\n- Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\n## BIO、NIO、AIO 使用场景\n\n- BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。\n- NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。\n- AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。\n\n## BIO 基本介绍\n\n- Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。\n- BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。\n\n### BIO 编程简要流程\n\n1. 服务器驱动一个 ServiceSocket。\n2. 客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。\n3. 客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。\n4. 如果有响应，客户端线程会等待请求结束后，再继续执行。\n\n### BIO 服务端代码案例\n\n```Java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:35:59\n */\npublic class Bio {\n\n\n    /**\n     * BIO 测试方法\n     */\n    public static void bioTest() throws IOException{\n        // 创建线程池\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        // 创建serverSocket\n        ServerSocket serverSocket = new ServerSocket(6666);\n        for (; ; ) {\n            System.out.println(\"等待连接中...\");\n            // 监听，等待客户端连接\n            Socket socket = serverSocket.accept();\n            System.out.println(\"连接到一个客户端\");\n            executorService.execute(() -> handler(socket));\n        }\n    }\n\n    /**\n     * 编写一个handler方法，和客户端通讯\n     *\n     * @param socket 套接字\n     */\n    public static void handler(Socket socket) {\n        byte[] bytes = new byte[1024];\n        System.out.println(\"当前线程信息：\" + Thread.currentThread().getName());\n        try {\n            // 通过socket获取输入流\n            InputStream inputStream = socket.getInputStream();\n            // 循环读取客户度发送的数据\n            while (inputStream.read(bytes) != -1) {\n                System.out.println(Thread.currentThread().getName() + \"：发送信息为：\" + new String(bytes, 0, bytes.length));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            System.out.println(\"关闭连接\");\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n- 启动该案例\n- 使用终端命令`telnet 127.0.0.1 6666`，打开 telnet 命令窗口\n  ![avatar](https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg)\n- 按下`ctrl+]`\n  ![avatar](https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg)\n- 输入`send hello world`，进行通信\n  ![avatar](https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg)\n- 输入`quit`退出 telnet 窗口，关闭连接\n  ![avatar](https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg)\n\n### BIO 问题分析\n\n1. 每个请求都需要创建独立的线程，与对应的客户端进行数据处理。\n2. 当并发数大时，需要创建大量线程来处理连接，系统资源占用大。\n3. 连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。\n\n## NIO 基本介绍\n\n1. Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。\n2. NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。\n3. NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。\n4. NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。\n5. Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。\n\n### NIO Buffer 的基本使用\n\n```Java\n  import java.nio.IntBuffer;\n\n/**\n * @author zhkai\n * @date 2021年3月22日14:39:49\n */\npublic class Nio {\n    /**\n     * NIO 测试方法\n     */\n    public static void nioTest() {\n        //同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer\n        //创建一个Buffer，大小为5\n        IntBuffer buffer = IntBuffer.allocate(5);\n        // 存放数据\n        int size = buffer.capacity();\n        for (int i = 0; i < size; i++) {\n            buffer.put(i);\n        }\n        // 切换成读模式，读写切换\n        buffer.flip();\n        while (buffer.hasRemaining()) {\n            System.out.println(buffer.get());\n        }\n    }\n\n}\n```\n\n### NIO 三大核心组件关系\n\n![avatar](https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png)\n\n#### 说明\n\n1. 每个 Channel 对应一个 Buffer。\n2. Selector 对应一个线程，一个线程对应多个 Channel。\n3. 该图反应了有三个 Channel 注册到该 Selector。\n4. 该程序切换到哪个 Channel 是由事件决定的（Event）。\n5. Selector 会根据不同的事件，在各个通道上切换。\n6. Buffer 就是一个内存块，底层是一个数组。\n7. 数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO\n\n### NIO 三大核心理解\n\n![avatar](https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg)\n\n#### Buffer 的机制及子类\n\n##### Buffer（缓冲区）基本介绍\n\n缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。\nChannel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。\n在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：\n\n```Java\npublic abstract class IntBuffer\n    extends Buffer\n    implements Comparable<IntBuffer>\n{\n\n    // These fields are declared here rather than in Heap-X-Buffer in order to\n    // reduce the number of virtual method invocations needed to access these\n    // values, which is especially costly when coding small buffers.\n    //\n    final int[] hb;                  // Non-null only for heap buffers\n    final int offset;\n    boolean isReadOnly;                 // Valid only for heap buffers\n\n    // Creates a new buffer with the given mark, position, limit, capacity,\n    // backing array, and array offset\n    //\n    IntBuffer(int mark, int pos, int lim, int cap,   // package-private\n                 int[] hb, int offset)\n    {\n        super(mark, pos, lim, cap);\n        this.hb = hb;\n        this.offset = offset;\n    }\n\n    // Creates a new buffer with the given mark, position, limit, and capacity\n    //\n    IntBuffer(int mark, int pos, int lim, int cap) { // package-private\n        this(mark, pos, lim, cap, null, 0);\n    }\n}\n```\n\n| Buffer 常用子类 | 描述                   |\n| --------------- | ---------------------- |\n| ByteBuffer      | 存储字节数据到缓冲区   |\n| ShortBuffer     | 存储字符创数据到缓冲区 |\n| CharBuffer      | 存储字符数据到缓冲区   |\n| IntBuffer       | 存储整数数据到缓冲区   |\n| LongBuffer      | 存储长整型数据到缓冲区 |\n| DoubleBuffer    | 存储浮点型数据到缓冲区 |\n| FloatBuffer     | 存储浮点型数据到缓冲区 |\n\nBuffer 中定义了四个属性来提供所有其包含的数据元素。\n\n```Java\n  // Invariants: mark <= position <= limit <= capacity\n  private int mark = -1;\n  private int position = 0;\n  private int limit;\n  private int capacity;\n```\n\n| 属性     | 描述                                                                                 |\n| -------- | ------------------------------------------------------------------------------------ |\n| capacity | 容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改                     |\n| limit    | 表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的     |\n| position | 当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备 |\n| Mark     | 标记当前 position 位置，当 reset 后回到标记位置                                      |\n\n#### Channel 的基本介绍\n\nNIO 的通道类似于流，但有如下区别：\n\n1. 通道是双向的可以进行读写，而流是单向的只能读，或者写。\n2. 通道可以实现已读读取数据。\n3. 通道可以从缓冲区读取数据，也可以写入数据到缓冲区。\n\n常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel\n\n##### FileChannel 类\n\nFileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：\n\n1. 使用 FileChannel 写入文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel写入文本文件\n     */\n    public static void nioFileChannelWrite() throws IOException {\n        String writeStr = \"Hello, Java菜鸟程序员\";\n        // 创建一个输出流\n        FileOutputStream fileOutputStream = new FileOutputStream(\"hello.txt\");\n        // 获取通道\n        FileChannel channel = fileOutputStream.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        // 写入byteBuffer\n        byteBuffer.put(writeStr.getBytes());\n        // 切换模式\n        byteBuffer.flip();\n        // 写入通道\n        channel.write(byteBuffer);\n        // 关闭\n        channel.close();\n        fileOutputStream.close();\n    }\n   ```\n\n2. 使用 FileChannel 读取文本文件\n\n   ```Java\n   /**\n     * 使用FileChannel 读取文本文件\n     */\n    public static void nioFileChannelRead() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileChannel channel = fileInputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n        channel.read(byteBuffer);\n        System.out.println(new String(byteBuffer.array(), 0, byteBuffer.limit()));\n        channel.close();\n        fileInputStream.close();\n    }\n   ```\n\n3. 使用 FileChannel 复制文件\n\n   ```Java\n    /**\n     * 使用FileChannel复制文件\n     */\n    public static void nioFileChannelCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1);\n        while (inChannel.read(byteBuffer) != -1){\n            byteBuffer.flip();\n            outChannel.write(byteBuffer);\n            // 清空重置\n            byteBuffer.clear();\n        }\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n4. 使用 transferFrom 复制文件\n\n   ```Java\n   /**\n     * 使用transferFrom复制文件\n     */\n    public static void nioTransferFromCopy() throws IOException{\n        FileInputStream fileInputStream = new FileInputStream(\"hello.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(\"world.txt\");\n        FileChannel inChannel = fileInputStream.getChannel();\n        FileChannel outChannel = fileOutputStream.getChannel();\n        // 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\n        outChannel.close();\n        fileOutputStream.close();\n        fileInputStream.close();\n    }\n   ```\n\n##### Channel 和 Buffer 的注意事项\n\n1. ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。\n2. 可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。\n3. NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。\n4. NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。\n   - Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。\n   - Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。\n\n#### Selector 的基本介绍\n\n1. Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。\n2. Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。\n3. 只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。\n4. 避免了多线程之间上下文切换导致的开销。\n\n##### Selector 特点\n\nNetty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。\n\n当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。\n\n线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。\n\n由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。\n\n一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。\n\n##### Selector 常用方法\n\n```Java\npublic abstract class Selector implement Closeable{\n  public static Selector open(); // 得到一个选择器对象\n  public int select(long timeout); // 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间\n  public Set<SelectionKey> selectionKeys(); // 从内部集合中得到所有的SelectionKey\n}\n```\n\n##### Selector 相关方法说明\n\n- selector.select()：若监听到注册管道中有事件，则持续阻塞\n- selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回\n- selector.wakeup()：换线 selector\n- selector.selectNow()：不阻塞，立即返回\n\n#### NIO 非阻塞网络编程过程分析\n\n1. 当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。\n2. Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。\n3. 将 socketChannel 注册到 Selector 上，`public final SelectionKey register(Selector sel, int ops)`，一个 selector 上可以注册多个 SocketChannel。\n4. 注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。\n5. 进一步得到各个 SelectionKey，有事件发生。\n6. 再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。\n7. 可以通过得到的 channel，完成业务处理。\n\nSelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。\n\n##### SelectionKey 相关方法\n\n| 方法                                               | 描述                         |\n| -------------------------------------------------- | ---------------------------- |\n| public abstract Selector selector();               | 得到与之关联的 Selector 对象 |\n| public abstract SelectableChannel channel();       | 得到与之关联的通道           |\n| public final Object attachment();                  | 得到与之关联的共享数据       |\n| public abstract SelectionKey interestOps(int ops); | 设置或改变监听的事件类型     |\n| public final boolean isReadable();                 | 通道是否可读                 |\n| public final boolean usWritable();                 | 通道是否可写                 |\n| public final boolean isAcceptable();               | 是否可以建立连接 ACCEPT      |\n\n### NIO 和 BIO 对比\n\n1. BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。\n2. BIO 是阻塞的，而 NIO 是非阻塞的。\n3. BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。\n\n### AIO 基本介绍\n\nJDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。\n\nAIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。\n\nReactor 和 Proactor\n\n- 两种 IO 多路复用方案：Reactor and Proactor。\n- Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。\n","slug":"BIO-NIO-AIO对比","published":1,"updated":"2022-10-27T06:40:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce09000dhgacgmo1fdr7","content":"<h2 id=\"IO-模型\"><a href=\"#IO-模型\" class=\"headerlink\" title=\"IO 模型\"></a>IO 模型</h2><p>就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br>Java 支持三种网络编程模型：BIO、NIO、AIO。</p>\n<ul>\n<li><p>Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。</p>\n</li>\n<li><p>Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。</p>\n</li>\n<li><p>Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n</li>\n</ul>\n<h2 id=\"BIO、NIO、AIO-使用场景\"><a href=\"#BIO、NIO、AIO-使用场景\" class=\"headerlink\" title=\"BIO、NIO、AIO 使用场景\"></a>BIO、NIO、AIO 使用场景</h2><ul>\n<li>BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。</li>\n<li>NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。</li>\n<li>AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</li>\n</ul>\n<h2 id=\"BIO-基本介绍\"><a href=\"#BIO-基本介绍\" class=\"headerlink\" title=\"BIO 基本介绍\"></a>BIO 基本介绍</h2><ul>\n<li>Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。</li>\n<li>BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。</li>\n</ul>\n<h3 id=\"BIO-编程简要流程\"><a href=\"#BIO-编程简要流程\" class=\"headerlink\" title=\"BIO 编程简要流程\"></a>BIO 编程简要流程</h3><ol>\n<li>服务器驱动一个 ServiceSocket。</li>\n<li>客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。</li>\n<li>客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。</li>\n<li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li>\n</ol>\n<h3 id=\"BIO-服务端代码案例\"><a href=\"#BIO-服务端代码案例\" class=\"headerlink\" title=\"BIO 服务端代码案例\"></a>BIO 服务端代码案例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:35:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bio</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * BIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bioTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"comment\">// 创建serverSocket</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">6666</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;等待连接中...&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 监听，等待客户端连接</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;连接到一个客户端&quot;</span>);</span><br><span class=\"line\">            executorService.execute(() -&gt; handler(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写一个handler方法，和客户端通讯</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> socket 套接字</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handler</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程信息：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过socket获取输入流</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"comment\">// 循环读取客户度发送的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inputStream.read(bytes) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;：发送信息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, bytes.length));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;关闭连接&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动该案例</li>\n<li>使用终端命令<code>telnet 127.0.0.1 6666</code>，打开 telnet 命令窗口<br><img src=\"https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n<li>按下<code>ctrl+]</code><br><img src=\"https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n<li>输入<code>send hello world</code>，进行通信<br><img src=\"https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n<li>输入<code>quit</code>退出 telnet 窗口，关闭连接<br><img src=\"https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></li>\n</ul>\n<h3 id=\"BIO-问题分析\"><a href=\"#BIO-问题分析\" class=\"headerlink\" title=\"BIO 问题分析\"></a>BIO 问题分析</h3><ol>\n<li>每个请求都需要创建独立的线程，与对应的客户端进行数据处理。</li>\n<li>当并发数大时，需要创建大量线程来处理连接，系统资源占用大。</li>\n<li>连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。</li>\n</ol>\n<h2 id=\"NIO-基本介绍\"><a href=\"#NIO-基本介绍\" class=\"headerlink\" title=\"NIO 基本介绍\"></a>NIO 基本介绍</h2><ol>\n<li>Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。</li>\n<li>NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。</li>\n<li>NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。</li>\n<li>NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。</li>\n<li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。</li>\n</ol>\n<h3 id=\"NIO-Buffer-的基本使用\"><a href=\"#NIO-Buffer-的基本使用\" class=\"headerlink\" title=\"NIO Buffer 的基本使用\"></a>NIO Buffer 的基本使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> java.nio.IntBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:39:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Nio</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * NIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个Buffer，大小为5</span></span><br><span class=\"line\">        <span class=\"type\">IntBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> IntBuffer.allocate(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 存放数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> buffer.capacity();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            buffer.put(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 切换成读模式，读写切换</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.println(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NIO-三大核心组件关系\"><a href=\"#NIO-三大核心组件关系\" class=\"headerlink\" title=\"NIO 三大核心组件关系\"></a>NIO 三大核心组件关系</h3><p><img src=\"https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>该图反应了有三个 Channel 注册到该 Selector。</li>\n<li>该程序切换到哪个 Channel 是由事件决定的（Event）。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 就是一个内存块，底层是一个数组。</li>\n<li>数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO</li>\n</ol>\n<h3 id=\"NIO-三大核心理解\"><a href=\"#NIO-三大核心理解\" class=\"headerlink\" title=\"NIO 三大核心理解\"></a>NIO 三大核心理解</h3><p><img src=\"https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"Buffer-的机制及子类\"><a href=\"#Buffer-的机制及子类\" class=\"headerlink\" title=\"Buffer 的机制及子类\"></a>Buffer 的机制及子类</h4><h5 id=\"Buffer（缓冲区）基本介绍\"><a href=\"#Buffer（缓冲区）基本介绍\" class=\"headerlink\" title=\"Buffer（缓冲区）基本介绍\"></a>Buffer（缓冲区）基本介绍</h5><p>缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。<br>Channel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。<br>在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">Buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;IntBuffer&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These fields are declared here rather than in Heap-X-Buffer in order to</span></span><br><span class=\"line\">    <span class=\"comment\">// reduce the number of virtual method invocations needed to access these</span></span><br><span class=\"line\">    <span class=\"comment\">// values, which is especially costly when coding small buffers.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] hb;                  <span class=\"comment\">// Non-null only for heap buffers</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> offset;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> isReadOnly;                 <span class=\"comment\">// Valid only for heap buffers</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, capacity,</span></span><br><span class=\"line\">    <span class=\"comment\">// backing array, and array offset</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap,   <span class=\"comment\">// package-private</span></span><br><span class=\"line\">                 <span class=\"type\">int</span>[] hb, <span class=\"type\">int</span> offset)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(mark, pos, lim, cap);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hb = hb;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.offset = offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, and capacity</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap) &#123; <span class=\"comment\">// package-private</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(mark, pos, lim, cap, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Buffer 常用子类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ByteBuffer</td>\n<td>存储字节数据到缓冲区</td>\n</tr>\n<tr>\n<td>ShortBuffer</td>\n<td>存储字符创数据到缓冲区</td>\n</tr>\n<tr>\n<td>CharBuffer</td>\n<td>存储字符数据到缓冲区</td>\n</tr>\n<tr>\n<td>IntBuffer</td>\n<td>存储整数数据到缓冲区</td>\n</tr>\n<tr>\n<td>LongBuffer</td>\n<td>存储长整型数据到缓冲区</td>\n</tr>\n<tr>\n<td>DoubleBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n<tr>\n<td>FloatBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n</tbody></table>\n<p>Buffer 中定义了四个属性来提供所有其包含的数据元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">mark</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> limit;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> capacity;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>capacity</td>\n<td>容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的</td>\n</tr>\n<tr>\n<td>position</td>\n<td>当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>标记当前 position 位置，当 reset 后回到标记位置</td>\n</tr>\n</tbody></table>\n<h4 id=\"Channel-的基本介绍\"><a href=\"#Channel-的基本介绍\" class=\"headerlink\" title=\"Channel 的基本介绍\"></a>Channel 的基本介绍</h4><p>NIO 的通道类似于流，但有如下区别：</p>\n<ol>\n<li>通道是双向的可以进行读写，而流是单向的只能读，或者写。</li>\n<li>通道可以实现已读读取数据。</li>\n<li>通道可以从缓冲区读取数据，也可以写入数据到缓冲区。</li>\n</ol>\n<p>常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel</p>\n<h5 id=\"FileChannel-类\"><a href=\"#FileChannel-类\" class=\"headerlink\" title=\"FileChannel 类\"></a>FileChannel 类</h5><p>FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：</p>\n<ol>\n<li><p>使用 FileChannel 写入文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel写入文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelWrite</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">writeStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, Java菜鸟程序员&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 创建一个输出流</span></span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 写入byteBuffer</span></span><br><span class=\"line\">     byteBuffer.put(writeStr.getBytes());</span><br><span class=\"line\">     <span class=\"comment\">// 切换模式</span></span><br><span class=\"line\">     byteBuffer.flip();</span><br><span class=\"line\">     <span class=\"comment\">// 写入通道</span></span><br><span class=\"line\">     channel.write(byteBuffer);</span><br><span class=\"line\">     <span class=\"comment\">// 关闭</span></span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 读取文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel 读取文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelRead</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     channel.read(byteBuffer);</span><br><span class=\"line\">     System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(byteBuffer.array(), <span class=\"number\">0</span>, byteBuffer.limit()));</span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用FileChannel复制文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (inChannel.read(byteBuffer) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        outChannel.write(byteBuffer);</span><br><span class=\"line\">        <span class=\"comment\">// 清空重置</span></span><br><span class=\"line\">        byteBuffer.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileOutputStream.close();</span><br><span class=\"line\">    fileInputStream.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 transferFrom 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用transferFrom复制文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTransferFromCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法</span></span><br><span class=\"line\">     outChannel.transferFrom(inChannel, <span class=\"number\">0</span>, inChannel.size());</span><br><span class=\"line\">     outChannel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"Channel-和-Buffer-的注意事项\"><a href=\"#Channel-和-Buffer-的注意事项\" class=\"headerlink\" title=\"Channel 和 Buffer 的注意事项\"></a>Channel 和 Buffer 的注意事项</h5><ol>\n<li>ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。</li>\n<li>可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。</li>\n<li>NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。</li>\n<li>NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。<ul>\n<li>Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。</li>\n<li>Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Selector-的基本介绍\"><a href=\"#Selector-的基本介绍\" class=\"headerlink\" title=\"Selector 的基本介绍\"></a>Selector 的基本介绍</h4><ol>\n<li>Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。</li>\n<li>Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。</li>\n<li>只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。</li>\n<li>避免了多线程之间上下文切换导致的开销。</li>\n</ol>\n<h5 id=\"Selector-特点\"><a href=\"#Selector-特点\" class=\"headerlink\" title=\"Selector 特点\"></a>Selector 特点</h5><p>Netty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。</p>\n<p>当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。</p>\n<p>线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。</p>\n<p>由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。</p>\n<p>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。</p>\n<h5 id=\"Selector-常用方法\"><a href=\"#Selector-常用方法\" class=\"headerlink\" title=\"Selector 常用方法\"></a>Selector 常用方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Selector</span> implement Closeable&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Selector <span class=\"title function_\">open</span><span class=\"params\">()</span>; <span class=\"comment\">// 得到一个选择器对象</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span>; <span class=\"comment\">// 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;SelectionKey&gt; <span class=\"title function_\">selectionKeys</span><span class=\"params\">()</span>; <span class=\"comment\">// 从内部集合中得到所有的SelectionKey</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Selector-相关方法说明\"><a href=\"#Selector-相关方法说明\" class=\"headerlink\" title=\"Selector 相关方法说明\"></a>Selector 相关方法说明</h5><ul>\n<li>selector.select()：若监听到注册管道中有事件，则持续阻塞</li>\n<li>selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回</li>\n<li>selector.wakeup()：换线 selector</li>\n<li>selector.selectNow()：不阻塞，立即返回</li>\n</ul>\n<h4 id=\"NIO-非阻塞网络编程过程分析\"><a href=\"#NIO-非阻塞网络编程过程分析\" class=\"headerlink\" title=\"NIO 非阻塞网络编程过程分析\"></a>NIO 非阻塞网络编程过程分析</h4><ol>\n<li>当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。</li>\n<li>Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。</li>\n<li>将 socketChannel 注册到 Selector 上，<code>public final SelectionKey register(Selector sel, int ops)</code>，一个 selector 上可以注册多个 SocketChannel。</li>\n<li>注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。</li>\n<li>进一步得到各个 SelectionKey，有事件发生。</li>\n<li>再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。</li>\n<li>可以通过得到的 channel，完成业务处理。</li>\n</ol>\n<p>SelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。</p>\n<h5 id=\"SelectionKey-相关方法\"><a href=\"#SelectionKey-相关方法\" class=\"headerlink\" title=\"SelectionKey 相关方法\"></a>SelectionKey 相关方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public abstract Selector selector();</td>\n<td>得到与之关联的 Selector 对象</td>\n</tr>\n<tr>\n<td>public abstract SelectableChannel channel();</td>\n<td>得到与之关联的通道</td>\n</tr>\n<tr>\n<td>public final Object attachment();</td>\n<td>得到与之关联的共享数据</td>\n</tr>\n<tr>\n<td>public abstract SelectionKey interestOps(int ops);</td>\n<td>设置或改变监听的事件类型</td>\n</tr>\n<tr>\n<td>public final boolean isReadable();</td>\n<td>通道是否可读</td>\n</tr>\n<tr>\n<td>public final boolean usWritable();</td>\n<td>通道是否可写</td>\n</tr>\n<tr>\n<td>public final boolean isAcceptable();</td>\n<td>是否可以建立连接 ACCEPT</td>\n</tr>\n</tbody></table>\n<h3 id=\"NIO-和-BIO-对比\"><a href=\"#NIO-和-BIO-对比\" class=\"headerlink\" title=\"NIO 和 BIO 对比\"></a>NIO 和 BIO 对比</h3><ol>\n<li>BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。</li>\n<li>BIO 是阻塞的，而 NIO 是非阻塞的。</li>\n<li>BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</li>\n</ol>\n<h3 id=\"AIO-基本介绍\"><a href=\"#AIO-基本介绍\" class=\"headerlink\" title=\"AIO 基本介绍\"></a>AIO 基本介绍</h3><p>JDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。</p>\n<p>AIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。</p>\n<p>Reactor 和 Proactor</p>\n<ul>\n<li>两种 IO 多路复用方案：Reactor and Proactor。</li>\n<li>Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IO-模型\"><a href=\"#IO-模型\" class=\"headerlink\" title=\"IO 模型\"></a>IO 模型</h2><p>就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br>Java 支持三种网络编程模型：BIO、NIO、AIO。</p>\n<ul>\n<li><p>Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。</p>\n</li>\n<li><p>Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。</p>\n</li>\n<li><p>Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n</li>\n</ul>\n<h2 id=\"BIO、NIO、AIO-使用场景\"><a href=\"#BIO、NIO、AIO-使用场景\" class=\"headerlink\" title=\"BIO、NIO、AIO 使用场景\"></a>BIO、NIO、AIO 使用场景</h2><ul>\n<li>BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。</li>\n<li>NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。</li>\n<li>AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</li>\n</ul>\n<h2 id=\"BIO-基本介绍\"><a href=\"#BIO-基本介绍\" class=\"headerlink\" title=\"BIO 基本介绍\"></a>BIO 基本介绍</h2><ul>\n<li>Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。</li>\n<li>BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。</li>\n</ul>\n<h3 id=\"BIO-编程简要流程\"><a href=\"#BIO-编程简要流程\" class=\"headerlink\" title=\"BIO 编程简要流程\"></a>BIO 编程简要流程</h3><ol>\n<li>服务器驱动一个 ServiceSocket。</li>\n<li>客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。</li>\n<li>客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。</li>\n<li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li>\n</ol>\n<h3 id=\"BIO-服务端代码案例\"><a href=\"#BIO-服务端代码案例\" class=\"headerlink\" title=\"BIO 服务端代码案例\"></a>BIO 服务端代码案例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:35:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bio</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * BIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bioTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"comment\">// 创建serverSocket</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">6666</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;等待连接中...&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 监听，等待客户端连接</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;连接到一个客户端&quot;</span>);</span><br><span class=\"line\">            executorService.execute(() -&gt; handler(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写一个handler方法，和客户端通讯</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> socket 套接字</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handler</span><span class=\"params\">(Socket socket)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程信息：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过socket获取输入流</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"comment\">// 循环读取客户度发送的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inputStream.read(bytes) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;：发送信息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, bytes.length));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;关闭连接&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动该案例</li>\n<li>使用终端命令<code>telnet 127.0.0.1 6666</code>，打开 telnet 命令窗口<br><img src=\"https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg\" alt=\"avatar\"></li>\n<li>按下<code>ctrl+]</code><br><img src=\"https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg\" alt=\"avatar\"></li>\n<li>输入<code>send hello world</code>，进行通信<br><img src=\"https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg\" alt=\"avatar\"></li>\n<li>输入<code>quit</code>退出 telnet 窗口，关闭连接<br><img src=\"https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg\" alt=\"avatar\"></li>\n</ul>\n<h3 id=\"BIO-问题分析\"><a href=\"#BIO-问题分析\" class=\"headerlink\" title=\"BIO 问题分析\"></a>BIO 问题分析</h3><ol>\n<li>每个请求都需要创建独立的线程，与对应的客户端进行数据处理。</li>\n<li>当并发数大时，需要创建大量线程来处理连接，系统资源占用大。</li>\n<li>连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。</li>\n</ol>\n<h2 id=\"NIO-基本介绍\"><a href=\"#NIO-基本介绍\" class=\"headerlink\" title=\"NIO 基本介绍\"></a>NIO 基本介绍</h2><ol>\n<li>Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。</li>\n<li>NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。</li>\n<li>NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。</li>\n<li>NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。</li>\n<li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。</li>\n</ol>\n<h3 id=\"NIO-Buffer-的基本使用\"><a href=\"#NIO-Buffer-的基本使用\" class=\"headerlink\" title=\"NIO Buffer 的基本使用\"></a>NIO Buffer 的基本使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> java.nio.IntBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月22日14:39:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Nio</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * NIO 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个Buffer，大小为5</span></span><br><span class=\"line\">        <span class=\"type\">IntBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> IntBuffer.allocate(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 存放数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> buffer.capacity();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            buffer.put(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 切换成读模式，读写切换</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.println(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NIO-三大核心组件关系\"><a href=\"#NIO-三大核心组件关系\" class=\"headerlink\" title=\"NIO 三大核心组件关系\"></a>NIO 三大核心组件关系</h3><p><img src=\"https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png\" alt=\"avatar\"></p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>该图反应了有三个 Channel 注册到该 Selector。</li>\n<li>该程序切换到哪个 Channel 是由事件决定的（Event）。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 就是一个内存块，底层是一个数组。</li>\n<li>数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO</li>\n</ol>\n<h3 id=\"NIO-三大核心理解\"><a href=\"#NIO-三大核心理解\" class=\"headerlink\" title=\"NIO 三大核心理解\"></a>NIO 三大核心理解</h3><p><img src=\"https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg\" alt=\"avatar\"></p>\n<h4 id=\"Buffer-的机制及子类\"><a href=\"#Buffer-的机制及子类\" class=\"headerlink\" title=\"Buffer 的机制及子类\"></a>Buffer 的机制及子类</h4><h5 id=\"Buffer（缓冲区）基本介绍\"><a href=\"#Buffer（缓冲区）基本介绍\" class=\"headerlink\" title=\"Buffer（缓冲区）基本介绍\"></a>Buffer（缓冲区）基本介绍</h5><p>缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。<br>Channel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。<br>在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">Buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;IntBuffer&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These fields are declared here rather than in Heap-X-Buffer in order to</span></span><br><span class=\"line\">    <span class=\"comment\">// reduce the number of virtual method invocations needed to access these</span></span><br><span class=\"line\">    <span class=\"comment\">// values, which is especially costly when coding small buffers.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] hb;                  <span class=\"comment\">// Non-null only for heap buffers</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> offset;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> isReadOnly;                 <span class=\"comment\">// Valid only for heap buffers</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, capacity,</span></span><br><span class=\"line\">    <span class=\"comment\">// backing array, and array offset</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap,   <span class=\"comment\">// package-private</span></span><br><span class=\"line\">                 <span class=\"type\">int</span>[] hb, <span class=\"type\">int</span> offset)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(mark, pos, lim, cap);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hb = hb;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.offset = offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creates a new buffer with the given mark, position, limit, and capacity</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    IntBuffer(<span class=\"type\">int</span> mark, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> lim, <span class=\"type\">int</span> cap) &#123; <span class=\"comment\">// package-private</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(mark, pos, lim, cap, <span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Buffer 常用子类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ByteBuffer</td>\n<td>存储字节数据到缓冲区</td>\n</tr>\n<tr>\n<td>ShortBuffer</td>\n<td>存储字符创数据到缓冲区</td>\n</tr>\n<tr>\n<td>CharBuffer</td>\n<td>存储字符数据到缓冲区</td>\n</tr>\n<tr>\n<td>IntBuffer</td>\n<td>存储整数数据到缓冲区</td>\n</tr>\n<tr>\n<td>LongBuffer</td>\n<td>存储长整型数据到缓冲区</td>\n</tr>\n<tr>\n<td>DoubleBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n<tr>\n<td>FloatBuffer</td>\n<td>存储浮点型数据到缓冲区</td>\n</tr>\n</tbody></table>\n<p>Buffer 中定义了四个属性来提供所有其包含的数据元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">mark</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> limit;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> capacity;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>capacity</td>\n<td>容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的</td>\n</tr>\n<tr>\n<td>position</td>\n<td>当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>标记当前 position 位置，当 reset 后回到标记位置</td>\n</tr>\n</tbody></table>\n<h4 id=\"Channel-的基本介绍\"><a href=\"#Channel-的基本介绍\" class=\"headerlink\" title=\"Channel 的基本介绍\"></a>Channel 的基本介绍</h4><p>NIO 的通道类似于流，但有如下区别：</p>\n<ol>\n<li>通道是双向的可以进行读写，而流是单向的只能读，或者写。</li>\n<li>通道可以实现已读读取数据。</li>\n<li>通道可以从缓冲区读取数据，也可以写入数据到缓冲区。</li>\n</ol>\n<p>常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel</p>\n<h5 id=\"FileChannel-类\"><a href=\"#FileChannel-类\" class=\"headerlink\" title=\"FileChannel 类\"></a>FileChannel 类</h5><p>FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：</p>\n<ol>\n<li><p>使用 FileChannel 写入文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel写入文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelWrite</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">writeStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, Java菜鸟程序员&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 创建一个输出流</span></span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 写入byteBuffer</span></span><br><span class=\"line\">     byteBuffer.put(writeStr.getBytes());</span><br><span class=\"line\">     <span class=\"comment\">// 切换模式</span></span><br><span class=\"line\">     byteBuffer.flip();</span><br><span class=\"line\">     <span class=\"comment\">// 写入通道</span></span><br><span class=\"line\">     channel.write(byteBuffer);</span><br><span class=\"line\">     <span class=\"comment\">// 关闭</span></span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 读取文本文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用FileChannel 读取文本文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelRead</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">     channel.read(byteBuffer);</span><br><span class=\"line\">     System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(byteBuffer.array(), <span class=\"number\">0</span>, byteBuffer.limit()));</span><br><span class=\"line\">     channel.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 FileChannel 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用FileChannel复制文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioFileChannelCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">    <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (inChannel.read(byteBuffer) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        outChannel.write(byteBuffer);</span><br><span class=\"line\">        <span class=\"comment\">// 清空重置</span></span><br><span class=\"line\">        byteBuffer.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileOutputStream.close();</span><br><span class=\"line\">    fileInputStream.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 transferFrom 复制文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 使用transferFrom复制文件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nioTransferFromCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">     <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;world.txt&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">inChannel</span> <span class=\"operator\">=</span> fileInputStream.getChannel();</span><br><span class=\"line\">     <span class=\"type\">FileChannel</span> <span class=\"variable\">outChannel</span> <span class=\"operator\">=</span> fileOutputStream.getChannel();</span><br><span class=\"line\">     <span class=\"comment\">// 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法</span></span><br><span class=\"line\">     outChannel.transferFrom(inChannel, <span class=\"number\">0</span>, inChannel.size());</span><br><span class=\"line\">     outChannel.close();</span><br><span class=\"line\">     fileOutputStream.close();</span><br><span class=\"line\">     fileInputStream.close();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"Channel-和-Buffer-的注意事项\"><a href=\"#Channel-和-Buffer-的注意事项\" class=\"headerlink\" title=\"Channel 和 Buffer 的注意事项\"></a>Channel 和 Buffer 的注意事项</h5><ol>\n<li>ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。</li>\n<li>可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。</li>\n<li>NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。</li>\n<li>NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。<ul>\n<li>Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。</li>\n<li>Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Selector-的基本介绍\"><a href=\"#Selector-的基本介绍\" class=\"headerlink\" title=\"Selector 的基本介绍\"></a>Selector 的基本介绍</h4><ol>\n<li>Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。</li>\n<li>Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。</li>\n<li>只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。</li>\n<li>避免了多线程之间上下文切换导致的开销。</li>\n</ol>\n<h5 id=\"Selector-特点\"><a href=\"#Selector-特点\" class=\"headerlink\" title=\"Selector 特点\"></a>Selector 特点</h5><p>Netty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。</p>\n<p>当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。</p>\n<p>线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。</p>\n<p>由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。</p>\n<p>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。</p>\n<h5 id=\"Selector-常用方法\"><a href=\"#Selector-常用方法\" class=\"headerlink\" title=\"Selector 常用方法\"></a>Selector 常用方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Selector</span> implement Closeable&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Selector <span class=\"title function_\">open</span><span class=\"params\">()</span>; <span class=\"comment\">// 得到一个选择器对象</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span>; <span class=\"comment\">// 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;SelectionKey&gt; <span class=\"title function_\">selectionKeys</span><span class=\"params\">()</span>; <span class=\"comment\">// 从内部集合中得到所有的SelectionKey</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Selector-相关方法说明\"><a href=\"#Selector-相关方法说明\" class=\"headerlink\" title=\"Selector 相关方法说明\"></a>Selector 相关方法说明</h5><ul>\n<li>selector.select()：若监听到注册管道中有事件，则持续阻塞</li>\n<li>selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回</li>\n<li>selector.wakeup()：换线 selector</li>\n<li>selector.selectNow()：不阻塞，立即返回</li>\n</ul>\n<h4 id=\"NIO-非阻塞网络编程过程分析\"><a href=\"#NIO-非阻塞网络编程过程分析\" class=\"headerlink\" title=\"NIO 非阻塞网络编程过程分析\"></a>NIO 非阻塞网络编程过程分析</h4><ol>\n<li>当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。</li>\n<li>Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。</li>\n<li>将 socketChannel 注册到 Selector 上，<code>public final SelectionKey register(Selector sel, int ops)</code>，一个 selector 上可以注册多个 SocketChannel。</li>\n<li>注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。</li>\n<li>进一步得到各个 SelectionKey，有事件发生。</li>\n<li>再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。</li>\n<li>可以通过得到的 channel，完成业务处理。</li>\n</ol>\n<p>SelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。</p>\n<h5 id=\"SelectionKey-相关方法\"><a href=\"#SelectionKey-相关方法\" class=\"headerlink\" title=\"SelectionKey 相关方法\"></a>SelectionKey 相关方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public abstract Selector selector();</td>\n<td>得到与之关联的 Selector 对象</td>\n</tr>\n<tr>\n<td>public abstract SelectableChannel channel();</td>\n<td>得到与之关联的通道</td>\n</tr>\n<tr>\n<td>public final Object attachment();</td>\n<td>得到与之关联的共享数据</td>\n</tr>\n<tr>\n<td>public abstract SelectionKey interestOps(int ops);</td>\n<td>设置或改变监听的事件类型</td>\n</tr>\n<tr>\n<td>public final boolean isReadable();</td>\n<td>通道是否可读</td>\n</tr>\n<tr>\n<td>public final boolean usWritable();</td>\n<td>通道是否可写</td>\n</tr>\n<tr>\n<td>public final boolean isAcceptable();</td>\n<td>是否可以建立连接 ACCEPT</td>\n</tr>\n</tbody></table>\n<h3 id=\"NIO-和-BIO-对比\"><a href=\"#NIO-和-BIO-对比\" class=\"headerlink\" title=\"NIO 和 BIO 对比\"></a>NIO 和 BIO 对比</h3><ol>\n<li>BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。</li>\n<li>BIO 是阻塞的，而 NIO 是非阻塞的。</li>\n<li>BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</li>\n</ol>\n<h3 id=\"AIO-基本介绍\"><a href=\"#AIO-基本介绍\" class=\"headerlink\" title=\"AIO 基本介绍\"></a>AIO 基本介绍</h3><p>JDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。</p>\n<p>AIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。</p>\n<p>Reactor 和 Proactor</p>\n<ul>\n<li>两种 IO 多路复用方案：Reactor and Proactor。</li>\n<li>Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。</li>\n</ul>\n"},{"title":"Java类型转换工具类（持续更新）","date":"2021-03-19T03:08:23.000Z","_content":"\n## 简介\n\n  将项目中用到的类型转换做个记录。\n\n## 详细代码\n\n ``` java\n  @Component\n  public class TypeUtil {\n   // [start]字符串转各种格式\n  \n   // 字符串转日期(格式:\"yyyyMMdd\")\n   public static Date StrToDateFirst(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"dd/MM/yyyy\")\n   public static Date StrToDateSecond(String str) {\n    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd\")\n   public static Date StrToDateThird(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd HH:mm:ss\")\n   public static Date StrToDateFourth(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转Integer\n   public static Integer StrToInteger(String str) {\n    Integer integer = null;\n    try {\n     integer = Integer.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return integer;\n   }\n  \n   // 字符串转Double\n   public static Double StrToDouble(String str) {\n    Double double1 = 0.00;\n    try {\n     double1 = Double.parseDouble(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return double1;\n   }\n  \n   // 字符串转时间戳\n   public static Timestamp StrToTimeStamp(String str) {\n    Timestamp timestamp = null;\n    try {\n     timestamp = Timestamp.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return timestamp;\n   }\n  \n   // 字符串转BigDecimal\n   public static BigDecimal StrTiBigdecimal(String str) {\n    BigDecimal bigDecimal = null;\n    try {\n     bigDecimal = new BigDecimal(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return bigDecimal;\n   }\n   // [end]\n  \n  }\n ```\n","source":"_posts/Java类型转换工具类（持续更新）.md","raw":"---\ntitle: Java类型转换工具类（持续更新）\ndate: 2021-03-19 11:08:23\ntags: \n\n\t- 类型转换\n\t- Utils\n\ncategories: \n\n\t[后端, Java]\n\n---\n\n## 简介\n\n  将项目中用到的类型转换做个记录。\n\n## 详细代码\n\n ``` java\n  @Component\n  public class TypeUtil {\n   // [start]字符串转各种格式\n  \n   // 字符串转日期(格式:\"yyyyMMdd\")\n   public static Date StrToDateFirst(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"dd/MM/yyyy\")\n   public static Date StrToDateSecond(String str) {\n    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd\")\n   public static Date StrToDateThird(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转日期(格式:\"yyyy-MM-dd HH:mm:ss\")\n   public static Date StrToDateFourth(String str) {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    Date date = null;\n    try {\n     date = format.parse(str);\n    } catch (ParseException e) {\n     e.printStackTrace();\n    }\n    return date;\n   }\n  \n   // 字符串转Integer\n   public static Integer StrToInteger(String str) {\n    Integer integer = null;\n    try {\n     integer = Integer.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return integer;\n   }\n  \n   // 字符串转Double\n   public static Double StrToDouble(String str) {\n    Double double1 = 0.00;\n    try {\n     double1 = Double.parseDouble(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return double1;\n   }\n  \n   // 字符串转时间戳\n   public static Timestamp StrToTimeStamp(String str) {\n    Timestamp timestamp = null;\n    try {\n     timestamp = Timestamp.valueOf(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return timestamp;\n   }\n  \n   // 字符串转BigDecimal\n   public static BigDecimal StrTiBigdecimal(String str) {\n    BigDecimal bigDecimal = null;\n    try {\n     bigDecimal = new BigDecimal(str);\n    } catch (Exception e) {\n     e.printStackTrace();\n    }\n    return bigDecimal;\n   }\n   // [end]\n  \n  }\n ```\n","slug":"Java类型转换工具类（持续更新）","published":1,"updated":"2022-10-27T06:40:13.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0a000ehgacgxtk80x6","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  将项目中用到的类型转换做个记录。</p>\n<h2 id=\"详细代码\"><a href=\"#详细代码\" class=\"headerlink\" title=\"详细代码\"></a>详细代码</h2> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeUtil</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// [start]字符串转各种格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyyMMdd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFirst</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMMdd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;dd/MM/yyyy&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateSecond</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateThird</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFourth</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Integer</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">StrToInteger</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   integer = Integer.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> integer;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Double</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title function_\">StrToDouble</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Double</span> <span class=\"variable\">double1</span> <span class=\"operator\">=</span> <span class=\"number\">0.00</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   double1 = Double.parseDouble(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> double1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转时间戳</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Timestamp <span class=\"title function_\">StrToTimeStamp</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Timestamp</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   timestamp = Timestamp.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转BigDecimal</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">StrTiBigdecimal</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   bigDecimal = <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bigDecimal;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// [end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  将项目中用到的类型转换做个记录。</p>\n<h2 id=\"详细代码\"><a href=\"#详细代码\" class=\"headerlink\" title=\"详细代码\"></a>详细代码</h2> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeUtil</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// [start]字符串转各种格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyyMMdd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFirst</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyyMMdd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;dd/MM/yyyy&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateSecond</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateThird</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转日期(格式:&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">StrToDateFourth</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">DateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   date = format.parse(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> date;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Integer</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">StrToInteger</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   integer = Integer.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> integer;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转Double</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title function_\">StrToDouble</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Double</span> <span class=\"variable\">double1</span> <span class=\"operator\">=</span> <span class=\"number\">0.00</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   double1 = Double.parseDouble(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> double1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转时间戳</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Timestamp <span class=\"title function_\">StrToTimeStamp</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Timestamp</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   timestamp = Timestamp.valueOf(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 字符串转BigDecimal</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">StrTiBigdecimal</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   bigDecimal = <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(str);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bigDecimal;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// [end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JVM结构详解","date":"2021-03-31T06:36:40.000Z","_content":"\n## JVM 结构详解\n\n### JVM 结构图\n\n![avatar](https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg)\n\n#### 程序计数器（PC 寄存器）\n\n##### 程序计数器的定义\n\n程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。\n\n##### 程序计数器的作用\n\n- 字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。\n- 在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。\n\n##### 程序计数器的特点\n\n- 是一块较小的内存空间。\n- 线程私有，每条线程都有自己的程序计数器。\n- 生命周期：随着线程的创建而创建，随着线程的结束而销毁。\n- 是唯一一个不会出现 OutOfMemoryError 的内存区域。\n\n#### Java 虚拟机栈（Java 栈）\n\n##### Java 虚拟机栈的定义\n\nJava 虚拟机栈是描述 Java 方法运行过程的内存模型。\n\nJava 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做`栈帧`的区域，用于存放该方法运行过程中的一些信息，如：\n\n- 局部变量表\n- 操作数栈\n- 动态链接\n- 方法出口信息\n- ......\n\n##### 压栈出栈过程\n\n当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。\n\nJava 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。\n\n方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。\n\n由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。\n\n##### Java 虚拟机栈的特点\n\n- 局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。\n- Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。\n  - StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。\n  - OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。\n- Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。\n\n出现 StackOverFlowError 时，内存空间可能还有很多。\n\n#### 本地方法栈（c 栈）\n\n##### 本地方法栈的定义\n\n本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。\n\n##### 栈帧变化过程\n\n本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。\n\n方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。\n\n如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。\n\n#### 堆\n\n##### 堆的定义\n\n堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。\n\n##### 堆的特点\n\n- 线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。\n- 在虚拟机启动时创建。\n- 是垃圾回收的主要场所。\n- 进一步可分为：新生代（Eden 区：`From Survior`，`To Survior`、老年代。\n\n不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。\n\n堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。\n\nJava 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。\n\n#### 方法区\n\n##### 方法区的定义\n\nJava 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：\n\n- 已经被虚拟机加载的类信息\n- 常量\n- 静态变量\n- 即时编译器编译后的代码\n\n##### 方法区的特点\n\n- 线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。\n- 永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为`永久代`。\n- 内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。\n- Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。\n\n##### 运行时常量池\n\n方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。\n\n当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的`intern()`方法就能在运行期间向常量池中添加字符串常量。\n\n#### 直接内存（堆外内存）\n\n直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。\n\n##### 操作直接内存\n\n在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的`DirectByteBuffer`对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。\n\n直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。\n\n##### 直接内存和堆内存比较\n\n- 直接内存申请空间耗费更高的性能\n- 直接内存读取 IO 的性能要优于普通的堆内存\n- 直接内存作用链：本地 IO -> 直接内存 -> 本地 IO\n- 堆内存作用链：本地 IO -> 直接内存 -> 非直接内存 -> 直接内存 -> 本地 IO\n\n服务器管理员在配置虚拟机参数时，会根据实际内存设置`-Xmx`等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现`OutOfMemoryError`异常。\n\n### 参考地址\n\n<https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure>\n","source":"_posts/JVM结构详解.md","raw":"---\ntitle: JVM结构详解\ndate: 2021-03-31 14:36:40\ntags:\n  - JVM\ncategories:\n  - 后端\n  - Java\n---\n\n## JVM 结构详解\n\n### JVM 结构图\n\n![avatar](https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg)\n\n#### 程序计数器（PC 寄存器）\n\n##### 程序计数器的定义\n\n程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。\n\n##### 程序计数器的作用\n\n- 字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。\n- 在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。\n\n##### 程序计数器的特点\n\n- 是一块较小的内存空间。\n- 线程私有，每条线程都有自己的程序计数器。\n- 生命周期：随着线程的创建而创建，随着线程的结束而销毁。\n- 是唯一一个不会出现 OutOfMemoryError 的内存区域。\n\n#### Java 虚拟机栈（Java 栈）\n\n##### Java 虚拟机栈的定义\n\nJava 虚拟机栈是描述 Java 方法运行过程的内存模型。\n\nJava 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做`栈帧`的区域，用于存放该方法运行过程中的一些信息，如：\n\n- 局部变量表\n- 操作数栈\n- 动态链接\n- 方法出口信息\n- ......\n\n##### 压栈出栈过程\n\n当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。\n\nJava 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。\n\n方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。\n\n由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。\n\n##### Java 虚拟机栈的特点\n\n- 局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。\n- Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。\n  - StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。\n  - OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。\n- Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。\n\n出现 StackOverFlowError 时，内存空间可能还有很多。\n\n#### 本地方法栈（c 栈）\n\n##### 本地方法栈的定义\n\n本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。\n\n##### 栈帧变化过程\n\n本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。\n\n方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。\n\n如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。\n\n#### 堆\n\n##### 堆的定义\n\n堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。\n\n##### 堆的特点\n\n- 线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。\n- 在虚拟机启动时创建。\n- 是垃圾回收的主要场所。\n- 进一步可分为：新生代（Eden 区：`From Survior`，`To Survior`、老年代。\n\n不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。\n\n堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。\n\nJava 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。\n\n#### 方法区\n\n##### 方法区的定义\n\nJava 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：\n\n- 已经被虚拟机加载的类信息\n- 常量\n- 静态变量\n- 即时编译器编译后的代码\n\n##### 方法区的特点\n\n- 线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。\n- 永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为`永久代`。\n- 内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。\n- Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。\n\n##### 运行时常量池\n\n方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。\n\n当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的`intern()`方法就能在运行期间向常量池中添加字符串常量。\n\n#### 直接内存（堆外内存）\n\n直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。\n\n##### 操作直接内存\n\n在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的`DirectByteBuffer`对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。\n\n直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。\n\n##### 直接内存和堆内存比较\n\n- 直接内存申请空间耗费更高的性能\n- 直接内存读取 IO 的性能要优于普通的堆内存\n- 直接内存作用链：本地 IO -> 直接内存 -> 本地 IO\n- 堆内存作用链：本地 IO -> 直接内存 -> 非直接内存 -> 直接内存 -> 本地 IO\n\n服务器管理员在配置虚拟机参数时，会根据实际内存设置`-Xmx`等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现`OutOfMemoryError`异常。\n\n### 参考地址\n\n<https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure>\n","slug":"JVM结构详解","published":1,"updated":"2022-10-27T06:40:13.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0b000hhgacgcci4uwb","content":"<h2 id=\"JVM-结构详解\"><a href=\"#JVM-结构详解\" class=\"headerlink\" title=\"JVM 结构详解\"></a>JVM 结构详解</h2><h3 id=\"JVM-结构图\"><a href=\"#JVM-结构图\" class=\"headerlink\" title=\"JVM 结构图\"></a>JVM 结构图</h3><p><img src=\"https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"程序计数器（PC-寄存器）\"><a href=\"#程序计数器（PC-寄存器）\" class=\"headerlink\" title=\"程序计数器（PC 寄存器）\"></a>程序计数器（PC 寄存器）</h4><h5 id=\"程序计数器的定义\"><a href=\"#程序计数器的定义\" class=\"headerlink\" title=\"程序计数器的定义\"></a>程序计数器的定义</h5><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。</p>\n<h5 id=\"程序计数器的作用\"><a href=\"#程序计数器的作用\" class=\"headerlink\" title=\"程序计数器的作用\"></a>程序计数器的作用</h5><ul>\n<li>字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。</li>\n<li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li>\n</ul>\n<h5 id=\"程序计数器的特点\"><a href=\"#程序计数器的特点\" class=\"headerlink\" title=\"程序计数器的特点\"></a>程序计数器的特点</h5><ul>\n<li>是一块较小的内存空间。</li>\n<li>线程私有，每条线程都有自己的程序计数器。</li>\n<li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li>\n<li>是唯一一个不会出现 OutOfMemoryError 的内存区域。</li>\n</ul>\n<h4 id=\"Java-虚拟机栈（Java-栈）\"><a href=\"#Java-虚拟机栈（Java-栈）\" class=\"headerlink\" title=\"Java 虚拟机栈（Java 栈）\"></a>Java 虚拟机栈（Java 栈）</h4><h5 id=\"Java-虚拟机栈的定义\"><a href=\"#Java-虚拟机栈的定义\" class=\"headerlink\" title=\"Java 虚拟机栈的定义\"></a>Java 虚拟机栈的定义</h5><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p>\n<p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做<code>栈帧</code>的区域，用于存放该方法运行过程中的一些信息，如：</p>\n<ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口信息</li>\n<li>……</li>\n</ul>\n<h5 id=\"压栈出栈过程\"><a href=\"#压栈出栈过程\" class=\"headerlink\" title=\"压栈出栈过程\"></a>压栈出栈过程</h5><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p>\n<p>Java 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p>\n<p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p>\n<p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p>\n<h5 id=\"Java-虚拟机栈的特点\"><a href=\"#Java-虚拟机栈的特点\" class=\"headerlink\" title=\"Java 虚拟机栈的特点\"></a>Java 虚拟机栈的特点</h5><ul>\n<li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。</li>\n<li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul>\n<li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li>\n<li>OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。</li>\n</ul>\n</li>\n<li>Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li>\n</ul>\n<p>出现 StackOverFlowError 时，内存空间可能还有很多。</p>\n<h4 id=\"本地方法栈（c-栈）\"><a href=\"#本地方法栈（c-栈）\" class=\"headerlink\" title=\"本地方法栈（c 栈）\"></a>本地方法栈（c 栈）</h4><h5 id=\"本地方法栈的定义\"><a href=\"#本地方法栈的定义\" class=\"headerlink\" title=\"本地方法栈的定义\"></a>本地方法栈的定义</h5><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<h5 id=\"栈帧变化过程\"><a href=\"#栈帧变化过程\" class=\"headerlink\" title=\"栈帧变化过程\"></a>栈帧变化过程</h5><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。</p>\n<p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。</p>\n<p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h5 id=\"堆的定义\"><a href=\"#堆的定义\" class=\"headerlink\" title=\"堆的定义\"></a>堆的定义</h5><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p>\n<h5 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h5><ul>\n<li>线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li>\n<li>在虚拟机启动时创建。</li>\n<li>是垃圾回收的主要场所。</li>\n<li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survior</code>、老年代。</li>\n</ul>\n<p>不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p>\n<p>堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。</p>\n<p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><h5 id=\"方法区的定义\"><a href=\"#方法区的定义\" class=\"headerlink\" title=\"方法区的定义\"></a>方法区的定义</h5><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：</p>\n<ul>\n<li>已经被虚拟机加载的类信息</li>\n<li>常量</li>\n<li>静态变量</li>\n<li>即时编译器编译后的代码</li>\n</ul>\n<h5 id=\"方法区的特点\"><a href=\"#方法区的特点\" class=\"headerlink\" title=\"方法区的特点\"></a>方法区的特点</h5><ul>\n<li>线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。</li>\n<li>永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为<code>永久代</code>。</li>\n<li>内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li>\n<li>Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。</li>\n</ul>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><p>方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。</p>\n<p>当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的<code>intern()</code>方法就能在运行期间向常量池中添加字符串常量。</p>\n<h4 id=\"直接内存（堆外内存）\"><a href=\"#直接内存（堆外内存）\" class=\"headerlink\" title=\"直接内存（堆外内存）\"></a>直接内存（堆外内存）</h4><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p>\n<h5 id=\"操作直接内存\"><a href=\"#操作直接内存\" class=\"headerlink\" title=\"操作直接内存\"></a>操作直接内存</h5><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。</p>\n<p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p>\n<h5 id=\"直接内存和堆内存比较\"><a href=\"#直接内存和堆内存比较\" class=\"headerlink\" title=\"直接内存和堆内存比较\"></a>直接内存和堆内存比较</h5><ul>\n<li>直接内存申请空间耗费更高的性能</li>\n<li>直接内存读取 IO 的性能要优于普通的堆内存</li>\n<li>直接内存作用链：本地 IO -&gt; 直接内存 -&gt; 本地 IO</li>\n<li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li>\n</ul>\n<p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现<code>OutOfMemoryError</code>异常。</p>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure\">https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JVM-结构详解\"><a href=\"#JVM-结构详解\" class=\"headerlink\" title=\"JVM 结构详解\"></a>JVM 结构详解</h2><h3 id=\"JVM-结构图\"><a href=\"#JVM-结构图\" class=\"headerlink\" title=\"JVM 结构图\"></a>JVM 结构图</h3><p><img src=\"https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg\" alt=\"avatar\"></p>\n<h4 id=\"程序计数器（PC-寄存器）\"><a href=\"#程序计数器（PC-寄存器）\" class=\"headerlink\" title=\"程序计数器（PC 寄存器）\"></a>程序计数器（PC 寄存器）</h4><h5 id=\"程序计数器的定义\"><a href=\"#程序计数器的定义\" class=\"headerlink\" title=\"程序计数器的定义\"></a>程序计数器的定义</h5><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。</p>\n<h5 id=\"程序计数器的作用\"><a href=\"#程序计数器的作用\" class=\"headerlink\" title=\"程序计数器的作用\"></a>程序计数器的作用</h5><ul>\n<li>字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。</li>\n<li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li>\n</ul>\n<h5 id=\"程序计数器的特点\"><a href=\"#程序计数器的特点\" class=\"headerlink\" title=\"程序计数器的特点\"></a>程序计数器的特点</h5><ul>\n<li>是一块较小的内存空间。</li>\n<li>线程私有，每条线程都有自己的程序计数器。</li>\n<li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li>\n<li>是唯一一个不会出现 OutOfMemoryError 的内存区域。</li>\n</ul>\n<h4 id=\"Java-虚拟机栈（Java-栈）\"><a href=\"#Java-虚拟机栈（Java-栈）\" class=\"headerlink\" title=\"Java 虚拟机栈（Java 栈）\"></a>Java 虚拟机栈（Java 栈）</h4><h5 id=\"Java-虚拟机栈的定义\"><a href=\"#Java-虚拟机栈的定义\" class=\"headerlink\" title=\"Java 虚拟机栈的定义\"></a>Java 虚拟机栈的定义</h5><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p>\n<p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做<code>栈帧</code>的区域，用于存放该方法运行过程中的一些信息，如：</p>\n<ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口信息</li>\n<li>……</li>\n</ul>\n<h5 id=\"压栈出栈过程\"><a href=\"#压栈出栈过程\" class=\"headerlink\" title=\"压栈出栈过程\"></a>压栈出栈过程</h5><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p>\n<p>Java 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p>\n<p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p>\n<p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p>\n<h5 id=\"Java-虚拟机栈的特点\"><a href=\"#Java-虚拟机栈的特点\" class=\"headerlink\" title=\"Java 虚拟机栈的特点\"></a>Java 虚拟机栈的特点</h5><ul>\n<li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。</li>\n<li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul>\n<li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li>\n<li>OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。</li>\n</ul>\n</li>\n<li>Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li>\n</ul>\n<p>出现 StackOverFlowError 时，内存空间可能还有很多。</p>\n<h4 id=\"本地方法栈（c-栈）\"><a href=\"#本地方法栈（c-栈）\" class=\"headerlink\" title=\"本地方法栈（c 栈）\"></a>本地方法栈（c 栈）</h4><h5 id=\"本地方法栈的定义\"><a href=\"#本地方法栈的定义\" class=\"headerlink\" title=\"本地方法栈的定义\"></a>本地方法栈的定义</h5><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<h5 id=\"栈帧变化过程\"><a href=\"#栈帧变化过程\" class=\"headerlink\" title=\"栈帧变化过程\"></a>栈帧变化过程</h5><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。</p>\n<p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。</p>\n<p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h5 id=\"堆的定义\"><a href=\"#堆的定义\" class=\"headerlink\" title=\"堆的定义\"></a>堆的定义</h5><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p>\n<h5 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h5><ul>\n<li>线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li>\n<li>在虚拟机启动时创建。</li>\n<li>是垃圾回收的主要场所。</li>\n<li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survior</code>、老年代。</li>\n</ul>\n<p>不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p>\n<p>堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。</p>\n<p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><h5 id=\"方法区的定义\"><a href=\"#方法区的定义\" class=\"headerlink\" title=\"方法区的定义\"></a>方法区的定义</h5><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：</p>\n<ul>\n<li>已经被虚拟机加载的类信息</li>\n<li>常量</li>\n<li>静态变量</li>\n<li>即时编译器编译后的代码</li>\n</ul>\n<h5 id=\"方法区的特点\"><a href=\"#方法区的特点\" class=\"headerlink\" title=\"方法区的特点\"></a>方法区的特点</h5><ul>\n<li>线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。</li>\n<li>永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为<code>永久代</code>。</li>\n<li>内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li>\n<li>Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。</li>\n</ul>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><p>方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。</p>\n<p>当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的<code>intern()</code>方法就能在运行期间向常量池中添加字符串常量。</p>\n<h4 id=\"直接内存（堆外内存）\"><a href=\"#直接内存（堆外内存）\" class=\"headerlink\" title=\"直接内存（堆外内存）\"></a>直接内存（堆外内存）</h4><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p>\n<h5 id=\"操作直接内存\"><a href=\"#操作直接内存\" class=\"headerlink\" title=\"操作直接内存\"></a>操作直接内存</h5><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。</p>\n<p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p>\n<h5 id=\"直接内存和堆内存比较\"><a href=\"#直接内存和堆内存比较\" class=\"headerlink\" title=\"直接内存和堆内存比较\"></a>直接内存和堆内存比较</h5><ul>\n<li>直接内存申请空间耗费更高的性能</li>\n<li>直接内存读取 IO 的性能要优于普通的堆内存</li>\n<li>直接内存作用链：本地 IO -&gt; 直接内存 -&gt; 本地 IO</li>\n<li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li>\n</ul>\n<p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现<code>OutOfMemoryError</code>异常。</p>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure\">https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure</a></p>\n"},{"title":"commons-io的Java文件处理常用方法","date":"2023-02-17T03:07:01.000Z","_content":"\n## Java文件处理常用方法\n\n归纳整理一些常用的处理文件的方法\n\n### Java Apache FileUtils\n\n#### Maven依赖引入\n\n```xml\n    <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>2.6</version>\n    </dependency>\n```\n\n#### 常用的方法\n\n```java\npackage com.cn.ybwn.file;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.filefilter.DirectoryFileFilter;\nimport org.apache.commons.io.filefilter.FileFileFilter;\nimport org.apache.commons.io.filefilter.FileFilterUtils;\nimport org.apache.commons.io.filefilter.IOFileFilter;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.zip.CRC32;\n\n/**\n * @author 25724\n * @date 2023/3/16 9:36\n * @description\n */\n\npublic class FileUtilsTest {\n    private static File parent = new File(\"D://test\");\n\n    public void getDirTest() {\n        //获得基本的信息\n        //获取临时目录 java.io.tmpdir,getUserDirectoryPath返回路径字符串\n        System.out.println(FileUtils.getTempDirectory());\n        //获取用户主目录 user.home,getUserDirectoryPath返回路径字符串\n        System.out.println(FileUtils.getUserDirectory());\n        //以可读的方式，返回文件的大小EB, PB, TB, GB, MB, KB or bytes\n        System.out.println(FileUtils.byteCountToDisplaySize(10000000));\n        System.out.println(FileUtils.byteCountToDisplaySize(1));\n    }\n\n    public void openStream() throws IOException {\n        //获取文件输入和输出的文件流\n        //文件是目录或者不存在，都会跑出异常\n        InputStream in = FileUtils.openInputStream(new File(\"D://test/test1\"));\n        OutputStream out = FileUtils.openOutputStream(new File(\"D://test/test2\"));\n        //是否追加的形式添加内容\n        out = FileUtils.openOutputStream(new File(\"D://test/test3\"), true);\n    }\n\n    public void FileOperation() throws IOException {\n        //创建文件，如果文件存在则更新时间；如果不存在，创建一个空文件\n        //创建空文件的方式为：\n        FileUtils.touch(new File(\"D://test/test4\"));\n\n        //文件内容的对比\n        FileUtils.contentEquals(new File(\"D://test/test1\"), new File(\"D://test/test2\"));\n        //忽略换行符，第三个参数是字符集\n        FileUtils.contentEqualsIgnoreEOL(new File(\"D://test/test1\"), new File(\"D://test/test2\"), null);\n\n        //根据URL获取文件\n        FileUtils.toFile(new URL(\"file://D://test/test1\"));\n        FileUtils.toFiles(null);\n        FileUtils.toURLs(new File[]{new File(\"D://test/test1\")});\n\n        //文件拷贝\n        //第三个参数是否更新时间\n        FileUtils.copyFileToDirectory(new File(\"/test1\"), new File(\"/dir\"), true);\n        FileUtils.copyFile(new File(\"/source\"), new File(\"/target\"), true);\n\n        //目录拷贝\n        File srcDir = new File(\"/source\");\n        File destDir = new File(\"/target\");\n\n        FileUtils.copyDirectoryToDirectory(new File(\"/source\"), new File(\"/target\"));\n        FileUtils.copyDirectory(new File(\"/source\"), new File(\"/target\"));\n        //仅仅拷贝目录\n        FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);\n        // 创建.txt过滤器\n        IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(\".txt\");\n        IOFileFilter txtFiles = FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);\n        // 创建包含目录或者txt文件的过滤器\n        FileFilter filter = FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);\n        // Copy using the filter\n        FileUtils.copyDirectory(srcDir, destDir, filter);\n\n        //文件拷贝\n        FileUtils.copyInputStreamToFile(new FileInputStream(\"/test\"), new File(\"/test\"));\n        FileUtils.copyURLToFile(new URL(\"file:/test\"), new File(\"/test\"));\n\n        //删除文件\n        //删除目录下所有的内容\n        FileUtils.deleteDirectory(new File(\"/test\"));\n        //如果是目录，会级联删除；不会抛出异常\n        FileUtils.deleteQuietly(new File(\"/test\"));\n\n        //判断文件是否存在\n        FileUtils.directoryContains(new File(\"/dir\"), new File(\"/file\"));\n\n        //清除目录中的内容,不会删除该目录；\n        //先verifiedListFiles检查目录，检查目录是否为目录、是否存在，然后调用listFiles，如果返回null，则抛出异常\n        //遍历目录中的文件，如果是目录则递归删除；如果是文件则强制删除，删除失败（文件不存在或无法删除）都会抛出异常\n        FileUtils.cleanDirectory(new File(\"/dir\"));\n\n        //等待一个文件xx秒，知道文件创建后才返回。每max(100,remainning)循环检查一次\n        while (FileUtils.waitFor(new File(\"/dir\"), 60)) {\n        }\n\n        //读取目标文件，内部调用IOUtils.toString(inputstream,\"utf-8\")\n        String str = FileUtils.readFileToString(new File(\"/dir\"), \"utf-8\");\n\n        //内部调用IOUtils.toByteArray(in)\n        byte[] bytes = FileUtils.readFileToByteArray(new File(\"/dir\"));\n\n        //内部调用IOUtils.readLines(in, Charsets.toCharset(encoding));\n        List<String> strs = FileUtils.readLines(new File(\"/dir\"), \"utf-8\");\n\n        //内部调用IOUtils.lineIterator(in, encoding)\n        FileUtils.lineIterator(new File(\"/dir\"), \"utf-8\");\n\n        //四个参数分别为：目标文件，写入的字符串，字符集，是否追加\n        FileUtils.writeStringToFile(new File(\"/target\"), \"string\", \"utf-8\", true);\n\n        FileUtils.write(new File(\"/target\"), \"target char sequence\", \"utf-8\", true);\n\n        //(file,字符数组)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes());\n        //(file,字符数组，是否追加)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes(), true);\n        //(file,字符数组，起始位置，结束位置)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes(), 0, 10);\n        //(file,字符数组，起始位置，结束位置，是否追加)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes(), 0, 10, true);\n\n        //writeLines多了一个lineEnding参数\n        FileUtils.writeLines(new File(\"/target\"), \"utf-8\", FileUtils.readLines(new File(\"/target\"), \"utf-8\"));\n\n        //强制删除\n        FileUtils.forceDelete(new File(\"/target\"));\n\n        //在JVM\n        FileUtils.forceDeleteOnExit(new File(\"/target\"));\n\n        //强制创建文件目录，如果文件存在，会抛出异常\n        FileUtils.forceMkdir(new File(\"/target\"));\n\n        //强制创建父级目录\n        FileUtils.forceMkdirParent(new File(\"/xxxx/target\"));\n\n        //如果是文件，直接读取文件大小；如果是目录，级联计算文件下的所有文件大小\n        //返回Long\n        FileUtils.sizeOf(new File(\"/target\"));\n        //返回BigInteger\n        FileUtils.sizeOfAsBigInteger(new File(\"/target\"));\n        FileUtils.sizeOfDirectory(new File(\"/target\"));\n        FileUtils.sizeOfDirectoryAsBigInteger(new File(\"/target\"));\n\n        //对比文件新旧\n        FileUtils.isFileNewer(new File(\"/target\"), new File(\"/file\"));\n\n        FileUtils.isFileOlder(new File(\"/target\"), new Date());\n\n        FileUtils.checksum(new File(\"/target\"), new CRC32());\n        FileUtils.checksumCRC32(new File(\"/target\"));\n\n        FileUtils.moveDirectory(new File(\"/target\"), new File(\"/file\"));\n        FileUtils.moveDirectoryToDirectory(new File(\"/target\"), new File(\"/file\"), true);\n        FileUtils.moveFile(new File(\"/target\"), new File(\"/file\"));\n        FileUtils.moveFileToDirectory(new File(\"/target\"), new File(\"/dir\"), true);\n        FileUtils.moveToDirectory(new File(\"/target\"), new File(\"/dir\"), true);\n\n        FileUtils.isSymlink(new File(\"/target\"));\n    }\n\n\n    public void findFiles() {\n        //返回文件的列表\n        List<File> files = (List<File>) FileUtils.listFiles(parent, new String[]{\"test1\", \"test2\"}, true);\n        //返回文件迭代器\n        Iterator<File> files_iter = FileUtils.iterateFiles(parent, new String[]{\"test1\", \"test3\"}, true);\n        //把collection<File>转换成File[]\n        FileUtils.convertFileCollectionToFileArray(files);\n    }\n}\n\n```\n","source":"_posts/Java文件处理常用方法.md","raw":"---\ntitle: commons-io的Java文件处理常用方法\ndate: 2023-02-17 11:07:01\ntags:\n    - 文件处理\ncategories: [后端, commons-io]\n---\n\n## Java文件处理常用方法\n\n归纳整理一些常用的处理文件的方法\n\n### Java Apache FileUtils\n\n#### Maven依赖引入\n\n```xml\n    <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>2.6</version>\n    </dependency>\n```\n\n#### 常用的方法\n\n```java\npackage com.cn.ybwn.file;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.filefilter.DirectoryFileFilter;\nimport org.apache.commons.io.filefilter.FileFileFilter;\nimport org.apache.commons.io.filefilter.FileFilterUtils;\nimport org.apache.commons.io.filefilter.IOFileFilter;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.zip.CRC32;\n\n/**\n * @author 25724\n * @date 2023/3/16 9:36\n * @description\n */\n\npublic class FileUtilsTest {\n    private static File parent = new File(\"D://test\");\n\n    public void getDirTest() {\n        //获得基本的信息\n        //获取临时目录 java.io.tmpdir,getUserDirectoryPath返回路径字符串\n        System.out.println(FileUtils.getTempDirectory());\n        //获取用户主目录 user.home,getUserDirectoryPath返回路径字符串\n        System.out.println(FileUtils.getUserDirectory());\n        //以可读的方式，返回文件的大小EB, PB, TB, GB, MB, KB or bytes\n        System.out.println(FileUtils.byteCountToDisplaySize(10000000));\n        System.out.println(FileUtils.byteCountToDisplaySize(1));\n    }\n\n    public void openStream() throws IOException {\n        //获取文件输入和输出的文件流\n        //文件是目录或者不存在，都会跑出异常\n        InputStream in = FileUtils.openInputStream(new File(\"D://test/test1\"));\n        OutputStream out = FileUtils.openOutputStream(new File(\"D://test/test2\"));\n        //是否追加的形式添加内容\n        out = FileUtils.openOutputStream(new File(\"D://test/test3\"), true);\n    }\n\n    public void FileOperation() throws IOException {\n        //创建文件，如果文件存在则更新时间；如果不存在，创建一个空文件\n        //创建空文件的方式为：\n        FileUtils.touch(new File(\"D://test/test4\"));\n\n        //文件内容的对比\n        FileUtils.contentEquals(new File(\"D://test/test1\"), new File(\"D://test/test2\"));\n        //忽略换行符，第三个参数是字符集\n        FileUtils.contentEqualsIgnoreEOL(new File(\"D://test/test1\"), new File(\"D://test/test2\"), null);\n\n        //根据URL获取文件\n        FileUtils.toFile(new URL(\"file://D://test/test1\"));\n        FileUtils.toFiles(null);\n        FileUtils.toURLs(new File[]{new File(\"D://test/test1\")});\n\n        //文件拷贝\n        //第三个参数是否更新时间\n        FileUtils.copyFileToDirectory(new File(\"/test1\"), new File(\"/dir\"), true);\n        FileUtils.copyFile(new File(\"/source\"), new File(\"/target\"), true);\n\n        //目录拷贝\n        File srcDir = new File(\"/source\");\n        File destDir = new File(\"/target\");\n\n        FileUtils.copyDirectoryToDirectory(new File(\"/source\"), new File(\"/target\"));\n        FileUtils.copyDirectory(new File(\"/source\"), new File(\"/target\"));\n        //仅仅拷贝目录\n        FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);\n        // 创建.txt过滤器\n        IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(\".txt\");\n        IOFileFilter txtFiles = FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);\n        // 创建包含目录或者txt文件的过滤器\n        FileFilter filter = FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);\n        // Copy using the filter\n        FileUtils.copyDirectory(srcDir, destDir, filter);\n\n        //文件拷贝\n        FileUtils.copyInputStreamToFile(new FileInputStream(\"/test\"), new File(\"/test\"));\n        FileUtils.copyURLToFile(new URL(\"file:/test\"), new File(\"/test\"));\n\n        //删除文件\n        //删除目录下所有的内容\n        FileUtils.deleteDirectory(new File(\"/test\"));\n        //如果是目录，会级联删除；不会抛出异常\n        FileUtils.deleteQuietly(new File(\"/test\"));\n\n        //判断文件是否存在\n        FileUtils.directoryContains(new File(\"/dir\"), new File(\"/file\"));\n\n        //清除目录中的内容,不会删除该目录；\n        //先verifiedListFiles检查目录，检查目录是否为目录、是否存在，然后调用listFiles，如果返回null，则抛出异常\n        //遍历目录中的文件，如果是目录则递归删除；如果是文件则强制删除，删除失败（文件不存在或无法删除）都会抛出异常\n        FileUtils.cleanDirectory(new File(\"/dir\"));\n\n        //等待一个文件xx秒，知道文件创建后才返回。每max(100,remainning)循环检查一次\n        while (FileUtils.waitFor(new File(\"/dir\"), 60)) {\n        }\n\n        //读取目标文件，内部调用IOUtils.toString(inputstream,\"utf-8\")\n        String str = FileUtils.readFileToString(new File(\"/dir\"), \"utf-8\");\n\n        //内部调用IOUtils.toByteArray(in)\n        byte[] bytes = FileUtils.readFileToByteArray(new File(\"/dir\"));\n\n        //内部调用IOUtils.readLines(in, Charsets.toCharset(encoding));\n        List<String> strs = FileUtils.readLines(new File(\"/dir\"), \"utf-8\");\n\n        //内部调用IOUtils.lineIterator(in, encoding)\n        FileUtils.lineIterator(new File(\"/dir\"), \"utf-8\");\n\n        //四个参数分别为：目标文件，写入的字符串，字符集，是否追加\n        FileUtils.writeStringToFile(new File(\"/target\"), \"string\", \"utf-8\", true);\n\n        FileUtils.write(new File(\"/target\"), \"target char sequence\", \"utf-8\", true);\n\n        //(file,字符数组)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes());\n        //(file,字符数组，是否追加)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes(), true);\n        //(file,字符数组，起始位置，结束位置)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes(), 0, 10);\n        //(file,字符数组，起始位置，结束位置，是否追加)\n        FileUtils.writeByteArrayToFile(new File(\"/target\"), \"bytes\".getBytes(), 0, 10, true);\n\n        //writeLines多了一个lineEnding参数\n        FileUtils.writeLines(new File(\"/target\"), \"utf-8\", FileUtils.readLines(new File(\"/target\"), \"utf-8\"));\n\n        //强制删除\n        FileUtils.forceDelete(new File(\"/target\"));\n\n        //在JVM\n        FileUtils.forceDeleteOnExit(new File(\"/target\"));\n\n        //强制创建文件目录，如果文件存在，会抛出异常\n        FileUtils.forceMkdir(new File(\"/target\"));\n\n        //强制创建父级目录\n        FileUtils.forceMkdirParent(new File(\"/xxxx/target\"));\n\n        //如果是文件，直接读取文件大小；如果是目录，级联计算文件下的所有文件大小\n        //返回Long\n        FileUtils.sizeOf(new File(\"/target\"));\n        //返回BigInteger\n        FileUtils.sizeOfAsBigInteger(new File(\"/target\"));\n        FileUtils.sizeOfDirectory(new File(\"/target\"));\n        FileUtils.sizeOfDirectoryAsBigInteger(new File(\"/target\"));\n\n        //对比文件新旧\n        FileUtils.isFileNewer(new File(\"/target\"), new File(\"/file\"));\n\n        FileUtils.isFileOlder(new File(\"/target\"), new Date());\n\n        FileUtils.checksum(new File(\"/target\"), new CRC32());\n        FileUtils.checksumCRC32(new File(\"/target\"));\n\n        FileUtils.moveDirectory(new File(\"/target\"), new File(\"/file\"));\n        FileUtils.moveDirectoryToDirectory(new File(\"/target\"), new File(\"/file\"), true);\n        FileUtils.moveFile(new File(\"/target\"), new File(\"/file\"));\n        FileUtils.moveFileToDirectory(new File(\"/target\"), new File(\"/dir\"), true);\n        FileUtils.moveToDirectory(new File(\"/target\"), new File(\"/dir\"), true);\n\n        FileUtils.isSymlink(new File(\"/target\"));\n    }\n\n\n    public void findFiles() {\n        //返回文件的列表\n        List<File> files = (List<File>) FileUtils.listFiles(parent, new String[]{\"test1\", \"test2\"}, true);\n        //返回文件迭代器\n        Iterator<File> files_iter = FileUtils.iterateFiles(parent, new String[]{\"test1\", \"test3\"}, true);\n        //把collection<File>转换成File[]\n        FileUtils.convertFileCollectionToFileArray(files);\n    }\n}\n\n```\n","slug":"Java文件处理常用方法","published":1,"updated":"2023-03-16T06:20:30.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0c000jhgac3nt8e6cy","content":"<h2 id=\"Java文件处理常用方法\"><a href=\"#Java文件处理常用方法\" class=\"headerlink\" title=\"Java文件处理常用方法\"></a>Java文件处理常用方法</h2><p>归纳整理一些常用的处理文件的方法</p>\n<h3 id=\"Java-Apache-FileUtils\"><a href=\"#Java-Apache-FileUtils\" class=\"headerlink\" title=\"Java Apache FileUtils\"></a>Java Apache FileUtils</h3><h4 id=\"Maven依赖引入\"><a href=\"#Maven依赖引入\" class=\"headerlink\" title=\"Maven依赖引入\"></a>Maven依赖引入</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cn.ybwn.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.FileFileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.FileFilterUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.IOFileFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.CRC32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 25724</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/3/16 9:36</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUtilsTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">File</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getDirTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得基本的信息</span></span><br><span class=\"line\">        <span class=\"comment\">//获取临时目录 java.io.tmpdir,getUserDirectoryPath返回路径字符串</span></span><br><span class=\"line\">        System.out.println(FileUtils.getTempDirectory());</span><br><span class=\"line\">        <span class=\"comment\">//获取用户主目录 user.home,getUserDirectoryPath返回路径字符串</span></span><br><span class=\"line\">        System.out.println(FileUtils.getUserDirectory());</span><br><span class=\"line\">        <span class=\"comment\">//以可读的方式，返回文件的大小EB, PB, TB, GB, MB, KB or bytes</span></span><br><span class=\"line\">        System.out.println(FileUtils.byteCountToDisplaySize(<span class=\"number\">10000000</span>));</span><br><span class=\"line\">        System.out.println(FileUtils.byteCountToDisplaySize(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">openStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取文件输入和输出的文件流</span></span><br><span class=\"line\">        <span class=\"comment\">//文件是目录或者不存在，都会跑出异常</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> FileUtils.openInputStream(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> FileUtils.openOutputStream(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test2&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//是否追加的形式添加内容</span></span><br><span class=\"line\">        out = FileUtils.openOutputStream(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test3&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">FileOperation</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建文件，如果文件存在则更新时间；如果不存在，创建一个空文件</span></span><br><span class=\"line\">        <span class=\"comment\">//创建空文件的方式为：</span></span><br><span class=\"line\">        FileUtils.touch(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test4&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//文件内容的对比</span></span><br><span class=\"line\">        FileUtils.contentEquals(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test2&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//忽略换行符，第三个参数是字符集</span></span><br><span class=\"line\">        FileUtils.contentEqualsIgnoreEOL(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test2&quot;</span>), <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据URL获取文件</span></span><br><span class=\"line\">        FileUtils.toFile(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;file://D://test/test1&quot;</span>));</span><br><span class=\"line\">        FileUtils.toFiles(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        FileUtils.toURLs(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>[]&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//文件拷贝</span></span><br><span class=\"line\">        <span class=\"comment\">//第三个参数是否更新时间</span></span><br><span class=\"line\">        FileUtils.copyFileToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test1&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        FileUtils.copyFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//目录拷贝</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">srcDir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">destDir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.copyDirectoryToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        FileUtils.copyDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//仅仅拷贝目录</span></span><br><span class=\"line\">        FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);</span><br><span class=\"line\">        <span class=\"comment\">// 创建.txt过滤器</span></span><br><span class=\"line\">        <span class=\"type\">IOFileFilter</span> <span class=\"variable\">txtSuffixFilter</span> <span class=\"operator\">=</span> FileFilterUtils.suffixFileFilter(<span class=\"string\">&quot;.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">IOFileFilter</span> <span class=\"variable\">txtFiles</span> <span class=\"operator\">=</span> FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);</span><br><span class=\"line\">        <span class=\"comment\">// 创建包含目录或者txt文件的过滤器</span></span><br><span class=\"line\">        <span class=\"type\">FileFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);</span><br><span class=\"line\">        <span class=\"comment\">// Copy using the filter</span></span><br><span class=\"line\">        FileUtils.copyDirectory(srcDir, destDir, filter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//文件拷贝</span></span><br><span class=\"line\">        FileUtils.copyInputStreamToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;/test&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\">        FileUtils.copyURLToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;file:/test&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除文件</span></span><br><span class=\"line\">        <span class=\"comment\">//删除目录下所有的内容</span></span><br><span class=\"line\">        FileUtils.deleteDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//如果是目录，会级联删除；不会抛出异常</span></span><br><span class=\"line\">        FileUtils.deleteQuietly(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断文件是否存在</span></span><br><span class=\"line\">        FileUtils.directoryContains(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//清除目录中的内容,不会删除该目录；</span></span><br><span class=\"line\">        <span class=\"comment\">//先verifiedListFiles检查目录，检查目录是否为目录、是否存在，然后调用listFiles，如果返回null，则抛出异常</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历目录中的文件，如果是目录则递归删除；如果是文件则强制删除，删除失败（文件不存在或无法删除）都会抛出异常</span></span><br><span class=\"line\">        FileUtils.cleanDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待一个文件xx秒，知道文件创建后才返回。每max(100,remainning)循环检查一次</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (FileUtils.waitFor(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"number\">60</span>)) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//读取目标文件，内部调用IOUtils.toString(inputstream,&quot;utf-8&quot;)</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> FileUtils.readFileToString(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//内部调用IOUtils.toByteArray(in)</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = FileUtils.readFileToByteArray(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//内部调用IOUtils.readLines(in, Charsets.toCharset(encoding));</span></span><br><span class=\"line\">        List&lt;String&gt; strs = FileUtils.readLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//内部调用IOUtils.lineIterator(in, encoding)</span></span><br><span class=\"line\">        FileUtils.lineIterator(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//四个参数分别为：目标文件，写入的字符串，字符集，是否追加</span></span><br><span class=\"line\">        FileUtils.writeStringToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;target char sequence&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组，是否追加)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组，起始位置，结束位置)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes(), <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组，起始位置，结束位置，是否追加)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes(), <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeLines多了一个lineEnding参数</span></span><br><span class=\"line\">        FileUtils.writeLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>, FileUtils.readLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//强制删除</span></span><br><span class=\"line\">        FileUtils.forceDelete(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在JVM</span></span><br><span class=\"line\">        FileUtils.forceDeleteOnExit(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//强制创建文件目录，如果文件存在，会抛出异常</span></span><br><span class=\"line\">        FileUtils.forceMkdir(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//强制创建父级目录</span></span><br><span class=\"line\">        FileUtils.forceMkdirParent(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/xxxx/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果是文件，直接读取文件大小；如果是目录，级联计算文件下的所有文件大小</span></span><br><span class=\"line\">        <span class=\"comment\">//返回Long</span></span><br><span class=\"line\">        FileUtils.sizeOf(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//返回BigInteger</span></span><br><span class=\"line\">        FileUtils.sizeOfAsBigInteger(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        FileUtils.sizeOfDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        FileUtils.sizeOfDirectoryAsBigInteger(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对比文件新旧</span></span><br><span class=\"line\">        FileUtils.isFileNewer(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.isFileOlder(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.checksum(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">CRC32</span>());</span><br><span class=\"line\">        FileUtils.checksumCRC32(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.moveDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\">        FileUtils.moveDirectoryToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        FileUtils.moveFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\">        FileUtils.moveFileToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        FileUtils.moveToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.isSymlink(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findFiles</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回文件的列表</span></span><br><span class=\"line\">        List&lt;File&gt; files = (List&lt;File&gt;) FileUtils.listFiles(parent, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回文件迭代器</span></span><br><span class=\"line\">        Iterator&lt;File&gt; files_iter = FileUtils.iterateFiles(parent, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test3&quot;</span>&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把collection&lt;File&gt;转换成File[]</span></span><br><span class=\"line\">        FileUtils.convertFileCollectionToFileArray(files);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java文件处理常用方法\"><a href=\"#Java文件处理常用方法\" class=\"headerlink\" title=\"Java文件处理常用方法\"></a>Java文件处理常用方法</h2><p>归纳整理一些常用的处理文件的方法</p>\n<h3 id=\"Java-Apache-FileUtils\"><a href=\"#Java-Apache-FileUtils\" class=\"headerlink\" title=\"Java Apache FileUtils\"></a>Java Apache FileUtils</h3><h4 id=\"Maven依赖引入\"><a href=\"#Maven依赖引入\" class=\"headerlink\" title=\"Maven依赖引入\"></a>Maven依赖引入</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cn.ybwn.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.FileFileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.FileFilterUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.filefilter.IOFileFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.CRC32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 25724</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/3/16 9:36</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUtilsTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">File</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getDirTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得基本的信息</span></span><br><span class=\"line\">        <span class=\"comment\">//获取临时目录 java.io.tmpdir,getUserDirectoryPath返回路径字符串</span></span><br><span class=\"line\">        System.out.println(FileUtils.getTempDirectory());</span><br><span class=\"line\">        <span class=\"comment\">//获取用户主目录 user.home,getUserDirectoryPath返回路径字符串</span></span><br><span class=\"line\">        System.out.println(FileUtils.getUserDirectory());</span><br><span class=\"line\">        <span class=\"comment\">//以可读的方式，返回文件的大小EB, PB, TB, GB, MB, KB or bytes</span></span><br><span class=\"line\">        System.out.println(FileUtils.byteCountToDisplaySize(<span class=\"number\">10000000</span>));</span><br><span class=\"line\">        System.out.println(FileUtils.byteCountToDisplaySize(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">openStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取文件输入和输出的文件流</span></span><br><span class=\"line\">        <span class=\"comment\">//文件是目录或者不存在，都会跑出异常</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> FileUtils.openInputStream(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> FileUtils.openOutputStream(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test2&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//是否追加的形式添加内容</span></span><br><span class=\"line\">        out = FileUtils.openOutputStream(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test3&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">FileOperation</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建文件，如果文件存在则更新时间；如果不存在，创建一个空文件</span></span><br><span class=\"line\">        <span class=\"comment\">//创建空文件的方式为：</span></span><br><span class=\"line\">        FileUtils.touch(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test4&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//文件内容的对比</span></span><br><span class=\"line\">        FileUtils.contentEquals(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test2&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//忽略换行符，第三个参数是字符集</span></span><br><span class=\"line\">        FileUtils.contentEqualsIgnoreEOL(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test2&quot;</span>), <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据URL获取文件</span></span><br><span class=\"line\">        FileUtils.toFile(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;file://D://test/test1&quot;</span>));</span><br><span class=\"line\">        FileUtils.toFiles(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        FileUtils.toURLs(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>[]&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D://test/test1&quot;</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//文件拷贝</span></span><br><span class=\"line\">        <span class=\"comment\">//第三个参数是否更新时间</span></span><br><span class=\"line\">        FileUtils.copyFileToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test1&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        FileUtils.copyFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//目录拷贝</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">srcDir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">destDir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.copyDirectoryToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        FileUtils.copyDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/source&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//仅仅拷贝目录</span></span><br><span class=\"line\">        FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);</span><br><span class=\"line\">        <span class=\"comment\">// 创建.txt过滤器</span></span><br><span class=\"line\">        <span class=\"type\">IOFileFilter</span> <span class=\"variable\">txtSuffixFilter</span> <span class=\"operator\">=</span> FileFilterUtils.suffixFileFilter(<span class=\"string\">&quot;.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">IOFileFilter</span> <span class=\"variable\">txtFiles</span> <span class=\"operator\">=</span> FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);</span><br><span class=\"line\">        <span class=\"comment\">// 创建包含目录或者txt文件的过滤器</span></span><br><span class=\"line\">        <span class=\"type\">FileFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);</span><br><span class=\"line\">        <span class=\"comment\">// Copy using the filter</span></span><br><span class=\"line\">        FileUtils.copyDirectory(srcDir, destDir, filter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//文件拷贝</span></span><br><span class=\"line\">        FileUtils.copyInputStreamToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;/test&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\">        FileUtils.copyURLToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;file:/test&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除文件</span></span><br><span class=\"line\">        <span class=\"comment\">//删除目录下所有的内容</span></span><br><span class=\"line\">        FileUtils.deleteDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//如果是目录，会级联删除；不会抛出异常</span></span><br><span class=\"line\">        FileUtils.deleteQuietly(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/test&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断文件是否存在</span></span><br><span class=\"line\">        FileUtils.directoryContains(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//清除目录中的内容,不会删除该目录；</span></span><br><span class=\"line\">        <span class=\"comment\">//先verifiedListFiles检查目录，检查目录是否为目录、是否存在，然后调用listFiles，如果返回null，则抛出异常</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历目录中的文件，如果是目录则递归删除；如果是文件则强制删除，删除失败（文件不存在或无法删除）都会抛出异常</span></span><br><span class=\"line\">        FileUtils.cleanDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待一个文件xx秒，知道文件创建后才返回。每max(100,remainning)循环检查一次</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (FileUtils.waitFor(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"number\">60</span>)) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//读取目标文件，内部调用IOUtils.toString(inputstream,&quot;utf-8&quot;)</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> FileUtils.readFileToString(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//内部调用IOUtils.toByteArray(in)</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = FileUtils.readFileToByteArray(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//内部调用IOUtils.readLines(in, Charsets.toCharset(encoding));</span></span><br><span class=\"line\">        List&lt;String&gt; strs = FileUtils.readLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//内部调用IOUtils.lineIterator(in, encoding)</span></span><br><span class=\"line\">        FileUtils.lineIterator(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//四个参数分别为：目标文件，写入的字符串，字符集，是否追加</span></span><br><span class=\"line\">        FileUtils.writeStringToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;target char sequence&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组，是否追加)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组，起始位置，结束位置)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes(), <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//(file,字符数组，起始位置，结束位置，是否追加)</span></span><br><span class=\"line\">        FileUtils.writeByteArrayToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;bytes&quot;</span>.getBytes(), <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeLines多了一个lineEnding参数</span></span><br><span class=\"line\">        FileUtils.writeLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>, FileUtils.readLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//强制删除</span></span><br><span class=\"line\">        FileUtils.forceDelete(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在JVM</span></span><br><span class=\"line\">        FileUtils.forceDeleteOnExit(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//强制创建文件目录，如果文件存在，会抛出异常</span></span><br><span class=\"line\">        FileUtils.forceMkdir(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//强制创建父级目录</span></span><br><span class=\"line\">        FileUtils.forceMkdirParent(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/xxxx/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果是文件，直接读取文件大小；如果是目录，级联计算文件下的所有文件大小</span></span><br><span class=\"line\">        <span class=\"comment\">//返回Long</span></span><br><span class=\"line\">        FileUtils.sizeOf(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//返回BigInteger</span></span><br><span class=\"line\">        FileUtils.sizeOfAsBigInteger(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        FileUtils.sizeOfDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">        FileUtils.sizeOfDirectoryAsBigInteger(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对比文件新旧</span></span><br><span class=\"line\">        FileUtils.isFileNewer(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.isFileOlder(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.checksum(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">CRC32</span>());</span><br><span class=\"line\">        FileUtils.checksumCRC32(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.moveDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\">        FileUtils.moveDirectoryToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        FileUtils.moveFile(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/file&quot;</span>));</span><br><span class=\"line\">        FileUtils.moveFileToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        FileUtils.moveToDirectory(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/dir&quot;</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileUtils.isSymlink(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/target&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findFiles</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回文件的列表</span></span><br><span class=\"line\">        List&lt;File&gt; files = (List&lt;File&gt;) FileUtils.listFiles(parent, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回文件迭代器</span></span><br><span class=\"line\">        Iterator&lt;File&gt; files_iter = FileUtils.iterateFiles(parent, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test3&quot;</span>&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把collection&lt;File&gt;转换成File[]</span></span><br><span class=\"line\">        FileUtils.convertFileCollectionToFileArray(files);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Java交换数组元素","date":"2021-03-30T05:53:53.000Z","_content":"\n## Java 交换数组元素\n\n### 代码示例\n\n```Java\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author zhkai\n * @date 2021年3月30日14:09:29\n */\npublic class SwapElement {\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementOne(int[] nums, int i, int j) {\n        int item = nums[i];\n        nums[i] = nums[j];\n        nums[j] = item;\n        return nums;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementTwo(int[] nums, int i, int j) {\n        List<Integer> item = Arrays.stream(nums).boxed().collect(Collectors.toList());\n        Collections.swap(item, i, j);\n        int[] result = item.stream().mapToInt(Integer::valueOf).toArray();\n        return result;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementThree(int[] nums, int i, int j) {\n        nums[i] ^= nums[j];\n        nums[j] ^= nums[i];\n        nums[i] ^= nums[j];\n        return nums;\n    }\n}\n\n```\n\n### 效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4}; i=1; j=3;\n方法一：2420500ns\n方法二：163113800ns\n方法三：20200ns\n```\n\n### 总结\n\n- 方法一：\n    使用中间变量进行交换，不能直接进行交换。\n- 方法二：\n    使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。\n- 方法三：\n    使用位运算符进行交换。\n    ^：如果相对应位值相同，则结果为0，否则为1\n    `C ^= C1 等价于 C = C^C1`\n","source":"_posts/Java交换数组元素.md","raw":"---\ntitle: Java交换数组元素\ndate: 2021-03-30 13:53:53\ntags:\n  - 数组\ncategories: [后端, Java]\n---\n\n## Java 交换数组元素\n\n### 代码示例\n\n```Java\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author zhkai\n * @date 2021年3月30日14:09:29\n */\npublic class SwapElement {\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementOne(int[] nums, int i, int j) {\n        int item = nums[i];\n        nums[i] = nums[j];\n        nums[j] = item;\n        return nums;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementTwo(int[] nums, int i, int j) {\n        List<Integer> item = Arrays.stream(nums).boxed().collect(Collectors.toList());\n        Collections.swap(item, i, j);\n        int[] result = item.stream().mapToInt(Integer::valueOf).toArray();\n        return result;\n    }\n\n    /**\n     * 将数组下标为i和数组下标为j的两个数组元素进行交换\n     *\n     * @param nums 待交换数组\n     * @param i    需交换下标\n     * @param j    需交换下标\n     * @return 交换后的数组\n     */\n    public static int[] swapElementThree(int[] nums, int i, int j) {\n        nums[i] ^= nums[j];\n        nums[j] ^= nums[i];\n        nums[i] ^= nums[j];\n        return nums;\n    }\n}\n\n```\n\n### 效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4}; i=1; j=3;\n方法一：2420500ns\n方法二：163113800ns\n方法三：20200ns\n```\n\n### 总结\n\n- 方法一：\n    使用中间变量进行交换，不能直接进行交换。\n- 方法二：\n    使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。\n- 方法三：\n    使用位运算符进行交换。\n    ^：如果相对应位值相同，则结果为0，否则为1\n    `C ^= C1 等价于 C = C^C1`\n","slug":"Java交换数组元素","published":1,"updated":"2022-10-27T06:40:13.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0d000nhgacgym2g5ji","content":"<h2 id=\"Java-交换数组元素\"><a href=\"#Java-交换数组元素\" class=\"headerlink\" title=\"Java 交换数组元素\"></a>Java 交换数组元素</h2><h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月30日14:09:29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwapElement</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementOne(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = item;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementTwo(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; item = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class=\"line\">        Collections.swap(item, i, j);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = item.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementThree(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        nums[j] ^= nums[i];</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;; i=1; j=3;</span><br><span class=\"line\">方法一：2420500ns</span><br><span class=\"line\">方法二：163113800ns</span><br><span class=\"line\">方法三：20200ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>方法一：<br>  使用中间变量进行交换，不能直接进行交换。</li>\n<li>方法二：<br>  使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。</li>\n<li>方法三：<br>  使用位运算符进行交换。<br>  ^：如果相对应位值相同，则结果为0，否则为1<br>  <code>C ^= C1 等价于 C = C^C1</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-交换数组元素\"><a href=\"#Java-交换数组元素\" class=\"headerlink\" title=\"Java 交换数组元素\"></a>Java 交换数组元素</h2><h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月30日14:09:29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwapElement</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementOne(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = item;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementTwo(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; item = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class=\"line\">        Collections.swap(item, i, j);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = item.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 待交换数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j    需交换下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 交换后的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] swapElementThree(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j) &#123;</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        nums[j] ^= nums[i];</span><br><span class=\"line\">        nums[i] ^= nums[j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;; i=1; j=3;</span><br><span class=\"line\">方法一：2420500ns</span><br><span class=\"line\">方法二：163113800ns</span><br><span class=\"line\">方法三：20200ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>方法一：<br>  使用中间变量进行交换，不能直接进行交换。</li>\n<li>方法二：<br>  使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。</li>\n<li>方法三：<br>  使用位运算符进行交换。<br>  ^：如果相对应位值相同，则结果为0，否则为1<br>  <code>C ^= C1 等价于 C = C^C1</code></li>\n</ul>\n"},{"title":"LeetCode一维数组的动态和","date":"2021-03-31T01:47:34.000Z","_content":"\n## 一维数组的动态和\n\n### 题目描述\n\n给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]...nums[i])。\n请返回 nums 的动态和。\n\n示例 1：\n\n```Text\n  输入：nums = [1,2,3,4]\n  输出：[1,3,6,10]\n  解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]\n```\n\n示例 2：\n\n```Text\n  输入：nums = [1,1,1,1,1]\n  输出：[1,2,3,4,5]\n  解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]\n```\n\n示例 3：\n\n```Text\n  输入：nums = [3,1,2,10,1]\n  输出：[3,4,5,16,17]\n  解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月31日10:07:10\n */\npublic class RunningSum {\n    /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSum(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return null;\n        }\n        int[] result = new int[numsLen];\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j <= i; j++) {\n                result[i] += nums[j];\n            }\n        }\n        return result;\n    }\n}\n```\n\n### 他山之石（Java）\n\n```Java\n /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumTwo(int[] nums){\n        for( int i = 1 ; i < nums.length ; i++ ){\n            nums[i] += nums[i-1];\n        }\n        return nums;\n    }\n```\n\n```Java\n/**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumThree(int[] nums) {\n        int numsLen = nums.length;\n        int[] result = new int[numsLen];\n        result[0] = nums[0];\n        for (int i = 1; i < numsLen; i++) {\n            result[i] = result[i - 1] + nums[i];\n        }\n        return result;\n    }\n```\n\n#### 效率分析(Java)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：1820300ns\n方法二用时：8600ns\n方法三用时：11300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef running_sum(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    result = [0 for i in range(nums_len)]\n    for i in range(nums_len):\n        for j in range(i + 1):\n            result[i] += nums[j]\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef running_sum_two(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    res = [nums[0]]\n    for i in range(1, nums_len):\n        total = res[i - 1] + nums[i]\n        res.append(total)\n    return res\n```\n\n#### 效率分析(Python)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：15700ns\n方法二用时：6500ns\n```\n","source":"_posts/LeetCode一维数组的动态和.md","raw":"---\ntitle: LeetCode一维数组的动态和\ndate: 2021-03-31 09:47:34\ntags:\n  - LeetCode\n  - 数组\ncategories:\n  - 后端\n  - 算法\n---\n\n## 一维数组的动态和\n\n### 题目描述\n\n给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]...nums[i])。\n请返回 nums 的动态和。\n\n示例 1：\n\n```Text\n  输入：nums = [1,2,3,4]\n  输出：[1,3,6,10]\n  解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]\n```\n\n示例 2：\n\n```Text\n  输入：nums = [1,1,1,1,1]\n  输出：[1,2,3,4,5]\n  解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]\n```\n\n示例 3：\n\n```Text\n  输入：nums = [3,1,2,10,1]\n  输出：[3,4,5,16,17]\n  解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月31日10:07:10\n */\npublic class RunningSum {\n    /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSum(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return null;\n        }\n        int[] result = new int[numsLen];\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j <= i; j++) {\n                result[i] += nums[j];\n            }\n        }\n        return result;\n    }\n}\n```\n\n### 他山之石（Java）\n\n```Java\n /**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumTwo(int[] nums){\n        for( int i = 1 ; i < nums.length ; i++ ){\n            nums[i] += nums[i-1];\n        }\n        return nums;\n    }\n```\n\n```Java\n/**\n     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n     * 请返回 nums 的动态和\n     *\n     * @param nums 数组\n     * @return nums 的动态和\n     */\n    public static int[] runningSumThree(int[] nums) {\n        int numsLen = nums.length;\n        int[] result = new int[numsLen];\n        result[0] = nums[0];\n        for (int i = 1; i < numsLen; i++) {\n            result[i] = result[i - 1] + nums[i];\n        }\n        return result;\n    }\n```\n\n#### 效率分析(Java)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：1820300ns\n方法二用时：8600ns\n方法三用时：11300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef running_sum(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    result = [0 for i in range(nums_len)]\n    for i in range(nums_len):\n        for j in range(i + 1):\n            result[i] += nums[j]\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef running_sum_two(nums: List[int]) -> List[int]:\n    \"\"\"\n    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n    请返回 nums 的动态和\n    :param nums: 数组\n    :return: 数组的动态和\n    \"\"\"\n    nums_len = len(nums)\n    res = [nums[0]]\n    for i in range(1, nums_len):\n        total = res[i - 1] + nums[i]\n        res.append(total)\n    return res\n```\n\n#### 效率分析(Python)\n\n```Text\n输入：nums = {1, 2, 3, 4};\n方法一用时：15700ns\n方法二用时：6500ns\n```\n","slug":"LeetCode一维数组的动态和","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0e000ohgacc8yj7q2d","content":"<h2 id=\"一维数组的动态和\"><a href=\"#一维数组的动态和\" class=\"headerlink\" title=\"一维数组的动态和\"></a>一维数组的动态和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i])。<br>请返回 nums 的动态和。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：[1,3,6,10]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1,1,1]</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,1,2,10,1]</span><br><span class=\"line\">输出：[3,4,5,16,17]</span><br><span class=\"line\">解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月31日10:07:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunningSum</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSum(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                result[i] += nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">    * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumTwo(<span class=\"type\">int</span>[] nums)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; nums.length ; i++ )&#123;</span><br><span class=\"line\">           nums[i] += nums[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumThree(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        result[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            result[i] = result[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Java\"><a href=\"#效率分析-Java\" class=\"headerlink\" title=\"效率分析(Java)\"></a>效率分析(Java)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：1820300ns</span><br><span class=\"line\">方法二用时：8600ns</span><br><span class=\"line\">方法三用时：11300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    result = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            result[i] += nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [nums[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        total = res[i - <span class=\"number\">1</span>] + nums[i]</span><br><span class=\"line\">        res.append(total)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Python\"><a href=\"#效率分析-Python\" class=\"headerlink\" title=\"效率分析(Python)\"></a>效率分析(Python)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：15700ns</span><br><span class=\"line\">方法二用时：6500ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一维数组的动态和\"><a href=\"#一维数组的动态和\" class=\"headerlink\" title=\"一维数组的动态和\"></a>一维数组的动态和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i])。<br>请返回 nums 的动态和。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：[1,3,6,10]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1,1,1]</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br><span class=\"line\">解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,1,2,10,1]</span><br><span class=\"line\">输出：[3,4,5,16,17]</span><br><span class=\"line\">解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月31日10:07:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunningSum</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSum(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                result[i] += nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">    * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumTwo(<span class=\"type\">int</span>[] nums)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; nums.length ; i++ )&#123;</span><br><span class=\"line\">           nums[i] += nums[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"comment\">     * 请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> nums 的动态和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] runningSumThree(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen];</span><br><span class=\"line\">        result[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            result[i] = result[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Java\"><a href=\"#效率分析-Java\" class=\"headerlink\" title=\"效率分析(Java)\"></a>效率分析(Java)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：1820300ns</span><br><span class=\"line\">方法二用时：8600ns</span><br><span class=\"line\">方法三用时：11300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    result = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            result[i] += nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">running_sum_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class=\"line\"><span class=\"string\">    请返回 nums 的动态和</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组的动态和</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [nums[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        total = res[i - <span class=\"number\">1</span>] + nums[i]</span><br><span class=\"line\">        res.append(total)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率分析-Python\"><a href=\"#效率分析-Python\" class=\"headerlink\" title=\"效率分析(Python)\"></a>效率分析(Python)</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">方法一用时：15700ns</span><br><span class=\"line\">方法二用时：6500ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode两数之和","date":"2021-03-23T06:09:47.000Z","_content":"\n## LeetCode 两数之和\n\n### 题目描述\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n示例：\n\n```Text\n给定nums = [2,7,11,15],target=9\n因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]\n```\n\n### Java 解法\n\n```Java\nimport java.util.HashMap;\n\n/**\n * @author zhkai\n * @date 2021年3月23日14:27:28\n */\npublic class TwoNumSum {\n    private final static int NUM_NUMS = 2;\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSum(int[] nums, int target) {\n        int len = nums.length;\n        if (len < NUM_NUMS) {\n            return new int[0];\n        }\n        int[] result = new int[2];\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (nums[i] + nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSumMap(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>(16);\n        int len = nums.length;\n        for (int i = 0; i < len; i++) {\n            if (map.containsKey(target - nums[i])) {\n                return new int[]{map.get(target - nums[i]), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n\n```\n\n#### Java解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：5074400ns\n方法二：264300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef two_sum_dict(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n   :param nums: 整数数组\n   :param target: 目标值\n   :return: 数组中和为目标值的两个整数的数组下标\n   \"\"\"\n    dict_item = dict()\n    for i, num in enumerate(nums):\n        if target - num in dict_item:\n            return [dict_item[target - num], i]\n    return []\n\n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n    :param nums: 整数数组\n    :param target: 目标值\n    :return: 数组中和为目标值的两个整数的数组下标\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\n```\n\n#### Python解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：10200ns\n方法二：6800ns\n```\n","source":"_posts/LeetCode两数之和.md","raw":"---\ntitle: LeetCode两数之和\ndate: 2021-03-23 14:09:47\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 两数之和\n\n### 题目描述\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n示例：\n\n```Text\n给定nums = [2,7,11,15],target=9\n因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]\n```\n\n### Java 解法\n\n```Java\nimport java.util.HashMap;\n\n/**\n * @author zhkai\n * @date 2021年3月23日14:27:28\n */\npublic class TwoNumSum {\n    private final static int NUM_NUMS = 2;\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSum(int[] nums, int target) {\n        int len = nums.length;\n        if (len < NUM_NUMS) {\n            return new int[0];\n        }\n        int[] result = new int[2];\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (nums[i] + nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n     *\n     * @param nums   整数数组\n     * @param target 目标值\n     * @return 数组中和为目标值的两个整数的数组下标\n     */\n    public static int[] twoNumSumMap(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>(16);\n        int len = nums.length;\n        for (int i = 0; i < len; i++) {\n            if (map.containsKey(target - nums[i])) {\n                return new int[]{map.get(target - nums[i]), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n\n```\n\n#### Java解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：5074400ns\n方法二：264300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef two_sum_dict(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n   :param nums: 整数数组\n   :param target: 目标值\n   :return: 数组中和为目标值的两个整数的数组下标\n   \"\"\"\n    dict_item = dict()\n    for i, num in enumerate(nums):\n        if target - num in dict_item:\n            return [dict_item[target - num], i]\n    return []\n\n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n    :param nums: 整数数组\n    :param target: 目标值\n    :return: 数组中和为目标值的两个整数的数组下标\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\n```\n\n#### Python解法效率对比\n\n```Text\n输入：nums = {1, 3, 5, 7, 9, 12, 13, 19, 20};target = 23;\n方法一：10200ns\n方法二：6800ns\n```\n","slug":"LeetCode两数之和","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0f000rhgac7f4chuo6","content":"<h2 id=\"LeetCode-两数之和\"><a href=\"#LeetCode-两数之和\" class=\"headerlink\" title=\"LeetCode 两数之和\"></a>LeetCode 两数之和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定nums = [2,7,11,15],target=9</span><br><span class=\"line\">因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月23日14:27:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoNumSum</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_NUMS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; NUM_NUMS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class=\"line\">                    result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                    result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSumMap(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java解法效率对比\"><a href=\"#Java解法效率对比\" class=\"headerlink\" title=\"Java解法效率对比\"></a>Java解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：5074400ns</span><br><span class=\"line\">方法二：264300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum_dict</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">   :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">   :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   &quot;&quot;&quot;</span></span><br><span class=\"line\">    dict_item = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> dict_item:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [dict_item[target - num], i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python解法效率对比\"><a href=\"#Python解法效率对比\" class=\"headerlink\" title=\"Python解法效率对比\"></a>Python解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：10200ns</span><br><span class=\"line\">方法二：6800ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-两数之和\"><a href=\"#LeetCode-两数之和\" class=\"headerlink\" title=\"LeetCode 两数之和\"></a>LeetCode 两数之和</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定nums = [2,7,11,15],target=9</span><br><span class=\"line\">因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月23日14:27:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoNumSum</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_NUMS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; NUM_NUMS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class=\"line\">                    result[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                    result[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums   整数数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target 目标值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] twoNumSumMap(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java解法效率对比\"><a href=\"#Java解法效率对比\" class=\"headerlink\" title=\"Java解法效率对比\"></a>Java解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：5074400ns</span><br><span class=\"line\">方法二：264300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum_dict</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">   :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">   :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">   &quot;&quot;&quot;</span></span><br><span class=\"line\">    dict_item = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> dict_item:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [dict_item[target - num], i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">two_sum</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 目标值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python解法效率对比\"><a href=\"#Python解法效率对比\" class=\"headerlink\" title=\"Python解法效率对比\"></a>Python解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class=\"line\">方法一：10200ns</span><br><span class=\"line\">方法二：6800ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode二维数组中的查找","date":"2021-04-09T02:03:29.000Z","_content":"\n## LeetCode 二维数组中的查找\n\n### 题目描述\n\n在一个 n\\*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。\n\n示例：\n现有矩阵 matrix 如下：\n\n```Text\n[\n  [1,4,7,11,15],\n  [2,5,8,12,19],\n  [3,6,9,16,22],\n  [10,13,14,17,24],\n  [18,21,23,26,30]\n]\n给定target = 5，返回true\n给定target = 20，返回false\n```\n\n### 一得之见（Java/Python）\n\n双循环求解。\n时间复杂度：O(nm)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        for(int i = 0; i < rows; i++){\n            for(int j = 0; j < columns; j++){\n                if(matrix[i][j] == target){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n```\n\n```Python\ndef find_number_in_two_dimen_array(\n        matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n    :param matrix: 二维数组\n    :param target: 整数\n    :return: 二维数组中是否含有该整数\n    \"\"\"\n    if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:\n        return False\n    else:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == target:\n                    return True\n    return False\n```\n\n### 他山之石（Java/Python）\n\n由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。\n\n- 若数组为空，返回 false\n- 初始化行下标为 0，列下标为二维数组的列数减 1\n- 重复下列步骤，知道行下标或者列下标超出边界\n  - 获得当前下标位置的元素 num\n  - 如果 num 和 target 相等，则返回 true\n  - 如果 num 大于 target，列下标减 1\n  - 如果 num 小于 target，行下标加 1\n\n时间复杂度：O(n+m)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArrayTwo(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        int row = 0;\n        int column = columns - 1;\n        while (row < rows && column >= 0) {\n            int num = matrix[row][column];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n                column--;\n            } else {\n                row++;\n            }\n        }\n        return false;\n    }\n```\n\n### 效率对比（Java）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：2201800ns （个人笨比解法😂）\n方法二：8900ns  （线性查找）\n```\n\n### 效率对比（Python）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：11000ns （个人笨比解法😂）\n方法二：5900ns （线性查找）\n```\n","source":"_posts/LeetCode二维数组中的查找.md","raw":"---\ntitle: LeetCode二维数组中的查找\ndate: 2021-04-09 10:03:29\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 二维数组中的查找\n\n### 题目描述\n\n在一个 n\\*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。\n\n示例：\n现有矩阵 matrix 如下：\n\n```Text\n[\n  [1,4,7,11,15],\n  [2,5,8,12,19],\n  [3,6,9,16,22],\n  [10,13,14,17,24],\n  [18,21,23,26,30]\n]\n给定target = 5，返回true\n给定target = 20，返回false\n```\n\n### 一得之见（Java/Python）\n\n双循环求解。\n时间复杂度：O(nm)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        for(int i = 0; i < rows; i++){\n            for(int j = 0; j < columns; j++){\n                if(matrix[i][j] == target){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n```\n\n```Python\ndef find_number_in_two_dimen_array(\n        matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n    :param matrix: 二维数组\n    :param target: 整数\n    :return: 二维数组中是否含有该整数\n    \"\"\"\n    if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:\n        return False\n    else:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == target:\n                    return True\n    return False\n```\n\n### 他山之石（Java/Python）\n\n由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。\n\n- 若数组为空，返回 false\n- 初始化行下标为 0，列下标为二维数组的列数减 1\n- 重复下列步骤，知道行下标或者列下标超出边界\n  - 获得当前下标位置的元素 num\n  - 如果 num 和 target 相等，则返回 true\n  - 如果 num 大于 target，列下标减 1\n  - 如果 num 小于 target，行下标加 1\n\n时间复杂度：O(n+m)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n     *\n     * @param matrix 二维数组\n     * @param target 整数\n     * @return 二维数组中是否含有该整数\n     */\n    public static boolean findNumberInTwoDimenArrayTwo(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length;\n        int columns = matrix[0].length;\n        int row = 0;\n        int column = columns - 1;\n        while (row < rows && column >= 0) {\n            int num = matrix[row][column];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n                column--;\n            } else {\n                row++;\n            }\n        }\n        return false;\n    }\n```\n\n### 效率对比（Java）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：2201800ns （个人笨比解法😂）\n方法二：8900ns  （线性查找）\n```\n\n### 效率对比（Python）\n\n```Text\n输入： matrix =\n  [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n  ]\n  target = 5\n方法一：11000ns （个人笨比解法😂）\n方法二：5900ns （线性查找）\n```\n","slug":"LeetCode二维数组中的查找","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0f000thgac91voenhl","content":"<h2 id=\"LeetCode-二维数组中的查找\"><a href=\"#LeetCode-二维数组中的查找\" class=\"headerlink\" title=\"LeetCode 二维数组中的查找\"></a>LeetCode 二维数组中的查找</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个 n*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。</p>\n<p>示例：<br>现有矩阵 matrix 如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,4,7,11,15],</span><br><span class=\"line\">  [2,5,8,12,19],</span><br><span class=\"line\">  [3,6,9,16,22],</span><br><span class=\"line\">  [10,13,14,17,24],</span><br><span class=\"line\">  [18,21,23,26,30]</span><br><span class=\"line\">]</span><br><span class=\"line\">给定target = 5，返回true</span><br><span class=\"line\">给定target = 20，返回false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>双循环求解。<br>时间复杂度：O(nm)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rows; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; columns; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_number_in_two_dimen_array</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"string\">    :param matrix: 二维数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 整数</span></span><br><span class=\"line\"><span class=\"string\">    :return: 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> matrix <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>]) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == target:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。<br>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。<br>可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。</p>\n<ul>\n<li>若数组为空，返回 false</li>\n<li>初始化行下标为 0，列下标为二维数组的列数减 1</li>\n<li>重复下列步骤，知道行下标或者列下标超出边界<ul>\n<li>获得当前下标位置的元素 num</li>\n<li>如果 num 和 target 相等，则返回 true</li>\n<li>如果 num 大于 target，列下标减 1</li>\n<li>如果 num 小于 target，行下标加 1</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n+m)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArrayTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> columns - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row &lt; rows &amp;&amp; column &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target) &#123;</span><br><span class=\"line\">            column--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            row++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：2201800ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：8900ns  （线性查找）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：11000ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：5900ns （线性查找）</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-二维数组中的查找\"><a href=\"#LeetCode-二维数组中的查找\" class=\"headerlink\" title=\"LeetCode 二维数组中的查找\"></a>LeetCode 二维数组中的查找</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个 n*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。</p>\n<p>示例：<br>现有矩阵 matrix 如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,4,7,11,15],</span><br><span class=\"line\">  [2,5,8,12,19],</span><br><span class=\"line\">  [3,6,9,16,22],</span><br><span class=\"line\">  [10,13,14,17,24],</span><br><span class=\"line\">  [18,21,23,26,30]</span><br><span class=\"line\">]</span><br><span class=\"line\">给定target = 5，返回true</span><br><span class=\"line\">给定target = 20，返回false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>双循环求解。<br>时间复杂度：O(nm)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rows; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; columns; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_number_in_two_dimen_array</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"string\">    :param matrix: 二维数组</span></span><br><span class=\"line\"><span class=\"string\">    :param target: 整数</span></span><br><span class=\"line\"><span class=\"string\">    :return: 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> matrix <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>]) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == target:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。<br>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。<br>可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。</p>\n<ul>\n<li>若数组为空，返回 false</li>\n<li>初始化行下标为 0，列下标为二维数组的列数减 1</li>\n<li>重复下列步骤，知道行下标或者列下标超出边界<ul>\n<li>获得当前下标位置的元素 num</li>\n<li>如果 num 和 target 相等，则返回 true</li>\n<li>如果 num 大于 target，列下标减 1</li>\n<li>如果 num 小于 target，行下标加 1</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n+m)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrix 二维数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target 整数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二维数组中是否含有该整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberInTwoDimenArrayTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">columns</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> columns - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row &lt; rows &amp;&amp; column &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target) &#123;</span><br><span class=\"line\">            column--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            row++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：2201800ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：8900ns  （线性查找）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： matrix =</span><br><span class=\"line\">  [</span><br><span class=\"line\">    [1, 4, 7, 11, 15],</span><br><span class=\"line\">    [2, 5, 8, 12, 19],</span><br><span class=\"line\">    [3, 6, 9, 16, 22],</span><br><span class=\"line\">    [10, 13, 14, 17, 24],</span><br><span class=\"line\">    [18, 21, 23, 26, 30]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  target = 5</span><br><span class=\"line\">方法一：11000ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：5900ns （线性查找）</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode子矩形查询","date":"2021-04-07T01:28:57.000Z","_content":"\n## LeetCode 子矩形查询\n\n### 题目描述\n\n请你实现一个类`SubrectangleQueries`，它的构造函数的参数是一个`rows * cols`的矩形（这里用整数矩阵表示），并支持以下两种操作：\n\n1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n   - 用 newValue 更新以`(row1,col1)`为左上角且以`(row2,col2)`为右下角的子矩形。\n2. `getValue(int row, int col)`\n   - 返回矩形中坐标`(row,col)`的当前值。\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月7日09:37:05\n */\npublic class SubrectangleQueries {\n    private int[][] rect = null;\n\n    public SubrectangleQueries(int[][] rectangle) {\n        this.rect = rectangle;\n    }\n\n    /**\n     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n     *\n     * @param row1     子矩形左上角行坐标\n     * @param col1     子矩形左上角列坐标\n     * @param row2     子矩形右下角行坐标\n     * @param col2     子矩形右下角列坐标\n     * @param newValue 子矩形新值\n     */\n    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        if (rect != null) {\n            for (int i = row1; i <= row2; i++) {\n                for (int j = col1; j <= col2; j++) {\n                    rect[i][j] = newValue;\n                }\n            }\n        }\n    }\n\n    /**\n     * 返回矩形中坐标(row,col)的当前值。\n     *\n     * @param row 行坐标\n     * @param col 列坐标\n     * @return 当前值\n     */\n    public int getValue(int row, int col) {\n        if (rect != null) {\n            return rect[row][col];\n        }\n        return -1;\n    }\n}\n\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\nclass SubRectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.data = rectangle\n\n    def update_sub_rectangle(\n            self,\n            row1: int,\n            col1: int,\n            row2: int,\n            col2: int,\n            new_value: int):\n        \"\"\"\n        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n        :param self:\n        :param row1: 子矩形左上角行坐标\n        :param col1:子矩形左上角列坐标\n        :param row2:子矩形右下角行坐标\n        :param col2:子矩形右下角列坐标\n        :param new_value:子矩形新值\n        \"\"\"\n        if self.data is not None:\n            for i in range(row1, row2 + 1):\n                for j in range(col1, col2 + 1):\n                    self.data[i][j] = new_value\n\n    def get_value(self, row, col) -> int:\n        \"\"\"\n        回矩形中坐标(row,col)的当前值\n        :param self:\n        :param row: 行坐标\n        :param col: 列坐标\n        :return: 当前值\n        \"\"\"\n        if self.data is not None:\n            return self.data[row][col]\n        else:\n            return -1\n\n```\n","source":"_posts/LeetCode子矩形查询.md","raw":"---\ntitle: LeetCode子矩形查询\ndate: 2021-04-07 09:28:57\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 子矩形查询\n\n### 题目描述\n\n请你实现一个类`SubrectangleQueries`，它的构造函数的参数是一个`rows * cols`的矩形（这里用整数矩阵表示），并支持以下两种操作：\n\n1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n   - 用 newValue 更新以`(row1,col1)`为左上角且以`(row2,col2)`为右下角的子矩形。\n2. `getValue(int row, int col)`\n   - 返回矩形中坐标`(row,col)`的当前值。\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月7日09:37:05\n */\npublic class SubrectangleQueries {\n    private int[][] rect = null;\n\n    public SubrectangleQueries(int[][] rectangle) {\n        this.rect = rectangle;\n    }\n\n    /**\n     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n     *\n     * @param row1     子矩形左上角行坐标\n     * @param col1     子矩形左上角列坐标\n     * @param row2     子矩形右下角行坐标\n     * @param col2     子矩形右下角列坐标\n     * @param newValue 子矩形新值\n     */\n    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        if (rect != null) {\n            for (int i = row1; i <= row2; i++) {\n                for (int j = col1; j <= col2; j++) {\n                    rect[i][j] = newValue;\n                }\n            }\n        }\n    }\n\n    /**\n     * 返回矩形中坐标(row,col)的当前值。\n     *\n     * @param row 行坐标\n     * @param col 列坐标\n     * @return 当前值\n     */\n    public int getValue(int row, int col) {\n        if (rect != null) {\n            return rect[row][col];\n        }\n        return -1;\n    }\n}\n\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\nclass SubRectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.data = rectangle\n\n    def update_sub_rectangle(\n            self,\n            row1: int,\n            col1: int,\n            row2: int,\n            col2: int,\n            new_value: int):\n        \"\"\"\n        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。\n        :param self:\n        :param row1: 子矩形左上角行坐标\n        :param col1:子矩形左上角列坐标\n        :param row2:子矩形右下角行坐标\n        :param col2:子矩形右下角列坐标\n        :param new_value:子矩形新值\n        \"\"\"\n        if self.data is not None:\n            for i in range(row1, row2 + 1):\n                for j in range(col1, col2 + 1):\n                    self.data[i][j] = new_value\n\n    def get_value(self, row, col) -> int:\n        \"\"\"\n        回矩形中坐标(row,col)的当前值\n        :param self:\n        :param row: 行坐标\n        :param col: 列坐标\n        :return: 当前值\n        \"\"\"\n        if self.data is not None:\n            return self.data[row][col]\n        else:\n            return -1\n\n```\n","slug":"LeetCode子矩形查询","published":1,"updated":"2022-10-27T06:40:13.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0g000yhgac9xd01r8p","content":"<h2 id=\"LeetCode-子矩形查询\"><a href=\"#LeetCode-子矩形查询\" class=\"headerlink\" title=\"LeetCode 子矩形查询\"></a>LeetCode 子矩形查询</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请你实现一个类<code>SubrectangleQueries</code>，它的构造函数的参数是一个<code>rows * cols</code>的矩形（这里用整数矩阵表示），并支持以下两种操作：</p>\n<ol>\n<li><code>updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code><ul>\n<li>用 newValue 更新以<code>(row1,col1)</code>为左上角且以<code>(row2,col2)</code>为右下角的子矩形。</li>\n</ul>\n</li>\n<li><code>getValue(int row, int col)</code><ul>\n<li>返回矩形中坐标<code>(row,col)</code>的当前值。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月7日09:37:05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubrectangleQueries</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[][] rect = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SubrectangleQueries</span><span class=\"params\">(<span class=\"type\">int</span>[][] rectangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rect = rectangle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row1     子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col1     子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row2     子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col2     子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue 子矩形新值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSubrectangle</span><span class=\"params\">(<span class=\"type\">int</span> row1, <span class=\"type\">int</span> col1, <span class=\"type\">int</span> row2, <span class=\"type\">int</span> col2, <span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> row1; i &lt;= row2; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> col1; j &lt;= col2; j++) &#123;</span><br><span class=\"line\">                    rect[i][j] = newValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回矩形中坐标(row,col)的当前值。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row 行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col 列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rect[row][col];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubRectangleQueries</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rectangle: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>):</span><br><span class=\"line\">        self.data = rectangle</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_sub_rectangle</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">            self,</span></span><br><span class=\"line\"><span class=\"params\">            row1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            row2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            new_value: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row1: 子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col1:子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param row2:子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col2:子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param new_value:子矩形新值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(row1, row2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(col1, col2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    self.data[i][j] = new_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_value</span>(<span class=\"params\">self, row, col</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回矩形中坐标(row,col)的当前值</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row: 行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col: 列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :return: 当前值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.data[row][col]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-子矩形查询\"><a href=\"#LeetCode-子矩形查询\" class=\"headerlink\" title=\"LeetCode 子矩形查询\"></a>LeetCode 子矩形查询</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请你实现一个类<code>SubrectangleQueries</code>，它的构造函数的参数是一个<code>rows * cols</code>的矩形（这里用整数矩阵表示），并支持以下两种操作：</p>\n<ol>\n<li><code>updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code><ul>\n<li>用 newValue 更新以<code>(row1,col1)</code>为左上角且以<code>(row2,col2)</code>为右下角的子矩形。</li>\n</ul>\n</li>\n<li><code>getValue(int row, int col)</code><ul>\n<li>返回矩形中坐标<code>(row,col)</code>的当前值。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月7日09:37:05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubrectangleQueries</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[][] rect = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SubrectangleQueries</span><span class=\"params\">(<span class=\"type\">int</span>[][] rectangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rect = rectangle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row1     子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col1     子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row2     子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col2     子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue 子矩形新值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSubrectangle</span><span class=\"params\">(<span class=\"type\">int</span> row1, <span class=\"type\">int</span> col1, <span class=\"type\">int</span> row2, <span class=\"type\">int</span> col2, <span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> row1; i &lt;= row2; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> col1; j &lt;= col2; j++) &#123;</span><br><span class=\"line\">                    rect[i][j] = newValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回矩形中坐标(row,col)的当前值。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row 行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col 列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 当前值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rect != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rect[row][col];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubRectangleQueries</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rectangle: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>):</span><br><span class=\"line\">        self.data = rectangle</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_sub_rectangle</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">            self,</span></span><br><span class=\"line\"><span class=\"params\">            row1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col1: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            row2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            col2: <span class=\"built_in\">int</span>,</span></span><br><span class=\"line\"><span class=\"params\">            new_value: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row1: 子矩形左上角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col1:子矩形左上角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param row2:子矩形右下角行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col2:子矩形右下角列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param new_value:子矩形新值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(row1, row2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(col1, col2 + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    self.data[i][j] = new_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_value</span>(<span class=\"params\">self, row, col</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回矩形中坐标(row,col)的当前值</span></span><br><span class=\"line\"><span class=\"string\">        :param self:</span></span><br><span class=\"line\"><span class=\"string\">        :param row: 行坐标</span></span><br><span class=\"line\"><span class=\"string\">        :param col: 列坐标</span></span><br><span class=\"line\"><span class=\"string\">        :return: 当前值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.data <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.data[row][col]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode数组中重复的数字","date":"2021-04-08T02:07:10.000Z","_content":"\n## LeetCode 数组中重复的数字\n\n### 题目描述\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n示例 1：\n\n```Text\n输入：[2,3,1,0,2,5,3]\n输出：2或3\n```\n\n### 一得之见（Java/Python）\n\n使用双循环，index 不等且 value 相等时，即重复。\n时间复杂度 O(n²)，空间复杂度 O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumber(int[] nums) {\n        int result = -1;\n        int numsLen = nums.length;\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j < numsLen; j++) {\n                if (i != j && nums[i] == nums[j]) {\n                    result = nums[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n```\n\n```Python\ndef find_repeat_number(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        for j in range(nums_len):\n            if i != j and nums[i] == nums[j]:\n                return nums[i]\n\n    return -1\n```\n\n### 他山之石（Java/Python）\n\n#### 使用集合 Set\n\n把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberTwo(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int repeat = -1;\n        for (int num : nums) {\n            if (!set.add(num)) {\n                repeat = num;\n                break;\n            }\n        }\n        return repeat;\n    }\n```\n\n```Python\ndef find_repeat_number_two(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    temp = set()\n    for num in nums:\n        if num not in temp:\n            temp.add(num)\n        else:\n            return num\n    return -1\n```\n\n#### 先排序再查找\n\n先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFour(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i - 1]) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_three(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums.sort()\n    nums_len = len(nums)\n    for i in range(1, nums_len):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1\n```\n\n#### 使用临时数组\n\n这道题有个很明显的特点，就是数字的大小在 0~n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0~n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFive(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for (int i = 0; i < length; i++) {\n            temp[nums[i]]++;\n            if (temp[nums[i]] > 1) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_four(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    temp = [0 for i in range(nums_len)]\n    for num in nums:\n        temp[num] += 1\n        if temp[num] > 1:\n            return num\n    return -1\n```\n\n#### 原地置换\n\n如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberThree(int[] nums) {\n        int temp;\n        for (int i = 0; i < nums.length; i++) {\n            while (nums[i] != i) {\n                if (nums[i] == nums[nums[i]]) {\n                    return nums[i];\n                }\n                temp = nums[i];\n                nums[i] = nums[temp];\n                nums[temp] = temp;\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_five(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        if nums[i] != i:\n            if nums[i] == nums[nums[i]]:\n                return nums[i]\n            else:\n                temp = nums[i]\n                nums[i] = nums[temp]\n                nums[temp] = temp\n    return -1\n```\n\n#### 效率对比（Java）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：1990900ns （个人笨比解法😂）\n方法二：238000ns  （使用集合Set）\n方法三：12600ns   （先排序再查找🤗）\n方法四：589800ns  （使用临时数组）\n方法五：17600ns   （原地置换）\n```\n\n#### 效率对比（Python）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：6600ns （个人笨比解法 😂）\n方法二：4500ns （使用集合 Set）\n方法三：8100ns （先排序再查找 🤗）\n方法四：28300ns （使用临时数组）\n方法五：6600ns （原地置换）\n```\n","source":"_posts/LeetCode数组中重复的数字.md","raw":"---\ntitle: LeetCode数组中重复的数字\ndate: 2021-04-08 10:07:10\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 数组中重复的数字\n\n### 题目描述\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n示例 1：\n\n```Text\n输入：[2,3,1,0,2,5,3]\n输出：2或3\n```\n\n### 一得之见（Java/Python）\n\n使用双循环，index 不等且 value 相等时，即重复。\n时间复杂度 O(n²)，空间复杂度 O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumber(int[] nums) {\n        int result = -1;\n        int numsLen = nums.length;\n        for (int i = 0; i < numsLen; i++) {\n            for (int j = 0; j < numsLen; j++) {\n                if (i != j && nums[i] == nums[j]) {\n                    result = nums[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n```\n\n```Python\ndef find_repeat_number(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        for j in range(nums_len):\n            if i != j and nums[i] == nums[j]:\n                return nums[i]\n\n    return -1\n```\n\n### 他山之石（Java/Python）\n\n#### 使用集合 Set\n\n把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberTwo(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int repeat = -1;\n        for (int num : nums) {\n            if (!set.add(num)) {\n                repeat = num;\n                break;\n            }\n        }\n        return repeat;\n    }\n```\n\n```Python\ndef find_repeat_number_two(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    temp = set()\n    for num in nums:\n        if num not in temp:\n            temp.add(num)\n        else:\n            return num\n    return -1\n```\n\n#### 先排序再查找\n\n先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFour(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i - 1]) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_three(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums.sort()\n    nums_len = len(nums)\n    for i in range(1, nums_len):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1\n```\n\n#### 使用临时数组\n\n这道题有个很明显的特点，就是数字的大小在 0~n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0~n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。\n时间复杂度：O(n)，空间复杂度：O(n)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberFive(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for (int i = 0; i < length; i++) {\n            temp[nums[i]]++;\n            if (temp[nums[i]] > 1) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_four(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    temp = [0 for i in range(nums_len)]\n    for num in nums:\n        temp[num] += 1\n        if temp[num] > 1:\n            return num\n    return -1\n```\n\n#### 原地置换\n\n如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。\n时间复杂度：O(n)，空间复杂度：O(1)\n\n```Java\n    /**\n     * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n     *\n     * @param nums 数组\n     * @return 任意一个重复的数字\n     */\n    public static int findRepeatNumberThree(int[] nums) {\n        int temp;\n        for (int i = 0; i < nums.length; i++) {\n            while (nums[i] != i) {\n                if (nums[i] == nums[nums[i]]) {\n                    return nums[i];\n                }\n                temp = nums[i];\n                nums[i] = nums[temp];\n                nums[temp] = temp;\n            }\n        }\n        return -1;\n    }\n```\n\n```Python\ndef find_repeat_number_five(nums: List[int]) -> int:\n    \"\"\"\n    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字\n    :param nums: 数组\n    :return: 任意一个重复的数字\n    \"\"\"\n    nums_len = len(nums)\n    for i in range(nums_len):\n        if nums[i] != i:\n            if nums[i] == nums[nums[i]]:\n                return nums[i]\n            else:\n                temp = nums[i]\n                nums[i] = nums[temp]\n                nums[temp] = temp\n    return -1\n```\n\n#### 效率对比（Java）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：1990900ns （个人笨比解法😂）\n方法二：238000ns  （使用集合Set）\n方法三：12600ns   （先排序再查找🤗）\n方法四：589800ns  （使用临时数组）\n方法五：17600ns   （原地置换）\n```\n\n#### 效率对比（Python）\n\n```Text\n输入：nums = {2, 3, 1, 0, 2, 5, 3};\n方法一：6600ns （个人笨比解法 😂）\n方法二：4500ns （使用集合 Set）\n方法三：8100ns （先排序再查找 🤗）\n方法四：28300ns （使用临时数组）\n方法五：6600ns （原地置换）\n```\n","slug":"LeetCode数组中重复的数字","published":1,"updated":"2022-10-27T06:40:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0h0010hgace2cacv4e","content":"<h2 id=\"LeetCode-数组中重复的数字\"><a href=\"#LeetCode-数组中重复的数字\" class=\"headerlink\" title=\"LeetCode 数组中重复的数字\"></a>LeetCode 数组中重复的数字</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,3,1,0,2,5,3]</span><br><span class=\"line\">输出：2或3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用双循环，index 不等且 value 相等时，即重复。<br>时间复杂度 O(n²)，空间复杂度 O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; numsLen; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != j &amp;&amp; nums[i] == nums[j]) &#123;</span><br><span class=\"line\">                result = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != j <span class=\"keyword\">and</span> nums[i] == nums[j]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><h4 id=\"使用集合-Set\"><a href=\"#使用集合-Set\" class=\"headerlink\" title=\"使用集合 Set\"></a>使用集合 Set</h4><p>把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">repeat</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!set.add(num)) &#123;</span><br><span class=\"line\">            repeat = num;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    temp = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> temp:</span><br><span class=\"line\">            temp.add(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"先排序再查找\"><a href=\"#先排序再查找\" class=\"headerlink\" title=\"先排序再查找\"></a>先排序再查找</h4><p>先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFour</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_three</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums.sort()</span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == nums[i - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用临时数组\"><a href=\"#使用临时数组\" class=\"headerlink\" title=\"使用临时数组\"></a>使用临时数组</h4><p>这道题有个很明显的特点，就是数字的大小在 0<del>n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0</del>n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        temp[nums[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[nums[i]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_four</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    temp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        temp[num] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp[num] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原地置换\"><a href=\"#原地置换\" class=\"headerlink\" title=\"原地置换\"></a>原地置换</h4><p>如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberThree</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[i] != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = nums[i];</span><br><span class=\"line\">            nums[i] = nums[temp];</span><br><span class=\"line\">            nums[temp] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_five</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == nums[nums[i]]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                temp = nums[i]</span><br><span class=\"line\">                nums[i] = nums[temp]</span><br><span class=\"line\">                nums[temp] = temp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：1990900ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：238000ns  （使用集合Set）</span><br><span class=\"line\">方法三：12600ns   （先排序再查找🤗）</span><br><span class=\"line\">方法四：589800ns  （使用临时数组）</span><br><span class=\"line\">方法五：17600ns   （原地置换）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：6600ns （个人笨比解法 😂）</span><br><span class=\"line\">方法二：4500ns （使用集合 Set）</span><br><span class=\"line\">方法三：8100ns （先排序再查找 🤗）</span><br><span class=\"line\">方法四：28300ns （使用临时数组）</span><br><span class=\"line\">方法五：6600ns （原地置换）</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-数组中重复的数字\"><a href=\"#LeetCode-数组中重复的数字\" class=\"headerlink\" title=\"LeetCode 数组中重复的数字\"></a>LeetCode 数组中重复的数字</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,3,1,0,2,5,3]</span><br><span class=\"line\">输出：2或3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用双循环，index 不等且 value 相等时，即重复。<br>时间复杂度 O(n²)，空间复杂度 O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; numsLen; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != j &amp;&amp; nums[i] == nums[j]) &#123;</span><br><span class=\"line\">                result = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != j <span class=\"keyword\">and</span> nums[i] == nums[j]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><h4 id=\"使用集合-Set\"><a href=\"#使用集合-Set\" class=\"headerlink\" title=\"使用集合 Set\"></a>使用集合 Set</h4><p>把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">repeat</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!set.add(num)) &#123;</span><br><span class=\"line\">            repeat = num;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    temp = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> temp:</span><br><span class=\"line\">            temp.add(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"先排序再查找\"><a href=\"#先排序再查找\" class=\"headerlink\" title=\"先排序再查找\"></a>先排序再查找</h4><p>先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFour</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_three</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums.sort()</span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == nums[i - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用临时数组\"><a href=\"#使用临时数组\" class=\"headerlink\" title=\"使用临时数组\"></a>使用临时数组</h4><p>这道题有个很明显的特点，就是数字的大小在 0<del>n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0</del>n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。<br>时间复杂度：O(n)，空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberFive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        temp[nums[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[nums[i]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_four</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    temp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        temp[num] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp[num] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原地置换\"><a href=\"#原地置换\" class=\"headerlink\" title=\"原地置换\"></a>原地置换</h4><p>如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">findRepeatNumberThree</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[i] != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = nums[i];</span><br><span class=\"line\">            nums[i] = nums[temp];</span><br><span class=\"line\">            nums[temp] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_repeat_number_five</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 任意一个重复的数字</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nums_len = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nums_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == nums[nums[i]]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                temp = nums[i]</span><br><span class=\"line\">                nums[i] = nums[temp]</span><br><span class=\"line\">                nums[temp] = temp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：1990900ns （个人笨比解法😂）</span><br><span class=\"line\">方法二：238000ns  （使用集合Set）</span><br><span class=\"line\">方法三：12600ns   （先排序再查找🤗）</span><br><span class=\"line\">方法四：589800ns  （使用临时数组）</span><br><span class=\"line\">方法五：17600ns   （原地置换）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class=\"line\">方法一：6600ns （个人笨比解法 😂）</span><br><span class=\"line\">方法二：4500ns （使用集合 Set）</span><br><span class=\"line\">方法三：8100ns （先排序再查找 🤗）</span><br><span class=\"line\">方法四：28300ns （使用临时数组）</span><br><span class=\"line\">方法五：6600ns （原地置换）</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode替换空格","date":"2021-04-13T05:11:11.000Z","_content":"\n## LeetCode 替换空格\n\n### 题目描述\n\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。\n\n实例 1：\n\n```Text\n输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\"\n```\n\n### 一得之见（Java/Python）\n\n使用 Java 的 replaceAll()方法，直接进行替换\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpace(String s) {\n        return s.replaceAll(\" \", \"%20\");\n    }\n```\n\n使用 Python 的 replace()方法，直接进行替换\n\n```Python\ndef replace_space(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    return s.replace(\" \", \"%20\")\n```\n\n### 他山之石（Java/Python）\n\n由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。\n\n- 获得 s 的长度 length\n- 创建字符数组 array，其长度为 length\\*3\n- 初始化 size 为 0，size 表示替换后的字符串的长度\n- 从左到右遍历字符串 s\n  - 获得 s 的当前字符 c\n  - 如果字符 c 是空格，则令`array[size] = '%'`，`array[size + 1] = '2'`，`array[size + 2] = '0'`，并将 size 的值加 3\n  - 如果字符 c 不是空格，则令`array[size] = c`，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpaceTwo(String s) {\n        int sLen = s.length();\n        char[] sArray = new char[sLen * 3];\n        int size = 0;\n        for (int i = 0; i < sLen; i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                sArray[size++] = '%';\n                sArray[size++] = '2';\n                sArray[size++] = '0';\n            } else {\n                sArray[size++] = c;\n            }\n        }\n        String newStr = new String(sArray, 0, size);\n        return newStr;\n    }\n```\n\n- 初始化一个 list，记为 res\n- 遍历列表 s 的每个字符 c：\n  - 当 c 为空格时：向 res 后添加字符串\"%20\"\n  - 当 c 不为空格时：向 res 后添加字符串 c\n- 将列表 s 转换为字符串并返回。\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Python\ndef replace_space_two(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    res = []\n    for c in s:\n        if c == ' ':\n            res.append(\"%20\")\n        else:\n            res.append(c)\n    return \"\".join(res)\n```\n\n### 效率对比（Java）\n\n```Text\n输入：\"We are happy\"\n方法一：3575700ns\n方法二：338300ns\n```\n\n### 效率对比（Python）\n\n```Text\n输入：\"We are happy\"\n方法一：3300ns\n方法二：7600ns\n```\n","source":"_posts/LeetCode替换空格.md","raw":"---\ntitle: LeetCode替换空格\ndate: 2021-04-13 13:11:11\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 替换空格\n\n### 题目描述\n\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。\n\n实例 1：\n\n```Text\n输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\"\n```\n\n### 一得之见（Java/Python）\n\n使用 Java 的 replaceAll()方法，直接进行替换\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpace(String s) {\n        return s.replaceAll(\" \", \"%20\");\n    }\n```\n\n使用 Python 的 replace()方法，直接进行替换\n\n```Python\ndef replace_space(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    return s.replace(\" \", \"%20\")\n```\n\n### 他山之石（Java/Python）\n\n由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。\n\n- 获得 s 的长度 length\n- 创建字符数组 array，其长度为 length\\*3\n- 初始化 size 为 0，size 表示替换后的字符串的长度\n- 从左到右遍历字符串 s\n  - 获得 s 的当前字符 c\n  - 如果字符 c 是空格，则令`array[size] = '%'`，`array[size + 1] = '2'`，`array[size + 2] = '0'`，并将 size 的值加 3\n  - 如果字符 c 不是空格，则令`array[size] = c`，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Java\n    /**\n     * 把字符串 s 中的每个空格替换成\"%20\"。\n     *\n     * @param s 原字符串\n     * @return 替换后字符串\n     */\n    public static String replaceSpaceTwo(String s) {\n        int sLen = s.length();\n        char[] sArray = new char[sLen * 3];\n        int size = 0;\n        for (int i = 0; i < sLen; i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                sArray[size++] = '%';\n                sArray[size++] = '2';\n                sArray[size++] = '0';\n            } else {\n                sArray[size++] = c;\n            }\n        }\n        String newStr = new String(sArray, 0, size);\n        return newStr;\n    }\n```\n\n- 初始化一个 list，记为 res\n- 遍历列表 s 的每个字符 c：\n  - 当 c 为空格时：向 res 后添加字符串\"%20\"\n  - 当 c 不为空格时：向 res 后添加字符串 c\n- 将列表 s 转换为字符串并返回。\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n```Python\ndef replace_space_two(s: str) -> str:\n    \"\"\"\n    把字符串 s 中的每个空格替换成\"%20\"。\n    :param s: 原字符串\n    :return: 替换后字符串\n    \"\"\"\n    res = []\n    for c in s:\n        if c == ' ':\n            res.append(\"%20\")\n        else:\n            res.append(c)\n    return \"\".join(res)\n```\n\n### 效率对比（Java）\n\n```Text\n输入：\"We are happy\"\n方法一：3575700ns\n方法二：338300ns\n```\n\n### 效率对比（Python）\n\n```Text\n输入：\"We are happy\"\n方法一：3300ns\n方法二：7600ns\n```\n","slug":"LeetCode替换空格","published":1,"updated":"2022-10-27T06:40:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0i0012hgac4a2s3bn2","content":"<h2 id=\"LeetCode-替换空格\"><a href=\"#LeetCode-替换空格\" class=\"headerlink\" title=\"LeetCode 替换空格\"></a>LeetCode 替换空格</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p>\n<p>实例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;We are happy.&quot;</span><br><span class=\"line\">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用 Java 的 replaceAll()方法，直接进行替换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replaceAll(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Python 的 replace()方法，直接进行替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replace(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。</p>\n<ul>\n<li>获得 s 的长度 length</li>\n<li>创建字符数组 array，其长度为 length*3</li>\n<li>初始化 size 为 0，size 表示替换后的字符串的长度</li>\n<li>从左到右遍历字符串 s<ul>\n<li>获得 s 的当前字符 c</li>\n<li>如果字符 c 是空格，则令<code>array[size] = &#39;%&#39;</code>，<code>array[size + 1] = &#39;2&#39;</code>，<code>array[size + 2] = &#39;0&#39;</code>，并将 size 的值加 3</li>\n<li>如果字符 c 不是空格，则令<code>array[size] = c</code>，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpaceTwo</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sLen</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"type\">char</span>[] sArray = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[sLen * <span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; sLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sArray[size++] = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newStr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(sArray, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化一个 list，记为 res</li>\n<li>遍历列表 s 的每个字符 c：<ul>\n<li>当 c 为空格时：向 res 后添加字符串”%20”</li>\n<li>当 c 不为空格时：向 res 后添加字符串 c</li>\n</ul>\n</li>\n<li>将列表 s 转换为字符串并返回。</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space_two</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c == <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">            res.append(<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            res.append(c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3575700ns</span><br><span class=\"line\">方法二：338300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3300ns</span><br><span class=\"line\">方法二：7600ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-替换空格\"><a href=\"#LeetCode-替换空格\" class=\"headerlink\" title=\"LeetCode 替换空格\"></a>LeetCode 替换空格</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p>\n<p>实例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;We are happy.&quot;</span><br><span class=\"line\">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java-Python）\"><a href=\"#一得之见（Java-Python）\" class=\"headerlink\" title=\"一得之见（Java/Python）\"></a>一得之见（Java/Python）</h3><p>使用 Java 的 replaceAll()方法，直接进行替换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replaceAll(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Python 的 replace()方法，直接进行替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.replace(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java-Python）\"><a href=\"#他山之石（Java-Python）\" class=\"headerlink\" title=\"他山之石（Java/Python）\"></a>他山之石（Java/Python）</h3><p>由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。</p>\n<ul>\n<li>获得 s 的长度 length</li>\n<li>创建字符数组 array，其长度为 length*3</li>\n<li>初始化 size 为 0，size 表示替换后的字符串的长度</li>\n<li>从左到右遍历字符串 s<ul>\n<li>获得 s 的当前字符 c</li>\n<li>如果字符 c 是空格，则令<code>array[size] = &#39;%&#39;</code>，<code>array[size + 1] = &#39;2&#39;</code>，<code>array[size + 2] = &#39;0&#39;</code>，并将 size 的值加 3</li>\n<li>如果字符 c 不是空格，则令<code>array[size] = c</code>，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> s 原字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 替换后字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">replaceSpaceTwo</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sLen</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"type\">char</span>[] sArray = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[sLen * <span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; sLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">            sArray[size++] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sArray[size++] = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newStr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(sArray, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化一个 list，记为 res</li>\n<li>遍历列表 s 的每个字符 c：<ul>\n<li>当 c 为空格时：向 res 后添加字符串”%20”</li>\n<li>当 c 不为空格时：向 res 后添加字符串 c</li>\n</ul>\n</li>\n<li>将列表 s 转换为字符串并返回。</li>\n</ul>\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">replace_space_two</span>(<span class=\"params\">s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class=\"line\"><span class=\"string\">    :param s: 原字符串</span></span><br><span class=\"line\"><span class=\"string\">    :return: 替换后字符串</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c == <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">            res.append(<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            res.append(c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Java）\"><a href=\"#效率对比（Java）\" class=\"headerlink\" title=\"效率对比（Java）\"></a>效率对比（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3575700ns</span><br><span class=\"line\">方法二：338300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率对比（Python）\"><a href=\"#效率对比（Python）\" class=\"headerlink\" title=\"效率对比（Python）\"></a>效率对比（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;We are happy&quot;</span><br><span class=\"line\">方法一：3300ns</span><br><span class=\"line\">方法二：7600ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode移除元素","date":"2021-03-25T05:39:46.000Z","_content":"\n## LeetCode 移除元素\n\n### 题目描述\n\n给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例：\n\n```Text\n输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n```\n\n```Text\n输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n```\n\n### Java 解法\n\n```Java\n/**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElement(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (i = 0; i < len; i++) {\n            if (nums[i] == val) {\n                for (int j = i; j < len - 1; j++) {\n                    nums[j] = nums[j + 1];\n                }\n                i--;\n                len--;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElementTwo(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (int j = 0; j < nums.length; j++) {\n            if (nums[j] == val) {\n                continue;\n            }\n            nums[i++] = nums[j];\n        }\n        return i;\n    }\n```\n\n### Java 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：2666500ns\n方法二：15300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef remove_element(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == val:\n            for j in range(n - 1):\n                nums[j] = nums[j + 1]\n            i -= 1\n            n -= 1\n    return i\n\n\ndef remove_element_two(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    i = 0\n    for j in range(n):\n        if nums[j] == val:\n            continue\n        else:\n            nums[i] = nums[j]\n            i += 1\n    return i\n\n```\n\n### Python 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：60700ns\n方法二：36200ns\n```\n","source":"_posts/LeetCode移除元素.md","raw":"---\ntitle: LeetCode移除元素\ndate: 2021-03-25 13:39:46\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 移除元素\n\n### 题目描述\n\n给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例：\n\n```Text\n输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n```\n\n```Text\n输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n```\n\n### Java 解法\n\n```Java\n/**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElement(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (i = 0; i < len; i++) {\n            if (nums[i] == val) {\n                for (int j = i; j < len - 1; j++) {\n                    nums[j] = nums[j + 1];\n                }\n                i--;\n                len--;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n     *\n     * @param nums 数组\n     * @param val  判断值\n     * @return 新数组的长度\n     */\n    public static int removeElementTwo(int[] nums, int val) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int i = 0;\n        for (int j = 0; j < nums.length; j++) {\n            if (nums[j] == val) {\n                continue;\n            }\n            nums[i++] = nums[j];\n        }\n        return i;\n    }\n```\n\n### Java 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：2666500ns\n方法二：15300ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef remove_element(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == val:\n            for j in range(n - 1):\n                nums[j] = nums[j + 1]\n            i -= 1\n            n -= 1\n    return i\n\n\ndef remove_element_two(nums: List[int], val: int) -> int:\n    \"\"\"\n    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n    :param nums: 数组\n    :param val: 判断值\n    :return: 新数组的长度\n    \"\"\"\n    n = len(nums)\n    i = 0\n    for j in range(n):\n        if nums[j] == val:\n            continue\n        else:\n            nums[i] = nums[j]\n            i += 1\n    return i\n\n```\n\n### Python 解法效率对比\n\n```Text\n输入：nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};val = 2;\n方法一：60700ns\n方法二：36200ns\n```\n","slug":"LeetCode移除元素","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0i0016hgac98p6h7ul","content":"<h2 id=\"LeetCode-移除元素\"><a href=\"#LeetCode-移除元素\" class=\"headerlink\" title=\"LeetCode 移除元素\"></a>LeetCode 移除元素</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,2,3], val = 3</span><br><span class=\"line\">输出：2, nums = [2,2]</span><br><span class=\"line\">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class=\"line\">输出：5, nums = [0,1,4,0,3]</span><br><span class=\"line\">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; len - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                    nums[j] = nums[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                len--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElementTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[i++] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：2666500ns</span><br><span class=\"line\">方法二：15300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == val:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>):</span><br><span class=\"line\">                nums[j] = nums[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] == val:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nums[i] = nums[j]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：60700ns</span><br><span class=\"line\">方法二：36200ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-移除元素\"><a href=\"#LeetCode-移除元素\" class=\"headerlink\" title=\"LeetCode 移除元素\"></a>LeetCode 移除元素</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,2,3], val = 3</span><br><span class=\"line\">输出：2, nums = [2,2]</span><br><span class=\"line\">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class=\"line\">输出：5, nums = [0,1,4,0,3]</span><br><span class=\"line\">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; len - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                    nums[j] = nums[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                len--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"comment\">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> val  判断值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElementTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[i++] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：2666500ns</span><br><span class=\"line\">方法二：15300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] == val:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>):</span><br><span class=\"line\">                nums[j] = nums[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_element_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class=\"line\"><span class=\"string\">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class=\"line\"><span class=\"string\">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 数组</span></span><br><span class=\"line\"><span class=\"string\">    :param val: 判断值</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新数组的长度</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] == val:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nums[i] = nums[j]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class=\"line\">方法一：60700ns</span><br><span class=\"line\">方法二：36200ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode最富有客户的资产总量","date":"2021-04-06T03:13:37.000Z","_content":"\n## 最富有客户的资产总量\n\n### 题目描述\n\n给你一个 m \\* n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。\n\n示例 1：\n\n```Text\n输入：accounts = [[1,2,3],[3,2,1]]\n输出：6\n解释：\n第1位客户的资产总量 = 1+2+3=6\n第2位客户的资产总量 = 3+2+1=6\n两位客户都是最富有的，资产总量都是6，所以返回6。\n```\n\n示例 2：\n\n```Text\n输入：accounts = [[1,5],[7,3],[3,5]]\n输出：10\n解释：\n第1位客户的资产总量 = 6\n第2位客户的资产总量 = 10\n第3位客户的资产总量 = 8\n第2为客户是最富有的，资产总量是10\n```\n\n示例 3：\n\n```Text\n输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n输出：17\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月6日11:28:27\n */\npublic class MaximumWealth {\n    /**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealth(int[][] accounts) {\n        int accountsLen = accounts.length;\n        int sum = 0;\n        int result = 0;\n        for (int i = 0; i < accountsLen; i++) {\n            for (int j = 0; j < accounts[i].length; j++) {\n                sum += accounts[i][j];\n            }\n            result = Math.max(result, sum);\n            sum = 0;\n        }\n        return result;\n    }\n}\n\n```\n\n### 他山之石（Java）\n\n```Java\n/**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealthTwo(int[][] accounts) {\n        return Arrays.stream(accounts).map(ints -> Arrays.stream(ints).sum()).max(Integer::compareTo).get();\n    }\n```\n\n### 效率分析（Java）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：2241700ns\n方法二：153366300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef max_wealth(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    accounts_len = len(accounts)\n    result = 0\n    for i in range(accounts_len):\n        len_two = len(accounts[i])\n        sum_one = 0\n        for j in range(len_two):\n            sum_one += accounts[i][j]\n            result = max(result, sum_one)\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef max_wealth_two(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    return max(sum(accounts[i]) for i in range(len(accounts)))\n```\n\n### 效率分析（Python）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：13600ns\n方法二：9100ns\n```\n","source":"_posts/LeetCode最富有客户的资产总量.md","raw":"---\ntitle: LeetCode最富有客户的资产总量\ndate: 2021-04-06 11:13:37\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## 最富有客户的资产总量\n\n### 题目描述\n\n给你一个 m \\* n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。\n\n示例 1：\n\n```Text\n输入：accounts = [[1,2,3],[3,2,1]]\n输出：6\n解释：\n第1位客户的资产总量 = 1+2+3=6\n第2位客户的资产总量 = 3+2+1=6\n两位客户都是最富有的，资产总量都是6，所以返回6。\n```\n\n示例 2：\n\n```Text\n输入：accounts = [[1,5],[7,3],[3,5]]\n输出：10\n解释：\n第1位客户的资产总量 = 6\n第2位客户的资产总量 = 10\n第3位客户的资产总量 = 8\n第2为客户是最富有的，资产总量是10\n```\n\n示例 3：\n\n```Text\n输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n输出：17\n```\n\n### 一得之见（Java）\n\n```Java\n/**\n * @author zhkai\n * @date 2021年4月6日11:28:27\n */\npublic class MaximumWealth {\n    /**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealth(int[][] accounts) {\n        int accountsLen = accounts.length;\n        int sum = 0;\n        int result = 0;\n        for (int i = 0; i < accountsLen; i++) {\n            for (int j = 0; j < accounts[i].length; j++) {\n                sum += accounts[i][j];\n            }\n            result = Math.max(result, sum);\n            sum = 0;\n        }\n        return result;\n    }\n}\n\n```\n\n### 他山之石（Java）\n\n```Java\n/**\n     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n     *\n     * @param accounts 整数网格\n     * @return 最富有客户的资产总量\n     */\n    public static int maxWealthTwo(int[][] accounts) {\n        return Arrays.stream(accounts).map(ints -> Arrays.stream(ints).sum()).max(Integer::compareTo).get();\n    }\n```\n\n### 效率分析（Java）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：2241700ns\n方法二：153366300ns\n```\n\n### 一得之见（Python）\n\n```Python\nfrom typing import List\n\n\ndef max_wealth(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    accounts_len = len(accounts)\n    result = 0\n    for i in range(accounts_len):\n        len_two = len(accounts[i])\n        sum_one = 0\n        for j in range(len_two):\n            sum_one += accounts[i][j]\n            result = max(result, sum_one)\n    return result\n```\n\n### 他山之石（Python）\n\n```Python\ndef max_wealth_two(accounts: List[List[int]]) -> int:\n    \"\"\"\n    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。\n    :param accounts: 整数网格\n    :return: 最富有客户的资产总量\n    \"\"\"\n    return max(sum(accounts[i]) for i in range(len(accounts)))\n```\n\n### 效率分析（Python）\n\n```Text\n输入：accounts = {{1,2,3},{1,4,5},{1,4,7}}\n方法一：13600ns\n方法二：9100ns\n```\n","slug":"LeetCode最富有客户的资产总量","published":1,"updated":"2022-10-27T06:40:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0j0018hgac5w6i4h6h","content":"<h2 id=\"最富有客户的资产总量\"><a href=\"#最富有客户的资产总量\" class=\"headerlink\" title=\"最富有客户的资产总量\"></a>最富有客户的资产总量</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。<br>客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,2,3],[3,2,1]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 1+2+3=6</span><br><span class=\"line\">第2位客户的资产总量 = 3+2+1=6</span><br><span class=\"line\">两位客户都是最富有的，资产总量都是6，所以返回6。</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,5],[7,3],[3,5]]</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 6</span><br><span class=\"line\">第2位客户的资产总量 = 10</span><br><span class=\"line\">第3位客户的资产总量 = 8</span><br><span class=\"line\">第2为客户是最富有的，资产总量是10</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]</span><br><span class=\"line\">输出：17</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月6日11:28:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MaximumWealth</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealth</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">accountsLen</span> <span class=\"operator\">=</span> accounts.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; accountsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; accounts[i].length; j++) &#123;</span><br><span class=\"line\">                sum += accounts[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, sum);</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealthTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(accounts).map(ints -&gt; Arrays.stream(ints).sum()).max(Integer::compareTo).get();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Java）\"><a href=\"#效率分析（Java）\" class=\"headerlink\" title=\"效率分析（Java）\"></a>效率分析（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：2241700ns</span><br><span class=\"line\">方法二：153366300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    accounts_len = <span class=\"built_in\">len</span>(accounts)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(accounts_len):</span><br><span class=\"line\">        len_two = <span class=\"built_in\">len</span>(accounts[i])</span><br><span class=\"line\">        sum_one = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(len_two):</span><br><span class=\"line\">            sum_one += accounts[i][j]</span><br><span class=\"line\">            result = <span class=\"built_in\">max</span>(result, sum_one)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth_two</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">sum</span>(accounts[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(accounts)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Python）\"><a href=\"#效率分析（Python）\" class=\"headerlink\" title=\"效率分析（Python）\"></a>效率分析（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：13600ns</span><br><span class=\"line\">方法二：9100ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最富有客户的资产总量\"><a href=\"#最富有客户的资产总量\" class=\"headerlink\" title=\"最富有客户的资产总量\"></a>最富有客户的资产总量</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。<br>客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,2,3],[3,2,1]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 1+2+3=6</span><br><span class=\"line\">第2位客户的资产总量 = 3+2+1=6</span><br><span class=\"line\">两位客户都是最富有的，资产总量都是6，所以返回6。</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[1,5],[7,3],[3,5]]</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：</span><br><span class=\"line\">第1位客户的资产总量 = 6</span><br><span class=\"line\">第2位客户的资产总量 = 10</span><br><span class=\"line\">第3位客户的资产总量 = 8</span><br><span class=\"line\">第2为客户是最富有的，资产总量是10</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]</span><br><span class=\"line\">输出：17</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Java）\"><a href=\"#一得之见（Java）\" class=\"headerlink\" title=\"一得之见（Java）\"></a>一得之见（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年4月6日11:28:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MaximumWealth</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealth</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">accountsLen</span> <span class=\"operator\">=</span> accounts.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; accountsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; accounts[i].length; j++) &#123;</span><br><span class=\"line\">                sum += accounts[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, sum);</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Java）\"><a href=\"#他山之石（Java）\" class=\"headerlink\" title=\"他山之石（Java）\"></a>他山之石（Java）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accounts 整数网格</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">maxWealthTwo</span><span class=\"params\">(<span class=\"type\">int</span>[][] accounts)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(accounts).map(ints -&gt; Arrays.stream(ints).sum()).max(Integer::compareTo).get();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Java）\"><a href=\"#效率分析（Java）\" class=\"headerlink\" title=\"效率分析（Java）\"></a>效率分析（Java）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：2241700ns</span><br><span class=\"line\">方法二：153366300ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一得之见（Python）\"><a href=\"#一得之见（Python）\" class=\"headerlink\" title=\"一得之见（Python）\"></a>一得之见（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    accounts_len = <span class=\"built_in\">len</span>(accounts)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(accounts_len):</span><br><span class=\"line\">        len_two = <span class=\"built_in\">len</span>(accounts[i])</span><br><span class=\"line\">        sum_one = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(len_two):</span><br><span class=\"line\">            sum_one += accounts[i][j]</span><br><span class=\"line\">            result = <span class=\"built_in\">max</span>(result, sum_one)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"他山之石（Python）\"><a href=\"#他山之石（Python）\" class=\"headerlink\" title=\"他山之石（Python）\"></a>他山之石（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">max_wealth_two</span>(<span class=\"params\">accounts: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class=\"line\"><span class=\"string\">    :param accounts: 整数网格</span></span><br><span class=\"line\"><span class=\"string\">    :return: 最富有客户的资产总量</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">sum</span>(accounts[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(accounts)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率分析（Python）\"><a href=\"#效率分析（Python）\" class=\"headerlink\" title=\"效率分析（Python）\"></a>效率分析（Python）</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class=\"line\">方法一：13600ns</span><br><span class=\"line\">方法二：9100ns</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode缺失的第一个正数","date":"2021-03-29T03:43:21.000Z","_content":"\n## LeetCode 缺失的第一个正数\n\n### 题目描述\n\n给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。\n\n进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？\n\n示例 1：\n\n```Text\n输入：nums = [1,2,0]\n输出：3\n```\n\n示例 2：\n\n```Text\n输入：nums = [3,4,-1,1]\n输出：2\n```\n\n示例 3：\n\n```Text\n输入：nums = [7,8,9,11,12]\n输出：1\n```\n\n### Java 解法\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月29日13:51:23\n */\npublic class FirstMissingPositive {\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositive(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        int[] res = new int[numsLen + 1];\n        int resLen = res.length;\n        for (int x : nums) {\n            if (x > 0 && x < resLen) {\n                res[x] = x;\n            }\n        }\n        for (int i = 1; i < resLen; i++) {\n            if (i != res[i]) {\n                return i;\n            }\n        }\n        return resLen;\n    }\n\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositiveTwo(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        for (int i = 0; i < numsLen; i++) {\n            while (nums[i] > 0 && nums[i] < numsLen + 1 && nums[i] != i + 1 && nums[i] != nums[nums[i] - 1]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        for (int i = 0; i < numsLen; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        return numsLen + 1;\n    }\n\n    /**\n     * 交换数组元素位置\n     *\n     * @param nums 未排序的整数数组 nums\n     * @param i 需交换元素数组index\n     * @param j 与需交换元素进行交换的数组index\n     */\n    public static void swap(int[] nums, int i, int j) {\n        if (i != j) {\n            nums[j] ^= nums[j];\n            nums[j] ^= nums[i];\n            nums[i] ^= nums[j];\n        }\n    }\n}\n\n```\n\n#### Java 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：2708900ns\n方法二：15400ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef first_missing_positive(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    res = [0 for i in range(n + 1)]\n    for x in nums:\n        if 0 < x < len(res):\n            res[x] = x\n    for i in range(len(res)):\n        if res[i] != i:\n            return i\n    return len(res)\n\n\ndef first_missing_positive_two(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if 0 < nums[i] < n + 1 and nums[1] != i + \\\n                1 and nums[i] != nums[nums[i] - 1]:\n            swap(nums, i, nums[i] - 1)\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n\n\ndef swap(nums: List[int], i: int, j: int):\n    if i != j:\n        nums[i] ^= nums[j]\n        nums[j] ^= nums[i]\n        nums[i] ^= nums[j]\n\n```\n\n#### Python 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：13900ns\n方法二：17100ns\n```\n","source":"_posts/LeetCode缺失的第一个正数.md","raw":"---\ntitle: LeetCode缺失的第一个正数\ndate: 2021-03-29 11:43:21\ntags:\n  - LeetCode\n  - 数组\ncategories: [后端, 算法]\n---\n\n## LeetCode 缺失的第一个正数\n\n### 题目描述\n\n给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。\n\n进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？\n\n示例 1：\n\n```Text\n输入：nums = [1,2,0]\n输出：3\n```\n\n示例 2：\n\n```Text\n输入：nums = [3,4,-1,1]\n输出：2\n```\n\n示例 3：\n\n```Text\n输入：nums = [7,8,9,11,12]\n输出：1\n```\n\n### Java 解法\n\n```Java\n/**\n * @author zhkai\n * @date 2021年3月29日13:51:23\n */\npublic class FirstMissingPositive {\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositive(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        int[] res = new int[numsLen + 1];\n        int resLen = res.length;\n        for (int x : nums) {\n            if (x > 0 && x < resLen) {\n                res[x] = x;\n            }\n        }\n        for (int i = 1; i < resLen; i++) {\n            if (i != res[i]) {\n                return i;\n            }\n        }\n        return resLen;\n    }\n\n    /**\n     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n     *\n     * @param nums 未排序的整数数组 nums\n     * @return 没有出现的最小的正整数\n     */\n    public static int firstMissingPositiveTwo(int[] nums) {\n        int numsLen = nums.length;\n        if (numsLen == 0) {\n            return 1;\n        }\n        for (int i = 0; i < numsLen; i++) {\n            while (nums[i] > 0 && nums[i] < numsLen + 1 && nums[i] != i + 1 && nums[i] != nums[nums[i] - 1]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        for (int i = 0; i < numsLen; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        return numsLen + 1;\n    }\n\n    /**\n     * 交换数组元素位置\n     *\n     * @param nums 未排序的整数数组 nums\n     * @param i 需交换元素数组index\n     * @param j 与需交换元素进行交换的数组index\n     */\n    public static void swap(int[] nums, int i, int j) {\n        if (i != j) {\n            nums[j] ^= nums[j];\n            nums[j] ^= nums[i];\n            nums[i] ^= nums[j];\n        }\n    }\n}\n\n```\n\n#### Java 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：2708900ns\n方法二：15400ns\n```\n\n### Python 解法\n\n```Python\nfrom typing import List\n\n\ndef first_missing_positive(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    res = [0 for i in range(n + 1)]\n    for x in nums:\n        if 0 < x < len(res):\n            res[x] = x\n    for i in range(len(res)):\n        if res[i] != i:\n            return i\n    return len(res)\n\n\ndef first_missing_positive_two(nums: List[int]) -> int:\n    \"\"\"\n    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数\n    :param nums: 未排序的整数数组\n    :return: 没有出现的最小的正整数\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if 0 < nums[i] < n + 1 and nums[1] != i + \\\n                1 and nums[i] != nums[nums[i] - 1]:\n            swap(nums, i, nums[i] - 1)\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n\n\ndef swap(nums: List[int], i: int, j: int):\n    if i != j:\n        nums[i] ^= nums[j]\n        nums[j] ^= nums[i]\n        nums[i] ^= nums[j]\n\n```\n\n#### Python 解法效率对比\n\n```Text\n输入：nums = {1, 3, 6, 7, 9};\n方法一：13900ns\n方法二：17100ns\n```\n","slug":"LeetCode缺失的第一个正数","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce0k001bhgac4a4f0sjc","content":"<h2 id=\"LeetCode-缺失的第一个正数\"><a href=\"#LeetCode-缺失的第一个正数\" class=\"headerlink\" title=\"LeetCode 缺失的第一个正数\"></a>LeetCode 缺失的第一个正数</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。</p>\n<p>进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,0]</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,-1,1]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [7,8,9,11,12]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月29日13:51:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstMissingPositive</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">resLen</span> <span class=\"operator\">=</span> res.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span> &amp;&amp; x &lt; resLen) &#123;</span><br><span class=\"line\">                res[x] = x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; resLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != res[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositiveTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nums[i] &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] &lt; numsLen + <span class=\"number\">1</span> &amp;&amp; nums[i] != i + <span class=\"number\">1</span> &amp;&amp; nums[i] != nums[nums[i] - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(nums, i, nums[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != i + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numsLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组元素位置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i 需交换元素数组index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j 与需交换元素进行交换的数组index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            nums[j] ^= nums[j];</span><br><span class=\"line\">            nums[j] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：2708900ns</span><br><span class=\"line\">方法二：15400ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; x &lt; <span class=\"built_in\">len</span>(res):</span><br><span class=\"line\">            res[x] = x</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(res)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; nums[i] &lt; n + <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[<span class=\"number\">1</span>] != i + \\</span><br><span class=\"line\">                <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[i] != nums[nums[i] - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            swap(nums, i, nums[i] - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i + <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">swap</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], i: <span class=\"built_in\">int</span>, j: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i != j:</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\">        nums[j] ^= nums[i]</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：13900ns</span><br><span class=\"line\">方法二：17100ns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-缺失的第一个正数\"><a href=\"#LeetCode-缺失的第一个正数\" class=\"headerlink\" title=\"LeetCode 缺失的第一个正数\"></a>LeetCode 缺失的第一个正数</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。</p>\n<p>进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？</p>\n<p>示例 1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,0]</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,-1,1]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [7,8,9,11,12]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-解法\"><a href=\"#Java-解法\" class=\"headerlink\" title=\"Java 解法\"></a>Java 解法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhkai</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021年3月29日13:51:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstMissingPositive</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numsLen + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">resLen</span> <span class=\"operator\">=</span> res.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span> &amp;&amp; x &lt; resLen) &#123;</span><br><span class=\"line\">                res[x] = x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; resLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != res[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositiveTwo</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numsLen</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nums[i] &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] &lt; numsLen + <span class=\"number\">1</span> &amp;&amp; nums[i] != i + <span class=\"number\">1</span> &amp;&amp; nums[i] != nums[nums[i] - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(nums, i, nums[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != i + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numsLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组元素位置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums 未排序的整数数组 nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i 需交换元素数组index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j 与需交换元素进行交换的数组index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            nums[j] ^= nums[j];</span><br><span class=\"line\">            nums[j] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java-解法效率对比\"><a href=\"#Java-解法效率对比\" class=\"headerlink\" title=\"Java 解法效率对比\"></a>Java 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：2708900ns</span><br><span class=\"line\">方法二：15400ns</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-解法\"><a href=\"#Python-解法\" class=\"headerlink\" title=\"Python 解法\"></a>Python 解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    res = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; x &lt; <span class=\"built_in\">len</span>(res):</span><br><span class=\"line\">            res[x] = x</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(res)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res[i] != i:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">first_missing_positive_two</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    :param nums: 未排序的整数数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 没有出现的最小的正整数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; nums[i] &lt; n + <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[<span class=\"number\">1</span>] != i + \\</span><br><span class=\"line\">                <span class=\"number\">1</span> <span class=\"keyword\">and</span> nums[i] != nums[nums[i] - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            swap(nums, i, nums[i] - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] != i + <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">swap</span>(<span class=\"params\">nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], i: <span class=\"built_in\">int</span>, j: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i != j:</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\">        nums[j] ^= nums[i]</span><br><span class=\"line\">        nums[i] ^= nums[j]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python-解法效率对比\"><a href=\"#Python-解法效率对比\" class=\"headerlink\" title=\"Python 解法效率对比\"></a>Python 解法效率对比</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class=\"line\">方法一：13900ns</span><br><span class=\"line\">方法二：17100ns</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring Batch学习笔记（一）","date":"2021-03-19T03:09:52.000Z","_content":"\n## Spring Batch 简介\n\nSpring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。\n此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。\n\n## Spring Batch 使用场景\n\n(1)一般的批处理程序\n\n·从数据库，文件或者队列中读取大量数据\n·处理读取到的数据\n·将处理完成的数据保存到文件，数据库\n\n(2)业务场景\n\n·定期提交批处理\n·并发批处理，并行处理 Job\n·分阶段的企业消息驱动处理\n·大规模并行批处理\n·失败后手动或预定重启\n·依赖步骤的顺序处理\n·部分处理，跳过记录\n·整批交易，适用于批量较小或现有存储过程/脚本的情况\n\n## Spring Batch 主要组成部分\n\n·JobRepository，用来注册 job 的容器\n·JobLauncher，用来启动 job 的接口\n·Job，实际执行的任务，包含一个或多个 Step\n·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter\n·ItemReader，用来读取数据的接口\n·ItemProcessor，用来处理数据的接口\n·ItemWriter，用来输出数据的接口\n以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。\n\n## 代码\n\n(1)监听器 JobListener\n\n```java\n @Component\n public class JobListener implements JobExecutionListener{\n  @Override\n  public void beforeJob(JobExecution jobExecution){\n   // Job执行前需要执行的操作\n  }\n\n  @Override\n  public void afterJob(JobExecution jobExecution){\n   // Job执行完成后需要执行的操作\n  }\n }\n```\n\n(2)配置类 DataBatchConfiguration\n\n```java\n @Configuration\n @EnableBatchProcessing\n public class DataBatchConfiguration{\n  // 用于构建Job\n  @Resource\n  private JobBuilderFactory jobBuilderFactory;\n\n  // 用于构建Step\n  @Resource\n  private StepBuilderFactory stepBuilderFactory;\n\n  // 监听器\n  @Resource\n  private JobListener jobListener;\n\n  // ItemReader(使用的其中一种读取方式)\n  @Autowired\n  private RepositoryItemReader readerData;\n\n  // ItemWriter\n  @Autowired\n  private ItemReader writerData;\n\n  // Job\n  @Bean\n  public Job dataHandleJob(){\n   return jobBuilderFactory.get(\"dataHandleJob\").incrementer(new RunIdIncrementer()).start(getDataStep())\n    .listener(jobListener).build();\n  }\n\n  // Step\n  // User:要处理的对象\n  @Bean\n  public Step getTDistSellOut() {\n  return stepBuilderFactory.get(\"getData\").<User, User>chunk(10000) // 一次commit数据的数量\n    .faultTolerant().retryLimit(3)\n    .retry(Exception.class)\n    .skipLimit(100)            // 发生异常时，允许重试的次数\n    .skip(Exception.class)\n    .reader(readerData)              // reader\n    .writer(writerData).build();        // writer\n  }\n }\n```\n\n(3)读取类 ReaderStep\n\n```java\n @Component\n public class ReaderStep{\n  @Resource\n  private EntityManagerFactory emf;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Bean RepositoryItemReader<User> readerData(){\n   // 排序map(读取数据按照ID进行正序排列)\n   Map<String,Sort.Direction> map = new HashMap<>();\n   map.put(\"id\",sort.Direction.ASC);\n   // SQL语句所需参数LIST\n   List<String> params = new ArrayList<>();\n   params.add(\"2019-03-20\");\n   RepositoryItemReader<User> repositoryItemReader = new new RepositoryItemReader<>();\n   // Set Repository\n   repositoryItemReader.setRepository(userRepository);\n   // Set PageSize(没有会报错)\n   repositoryItemReader.setPageSize(5);\n   // Set Repository Method\n   repositoryItemReader.setMethodName(\"findByDateLike\");\n   // Set 参数List\n   repositoryItemReader.setArguments(params);\n   // Set 排序Map\n   repositoryItemReader.setSort(map);\n   return repositoryItemReader;\n  }\n }\n```\n\n(4)写出类 WriterStep\n\n```java\n @Component\n public class WriterStep {\n  @Resource\n  private UserRepository userRepository;\n\n  @Bean\n  public RepositoryItemWriter<User> writerData(){\n   RepositoryItemWriter<User> repositoryItemWriter = new RepositoryItemWriter<>();\n   repositoryItemWriter.setRepository(userRepository);\n   repositoryItemWriter.setMethodName(\"save\");\n   return repositoryItemWriter;\n  }\n }\n```\n\n## 参考网址\n\n<https://www.cnblogs.com/ealenxie/p/9647703.html>\n","source":"_posts/Spring-Batch学习笔记（一）.md","raw":"---\ntitle: Spring Batch学习笔记（一）\ndate: 2021-03-19 11:09:52\ntags: \n\t- Spring Batch\n\t- 批处理\ncategories: \n\t[后端,Java]\n---\n\n## Spring Batch 简介\n\nSpring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。\n此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。\n\n## Spring Batch 使用场景\n\n(1)一般的批处理程序\n\n·从数据库，文件或者队列中读取大量数据\n·处理读取到的数据\n·将处理完成的数据保存到文件，数据库\n\n(2)业务场景\n\n·定期提交批处理\n·并发批处理，并行处理 Job\n·分阶段的企业消息驱动处理\n·大规模并行批处理\n·失败后手动或预定重启\n·依赖步骤的顺序处理\n·部分处理，跳过记录\n·整批交易，适用于批量较小或现有存储过程/脚本的情况\n\n## Spring Batch 主要组成部分\n\n·JobRepository，用来注册 job 的容器\n·JobLauncher，用来启动 job 的接口\n·Job，实际执行的任务，包含一个或多个 Step\n·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter\n·ItemReader，用来读取数据的接口\n·ItemProcessor，用来处理数据的接口\n·ItemWriter，用来输出数据的接口\n以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。\n\n## 代码\n\n(1)监听器 JobListener\n\n```java\n @Component\n public class JobListener implements JobExecutionListener{\n  @Override\n  public void beforeJob(JobExecution jobExecution){\n   // Job执行前需要执行的操作\n  }\n\n  @Override\n  public void afterJob(JobExecution jobExecution){\n   // Job执行完成后需要执行的操作\n  }\n }\n```\n\n(2)配置类 DataBatchConfiguration\n\n```java\n @Configuration\n @EnableBatchProcessing\n public class DataBatchConfiguration{\n  // 用于构建Job\n  @Resource\n  private JobBuilderFactory jobBuilderFactory;\n\n  // 用于构建Step\n  @Resource\n  private StepBuilderFactory stepBuilderFactory;\n\n  // 监听器\n  @Resource\n  private JobListener jobListener;\n\n  // ItemReader(使用的其中一种读取方式)\n  @Autowired\n  private RepositoryItemReader readerData;\n\n  // ItemWriter\n  @Autowired\n  private ItemReader writerData;\n\n  // Job\n  @Bean\n  public Job dataHandleJob(){\n   return jobBuilderFactory.get(\"dataHandleJob\").incrementer(new RunIdIncrementer()).start(getDataStep())\n    .listener(jobListener).build();\n  }\n\n  // Step\n  // User:要处理的对象\n  @Bean\n  public Step getTDistSellOut() {\n  return stepBuilderFactory.get(\"getData\").<User, User>chunk(10000) // 一次commit数据的数量\n    .faultTolerant().retryLimit(3)\n    .retry(Exception.class)\n    .skipLimit(100)            // 发生异常时，允许重试的次数\n    .skip(Exception.class)\n    .reader(readerData)              // reader\n    .writer(writerData).build();        // writer\n  }\n }\n```\n\n(3)读取类 ReaderStep\n\n```java\n @Component\n public class ReaderStep{\n  @Resource\n  private EntityManagerFactory emf;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Bean RepositoryItemReader<User> readerData(){\n   // 排序map(读取数据按照ID进行正序排列)\n   Map<String,Sort.Direction> map = new HashMap<>();\n   map.put(\"id\",sort.Direction.ASC);\n   // SQL语句所需参数LIST\n   List<String> params = new ArrayList<>();\n   params.add(\"2019-03-20\");\n   RepositoryItemReader<User> repositoryItemReader = new new RepositoryItemReader<>();\n   // Set Repository\n   repositoryItemReader.setRepository(userRepository);\n   // Set PageSize(没有会报错)\n   repositoryItemReader.setPageSize(5);\n   // Set Repository Method\n   repositoryItemReader.setMethodName(\"findByDateLike\");\n   // Set 参数List\n   repositoryItemReader.setArguments(params);\n   // Set 排序Map\n   repositoryItemReader.setSort(map);\n   return repositoryItemReader;\n  }\n }\n```\n\n(4)写出类 WriterStep\n\n```java\n @Component\n public class WriterStep {\n  @Resource\n  private UserRepository userRepository;\n\n  @Bean\n  public RepositoryItemWriter<User> writerData(){\n   RepositoryItemWriter<User> repositoryItemWriter = new RepositoryItemWriter<>();\n   repositoryItemWriter.setRepository(userRepository);\n   repositoryItemWriter.setMethodName(\"save\");\n   return repositoryItemWriter;\n  }\n }\n```\n\n## 参考网址\n\n<https://www.cnblogs.com/ealenxie/p/9647703.html>\n","slug":"Spring-Batch学习笔记（一）","published":1,"updated":"2023-03-20T01:42:47.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce110046hgac3wxg43u5","content":"<h2 id=\"Spring-Batch-简介\"><a href=\"#Spring-Batch-简介\" class=\"headerlink\" title=\"Spring Batch 简介\"></a>Spring Batch 简介</h2><p>Spring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。<br>此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。</p>\n<h2 id=\"Spring-Batch-使用场景\"><a href=\"#Spring-Batch-使用场景\" class=\"headerlink\" title=\"Spring Batch 使用场景\"></a>Spring Batch 使用场景</h2><p>(1)一般的批处理程序</p>\n<p>·从数据库，文件或者队列中读取大量数据<br>·处理读取到的数据<br>·将处理完成的数据保存到文件，数据库</p>\n<p>(2)业务场景</p>\n<p>·定期提交批处理<br>·并发批处理，并行处理 Job<br>·分阶段的企业消息驱动处理<br>·大规模并行批处理<br>·失败后手动或预定重启<br>·依赖步骤的顺序处理<br>·部分处理，跳过记录<br>·整批交易，适用于批量较小或现有存储过程/脚本的情况</p>\n<h2 id=\"Spring-Batch-主要组成部分\"><a href=\"#Spring-Batch-主要组成部分\" class=\"headerlink\" title=\"Spring Batch 主要组成部分\"></a>Spring Batch 主要组成部分</h2><p>·JobRepository，用来注册 job 的容器<br>·JobLauncher，用来启动 job 的接口<br>·Job，实际执行的任务，包含一个或多个 Step<br>·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter<br>·ItemReader，用来读取数据的接口<br>·ItemProcessor，用来处理数据的接口<br>·ItemWriter，用来输出数据的接口<br>以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>(1)监听器 JobListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JobListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JobExecutionListener</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行前需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行完成后需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)配置类 DataBatchConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableBatchProcessing</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataBatchConfiguration</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Step</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 监听器</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobListener jobListener;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemReader(使用的其中一种读取方式)</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> RepositoryItemReader readerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemWriter</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> ItemReader writerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Job <span class=\"title function_\">dataHandleJob</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> jobBuilderFactory.get(<span class=\"string\">&quot;dataHandleJob&quot;</span>).incrementer(<span class=\"keyword\">new</span> <span class=\"title class_\">RunIdIncrementer</span>()).start(getDataStep())</span><br><span class=\"line\">   .listener(jobListener).build();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Step</span></span><br><span class=\"line\"> <span class=\"comment\">// User:要处理的对象</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Step <span class=\"title function_\">getTDistSellOut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> stepBuilderFactory.get(<span class=\"string\">&quot;getData&quot;</span>).&lt;User, User&gt;chunk(<span class=\"number\">10000</span>) <span class=\"comment\">// 一次commit数据的数量</span></span><br><span class=\"line\">   .faultTolerant().retryLimit(<span class=\"number\">3</span>)</span><br><span class=\"line\">   .retry(Exception.class)</span><br><span class=\"line\">   .skipLimit(<span class=\"number\">100</span>)            <span class=\"comment\">// 发生异常时，允许重试的次数</span></span><br><span class=\"line\">   .skip(Exception.class)</span><br><span class=\"line\">   .reader(readerData)              <span class=\"comment\">// reader</span></span><br><span class=\"line\">   .writer(writerData).build();        <span class=\"comment\">// writer</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)读取类 ReaderStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReaderStep</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> EntityManagerFactory emf;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span> RepositoryItemReader&lt;User&gt; <span class=\"title function_\">readerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 排序map(读取数据按照ID进行正序排列)</span></span><br><span class=\"line\">  Map&lt;String,Sort.Direction&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  map.put(<span class=\"string\">&quot;id&quot;</span>,sort.Direction.ASC);</span><br><span class=\"line\">  <span class=\"comment\">// SQL语句所需参数LIST</span></span><br><span class=\"line\">  List&lt;String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">  params.add(<span class=\"string\">&quot;2019-03-20&quot;</span>);</span><br><span class=\"line\">  RepositoryItemReader&lt;User&gt; repositoryItemReader = <span class=\"keyword\">new</span> <span class=\"title class_\">new</span> RepositoryItemReader&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository</span></span><br><span class=\"line\">  repositoryItemReader.setRepository(userRepository);</span><br><span class=\"line\">  <span class=\"comment\">// Set PageSize(没有会报错)</span></span><br><span class=\"line\">  repositoryItemReader.setPageSize(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository Method</span></span><br><span class=\"line\">  repositoryItemReader.setMethodName(<span class=\"string\">&quot;findByDateLike&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set 参数List</span></span><br><span class=\"line\">  repositoryItemReader.setArguments(params);</span><br><span class=\"line\">  <span class=\"comment\">// Set 排序Map</span></span><br><span class=\"line\">  repositoryItemReader.setSort(map);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemReader;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)写出类 WriterStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriterStep</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> RepositoryItemWriter&lt;User&gt; <span class=\"title function_\">writerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  RepositoryItemWriter&lt;User&gt; repositoryItemWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">RepositoryItemWriter</span>&lt;&gt;();</span><br><span class=\"line\">  repositoryItemWriter.setRepository(userRepository);</span><br><span class=\"line\">  repositoryItemWriter.setMethodName(<span class=\"string\">&quot;save&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemWriter;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考网址\"><a href=\"#参考网址\" class=\"headerlink\" title=\"参考网址\"></a>参考网址</h2><p><a href=\"https://www.cnblogs.com/ealenxie/p/9647703.html\">https://www.cnblogs.com/ealenxie/p/9647703.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-Batch-简介\"><a href=\"#Spring-Batch-简介\" class=\"headerlink\" title=\"Spring Batch 简介\"></a>Spring Batch 简介</h2><p>Spring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。<br>此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。</p>\n<h2 id=\"Spring-Batch-使用场景\"><a href=\"#Spring-Batch-使用场景\" class=\"headerlink\" title=\"Spring Batch 使用场景\"></a>Spring Batch 使用场景</h2><p>(1)一般的批处理程序</p>\n<p>·从数据库，文件或者队列中读取大量数据<br>·处理读取到的数据<br>·将处理完成的数据保存到文件，数据库</p>\n<p>(2)业务场景</p>\n<p>·定期提交批处理<br>·并发批处理，并行处理 Job<br>·分阶段的企业消息驱动处理<br>·大规模并行批处理<br>·失败后手动或预定重启<br>·依赖步骤的顺序处理<br>·部分处理，跳过记录<br>·整批交易，适用于批量较小或现有存储过程/脚本的情况</p>\n<h2 id=\"Spring-Batch-主要组成部分\"><a href=\"#Spring-Batch-主要组成部分\" class=\"headerlink\" title=\"Spring Batch 主要组成部分\"></a>Spring Batch 主要组成部分</h2><p>·JobRepository，用来注册 job 的容器<br>·JobLauncher，用来启动 job 的接口<br>·Job，实际执行的任务，包含一个或多个 Step<br>·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter<br>·ItemReader，用来读取数据的接口<br>·ItemProcessor，用来处理数据的接口<br>·ItemWriter，用来输出数据的接口<br>以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>(1)监听器 JobListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JobListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JobExecutionListener</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行前需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterJob</span><span class=\"params\">(JobExecution jobExecution)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Job执行完成后需要执行的操作</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)配置类 DataBatchConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableBatchProcessing</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataBatchConfiguration</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 用于构建Step</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 监听器</span></span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> JobListener jobListener;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemReader(使用的其中一种读取方式)</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> RepositoryItemReader readerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ItemWriter</span></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> ItemReader writerData;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Job</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Job <span class=\"title function_\">dataHandleJob</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> jobBuilderFactory.get(<span class=\"string\">&quot;dataHandleJob&quot;</span>).incrementer(<span class=\"keyword\">new</span> <span class=\"title class_\">RunIdIncrementer</span>()).start(getDataStep())</span><br><span class=\"line\">   .listener(jobListener).build();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Step</span></span><br><span class=\"line\"> <span class=\"comment\">// User:要处理的对象</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Step <span class=\"title function_\">getTDistSellOut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> stepBuilderFactory.get(<span class=\"string\">&quot;getData&quot;</span>).&lt;User, User&gt;chunk(<span class=\"number\">10000</span>) <span class=\"comment\">// 一次commit数据的数量</span></span><br><span class=\"line\">   .faultTolerant().retryLimit(<span class=\"number\">3</span>)</span><br><span class=\"line\">   .retry(Exception.class)</span><br><span class=\"line\">   .skipLimit(<span class=\"number\">100</span>)            <span class=\"comment\">// 发生异常时，允许重试的次数</span></span><br><span class=\"line\">   .skip(Exception.class)</span><br><span class=\"line\">   .reader(readerData)              <span class=\"comment\">// reader</span></span><br><span class=\"line\">   .writer(writerData).build();        <span class=\"comment\">// writer</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)读取类 ReaderStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReaderStep</span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> EntityManagerFactory emf;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span> RepositoryItemReader&lt;User&gt; <span class=\"title function_\">readerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 排序map(读取数据按照ID进行正序排列)</span></span><br><span class=\"line\">  Map&lt;String,Sort.Direction&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  map.put(<span class=\"string\">&quot;id&quot;</span>,sort.Direction.ASC);</span><br><span class=\"line\">  <span class=\"comment\">// SQL语句所需参数LIST</span></span><br><span class=\"line\">  List&lt;String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">  params.add(<span class=\"string\">&quot;2019-03-20&quot;</span>);</span><br><span class=\"line\">  RepositoryItemReader&lt;User&gt; repositoryItemReader = <span class=\"keyword\">new</span> <span class=\"title class_\">new</span> RepositoryItemReader&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository</span></span><br><span class=\"line\">  repositoryItemReader.setRepository(userRepository);</span><br><span class=\"line\">  <span class=\"comment\">// Set PageSize(没有会报错)</span></span><br><span class=\"line\">  repositoryItemReader.setPageSize(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set Repository Method</span></span><br><span class=\"line\">  repositoryItemReader.setMethodName(<span class=\"string\">&quot;findByDateLike&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Set 参数List</span></span><br><span class=\"line\">  repositoryItemReader.setArguments(params);</span><br><span class=\"line\">  <span class=\"comment\">// Set 排序Map</span></span><br><span class=\"line\">  repositoryItemReader.setSort(map);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemReader;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)写出类 WriterStep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriterStep</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Resource</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> RepositoryItemWriter&lt;User&gt; <span class=\"title function_\">writerData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  RepositoryItemWriter&lt;User&gt; repositoryItemWriter = <span class=\"keyword\">new</span> <span class=\"title class_\">RepositoryItemWriter</span>&lt;&gt;();</span><br><span class=\"line\">  repositoryItemWriter.setRepository(userRepository);</span><br><span class=\"line\">  repositoryItemWriter.setMethodName(<span class=\"string\">&quot;save&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repositoryItemWriter;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考网址\"><a href=\"#参考网址\" class=\"headerlink\" title=\"参考网址\"></a>参考网址</h2><p><a href=\"https://www.cnblogs.com/ealenxie/p/9647703.html\">https://www.cnblogs.com/ealenxie/p/9647703.html</a></p>\n"},{"title":"Vue3 + Swiper开发轮播列表组件","date":"2023-03-20T01:42:34.000Z","_content":"\n## Vue3 + Swiper开发轮播列表组件\n\n前端开发中，轮播列表的场景并不少见，通常使用`Vue+Swiper`来实现，上手比较快。\n\n### 安装依赖\n\n直接执行npm命令\n\n``` shell\n    npm i swiper\n```\n\n### 组件编写\n\n#### Html模板代码\n\n``` Html\n    <template>\n        <div class=\"swiper-list-container\">\n            <!-- 列标题 -->\n            <div class=\"list-title\">\n                <div class=\"title\" v-for=\"(item, index) in column\" :key=\"index\">\n                    <div class=\"title-name\" :style=\"{width: `${item.width}px`}\">\n                        {{item.title}}\n                    </div>\n                </div>\n            </div>\n            <!-- 内容 -->\n            <div class=\"swiper-container list-content\">\n                <div class=\"swiper-wrapper\">\n                    <div v-for=\"(item, index) in data\" :key=\"index\" class=\"swiper-slide list-line\">\n                        <div v-for=\"val in column\" :key=\"val.key\" :style=\"{ width: `${val.width}px` }\" class=\"item\">\n                            {{item[val.key]}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n```\n\n#### JS逻辑代码\n\n```JavaScript\n    <script>\n    import 'swiper/dist/css/swiper.min.css';\n    import 'swiper/dist/js/swiper.min';\n    import Swiper from 'swiper';\n    import { onMounted, reactive } from 'vue';\n\n    export default ({\n        props: {\n            // 列标题\n            column: {\n                type: Array,\n                default: () => [\n                    { title: '姓名', key: 'name', width: 100 },\n                    { title: '年龄', key: 'age', width: 100 },\n                    { title: '性别', key: 'sex', width: 100 },\n                ],\n            },\n            // 数据\n            data: {\n                type: Array,\n                default: () => [\n                    { name: 'Nicholas', age: '18', sex: '男' },\n                    { name: 'Hetty', age: '18', sex: '男' },\n                    { name: 'Graham', age: '18', sex: '女' },\n                    { name: 'Harley', age: '18', sex: '男' },\n                    { name: 'Finbar', age: '18', sex: '女' },\n                    { name: 'Oliver', age: '18', sex: '男' },\n                ],\n            },\n        },\n        setup(props) {\n            const data = reactive({\n                swipers: null,\n            });\n            const createSwiper = () => {\n                data.swipers = new Swiper('.swiper-container', {\n                    height: 150,\n                    speed: 2000, // 匀速时间\n                    autoplay: {\n                        delay: 0,\n                        stopOnLastSlide: false,\n                        disableOnInteraction: false,\n                    },\n                    freeMode: true,\n                    loop: props.data.length > 5,\n                    direction: 'vertical',\n                    slidesPerView: 'auto',\n                });\n            };\n            const init = () => {\n                if (!data.swipers) {\n                    createSwiper();\n                } else if ((data.swipers.passedParams.loop === true && props.data.length <= 5)\n                    || (data.swipers.passedParams.loop === false && data.listData.length > 5)) {\n                    data.swipers.destroy();\n                    data.swipers = null;\n                    setTimeout(() => {\n                        createSwiper();\n                    }, 0);\n                } else {\n                    data.swipers.update();\n                }\n            };\n            onMounted(() => {\n                init();\n            });\n        },\n    });\n    </script>\n```\n\n#### SCSS样式代码\n\n```CSS\n    <style lang=\"scss\" scoped>\n    .swiper-list-container {\n    width: 300px;\n    height: 185;\n\n    .list-title {\n        display: flex;\n        justify-content: flex-start;\n        width: 100%;\n        height: 30px;\n        color: #d59701;\n        background-color: #1a6975;\n\n        .title-name {\n        width: 120px;\n        overflow: hidden;\n        line-height: 30px;\n        text-align: center;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        }\n    }\n\n    .list-content {\n        width: 100%;\n        height: 150px;\n        overflow: hidden;\n        background-color: #e9caa6;\n\n        .list-line {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        height: 30px;\n        line-height: 30px;\n        color: #d59701;\n\n        .item {\n            overflow: hidden;\n            text-align: center;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n        }\n    }\n    }\n    </style>\n```\n\n#### 重点讲解\n\n- class `swiper-container/swiper-wrappe/swiper-slide`依次排序，由此将Swiper的样式引入到Vue组件中\n- 初始化Swiper，即createSwiper方法中，new Swiper对象时应该和Html中的class名称相一致，此外如果存在多个场景使用Swiper时，应该将这个class name命名为不同的名称\n- 根据接口或者数据更新，要区分创建和更新Swiper两种场景\n\n#### Swiper参数介绍\n\n此处仅介绍上述组件中使用到的参数，其他参数请参照官方文档\n<https://www.swiper.com.cn/api/index.html>\n\n- height：强制Swiper的高度(px)，当你的Swiper在隐藏状态下初始化时且切换方向为垂直才用得上。这个参数会使自适应失效\n- speed：切换速度，即slider自动滑动开始到结束的时间（单位ms），也是触摸滑动时释放至贴合的时间\n- autoplay：设置为true启动自动切换，并使用默认的切换设置\n- freeMode：启用自由模式功能，默认情况下Swiper 每次滑动时只滑动一个Slide，并且会自动贴合Wrapper。开启自由模式后，Swiper 会根据惯性滑动可能不止一格且不会贴合\n- loop：设置为 true 则开启循环(loop)模式。loop模式：会在原本slide 前后复制若干个slide (默认一个)并在合适的时候切换，让Swiper看起来像是循环的。复制的slide 上有一些额外的类名代表他是生成的\n- direction：Swiper的滑动方向，可设置为水平方向切换 horizontal 或垂直方向切换 vertical\n- slidesPerView：设置slider容器能够同时显示的slides数量(carousel模式)。可以设置为数字（可为小数，小数不可loop），或者 'auto'则自动根据slides的宽度来设定数量\n\n#### 多行一组进行翻牌效果实现\n\n将`slidesPerView`和`slidesPerGroup`两个属性设置为每组行数即可\n\n#### 效果展示\n\n![轮播列表](https://pic.imgdb.cn/item/6417ee7fa682492fcc66a2c9.gif)\n","source":"_posts/Vue3-Swiper开发轮播列表组件.md","raw":"---\ntitle: Vue3 + Swiper开发轮播列表组件\ndate: 2023-03-20 09:42:34\ntags: \n\t- Vue\n\t- Swiper\ncategories: \n\t[前端,Vue]\n---\n\n## Vue3 + Swiper开发轮播列表组件\n\n前端开发中，轮播列表的场景并不少见，通常使用`Vue+Swiper`来实现，上手比较快。\n\n### 安装依赖\n\n直接执行npm命令\n\n``` shell\n    npm i swiper\n```\n\n### 组件编写\n\n#### Html模板代码\n\n``` Html\n    <template>\n        <div class=\"swiper-list-container\">\n            <!-- 列标题 -->\n            <div class=\"list-title\">\n                <div class=\"title\" v-for=\"(item, index) in column\" :key=\"index\">\n                    <div class=\"title-name\" :style=\"{width: `${item.width}px`}\">\n                        {{item.title}}\n                    </div>\n                </div>\n            </div>\n            <!-- 内容 -->\n            <div class=\"swiper-container list-content\">\n                <div class=\"swiper-wrapper\">\n                    <div v-for=\"(item, index) in data\" :key=\"index\" class=\"swiper-slide list-line\">\n                        <div v-for=\"val in column\" :key=\"val.key\" :style=\"{ width: `${val.width}px` }\" class=\"item\">\n                            {{item[val.key]}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n```\n\n#### JS逻辑代码\n\n```JavaScript\n    <script>\n    import 'swiper/dist/css/swiper.min.css';\n    import 'swiper/dist/js/swiper.min';\n    import Swiper from 'swiper';\n    import { onMounted, reactive } from 'vue';\n\n    export default ({\n        props: {\n            // 列标题\n            column: {\n                type: Array,\n                default: () => [\n                    { title: '姓名', key: 'name', width: 100 },\n                    { title: '年龄', key: 'age', width: 100 },\n                    { title: '性别', key: 'sex', width: 100 },\n                ],\n            },\n            // 数据\n            data: {\n                type: Array,\n                default: () => [\n                    { name: 'Nicholas', age: '18', sex: '男' },\n                    { name: 'Hetty', age: '18', sex: '男' },\n                    { name: 'Graham', age: '18', sex: '女' },\n                    { name: 'Harley', age: '18', sex: '男' },\n                    { name: 'Finbar', age: '18', sex: '女' },\n                    { name: 'Oliver', age: '18', sex: '男' },\n                ],\n            },\n        },\n        setup(props) {\n            const data = reactive({\n                swipers: null,\n            });\n            const createSwiper = () => {\n                data.swipers = new Swiper('.swiper-container', {\n                    height: 150,\n                    speed: 2000, // 匀速时间\n                    autoplay: {\n                        delay: 0,\n                        stopOnLastSlide: false,\n                        disableOnInteraction: false,\n                    },\n                    freeMode: true,\n                    loop: props.data.length > 5,\n                    direction: 'vertical',\n                    slidesPerView: 'auto',\n                });\n            };\n            const init = () => {\n                if (!data.swipers) {\n                    createSwiper();\n                } else if ((data.swipers.passedParams.loop === true && props.data.length <= 5)\n                    || (data.swipers.passedParams.loop === false && data.listData.length > 5)) {\n                    data.swipers.destroy();\n                    data.swipers = null;\n                    setTimeout(() => {\n                        createSwiper();\n                    }, 0);\n                } else {\n                    data.swipers.update();\n                }\n            };\n            onMounted(() => {\n                init();\n            });\n        },\n    });\n    </script>\n```\n\n#### SCSS样式代码\n\n```CSS\n    <style lang=\"scss\" scoped>\n    .swiper-list-container {\n    width: 300px;\n    height: 185;\n\n    .list-title {\n        display: flex;\n        justify-content: flex-start;\n        width: 100%;\n        height: 30px;\n        color: #d59701;\n        background-color: #1a6975;\n\n        .title-name {\n        width: 120px;\n        overflow: hidden;\n        line-height: 30px;\n        text-align: center;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        }\n    }\n\n    .list-content {\n        width: 100%;\n        height: 150px;\n        overflow: hidden;\n        background-color: #e9caa6;\n\n        .list-line {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        height: 30px;\n        line-height: 30px;\n        color: #d59701;\n\n        .item {\n            overflow: hidden;\n            text-align: center;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n        }\n    }\n    }\n    </style>\n```\n\n#### 重点讲解\n\n- class `swiper-container/swiper-wrappe/swiper-slide`依次排序，由此将Swiper的样式引入到Vue组件中\n- 初始化Swiper，即createSwiper方法中，new Swiper对象时应该和Html中的class名称相一致，此外如果存在多个场景使用Swiper时，应该将这个class name命名为不同的名称\n- 根据接口或者数据更新，要区分创建和更新Swiper两种场景\n\n#### Swiper参数介绍\n\n此处仅介绍上述组件中使用到的参数，其他参数请参照官方文档\n<https://www.swiper.com.cn/api/index.html>\n\n- height：强制Swiper的高度(px)，当你的Swiper在隐藏状态下初始化时且切换方向为垂直才用得上。这个参数会使自适应失效\n- speed：切换速度，即slider自动滑动开始到结束的时间（单位ms），也是触摸滑动时释放至贴合的时间\n- autoplay：设置为true启动自动切换，并使用默认的切换设置\n- freeMode：启用自由模式功能，默认情况下Swiper 每次滑动时只滑动一个Slide，并且会自动贴合Wrapper。开启自由模式后，Swiper 会根据惯性滑动可能不止一格且不会贴合\n- loop：设置为 true 则开启循环(loop)模式。loop模式：会在原本slide 前后复制若干个slide (默认一个)并在合适的时候切换，让Swiper看起来像是循环的。复制的slide 上有一些额外的类名代表他是生成的\n- direction：Swiper的滑动方向，可设置为水平方向切换 horizontal 或垂直方向切换 vertical\n- slidesPerView：设置slider容器能够同时显示的slides数量(carousel模式)。可以设置为数字（可为小数，小数不可loop），或者 'auto'则自动根据slides的宽度来设定数量\n\n#### 多行一组进行翻牌效果实现\n\n将`slidesPerView`和`slidesPerGroup`两个属性设置为每组行数即可\n\n#### 效果展示\n\n![轮播列表](https://pic.imgdb.cn/item/6417ee7fa682492fcc66a2c9.gif)\n","slug":"Vue3-Swiper开发轮播列表组件","published":1,"updated":"2023-03-27T05:11:06.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce110047hgacgm5805mm","content":"<h2 id=\"Vue3-Swiper开发轮播列表组件\"><a href=\"#Vue3-Swiper开发轮播列表组件\" class=\"headerlink\" title=\"Vue3 + Swiper开发轮播列表组件\"></a>Vue3 + Swiper开发轮播列表组件</h2><p>前端开发中，轮播列表的场景并不少见，通常使用<code>Vue+Swiper</code>来实现，上手比较快。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>直接执行npm命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i swiper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件编写\"><a href=\"#组件编写\" class=\"headerlink\" title=\"组件编写\"></a>组件编写</h3><h4 id=\"Html模板代码\"><a href=\"#Html模板代码\" class=\"headerlink\" title=\"Html模板代码\"></a>Html模板代码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-list-container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 列标题 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-title&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in column&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title-name&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;width: `$&#123;item.width&#125;px`&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 内容 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-container list-content&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in data&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-slide list-line&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;val in column&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;val.key&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; width: `$&#123;val.width&#125;px` &#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">                        &#123;&#123;item[val.key]&#125;&#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JS逻辑代码\"><a href=\"#JS逻辑代码\" class=\"headerlink\" title=\"JS逻辑代码\"></a>JS逻辑代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;swiper/dist/css/swiper.min.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;swiper/dist/js/swiper.min&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Swiper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;swiper&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 列标题</span></span><br><span class=\"line\">        <span class=\"attr\">column</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">            <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;姓名&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;年龄&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;性别&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 数据</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">            <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Nicholas&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Hetty&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Graham&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;女&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Harley&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Finbar&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;女&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Oliver&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">setup</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">swipers</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">createSwiper</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            data.<span class=\"property\">swipers</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Swiper</span>(<span class=\"string\">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">height</span>: <span class=\"number\">150</span>,</span><br><span class=\"line\">                <span class=\"attr\">speed</span>: <span class=\"number\">2000</span>, <span class=\"comment\">// 匀速时间</span></span><br><span class=\"line\">                <span class=\"attr\">autoplay</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">delay</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    <span class=\"attr\">stopOnLastSlide</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"attr\">disableOnInteraction</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">freeMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">loop</span>: props.<span class=\"property\">data</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"attr\">direction</span>: <span class=\"string\">&#x27;vertical&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">slidesPerView</span>: <span class=\"string\">&#x27;auto&#x27;</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">init</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!data.<span class=\"property\">swipers</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">createSwiper</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((data.<span class=\"property\">swipers</span>.<span class=\"property\">passedParams</span>.<span class=\"property\">loop</span> === <span class=\"literal\">true</span> &amp;&amp; props.<span class=\"property\">data</span>.<span class=\"property\">length</span> &lt;= <span class=\"number\">5</span>)</span><br><span class=\"line\">                || (data.<span class=\"property\">swipers</span>.<span class=\"property\">passedParams</span>.<span class=\"property\">loop</span> === <span class=\"literal\">false</span> &amp;&amp; data.<span class=\"property\">listData</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">                data.<span class=\"property\">swipers</span>.<span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">                data.<span class=\"property\">swipers</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">createSwiper</span>();</span><br><span class=\"line\">                &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                data.<span class=\"property\">swipers</span>.<span class=\"title function_\">update</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">init</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SCSS样式代码\"><a href=\"#SCSS样式代码\" class=\"headerlink\" title=\"SCSS样式代码\"></a>SCSS样式代码</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.swiper-list-container</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">185</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d59701</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#1a6975</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.title-name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e9caa6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d59701</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">        <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重点讲解\"><a href=\"#重点讲解\" class=\"headerlink\" title=\"重点讲解\"></a>重点讲解</h4><ul>\n<li>class <code>swiper-container/swiper-wrappe/swiper-slide</code>依次排序，由此将Swiper的样式引入到Vue组件中</li>\n<li>初始化Swiper，即createSwiper方法中，new Swiper对象时应该和Html中的class名称相一致，此外如果存在多个场景使用Swiper时，应该将这个class name命名为不同的名称</li>\n<li>根据接口或者数据更新，要区分创建和更新Swiper两种场景</li>\n</ul>\n<h4 id=\"Swiper参数介绍\"><a href=\"#Swiper参数介绍\" class=\"headerlink\" title=\"Swiper参数介绍\"></a>Swiper参数介绍</h4><p>此处仅介绍上述组件中使用到的参数，其他参数请参照官方文档<br><a href=\"https://www.swiper.com.cn/api/index.html\">https://www.swiper.com.cn/api/index.html</a></p>\n<ul>\n<li>height：强制Swiper的高度(px)，当你的Swiper在隐藏状态下初始化时且切换方向为垂直才用得上。这个参数会使自适应失效</li>\n<li>speed：切换速度，即slider自动滑动开始到结束的时间（单位ms），也是触摸滑动时释放至贴合的时间</li>\n<li>autoplay：设置为true启动自动切换，并使用默认的切换设置</li>\n<li>freeMode：启用自由模式功能，默认情况下Swiper 每次滑动时只滑动一个Slide，并且会自动贴合Wrapper。开启自由模式后，Swiper 会根据惯性滑动可能不止一格且不会贴合</li>\n<li>loop：设置为 true 则开启循环(loop)模式。loop模式：会在原本slide 前后复制若干个slide (默认一个)并在合适的时候切换，让Swiper看起来像是循环的。复制的slide 上有一些额外的类名代表他是生成的</li>\n<li>direction：Swiper的滑动方向，可设置为水平方向切换 horizontal 或垂直方向切换 vertical</li>\n<li>slidesPerView：设置slider容器能够同时显示的slides数量(carousel模式)。可以设置为数字（可为小数，小数不可loop），或者 ‘auto’则自动根据slides的宽度来设定数量</li>\n</ul>\n<h4 id=\"多行一组进行翻牌效果实现\"><a href=\"#多行一组进行翻牌效果实现\" class=\"headerlink\" title=\"多行一组进行翻牌效果实现\"></a>多行一组进行翻牌效果实现</h4><p>将<code>slidesPerView</code>和<code>slidesPerGroup</code>两个属性设置为每组行数即可</p>\n<h4 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h4><p><img src=\"https://pic.imgdb.cn/item/6417ee7fa682492fcc66a2c9.gif\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/6417ee7fa682492fcc66a2c9.gif\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"轮播列表\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue3-Swiper开发轮播列表组件\"><a href=\"#Vue3-Swiper开发轮播列表组件\" class=\"headerlink\" title=\"Vue3 + Swiper开发轮播列表组件\"></a>Vue3 + Swiper开发轮播列表组件</h2><p>前端开发中，轮播列表的场景并不少见，通常使用<code>Vue+Swiper</code>来实现，上手比较快。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>直接执行npm命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i swiper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件编写\"><a href=\"#组件编写\" class=\"headerlink\" title=\"组件编写\"></a>组件编写</h3><h4 id=\"Html模板代码\"><a href=\"#Html模板代码\" class=\"headerlink\" title=\"Html模板代码\"></a>Html模板代码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-list-container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 列标题 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-title&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in column&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title-name&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;width: `$&#123;item.width&#125;px`&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 内容 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-container list-content&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in data&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-slide list-line&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;val in column&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;val.key&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; width: `$&#123;val.width&#125;px` &#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">                        &#123;&#123;item[val.key]&#125;&#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JS逻辑代码\"><a href=\"#JS逻辑代码\" class=\"headerlink\" title=\"JS逻辑代码\"></a>JS逻辑代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;swiper/dist/css/swiper.min.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;swiper/dist/js/swiper.min&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Swiper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;swiper&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 列标题</span></span><br><span class=\"line\">        <span class=\"attr\">column</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">            <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;姓名&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;年龄&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;性别&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 数据</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">            <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Nicholas&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Hetty&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Graham&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;女&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Harley&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Finbar&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;女&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Oliver&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">setup</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">swipers</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">createSwiper</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            data.<span class=\"property\">swipers</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Swiper</span>(<span class=\"string\">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">height</span>: <span class=\"number\">150</span>,</span><br><span class=\"line\">                <span class=\"attr\">speed</span>: <span class=\"number\">2000</span>, <span class=\"comment\">// 匀速时间</span></span><br><span class=\"line\">                <span class=\"attr\">autoplay</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">delay</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    <span class=\"attr\">stopOnLastSlide</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"attr\">disableOnInteraction</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">freeMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">loop</span>: props.<span class=\"property\">data</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"attr\">direction</span>: <span class=\"string\">&#x27;vertical&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">slidesPerView</span>: <span class=\"string\">&#x27;auto&#x27;</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">init</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!data.<span class=\"property\">swipers</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">createSwiper</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((data.<span class=\"property\">swipers</span>.<span class=\"property\">passedParams</span>.<span class=\"property\">loop</span> === <span class=\"literal\">true</span> &amp;&amp; props.<span class=\"property\">data</span>.<span class=\"property\">length</span> &lt;= <span class=\"number\">5</span>)</span><br><span class=\"line\">                || (data.<span class=\"property\">swipers</span>.<span class=\"property\">passedParams</span>.<span class=\"property\">loop</span> === <span class=\"literal\">false</span> &amp;&amp; data.<span class=\"property\">listData</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">                data.<span class=\"property\">swipers</span>.<span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">                data.<span class=\"property\">swipers</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">createSwiper</span>();</span><br><span class=\"line\">                &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                data.<span class=\"property\">swipers</span>.<span class=\"title function_\">update</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">init</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SCSS样式代码\"><a href=\"#SCSS样式代码\" class=\"headerlink\" title=\"SCSS样式代码\"></a>SCSS样式代码</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.swiper-list-container</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">185</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d59701</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#1a6975</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.title-name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e9caa6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d59701</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">        <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重点讲解\"><a href=\"#重点讲解\" class=\"headerlink\" title=\"重点讲解\"></a>重点讲解</h4><ul>\n<li>class <code>swiper-container/swiper-wrappe/swiper-slide</code>依次排序，由此将Swiper的样式引入到Vue组件中</li>\n<li>初始化Swiper，即createSwiper方法中，new Swiper对象时应该和Html中的class名称相一致，此外如果存在多个场景使用Swiper时，应该将这个class name命名为不同的名称</li>\n<li>根据接口或者数据更新，要区分创建和更新Swiper两种场景</li>\n</ul>\n<h4 id=\"Swiper参数介绍\"><a href=\"#Swiper参数介绍\" class=\"headerlink\" title=\"Swiper参数介绍\"></a>Swiper参数介绍</h4><p>此处仅介绍上述组件中使用到的参数，其他参数请参照官方文档<br><a href=\"https://www.swiper.com.cn/api/index.html\">https://www.swiper.com.cn/api/index.html</a></p>\n<ul>\n<li>height：强制Swiper的高度(px)，当你的Swiper在隐藏状态下初始化时且切换方向为垂直才用得上。这个参数会使自适应失效</li>\n<li>speed：切换速度，即slider自动滑动开始到结束的时间（单位ms），也是触摸滑动时释放至贴合的时间</li>\n<li>autoplay：设置为true启动自动切换，并使用默认的切换设置</li>\n<li>freeMode：启用自由模式功能，默认情况下Swiper 每次滑动时只滑动一个Slide，并且会自动贴合Wrapper。开启自由模式后，Swiper 会根据惯性滑动可能不止一格且不会贴合</li>\n<li>loop：设置为 true 则开启循环(loop)模式。loop模式：会在原本slide 前后复制若干个slide (默认一个)并在合适的时候切换，让Swiper看起来像是循环的。复制的slide 上有一些额外的类名代表他是生成的</li>\n<li>direction：Swiper的滑动方向，可设置为水平方向切换 horizontal 或垂直方向切换 vertical</li>\n<li>slidesPerView：设置slider容器能够同时显示的slides数量(carousel模式)。可以设置为数字（可为小数，小数不可loop），或者 ‘auto’则自动根据slides的宽度来设定数量</li>\n</ul>\n<h4 id=\"多行一组进行翻牌效果实现\"><a href=\"#多行一组进行翻牌效果实现\" class=\"headerlink\" title=\"多行一组进行翻牌效果实现\"></a>多行一组进行翻牌效果实现</h4><p>将<code>slidesPerView</code>和<code>slidesPerGroup</code>两个属性设置为每组行数即可</p>\n<h4 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h4><p><img src=\"https://pic.imgdb.cn/item/6417ee7fa682492fcc66a2c9.gif\" alt=\"轮播列表\"></p>\n"},{"title":"Vue3中Mitt的使用","date":"2023-03-30T05:11:44.000Z","_content":"\n## Vue中使用Mitt\n\nMitt是一个在Vue.js应用程序中使用的小型事件总线库。该库允许组件进行通信，而不必过度依赖父级或子级组件之间的props。\n\n### Mitt的特性和功能介绍\n\n- 轻量级: Mitt只有200字节大小，不会增加你的应用程序的负担\n- 方便易用：只需要引入mitt并配置即可使用\n- 支持任何Javascript环境：Mitt支持在任何Javascript环境下使用，不仅限于Vue\n- 应用场景：组件通信\n\n### 引入Mitt\n\n#### 安装依赖\n\n执行安装命令\n\n```Shell\nnpm install --save mitt\n```\n\n在src目录下面，新建`/libs/bus.js`，内容如下：\n\n```Javascript\n// 事件总线第三方库：\n    import mitt from 'mitt'\n\n    const bus = mitt()\n    export default bus\n```\n\n#### 使用\n\n```Javascript\n    import bus from '@/libs/bus.js'\n\n    //in component A 触发\n    bus.emit('event-name', eventData)\n\n    //in component B 监听\n    bus.on('event-name', eventData => { /* do something with eventData */ })\n```\n","source":"_posts/Vue3中Mitt的使用.md","raw":"---\ntitle: Vue3中Mitt的使用\ndate: 2023-03-30 13:11:44\ntags: \n\t- Vue\n\t- Mitt\ncategories: \n\t[前端,Vue]\n---\n\n## Vue中使用Mitt\n\nMitt是一个在Vue.js应用程序中使用的小型事件总线库。该库允许组件进行通信，而不必过度依赖父级或子级组件之间的props。\n\n### Mitt的特性和功能介绍\n\n- 轻量级: Mitt只有200字节大小，不会增加你的应用程序的负担\n- 方便易用：只需要引入mitt并配置即可使用\n- 支持任何Javascript环境：Mitt支持在任何Javascript环境下使用，不仅限于Vue\n- 应用场景：组件通信\n\n### 引入Mitt\n\n#### 安装依赖\n\n执行安装命令\n\n```Shell\nnpm install --save mitt\n```\n\n在src目录下面，新建`/libs/bus.js`，内容如下：\n\n```Javascript\n// 事件总线第三方库：\n    import mitt from 'mitt'\n\n    const bus = mitt()\n    export default bus\n```\n\n#### 使用\n\n```Javascript\n    import bus from '@/libs/bus.js'\n\n    //in component A 触发\n    bus.emit('event-name', eventData)\n\n    //in component B 监听\n    bus.on('event-name', eventData => { /* do something with eventData */ })\n```\n","slug":"Vue3中Mitt的使用","published":1,"updated":"2023-03-30T07:07:47.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce120049hgaceypkbdn9","content":"<h2 id=\"Vue中使用Mitt\"><a href=\"#Vue中使用Mitt\" class=\"headerlink\" title=\"Vue中使用Mitt\"></a>Vue中使用Mitt</h2><p>Mitt是一个在Vue.js应用程序中使用的小型事件总线库。该库允许组件进行通信，而不必过度依赖父级或子级组件之间的props。</p>\n<h3 id=\"Mitt的特性和功能介绍\"><a href=\"#Mitt的特性和功能介绍\" class=\"headerlink\" title=\"Mitt的特性和功能介绍\"></a>Mitt的特性和功能介绍</h3><ul>\n<li>轻量级: Mitt只有200字节大小，不会增加你的应用程序的负担</li>\n<li>方便易用：只需要引入mitt并配置即可使用</li>\n<li>支持任何Javascript环境：Mitt支持在任何Javascript环境下使用，不仅限于Vue</li>\n<li>应用场景：组件通信</li>\n</ul>\n<h3 id=\"引入Mitt\"><a href=\"#引入Mitt\" class=\"headerlink\" title=\"引入Mitt\"></a>引入Mitt</h3><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><p>执行安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save mitt</span><br></pre></td></tr></table></figure>\n\n<p>在src目录下面，新建<code>/libs/bus.js</code>，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件总线第三方库：</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mitt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bus = <span class=\"title function_\">mitt</span>()</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> bus</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/libs/bus.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in component A 触发</span></span><br><span class=\"line\">bus.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;event-name&#x27;</span>, eventData)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in component B 监听</span></span><br><span class=\"line\">bus.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;event-name&#x27;</span>, <span class=\"function\"><span class=\"params\">eventData</span> =&gt;</span> &#123; <span class=\"comment\">/* do something with eventData */</span> &#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue中使用Mitt\"><a href=\"#Vue中使用Mitt\" class=\"headerlink\" title=\"Vue中使用Mitt\"></a>Vue中使用Mitt</h2><p>Mitt是一个在Vue.js应用程序中使用的小型事件总线库。该库允许组件进行通信，而不必过度依赖父级或子级组件之间的props。</p>\n<h3 id=\"Mitt的特性和功能介绍\"><a href=\"#Mitt的特性和功能介绍\" class=\"headerlink\" title=\"Mitt的特性和功能介绍\"></a>Mitt的特性和功能介绍</h3><ul>\n<li>轻量级: Mitt只有200字节大小，不会增加你的应用程序的负担</li>\n<li>方便易用：只需要引入mitt并配置即可使用</li>\n<li>支持任何Javascript环境：Mitt支持在任何Javascript环境下使用，不仅限于Vue</li>\n<li>应用场景：组件通信</li>\n</ul>\n<h3 id=\"引入Mitt\"><a href=\"#引入Mitt\" class=\"headerlink\" title=\"引入Mitt\"></a>引入Mitt</h3><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><p>执行安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save mitt</span><br></pre></td></tr></table></figure>\n\n<p>在src目录下面，新建<code>/libs/bus.js</code>，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件总线第三方库：</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mitt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bus = <span class=\"title function_\">mitt</span>()</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> bus</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/libs/bus.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in component A 触发</span></span><br><span class=\"line\">bus.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;event-name&#x27;</span>, eventData)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in component B 监听</span></span><br><span class=\"line\">bus.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;event-name&#x27;</span>, <span class=\"function\"><span class=\"params\">eventData</span> =&gt;</span> &#123; <span class=\"comment\">/* do something with eventData */</span> &#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue3中使用pinia","date":"2023-03-20T05:39:39.000Z","_content":"\n## Vue3中使用pinia\n\nPinia是一个轻量级的、基于Vue 3的状态管理库，它的设计目标是提供简单易用的API，使得开发者能够更加便捷地管理Vue 3应用程序中的状态。与Vuex相比，Pinia更加轻量级和易于理解，适用于中小型应用程序。\nPinia的核心是store实例，每个store实例都包含一个状态对象和一组用于更新和读取状态的方法。Pinia还提供了用于定义和创建store的API，以及一组插件，用于扩展store的功能。在使用Pinia时，开发者可以利用Vue 3的响应式数据机制，实现状态的实时更新和自动渲染。\n总体来说，Pinia提供了一个简单、灵活和高效的方式来管理Vue 3应用程序中的状态。它具有易于理解的API、轻量级的设计和出色的性能，可以帮助开发者更快速地构建高质量的Vue 3应用程序。\n\n### 安装依赖\n\n执行安装命令\n\n```Shell\nnpm install pinia\n```\n\n### 创建pinia\n\n创建一个pinia（根存储）并将其传递给应用程序，即在`main.js`中添加如下代码\n\n```JavaScript\nimport { createPinia } from 'pinia'\napp.use(createPinia())\n```\n\n### 定义一个store\n\nStore类似于Vuex中的Store，它存储了整个应用程序的状态。在Pinia中，您可以使用`defineStore`函数来定义一个Store。\n例如，下面是一个简单的Store：\n\n```JavaScript\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\nstate: () => ({\n    count: 0\n}),\nactions: {\n    increment() {\n    this.count++\n    }\n}\n})\n```\n\n在上面的代码中，我们使用defineStore函数来定义一个名为“counter”的Store。state函数返回一个包含count属性的对象，actions对象包含了一个名为increment的方法，用于增加计数器的值，其中`counter`是唯一的名称。\n\n### 在组件中使用Pinia Store\n\n在Vue 3中，您可以使用useStore函数来访问Store。例如，下面是一个简单的组件：\n\n```JavaScript\n<template>\n<div>\n    <p>{{ count }}</p>\n    <button @click=\"increment\">Increment</button>\n</div>\n</template>\n\n<script>\nimport { useCounterStore } from './store'\n\nexport default {\nsetup() {\n    const store = useCounterStore()\n    const count = computed(() => store.count)\n    const increment = () => {\n        store.increment()\n    }\n    return { count, increment }\n}\n}\n</script>\n```\n\n在上面的代码中，我们使用useCounterStore函数来获取名为“counter”的Store实例。然后，我们使用computed函数来计算count属性，该属性返回Store中的count属性的值。最后，我们使用increment方法来增加计数器的值。\n\n## 总结\n\n这就是在Vue 3中使用Pinia的基础知识。Pinia提供了一种简单而直观的方法来管理应用程序的状态。您可以使用defineStore函数来定义一个Store，使用useStore函数来访问Store，并在组件中使用Store的状态和方法。Pinia还提供了一些高级功能，如插件和Devtools支持，这些功能可以帮助您更好地管理和调试应用程序的状态。\n","source":"_posts/Vue3中使用pinia.md","raw":"---\ntitle: Vue3中使用pinia\ndate: 2023-03-20 13:39:39\ntags: \n\t- Vue\n\t- Pinia\ncategories: \n\t[前端,Vue]\n---\n\n## Vue3中使用pinia\n\nPinia是一个轻量级的、基于Vue 3的状态管理库，它的设计目标是提供简单易用的API，使得开发者能够更加便捷地管理Vue 3应用程序中的状态。与Vuex相比，Pinia更加轻量级和易于理解，适用于中小型应用程序。\nPinia的核心是store实例，每个store实例都包含一个状态对象和一组用于更新和读取状态的方法。Pinia还提供了用于定义和创建store的API，以及一组插件，用于扩展store的功能。在使用Pinia时，开发者可以利用Vue 3的响应式数据机制，实现状态的实时更新和自动渲染。\n总体来说，Pinia提供了一个简单、灵活和高效的方式来管理Vue 3应用程序中的状态。它具有易于理解的API、轻量级的设计和出色的性能，可以帮助开发者更快速地构建高质量的Vue 3应用程序。\n\n### 安装依赖\n\n执行安装命令\n\n```Shell\nnpm install pinia\n```\n\n### 创建pinia\n\n创建一个pinia（根存储）并将其传递给应用程序，即在`main.js`中添加如下代码\n\n```JavaScript\nimport { createPinia } from 'pinia'\napp.use(createPinia())\n```\n\n### 定义一个store\n\nStore类似于Vuex中的Store，它存储了整个应用程序的状态。在Pinia中，您可以使用`defineStore`函数来定义一个Store。\n例如，下面是一个简单的Store：\n\n```JavaScript\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\nstate: () => ({\n    count: 0\n}),\nactions: {\n    increment() {\n    this.count++\n    }\n}\n})\n```\n\n在上面的代码中，我们使用defineStore函数来定义一个名为“counter”的Store。state函数返回一个包含count属性的对象，actions对象包含了一个名为increment的方法，用于增加计数器的值，其中`counter`是唯一的名称。\n\n### 在组件中使用Pinia Store\n\n在Vue 3中，您可以使用useStore函数来访问Store。例如，下面是一个简单的组件：\n\n```JavaScript\n<template>\n<div>\n    <p>{{ count }}</p>\n    <button @click=\"increment\">Increment</button>\n</div>\n</template>\n\n<script>\nimport { useCounterStore } from './store'\n\nexport default {\nsetup() {\n    const store = useCounterStore()\n    const count = computed(() => store.count)\n    const increment = () => {\n        store.increment()\n    }\n    return { count, increment }\n}\n}\n</script>\n```\n\n在上面的代码中，我们使用useCounterStore函数来获取名为“counter”的Store实例。然后，我们使用computed函数来计算count属性，该属性返回Store中的count属性的值。最后，我们使用increment方法来增加计数器的值。\n\n## 总结\n\n这就是在Vue 3中使用Pinia的基础知识。Pinia提供了一种简单而直观的方法来管理应用程序的状态。您可以使用defineStore函数来定义一个Store，使用useStore函数来访问Store，并在组件中使用Store的状态和方法。Pinia还提供了一些高级功能，如插件和Devtools支持，这些功能可以帮助您更好地管理和调试应用程序的状态。\n","slug":"Vue3中使用pinia","published":1,"updated":"2023-03-21T09:19:49.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce12004ahgacbwww8gjh","content":"<h2 id=\"Vue3中使用pinia\"><a href=\"#Vue3中使用pinia\" class=\"headerlink\" title=\"Vue3中使用pinia\"></a>Vue3中使用pinia</h2><p>Pinia是一个轻量级的、基于Vue 3的状态管理库，它的设计目标是提供简单易用的API，使得开发者能够更加便捷地管理Vue 3应用程序中的状态。与Vuex相比，Pinia更加轻量级和易于理解，适用于中小型应用程序。<br>Pinia的核心是store实例，每个store实例都包含一个状态对象和一组用于更新和读取状态的方法。Pinia还提供了用于定义和创建store的API，以及一组插件，用于扩展store的功能。在使用Pinia时，开发者可以利用Vue 3的响应式数据机制，实现状态的实时更新和自动渲染。<br>总体来说，Pinia提供了一个简单、灵活和高效的方式来管理Vue 3应用程序中的状态。它具有易于理解的API、轻量级的设计和出色的性能，可以帮助开发者更快速地构建高质量的Vue 3应用程序。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>执行安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pinia</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建pinia\"><a href=\"#创建pinia\" class=\"headerlink\" title=\"创建pinia\"></a>创建pinia</h3><p>创建一个pinia（根存储）并将其传递给应用程序，即在<code>main.js</code>中添加如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">createPinia</span>())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义一个store\"><a href=\"#定义一个store\" class=\"headerlink\" title=\"定义一个store\"></a>定义一个store</h3><p>Store类似于Vuex中的Store，它存储了整个应用程序的状态。在Pinia中，您可以使用<code>defineStore</code>函数来定义一个Store。<br>例如，下面是一个简单的Store：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useCounterStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;counter&#x27;</span>, &#123;</span><br><span class=\"line\"><span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们使用defineStore函数来定义一个名为“counter”的Store。state函数返回一个包含count属性的对象，actions对象包含了一个名为increment的方法，用于增加计数器的值，其中<code>counter</code>是唯一的名称。</p>\n<h3 id=\"在组件中使用Pinia-Store\"><a href=\"#在组件中使用Pinia-Store\" class=\"headerlink\" title=\"在组件中使用Pinia Store\"></a>在组件中使用Pinia Store</h3><p>在Vue 3中，您可以使用useStore函数来访问Store。例如，下面是一个简单的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>Increment<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; useCounterStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> store = <span class=\"title function_\">useCounterStore</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> count = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> store.<span class=\"property\">count</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        store.<span class=\"title function_\">increment</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123; count, increment &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们使用useCounterStore函数来获取名为“counter”的Store实例。然后，我们使用computed函数来计算count属性，该属性返回Store中的count属性的值。最后，我们使用increment方法来增加计数器的值。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这就是在Vue 3中使用Pinia的基础知识。Pinia提供了一种简单而直观的方法来管理应用程序的状态。您可以使用defineStore函数来定义一个Store，使用useStore函数来访问Store，并在组件中使用Store的状态和方法。Pinia还提供了一些高级功能，如插件和Devtools支持，这些功能可以帮助您更好地管理和调试应用程序的状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue3中使用pinia\"><a href=\"#Vue3中使用pinia\" class=\"headerlink\" title=\"Vue3中使用pinia\"></a>Vue3中使用pinia</h2><p>Pinia是一个轻量级的、基于Vue 3的状态管理库，它的设计目标是提供简单易用的API，使得开发者能够更加便捷地管理Vue 3应用程序中的状态。与Vuex相比，Pinia更加轻量级和易于理解，适用于中小型应用程序。<br>Pinia的核心是store实例，每个store实例都包含一个状态对象和一组用于更新和读取状态的方法。Pinia还提供了用于定义和创建store的API，以及一组插件，用于扩展store的功能。在使用Pinia时，开发者可以利用Vue 3的响应式数据机制，实现状态的实时更新和自动渲染。<br>总体来说，Pinia提供了一个简单、灵活和高效的方式来管理Vue 3应用程序中的状态。它具有易于理解的API、轻量级的设计和出色的性能，可以帮助开发者更快速地构建高质量的Vue 3应用程序。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>执行安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pinia</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建pinia\"><a href=\"#创建pinia\" class=\"headerlink\" title=\"创建pinia\"></a>创建pinia</h3><p>创建一个pinia（根存储）并将其传递给应用程序，即在<code>main.js</code>中添加如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">createPinia</span>())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义一个store\"><a href=\"#定义一个store\" class=\"headerlink\" title=\"定义一个store\"></a>定义一个store</h3><p>Store类似于Vuex中的Store，它存储了整个应用程序的状态。在Pinia中，您可以使用<code>defineStore</code>函数来定义一个Store。<br>例如，下面是一个简单的Store：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useCounterStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;counter&#x27;</span>, &#123;</span><br><span class=\"line\"><span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们使用defineStore函数来定义一个名为“counter”的Store。state函数返回一个包含count属性的对象，actions对象包含了一个名为increment的方法，用于增加计数器的值，其中<code>counter</code>是唯一的名称。</p>\n<h3 id=\"在组件中使用Pinia-Store\"><a href=\"#在组件中使用Pinia-Store\" class=\"headerlink\" title=\"在组件中使用Pinia Store\"></a>在组件中使用Pinia Store</h3><p>在Vue 3中，您可以使用useStore函数来访问Store。例如，下面是一个简单的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>Increment<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; useCounterStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> store = <span class=\"title function_\">useCounterStore</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> count = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> store.<span class=\"property\">count</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        store.<span class=\"title function_\">increment</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123; count, increment &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们使用useCounterStore函数来获取名为“counter”的Store实例。然后，我们使用computed函数来计算count属性，该属性返回Store中的count属性的值。最后，我们使用increment方法来增加计数器的值。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这就是在Vue 3中使用Pinia的基础知识。Pinia提供了一种简单而直观的方法来管理应用程序的状态。您可以使用defineStore函数来定义一个Store，使用useStore函数来访问Store，并在组件中使用Store的状态和方法。Pinia还提供了一些高级功能，如插件和Devtools支持，这些功能可以帮助您更好地管理和调试应用程序的状态。</p>\n"},{"title":"Vue函数防抖和函数节流","date":"2021-03-18T09:40:22.000Z","_content":"\n## 函数防抖（debounce）\n\n### 应用场景\n\n- 登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖\n- 调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖\n- 文本编辑器实时保存，当无任何更改操作一秒后进行保存\n\n### 实现方法，防抖重在清零\n\n```js\n    function debounce(f, wait){\n        let timer\n        return (...args) => {\n            clearTimeout(timer)\n            timer = setTimeout(() => {\n                f(..args)\n            }, wait)\n        }\n    }\n```\n\n## 函数节流（throttle）\n\n### 应用场景\n\n- `scroll`事件，每隔一秒计算一次位置信息等\n- 浏览器播放事件，每隔一秒计算一次进度信息等\n- input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求\n\n#### 实现方法，节流重在开关锁\n\n```js\n    function throttle(f, wait){\n        let timer\n        return (..args) => {\n            if (timer) { return }\n            timer = setTimeout(() => {\n                f(..args)\n                timer = null\n            }, wait)\n        }\n    }\n```\n\n## 总结\n\n- 防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零`clearTimeout`\n- 节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁`timer=timeout；timer=null`\n","source":"_posts/Vue函数防抖和函数节流.md","raw":"---\ntitle: Vue函数防抖和函数节流\ndate: 2021-03-18 17:40:22\ntags:\n  - 防抖\n  - 节流\n\ncategories: [前端, Vue]\n---\n\n## 函数防抖（debounce）\n\n### 应用场景\n\n- 登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖\n- 调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖\n- 文本编辑器实时保存，当无任何更改操作一秒后进行保存\n\n### 实现方法，防抖重在清零\n\n```js\n    function debounce(f, wait){\n        let timer\n        return (...args) => {\n            clearTimeout(timer)\n            timer = setTimeout(() => {\n                f(..args)\n            }, wait)\n        }\n    }\n```\n\n## 函数节流（throttle）\n\n### 应用场景\n\n- `scroll`事件，每隔一秒计算一次位置信息等\n- 浏览器播放事件，每隔一秒计算一次进度信息等\n- input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求\n\n#### 实现方法，节流重在开关锁\n\n```js\n    function throttle(f, wait){\n        let timer\n        return (..args) => {\n            if (timer) { return }\n            timer = setTimeout(() => {\n                f(..args)\n                timer = null\n            }, wait)\n        }\n    }\n```\n\n## 总结\n\n- 防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零`clearTimeout`\n- 节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁`timer=timeout；timer=null`\n","slug":"Vue函数防抖和函数节流","published":1,"updated":"2022-10-27T06:40:13.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce13004dhgac7kd94wk9","content":"<h2 id=\"函数防抖（debounce）\"><a href=\"#函数防抖（debounce）\" class=\"headerlink\" title=\"函数防抖（debounce）\"></a>函数防抖（debounce）</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>\n<li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>\n<li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>\n</ul>\n<h3 id=\"实现方法，防抖重在清零\"><a href=\"#实现方法，防抖重在清零\" class=\"headerlink\" title=\"实现方法，防抖重在清零\"></a>实现方法，防抖重在清零</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数节流（throttle）\"><a href=\"#函数节流（throttle）\" class=\"headerlink\" title=\"函数节流（throttle）\"></a>函数节流（throttle）</h2><h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><code>scroll</code>事件，每隔一秒计算一次位置信息等</li>\n<li>浏览器播放事件，每隔一秒计算一次进度信息等</li>\n<li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求</li>\n</ul>\n<h4 id=\"实现方法，节流重在开关锁\"><a href=\"#实现方法，节流重在开关锁\" class=\"headerlink\" title=\"实现方法，节流重在开关锁\"></a>实现方法，节流重在开关锁</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">..args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零<code>clearTimeout</code></li>\n<li>节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁<code>timer=timeout；timer=null</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数防抖（debounce）\"><a href=\"#函数防抖（debounce）\" class=\"headerlink\" title=\"函数防抖（debounce）\"></a>函数防抖（debounce）</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>\n<li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>\n<li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>\n</ul>\n<h3 id=\"实现方法，防抖重在清零\"><a href=\"#实现方法，防抖重在清零\" class=\"headerlink\" title=\"实现方法，防抖重在清零\"></a>实现方法，防抖重在清零</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数节流（throttle）\"><a href=\"#函数节流（throttle）\" class=\"headerlink\" title=\"函数节流（throttle）\"></a>函数节流（throttle）</h2><h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><code>scroll</code>事件，每隔一秒计算一次位置信息等</li>\n<li>浏览器播放事件，每隔一秒计算一次进度信息等</li>\n<li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求</li>\n</ul>\n<h4 id=\"实现方法，节流重在开关锁\"><a href=\"#实现方法，节流重在开关锁\" class=\"headerlink\" title=\"实现方法，节流重在开关锁\"></a>实现方法，节流重在开关锁</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">f, wait</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">..args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">f</span>(..<span class=\"property\">args</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零<code>clearTimeout</code></li>\n<li>节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁<code>timer=timeout；timer=null</code></li>\n</ul>\n"},{"title":"Vue学习一","date":"2021-12-07T12:56:41.000Z","_content":"\n## Vue 学习一\n\n### vue 基础\n\n一套用于构建用户界面的渐进式 JavaScript 框架\n渐进式：Vue 可以自底向上逐层的应用\n简单应用：只需要一个轻量小巧的核心库\n复杂应用：可以引入各式各样的 Vue 插件\n特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范\nES6 模块化\n包管理器：npm、yarn\n原型、原型链\n数组常用方法\naxios\npromise\n\n### 教程\n\n#### 初识 Vue\n\n    1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n    2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n    3.root容器里面的代码被称为【Vue模板】；\n    4.Vue实例和容器是一一对应的；\n    5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n    6.{{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n    7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n\njs 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方\n(1) a\n(2) a+b\n(3) demo(1)\njs 代码：\n(1) if(){}\n(2) for(){}\n\n#### 模板语法\n\n```js\n// 创建Vue实例\nnew Vue({\n  el: \"#root\", // el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串\n  data: {\n    // data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。\n    name: \"EDG FANS\",\n  },\n});\n```\n\nVue 模板语法有 2 大类： 1.插值语法：\n功能：用于解析标签体内容。\n写法：{{xxx}}，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法\n功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）\n举例：v-bind:href=\"xxx\"或者简写为 :href=\"xxx\"，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。\n\n#### 数据绑定\n\n     Vue中有两种数据绑定的方式\n        1.单向绑定(v-bind)：数据只能从data流向页面\n        2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n          备注：\n            1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n            2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n","source":"_posts/Vue学习一.md","raw":"---\ntitle: Vue学习一\ndate: 2021-12-07 20:56:41\ntags:\n  - 引入JS\n  - 模板语法\n\ncategories: [前端, Vue]\n---\n\n## Vue 学习一\n\n### vue 基础\n\n一套用于构建用户界面的渐进式 JavaScript 框架\n渐进式：Vue 可以自底向上逐层的应用\n简单应用：只需要一个轻量小巧的核心库\n复杂应用：可以引入各式各样的 Vue 插件\n特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范\nES6 模块化\n包管理器：npm、yarn\n原型、原型链\n数组常用方法\naxios\npromise\n\n### 教程\n\n#### 初识 Vue\n\n    1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n    2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n    3.root容器里面的代码被称为【Vue模板】；\n    4.Vue实例和容器是一一对应的；\n    5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n    6.{{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n    7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n\njs 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方\n(1) a\n(2) a+b\n(3) demo(1)\njs 代码：\n(1) if(){}\n(2) for(){}\n\n#### 模板语法\n\n```js\n// 创建Vue实例\nnew Vue({\n  el: \"#root\", // el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串\n  data: {\n    // data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。\n    name: \"EDG FANS\",\n  },\n});\n```\n\nVue 模板语法有 2 大类： 1.插值语法：\n功能：用于解析标签体内容。\n写法：{{xxx}}，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法\n功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）\n举例：v-bind:href=\"xxx\"或者简写为 :href=\"xxx\"，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。\n\n#### 数据绑定\n\n     Vue中有两种数据绑定的方式\n        1.单向绑定(v-bind)：数据只能从data流向页面\n        2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n          备注：\n            1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n            2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n","slug":"Vue学习一","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce15004ghgac38d0fokx","content":"<h2 id=\"Vue-学习一\"><a href=\"#Vue-学习一\" class=\"headerlink\" title=\"Vue 学习一\"></a>Vue 学习一</h2><h3 id=\"vue-基础\"><a href=\"#vue-基础\" class=\"headerlink\" title=\"vue 基础\"></a>vue 基础</h3><p>一套用于构建用户界面的渐进式 JavaScript 框架<br>渐进式：Vue 可以自底向上逐层的应用<br>简单应用：只需要一个轻量小巧的核心库<br>复杂应用：可以引入各式各样的 Vue 插件<br>特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范<br>ES6 模块化<br>包管理器：npm、yarn<br>原型、原型链<br>数组常用方法<br>axios<br>promise</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><h4 id=\"初识-Vue\"><a href=\"#初识-Vue\" class=\"headerlink\" title=\"初识 Vue\"></a>初识 Vue</h4><pre><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n3.root容器里面的代码被称为【Vue模板】；\n4.Vue实例和容器是一一对应的；\n5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n</code></pre>\n<p>js 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方<br>(1) a<br>(2) a+b<br>(3) demo(1)<br>js 代码：<br>(1) if(){}<br>(2) for(){}</p>\n<h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#root&quot;</span>, <span class=\"comment\">// el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;EDG FANS&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Vue 模板语法有 2 大类： 1.插值语法：<br>功能：用于解析标签体内容。<br>写法：，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法<br>功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href=”xxx”或者简写为 :href=”xxx”，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。</p>\n<h4 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h4><pre><code> Vue中有两种数据绑定的方式\n    1.单向绑定(v-bind)：数据只能从data流向页面\n    2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n      备注：\n        1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n        2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-学习一\"><a href=\"#Vue-学习一\" class=\"headerlink\" title=\"Vue 学习一\"></a>Vue 学习一</h2><h3 id=\"vue-基础\"><a href=\"#vue-基础\" class=\"headerlink\" title=\"vue 基础\"></a>vue 基础</h3><p>一套用于构建用户界面的渐进式 JavaScript 框架<br>渐进式：Vue 可以自底向上逐层的应用<br>简单应用：只需要一个轻量小巧的核心库<br>复杂应用：可以引入各式各样的 Vue 插件<br>特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范<br>ES6 模块化<br>包管理器：npm、yarn<br>原型、原型链<br>数组常用方法<br>axios<br>promise</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><h4 id=\"初识-Vue\"><a href=\"#初识-Vue\" class=\"headerlink\" title=\"初识 Vue\"></a>初识 Vue</h4><pre><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\n2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\n3.root容器里面的代码被称为【Vue模板】；\n4.Vue实例和容器是一一对应的；\n5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；\n6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\n</code></pre>\n<p>js 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方<br>(1) a<br>(2) a+b<br>(3) demo(1)<br>js 代码：<br>(1) if(){}<br>(2) for(){}</p>\n<h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#root&quot;</span>, <span class=\"comment\">// el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;EDG FANS&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Vue 模板语法有 2 大类： 1.插值语法：<br>功能：用于解析标签体内容。<br>写法：，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法<br>功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href=”xxx”或者简写为 :href=”xxx”，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。</p>\n<h4 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h4><pre><code> Vue中有两种数据绑定的方式\n    1.单向绑定(v-bind)：数据只能从data流向页面\n    2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。\n      备注：\n        1.双向绑定一般都应用在表单类元素上（如：inpout、select等）\n        2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。\n</code></pre>\n"},{"title":"Vue学习二","date":"2021-12-08T12:32:35.000Z","_content":"\n## Vue 学习二\n\n### el 与 data 的两种写法\n\nel 有两种写法\n(1)new Vue 时配置 el 属性\n(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。\ndata 有两种写法\n(1)对象式\n\n```js\ndata: {\n  name: \"尚硅谷\";\n}\n```\n\n(2)函数式\n\n```js\ndata() { // 这里写成箭头函数时，this是window\n       console.log(this) // 此处的this是Vue实例对象\n       return {\n         name: '尚硅谷'\n       }\n     }\n```\n\n### MVVM 模型\n\nM：模型(Model)，对应 data 中的数据\nV：视图(View)，模板\nVM：视图模型(ViewModel)，Vue 实例对象\n\n![avatar](https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg)\n观察发现：\n1.data 中所有的属性，最后都出现在了 vm 上。\n2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。\n\n### 数据代理\n\n#### 回顾 Object.defineProperty 方法\n\n```js\nlet number = 18;\nlet person = {\n  name: \"张三\",\n  sex: \"男\",\n};\nObject.defineProperty(person, \"age\", {\n  // value: 18,\n  // enumerable: true, // 控制属性是否可以枚举，默认值是false\n  // writable: true, // 控制属性是否可以被修改，默认值是false\n  // configurable: true // 控制属性是否可以被删除，默认值是false\n  // 当person的age的属性被调用时，get函数就会被调用\n  get() {\n    return number;\n  },\n  set(value) {\n    number = value;\n  },\n});\nconsole.log(person);\nconsole.log(Object.keys(person));\n```\n","source":"_posts/Vue学习二.md","raw":"---\ntitle: Vue学习二\ndate: 2021-12-08 20:32:35\ntags:\n  - el与data\n  - MVVM模型\n\ncategories: [前端, Vue]\n---\n\n## Vue 学习二\n\n### el 与 data 的两种写法\n\nel 有两种写法\n(1)new Vue 时配置 el 属性\n(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。\ndata 有两种写法\n(1)对象式\n\n```js\ndata: {\n  name: \"尚硅谷\";\n}\n```\n\n(2)函数式\n\n```js\ndata() { // 这里写成箭头函数时，this是window\n       console.log(this) // 此处的this是Vue实例对象\n       return {\n         name: '尚硅谷'\n       }\n     }\n```\n\n### MVVM 模型\n\nM：模型(Model)，对应 data 中的数据\nV：视图(View)，模板\nVM：视图模型(ViewModel)，Vue 实例对象\n\n![avatar](https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg)\n观察发现：\n1.data 中所有的属性，最后都出现在了 vm 上。\n2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。\n\n### 数据代理\n\n#### 回顾 Object.defineProperty 方法\n\n```js\nlet number = 18;\nlet person = {\n  name: \"张三\",\n  sex: \"男\",\n};\nObject.defineProperty(person, \"age\", {\n  // value: 18,\n  // enumerable: true, // 控制属性是否可以枚举，默认值是false\n  // writable: true, // 控制属性是否可以被修改，默认值是false\n  // configurable: true // 控制属性是否可以被删除，默认值是false\n  // 当person的age的属性被调用时，get函数就会被调用\n  get() {\n    return number;\n  },\n  set(value) {\n    number = value;\n  },\n});\nconsole.log(person);\nconsole.log(Object.keys(person));\n```\n","slug":"Vue学习二","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce16004ihgachdq2gjfg","content":"<h2 id=\"Vue-学习二\"><a href=\"#Vue-学习二\" class=\"headerlink\" title=\"Vue 学习二\"></a>Vue 学习二</h2><h3 id=\"el-与-data-的两种写法\"><a href=\"#el-与-data-的两种写法\" class=\"headerlink\" title=\"el 与 data 的两种写法\"></a>el 与 data 的两种写法</h3><p>el 有两种写法<br>(1)new Vue 时配置 el 属性<br>(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。<br>data 有两种写法<br>(1)对象式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;尚硅谷&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)函数式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 这里写成箭头函数时，this是window</span></span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 此处的this是Vue实例对象</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;尚硅谷&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MVVM-模型\"><a href=\"#MVVM-模型\" class=\"headerlink\" title=\"MVVM 模型\"></a>MVVM 模型</h3><p>M：模型(Model)，对应 data 中的数据<br>V：视图(View)，模板<br>VM：视图模型(ViewModel)，Vue 实例对象</p>\n<p><img src=\"https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br>观察发现：<br>1.data 中所有的属性，最后都出现在了 vm 上。<br>2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。</p>\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><h4 id=\"回顾-Object-defineProperty-方法\"><a href=\"#回顾-Object-defineProperty-方法\" class=\"headerlink\" title=\"回顾 Object.defineProperty 方法\"></a>回顾 Object.defineProperty 方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&quot;age&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// value: 18,</span></span><br><span class=\"line\">  <span class=\"comment\">// enumerable: true, // 控制属性是否可以枚举，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// writable: true, // 控制属性是否可以被修改，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// configurable: true // 控制属性是否可以被删除，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// 当person的age的属性被调用时，get函数就会被调用</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    number = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(person));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-学习二\"><a href=\"#Vue-学习二\" class=\"headerlink\" title=\"Vue 学习二\"></a>Vue 学习二</h2><h3 id=\"el-与-data-的两种写法\"><a href=\"#el-与-data-的两种写法\" class=\"headerlink\" title=\"el 与 data 的两种写法\"></a>el 与 data 的两种写法</h3><p>el 有两种写法<br>(1)new Vue 时配置 el 属性<br>(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。<br>data 有两种写法<br>(1)对象式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;尚硅谷&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)函数式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 这里写成箭头函数时，this是window</span></span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 此处的this是Vue实例对象</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;尚硅谷&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MVVM-模型\"><a href=\"#MVVM-模型\" class=\"headerlink\" title=\"MVVM 模型\"></a>MVVM 模型</h3><p>M：模型(Model)，对应 data 中的数据<br>V：视图(View)，模板<br>VM：视图模型(ViewModel)，Vue 实例对象</p>\n<p><img src=\"https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg\" alt=\"avatar\"><br>观察发现：<br>1.data 中所有的属性，最后都出现在了 vm 上。<br>2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。</p>\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><h4 id=\"回顾-Object-defineProperty-方法\"><a href=\"#回顾-Object-defineProperty-方法\" class=\"headerlink\" title=\"回顾 Object.defineProperty 方法\"></a>回顾 Object.defineProperty 方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&quot;age&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// value: 18,</span></span><br><span class=\"line\">  <span class=\"comment\">// enumerable: true, // 控制属性是否可以枚举，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// writable: true, // 控制属性是否可以被修改，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// configurable: true // 控制属性是否可以被删除，默认值是false</span></span><br><span class=\"line\">  <span class=\"comment\">// 当person的age的属性被调用时，get函数就会被调用</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    number = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(person));</span><br></pre></td></tr></table></figure>\n"},{"title":"WinForm设置控件居中","date":"2021-03-19T03:10:36.000Z","_content":"\n## 简单阐述\n\n    在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n\n## 以 Label 控件为例\n\n    (1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n    (2)重写居中的代码如下：\n\n``` C#\nprotected override void OnResize(EventArgs e)\n    {\n            base.OnResize(e);\n            int x = (int)(0.5 * (this.Width - label1.Width));\n            int y = label1.Location.Y;\n            label1.Location = new System.Drawing.Point(x,y);\n    }\n```\n\n## 参考地址\n\n<https://blog.csdn.net/mingyueyixi/article/details/55035935>\n","source":"_posts/WinForm设置控件居中.md","raw":"---\ntitle: WinForm设置控件居中\ndate: 2021-03-19 11:10:36\ntags:\n  - 控件\n  - 居中\n\ncategories: [.Net, Winform]\n---\n\n## 简单阐述\n\n    在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n\n## 以 Label 控件为例\n\n    (1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n    (2)重写居中的代码如下：\n\n``` C#\nprotected override void OnResize(EventArgs e)\n    {\n            base.OnResize(e);\n            int x = (int)(0.5 * (this.Width - label1.Width));\n            int y = label1.Location.Y;\n            label1.Location = new System.Drawing.Point(x,y);\n    }\n```\n\n## 参考地址\n\n<https://blog.csdn.net/mingyueyixi/article/details/55035935>\n","slug":"WinForm设置控件居中","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce16004khgacd5o4eaug","content":"<h2 id=\"简单阐述\"><a href=\"#简单阐述\" class=\"headerlink\" title=\"简单阐述\"></a>简单阐述</h2><pre><code>在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n</code></pre>\n<h2 id=\"以-Label-控件为例\"><a href=\"#以-Label-控件为例\" class=\"headerlink\" title=\"以 Label 控件为例\"></a>以 Label 控件为例</h2><pre><code>(1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n(2)重写居中的代码如下：\n</code></pre>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResize</span>(<span class=\"params\">EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnResize(e);</span><br><span class=\"line\">            <span class=\"built_in\">int</span> x = (<span class=\"built_in\">int</span>)(<span class=\"number\">0.5</span> * (<span class=\"keyword\">this</span>.Width - label1.Width));</span><br><span class=\"line\">            <span class=\"built_in\">int</span> y = label1.Location.Y;</span><br><span class=\"line\">            label1.Location = <span class=\"keyword\">new</span> System.Drawing.Point(x,y);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://blog.csdn.net/mingyueyixi/article/details/55035935\">https://blog.csdn.net/mingyueyixi/article/details/55035935</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单阐述\"><a href=\"#简单阐述\" class=\"headerlink\" title=\"简单阐述\"></a>简单阐述</h2><pre><code>在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。\n</code></pre>\n<h2 id=\"以-Label-控件为例\"><a href=\"#以-Label-控件为例\" class=\"headerlink\" title=\"以 Label 控件为例\"></a>以 Label 控件为例</h2><pre><code>(1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。\n(2)重写居中的代码如下：\n</code></pre>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResize</span>(<span class=\"params\">EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnResize(e);</span><br><span class=\"line\">            <span class=\"built_in\">int</span> x = (<span class=\"built_in\">int</span>)(<span class=\"number\">0.5</span> * (<span class=\"keyword\">this</span>.Width - label1.Width));</span><br><span class=\"line\">            <span class=\"built_in\">int</span> y = label1.Location.Y;</span><br><span class=\"line\">            label1.Location = <span class=\"keyword\">new</span> System.Drawing.Point(x,y);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://blog.csdn.net/mingyueyixi/article/details/55035935\">https://blog.csdn.net/mingyueyixi/article/details/55035935</a></p>\n"},{"title":"Windows安装Hive","date":"2021-12-07T12:56:41.000Z","_content":"\n## 安装包版本\n\nJDK1.8.0.232(java1.8就可以，小版本号不强求)\n链接：<https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg>\n提取码：ei07\nHadoop2.7.7\n链接：<https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ>\n提取码：9aln\nHive2.2.1\n链接：<https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g>\n提取码：02hg\nmysql-connector-java-5.1.46.jar\n链接：<https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA>\n提取码：ae9a\n\n## JDK安装\n\n下载解压，安装到非默认路径\n\n### JDK环境变量配置\n\n配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：\n\n![avatar](https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png)\n\n编辑系统变量`Path`，添加如下图所示两个值\n\n![avatar](https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png)\n\n## Hadoop安装\n\n下载解压即可\n\n### Hadoop环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hadoop`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png)\n\n### 修改配置文件\n\n#### 新建目录\n\n新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录\n\n![avatar](https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png)\n\n#### 修改core-site.xml文件\n\n文件目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop`，将下面的代码复制到core_site.xml，并保存\n\n```xml\n<configuration>\n    <property>\n        <name>fs.defaultFS</name>\n        <value>hdfs://localhost:9000</value>\n    </property>\n</configuration>\n```\n\n#### 修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\n\n```xml\n<configuration>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode</value>\n    </property>\n    <property>\n        <name>dfs.datanode.data.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode</value>\n    </property>\n</configuration>\n```\n\n#### 修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\n\n```xml\n<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n</configuration>\n```\n\n#### 修改yarn-site.xml文件（目录和core_site一致）\n\n```xml\n<configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n    <property>\n        <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>\n        <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n    </property>\n</configuration>\n```\n\n#### 修改hadoop-env.cmd文件（目录和core_site一致）\n\n其实就是设置java的目录\n\n```shell\n@rem set JAVA_HOME=%JAVA_HOME%\nset JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232\n```\n\n### 格式化HDFS，打开Hadoop\n\n至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功\n\n格式化HDFS，打开cmd，输入`hdfs namenode -format`，结果如下即为成功\n\n![avatar](https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png)\n\n切换到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录，执行`start-all.cmd`，会打开4个窗口即为成功\n然后，输入`jps`命令测试是否成功，如下图\n![avatar](https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png)\n\n### 结果测试\n\n在`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录下创建新的文件，然后在`http://localhost:50070/explorer.html#/`查看结果\n\n```text\n    hadoop fs -mkdir /tmp\n    hadoop fs -mkdir /user/\n    hadoop fs -mkdir /user/hive/\n    hadoop fs -mkdir /user/hive/warehouse\n    hadoop fs -chmod g+w /tmp\n    hadoop fs -chmod g+w /user/hive/warehouse\n```\n\n![avatar](https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png)\n\n## HVIE安装\n\n### 环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hive`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png)\n\n### 文件配置\n\n#### 目录更改\n\n修改目录`E:\\tools\\hive\\conf`中的4个默认的配置文件模板拷贝成新的文件名\n\n```text\n    hive-default.xml.template -----> hive-site.xml\n    hive-env.sh.template -----> hive-env.sh\n    hive-exec-log4j.properties.template -----> hive-exec-log4j2.properties\n    hive-log4j.properties.template -----> hive-log4j2.properties\n```\n\n#### 创建新目录\n\n创建以下几个空目录\n\n```text\n    E:\\tools\\hive\\my_hive\\operation_logs_dir\n    E:\\tools\\hive\\my_hive\\querylog_dir\n    E:\\tools\\hive\\my_hive\\resources_dir\n    E:\\tools\\hive\\my_hive\\scratch_dir\n```\n\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png)\n\n#### mysql驱动配置\n\n将mysql-connector-java-5.1.46-bin.jar复制到`E:\\tools\\hive\\lib`目录下\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png)\n\n#### 修改hive-env.sh文件\n\n新增以下内容，路径注意修改为自己的\n\n```text\n# Set HADOOP_HOME to point to a specific hadoop install directory\nHADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7\n\n# Hive Configuration Directory can be controlled by:\nexport HIVE_CONF_DIR=E:\\tools\\hive\\conf\n\n# Folder containing extra ibraries required for hive compilation/execution can be controlled by:\nexport HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib\n```\n\n#### 修改hive-site.xml文件\n\n文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可\n\n链接：<https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw>\n提取码：12gz\n\n按照下图所示，查找修改即可\n![avatar](https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png)\n![avatar](https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png)\n\n### 创建数据库\n\n配置文件完成后，创建数据库，注意字符集和排序规则的设置属性\n![avatar](https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png)\n\n### 启动hive，结果测试\n\n#### 启动hadoop\n\n打开windows命令窗口，切换目录到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`，输入命令`start-dfs.cmd`并回车，启动两个窗口服务即成功\n\n#### 启动hive metastore\n\n在目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`的命令窗口输入`hive -service meatstore`，如果在hive数据库中出现如下所示众多表，则说明开启成功\n\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png)\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png)\n\n上述方式启动结果如下\n![avatar](https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png)\n\n此外，如果要操作hive，需要使用命令`hive Starting Hive Metastore Server`，进入hive操作系统\n![avatar](https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png)\n\n此时，可以直接执行HQL语句进行测试，例如执行`create table stu(id int, name string);`，然后去\n<http://localhost:50070/explorer.html#/user/hive/warehouse>查看结果，\n![avatar](https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png)\n\n如上所示，则hive在windows的安装成功。\n","source":"_posts/Windows安装Hive.md","raw":"---\ntitle: Windows安装Hive\ndate: 2021-12-07 20:56:41\ntags:\n  - Hive\n  - 数据库\ncategories: [Windows, 数据库]\n---\n\n## 安装包版本\n\nJDK1.8.0.232(java1.8就可以，小版本号不强求)\n链接：<https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg>\n提取码：ei07\nHadoop2.7.7\n链接：<https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ>\n提取码：9aln\nHive2.2.1\n链接：<https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g>\n提取码：02hg\nmysql-connector-java-5.1.46.jar\n链接：<https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA>\n提取码：ae9a\n\n## JDK安装\n\n下载解压，安装到非默认路径\n\n### JDK环境变量配置\n\n配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：\n\n![avatar](https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png)\n\n编辑系统变量`Path`，添加如下图所示两个值\n\n![avatar](https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png)\n\n## Hadoop安装\n\n下载解压即可\n\n### Hadoop环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hadoop`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png)\n\n### 修改配置文件\n\n#### 新建目录\n\n新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录\n\n![avatar](https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png)\n\n#### 修改core-site.xml文件\n\n文件目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop`，将下面的代码复制到core_site.xml，并保存\n\n```xml\n<configuration>\n    <property>\n        <name>fs.defaultFS</name>\n        <value>hdfs://localhost:9000</value>\n    </property>\n</configuration>\n```\n\n#### 修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\n\n```xml\n<configuration>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode</value>\n    </property>\n    <property>\n        <name>dfs.datanode.data.dir</name>\n        <value>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode</value>\n    </property>\n</configuration>\n```\n\n#### 修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\n\n```xml\n<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n</configuration>\n```\n\n#### 修改yarn-site.xml文件（目录和core_site一致）\n\n```xml\n<configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n    <property>\n        <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>\n        <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n    </property>\n</configuration>\n```\n\n#### 修改hadoop-env.cmd文件（目录和core_site一致）\n\n其实就是设置java的目录\n\n```shell\n@rem set JAVA_HOME=%JAVA_HOME%\nset JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232\n```\n\n### 格式化HDFS，打开Hadoop\n\n至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功\n\n格式化HDFS，打开cmd，输入`hdfs namenode -format`，结果如下即为成功\n\n![avatar](https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png)\n\n切换到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录，执行`start-all.cmd`，会打开4个窗口即为成功\n然后，输入`jps`命令测试是否成功，如下图\n![avatar](https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png)\n\n### 结果测试\n\n在`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`目录下创建新的文件，然后在`http://localhost:50070/explorer.html#/`查看结果\n\n```text\n    hadoop fs -mkdir /tmp\n    hadoop fs -mkdir /user/\n    hadoop fs -mkdir /user/hive/\n    hadoop fs -mkdir /user/hive/warehouse\n    hadoop fs -chmod g+w /tmp\n    hadoop fs -chmod g+w /user/hive/warehouse\n```\n\n![avatar](https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png)\n\n## HVIE安装\n\n### 环境变量配置\n\n参考JDK环境变量配置，如下图所示：\n![avatar](https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png)\n\n编辑系统变量`Path`，添加如下图所示一个值\n\n![avatar](https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png)\n\n环境变量配置完成后打开`cmd`进行测试，输入`hive`，正常应如下所示：\n\n![avatar](https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png)\n\n### 文件配置\n\n#### 目录更改\n\n修改目录`E:\\tools\\hive\\conf`中的4个默认的配置文件模板拷贝成新的文件名\n\n```text\n    hive-default.xml.template -----> hive-site.xml\n    hive-env.sh.template -----> hive-env.sh\n    hive-exec-log4j.properties.template -----> hive-exec-log4j2.properties\n    hive-log4j.properties.template -----> hive-log4j2.properties\n```\n\n#### 创建新目录\n\n创建以下几个空目录\n\n```text\n    E:\\tools\\hive\\my_hive\\operation_logs_dir\n    E:\\tools\\hive\\my_hive\\querylog_dir\n    E:\\tools\\hive\\my_hive\\resources_dir\n    E:\\tools\\hive\\my_hive\\scratch_dir\n```\n\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png)\n\n#### mysql驱动配置\n\n将mysql-connector-java-5.1.46-bin.jar复制到`E:\\tools\\hive\\lib`目录下\n如下图所示\n![avatar](https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png)\n\n#### 修改hive-env.sh文件\n\n新增以下内容，路径注意修改为自己的\n\n```text\n# Set HADOOP_HOME to point to a specific hadoop install directory\nHADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7\n\n# Hive Configuration Directory can be controlled by:\nexport HIVE_CONF_DIR=E:\\tools\\hive\\conf\n\n# Folder containing extra ibraries required for hive compilation/execution can be controlled by:\nexport HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib\n```\n\n#### 修改hive-site.xml文件\n\n文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可\n\n链接：<https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw>\n提取码：12gz\n\n按照下图所示，查找修改即可\n![avatar](https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png)\n![avatar](https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png)\n\n### 创建数据库\n\n配置文件完成后，创建数据库，注意字符集和排序规则的设置属性\n![avatar](https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png)\n\n### 启动hive，结果测试\n\n#### 启动hadoop\n\n打开windows命令窗口，切换目录到`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`，输入命令`start-dfs.cmd`并回车，启动两个窗口服务即成功\n\n#### 启动hive metastore\n\n在目录`E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin`的命令窗口输入`hive -service meatstore`，如果在hive数据库中出现如下所示众多表，则说明开启成功\n\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png)\n![avatar](https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png)\n\n上述方式启动结果如下\n![avatar](https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png)\n\n此外，如果要操作hive，需要使用命令`hive Starting Hive Metastore Server`，进入hive操作系统\n![avatar](https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png)\n\n此时，可以直接执行HQL语句进行测试，例如执行`create table stu(id int, name string);`，然后去\n<http://localhost:50070/explorer.html#/user/hive/warehouse>查看结果，\n![avatar](https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png)\n\n如上所示，则hive在windows的安装成功。\n","slug":"Windows安装Hive","published":1,"updated":"2022-12-05T03:00:24.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce17004ohgac4pj15slt","content":"<h2 id=\"安装包版本\"><a href=\"#安装包版本\" class=\"headerlink\" title=\"安装包版本\"></a>安装包版本</h2><p>JDK1.8.0.232(java1.8就可以，小版本号不强求)<br>链接：<a href=\"https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg\">https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg</a><br>提取码：ei07<br>Hadoop2.7.7<br>链接：<a href=\"https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ\">https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ</a><br>提取码：9aln<br>Hive2.2.1<br>链接：<a href=\"https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g\">https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g</a><br>提取码：02hg<br>mysql-connector-java-5.1.46.jar<br>链接：<a href=\"https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA\">https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA</a><br>提取码：ae9a</p>\n<h2 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h2><p>下载解压，安装到非默认路径</p>\n<h3 id=\"JDK环境变量配置\"><a href=\"#JDK环境变量配置\" class=\"headerlink\" title=\"JDK环境变量配置\"></a>JDK环境变量配置</h3><p>配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示两个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><p>下载解压即可</p>\n<h3 id=\"Hadoop环境变量配置\"><a href=\"#Hadoop环境变量配置\" class=\"headerlink\" title=\"Hadoop环境变量配置\"></a>Hadoop环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hadoop</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><h4 id=\"新建目录\"><a href=\"#新建目录\" class=\"headerlink\" title=\"新建目录\"></a>新建目录</h4><p>新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"修改core-site-xml文件\"><a href=\"#修改core-site-xml文件\" class=\"headerlink\" title=\"修改core-site.xml文件\"></a>修改core-site.xml文件</h4><p>文件目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop</code>，将下面的代码复制到core_site.xml，并保存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\"><a href=\"#修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\" class=\"headerlink\" title=\"修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\"></a>修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\"><a href=\"#修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\" class=\"headerlink\" title=\"修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\"></a>修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改yarn-site-xml文件（目录和core-site一致）\"><a href=\"#修改yarn-site-xml文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改yarn-site.xml文件（目录和core_site一致）\"></a>修改yarn-site.xml文件（目录和core_site一致）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hadoop-env-cmd文件（目录和core-site一致）\"><a href=\"#修改hadoop-env-cmd文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改hadoop-env.cmd文件（目录和core_site一致）\"></a>修改hadoop-env.cmd文件（目录和core_site一致）</h4><p>其实就是设置java的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@rem set JAVA_HOME=%JAVA_HOME%</span><br><span class=\"line\">set JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化HDFS，打开Hadoop\"><a href=\"#格式化HDFS，打开Hadoop\" class=\"headerlink\" title=\"格式化HDFS，打开Hadoop\"></a>格式化HDFS，打开Hadoop</h3><p>至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功</p>\n<p>格式化HDFS，打开cmd，输入<code>hdfs namenode -format</code>，结果如下即为成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>切换到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录，执行<code>start-all.cmd</code>，会打开4个窗口即为成功<br>然后，输入<code>jps</code>命令测试是否成功，如下图<br><img src=\"https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"结果测试\"><a href=\"#结果测试\" class=\"headerlink\" title=\"结果测试\"></a>结果测试</h3><p>在<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录下创建新的文件，然后在<code>http://localhost:50070/explorer.html#/</code>查看结果</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /tmp</span><br><span class=\"line\">hadoop fs -mkdir /user/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/warehouse</span><br><span class=\"line\">hadoop fs -chmod g+w /tmp</span><br><span class=\"line\">hadoop fs -chmod g+w /user/hive/warehouse</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h2 id=\"HVIE安装\"><a href=\"#HVIE安装\" class=\"headerlink\" title=\"HVIE安装\"></a>HVIE安装</h2><h3 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hive</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h3><h4 id=\"目录更改\"><a href=\"#目录更改\" class=\"headerlink\" title=\"目录更改\"></a>目录更改</h4><p>修改目录<code>E:\\tools\\hive\\conf</code>中的4个默认的配置文件模板拷贝成新的文件名</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive-default.xml.template -----&gt; hive-site.xml</span><br><span class=\"line\">hive-env.sh.template -----&gt; hive-env.sh</span><br><span class=\"line\">hive-exec-log4j.properties.template -----&gt; hive-exec-log4j2.properties</span><br><span class=\"line\">hive-log4j.properties.template -----&gt; hive-log4j2.properties</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新目录\"><a href=\"#创建新目录\" class=\"headerlink\" title=\"创建新目录\"></a>创建新目录</h4><p>创建以下几个空目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\tools\\hive\\my_hive\\operation_logs_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\querylog_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\resources_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\scratch_dir</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"mysql驱动配置\"><a href=\"#mysql驱动配置\" class=\"headerlink\" title=\"mysql驱动配置\"></a>mysql驱动配置</h4><p>将mysql-connector-java-5.1.46-bin.jar复制到<code>E:\\tools\\hive\\lib</code>目录下<br>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h4 id=\"修改hive-env-sh文件\"><a href=\"#修改hive-env-sh文件\" class=\"headerlink\" title=\"修改hive-env.sh文件\"></a>修改hive-env.sh文件</h4><p>新增以下内容，路径注意修改为自己的</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set HADOOP_HOME to point to a specific hadoop install directory</span><br><span class=\"line\">HADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7</span><br><span class=\"line\"></span><br><span class=\"line\"># Hive Configuration Directory can be controlled by:</span><br><span class=\"line\">export HIVE_CONF_DIR=E:\\tools\\hive\\conf</span><br><span class=\"line\"></span><br><span class=\"line\"># Folder containing extra ibraries required for hive compilation/execution can be controlled by:</span><br><span class=\"line\">export HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hive-site-xml文件\"><a href=\"#修改hive-site-xml文件\" class=\"headerlink\" title=\"修改hive-site.xml文件\"></a>修改hive-site.xml文件</h4><p>文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw\">https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw</a><br>提取码：12gz</p>\n<p>按照下图所示，查找修改即可<br><img src=\"https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br><img src=\"https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>配置文件完成后，创建数据库，注意字符集和排序规则的设置属性<br><img src=\"https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"启动hive，结果测试\"><a href=\"#启动hive，结果测试\" class=\"headerlink\" title=\"启动hive，结果测试\"></a>启动hive，结果测试</h3><h4 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h4><p>打开windows命令窗口，切换目录到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>，输入命令<code>start-dfs.cmd</code>并回车，启动两个窗口服务即成功</p>\n<h4 id=\"启动hive-metastore\"><a href=\"#启动hive-metastore\" class=\"headerlink\" title=\"启动hive metastore\"></a>启动hive metastore</h4><p>在目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>的命令窗口输入<code>hive -service meatstore</code>，如果在hive数据库中出现如下所示众多表，则说明开启成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>上述方式启动结果如下<br><img src=\"https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>此外，如果要操作hive，需要使用命令<code>hive Starting Hive Metastore Server</code>，进入hive操作系统<br><img src=\"https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>此时，可以直接执行HQL语句进行测试，例如执行<code>create table stu(id int, name string);</code>，然后去<br><a href=\"http://localhost:50070/explorer.html#/user/hive/warehouse\">http://localhost:50070/explorer.html#/user/hive/warehouse</a>查看结果，<br><img src=\"https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<p>如上所示，则hive在windows的安装成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装包版本\"><a href=\"#安装包版本\" class=\"headerlink\" title=\"安装包版本\"></a>安装包版本</h2><p>JDK1.8.0.232(java1.8就可以，小版本号不强求)<br>链接：<a href=\"https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg\">https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg</a><br>提取码：ei07<br>Hadoop2.7.7<br>链接：<a href=\"https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ\">https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ</a><br>提取码：9aln<br>Hive2.2.1<br>链接：<a href=\"https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g\">https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g</a><br>提取码：02hg<br>mysql-connector-java-5.1.46.jar<br>链接：<a href=\"https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA\">https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA</a><br>提取码：ae9a</p>\n<h2 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h2><p>下载解压，安装到非默认路径</p>\n<h3 id=\"JDK环境变量配置\"><a href=\"#JDK环境变量配置\" class=\"headerlink\" title=\"JDK环境变量配置\"></a>JDK环境变量配置</h3><p>配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示两个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png\" alt=\"avatar\"></p>\n<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><p>下载解压即可</p>\n<h3 id=\"Hadoop环境变量配置\"><a href=\"#Hadoop环境变量配置\" class=\"headerlink\" title=\"Hadoop环境变量配置\"></a>Hadoop环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hadoop</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png\" alt=\"avatar\"></p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><h4 id=\"新建目录\"><a href=\"#新建目录\" class=\"headerlink\" title=\"新建目录\"></a>新建目录</h4><p>新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录</p>\n<p><img src=\"https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png\" alt=\"avatar\"></p>\n<h4 id=\"修改core-site-xml文件\"><a href=\"#修改core-site-xml文件\" class=\"headerlink\" title=\"修改core-site.xml文件\"></a>修改core-site.xml文件</h4><p>文件目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\etc\\hadoop</code>，将下面的代码复制到core_site.xml，并保存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\"><a href=\"#修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录\" class=\"headerlink\" title=\"修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录\"></a>修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\"><a href=\"#修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml\" class=\"headerlink\" title=\"修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml\"></a>修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改yarn-site-xml文件（目录和core-site一致）\"><a href=\"#修改yarn-site-xml文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改yarn-site.xml文件（目录和core_site一致）\"></a>修改yarn-site.xml文件（目录和core_site一致）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hadoop-env-cmd文件（目录和core-site一致）\"><a href=\"#修改hadoop-env-cmd文件（目录和core-site一致）\" class=\"headerlink\" title=\"修改hadoop-env.cmd文件（目录和core_site一致）\"></a>修改hadoop-env.cmd文件（目录和core_site一致）</h4><p>其实就是设置java的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@rem set JAVA_HOME=%JAVA_HOME%</span><br><span class=\"line\">set JAVA_HOME=D:\\tools\\java\\jdk1.8.0.232</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化HDFS，打开Hadoop\"><a href=\"#格式化HDFS，打开Hadoop\" class=\"headerlink\" title=\"格式化HDFS，打开Hadoop\"></a>格式化HDFS，打开Hadoop</h3><p>至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功</p>\n<p>格式化HDFS，打开cmd，输入<code>hdfs namenode -format</code>，结果如下即为成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png\" alt=\"avatar\"></p>\n<p>切换到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录，执行<code>start-all.cmd</code>，会打开4个窗口即为成功<br>然后，输入<code>jps</code>命令测试是否成功，如下图<br><img src=\"https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png\" alt=\"avatar\"></p>\n<h3 id=\"结果测试\"><a href=\"#结果测试\" class=\"headerlink\" title=\"结果测试\"></a>结果测试</h3><p>在<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>目录下创建新的文件，然后在<code>http://localhost:50070/explorer.html#/</code>查看结果</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /tmp</span><br><span class=\"line\">hadoop fs -mkdir /user/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/</span><br><span class=\"line\">hadoop fs -mkdir /user/hive/warehouse</span><br><span class=\"line\">hadoop fs -chmod g+w /tmp</span><br><span class=\"line\">hadoop fs -chmod g+w /user/hive/warehouse</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png\" alt=\"avatar\"></p>\n<h2 id=\"HVIE安装\"><a href=\"#HVIE安装\" class=\"headerlink\" title=\"HVIE安装\"></a>HVIE安装</h2><h3 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src=\"https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png\" alt=\"avatar\"></p>\n<p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png\" alt=\"avatar\"></p>\n<p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hive</code>，正常应如下所示：</p>\n<p><img src=\"https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png\" alt=\"avatar\"></p>\n<h3 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h3><h4 id=\"目录更改\"><a href=\"#目录更改\" class=\"headerlink\" title=\"目录更改\"></a>目录更改</h4><p>修改目录<code>E:\\tools\\hive\\conf</code>中的4个默认的配置文件模板拷贝成新的文件名</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive-default.xml.template -----&gt; hive-site.xml</span><br><span class=\"line\">hive-env.sh.template -----&gt; hive-env.sh</span><br><span class=\"line\">hive-exec-log4j.properties.template -----&gt; hive-exec-log4j2.properties</span><br><span class=\"line\">hive-log4j.properties.template -----&gt; hive-log4j2.properties</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新目录\"><a href=\"#创建新目录\" class=\"headerlink\" title=\"创建新目录\"></a>创建新目录</h4><p>创建以下几个空目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\tools\\hive\\my_hive\\operation_logs_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\querylog_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\resources_dir</span><br><span class=\"line\">E:\\tools\\hive\\my_hive\\scratch_dir</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png\" alt=\"avatar\"></p>\n<h4 id=\"mysql驱动配置\"><a href=\"#mysql驱动配置\" class=\"headerlink\" title=\"mysql驱动配置\"></a>mysql驱动配置</h4><p>将mysql-connector-java-5.1.46-bin.jar复制到<code>E:\\tools\\hive\\lib</code>目录下<br>如下图所示<br><img src=\"https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png\" alt=\"avatar\"></p>\n<h4 id=\"修改hive-env-sh文件\"><a href=\"#修改hive-env-sh文件\" class=\"headerlink\" title=\"修改hive-env.sh文件\"></a>修改hive-env.sh文件</h4><p>新增以下内容，路径注意修改为自己的</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set HADOOP_HOME to point to a specific hadoop install directory</span><br><span class=\"line\">HADOOP_HOME=E:\\tools\\Hadoop\\hadoop-2.7.7</span><br><span class=\"line\"></span><br><span class=\"line\"># Hive Configuration Directory can be controlled by:</span><br><span class=\"line\">export HIVE_CONF_DIR=E:\\tools\\hive\\conf</span><br><span class=\"line\"></span><br><span class=\"line\"># Folder containing extra ibraries required for hive compilation/execution can be controlled by:</span><br><span class=\"line\">export HIVE_AUX_JARS_PATH=E:\\tools\\hive\\lib</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改hive-site-xml文件\"><a href=\"#修改hive-site-xml文件\" class=\"headerlink\" title=\"修改hive-site.xml文件\"></a>修改hive-site.xml文件</h4><p>文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw\">https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw</a><br>提取码：12gz</p>\n<p>按照下图所示，查找修改即可<br><img src=\"https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png\" alt=\"avatar\"><br><img src=\"https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png\" alt=\"avatar\"></p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>配置文件完成后，创建数据库，注意字符集和排序规则的设置属性<br><img src=\"https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png\" alt=\"avatar\"></p>\n<h3 id=\"启动hive，结果测试\"><a href=\"#启动hive，结果测试\" class=\"headerlink\" title=\"启动hive，结果测试\"></a>启动hive，结果测试</h3><h4 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h4><p>打开windows命令窗口，切换目录到<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>，输入命令<code>start-dfs.cmd</code>并回车，启动两个窗口服务即成功</p>\n<h4 id=\"启动hive-metastore\"><a href=\"#启动hive-metastore\" class=\"headerlink\" title=\"启动hive metastore\"></a>启动hive metastore</h4><p>在目录<code>E:\\tools\\Hadoop\\hadoop-2.7.7\\sbin</code>的命令窗口输入<code>hive -service meatstore</code>，如果在hive数据库中出现如下所示众多表，则说明开启成功</p>\n<p><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png\" alt=\"avatar\"><br><img src=\"https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png\" alt=\"avatar\"></p>\n<p>上述方式启动结果如下<br><img src=\"https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png\" alt=\"avatar\"></p>\n<p>此外，如果要操作hive，需要使用命令<code>hive Starting Hive Metastore Server</code>，进入hive操作系统<br><img src=\"https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png\" alt=\"avatar\"></p>\n<p>此时，可以直接执行HQL语句进行测试，例如执行<code>create table stu(id int, name string);</code>，然后去<br><a href=\"http://localhost:50070/explorer.html#/user/hive/warehouse\">http://localhost:50070/explorer.html#/user/hive/warehouse</a>查看结果，<br><img src=\"https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png\" alt=\"avatar\"></p>\n<p>如上所示，则hive在windows的安装成功。</p>\n"},{"title":"Windows端口被占用解决方法","date":"2021-03-19T05:40:56.000Z","_content":"\n## Error 场景\n\n启动 Java 项目失败，控制台显示\n\n```text\n\nError starting ApplicationContext. To display the conditions report`re-run your application with 'debug' enabled.\n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nThe Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.\n\nAction:\n\nVerify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port.\n```\n\n## 解决方法\n\n- 查看那些进程占用了我们的端口号`8080`\n\n  打开 Windows 控制台，输入命令\n\n`netstat -nao | findstr \"8080\"`\n\n可以看到占用 `8080` 端口的进程 PID 为 `8404`\n\n- 杀死相应进程：\n\n  在 Windows 控制台，继续输入命令\n\n`taskkill /pid 8404 /f`\n\n![avatar](https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg)\n","source":"_posts/Windows端口被占用解决方法.md","raw":"---\ntitle: Windows端口被占用解决方法\ndate: 2021-03-19 13:40:56\ntags:\n  - 端口占用\n\ncategories: [操作系统, Windows]\n---\n\n## Error 场景\n\n启动 Java 项目失败，控制台显示\n\n```text\n\nError starting ApplicationContext. To display the conditions report`re-run your application with 'debug' enabled.\n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nThe Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.\n\nAction:\n\nVerify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port.\n```\n\n## 解决方法\n\n- 查看那些进程占用了我们的端口号`8080`\n\n  打开 Windows 控制台，输入命令\n\n`netstat -nao | findstr \"8080\"`\n\n可以看到占用 `8080` 端口的进程 PID 为 `8404`\n\n- 杀死相应进程：\n\n  在 Windows 控制台，继续输入命令\n\n`taskkill /pid 8404 /f`\n\n![avatar](https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg)\n","slug":"Windows端口被占用解决方法","published":1,"updated":"2022-10-27T06:40:13.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce19004shgac916b8ytv","content":"<h2 id=\"Error-场景\"><a href=\"#Error-场景\" class=\"headerlink\" title=\"Error 场景\"></a>Error 场景</h2><p>启动 Java 项目失败，控制台显示</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Error starting ApplicationContext. To display the conditions report`re-run your application with &#x27;debug&#x27; enabled.</span><br><span class=\"line\"></span><br><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Verify the connector&#x27;s configuration, identify and stop any process that&#x27;s listening on port 8080, or configure this application to listen on another port.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>查看那些进程占用了我们的端口号<code>8080</code></p>\n<p>打开 Windows 控制台，输入命令</p>\n</li>\n</ul>\n<p><code>netstat -nao | findstr &quot;8080&quot;</code></p>\n<p>可以看到占用 <code>8080</code> 端口的进程 PID 为 <code>8404</code></p>\n<ul>\n<li><p>杀死相应进程：</p>\n<p>在 Windows 控制台，继续输入命令</p>\n</li>\n</ul>\n<p><code>taskkill /pid 8404 /f</code></p>\n<p><img src=\"https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Error-场景\"><a href=\"#Error-场景\" class=\"headerlink\" title=\"Error 场景\"></a>Error 场景</h2><p>启动 Java 项目失败，控制台显示</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Error starting ApplicationContext. To display the conditions report`re-run your application with &#x27;debug&#x27; enabled.</span><br><span class=\"line\"></span><br><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Verify the connector&#x27;s configuration, identify and stop any process that&#x27;s listening on port 8080, or configure this application to listen on another port.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>查看那些进程占用了我们的端口号<code>8080</code></p>\n<p>打开 Windows 控制台，输入命令</p>\n</li>\n</ul>\n<p><code>netstat -nao | findstr &quot;8080&quot;</code></p>\n<p>可以看到占用 <code>8080</code> 端口的进程 PID 为 <code>8404</code></p>\n<ul>\n<li><p>杀死相应进程：</p>\n<p>在 Windows 控制台，继续输入命令</p>\n</li>\n</ul>\n<p><code>taskkill /pid 8404 /f</code></p>\n<p><img src=\"https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg\" alt=\"avatar\"></p>\n"},{"title":"Windows系统修改jar包中的文件或者依赖","date":"2022-07-29T01:20:52.000Z","_content":"## 场景\n\n应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/Mr_7777777/article/details/125152748\n```\n\n本文主要说一下Windows系统，如何达到上述目的。\n\n### 操作步骤\n\n下面是具体的操作步骤\n\n#### 打开windows命令窗口，查看jar命令是否可用\n\n![avatar](https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png)\n如果提示，`jar`不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置\n\n##### jar环境变量配置\n\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/sinat_20593627/article/details/109613547\n```\n\n如果是java1.8版本，会提示`bin\\jlink.exe`不是内部或外部命令，也不是可运行的程序，这个忽略即可。\n\n#### 解压jar包并手动替换，然后再重新打包\n\n- 解压原jar包\n\n  ```text\n  jar -xvf xxx.jar\n  ```\n\n- 手动替换文件或者依赖\n- 重新打包\n  \n  ```text\n  jar -cfM0 test.jar BOOT-INF/ META-INF/ org/\n  ```\n\n以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。\n","source":"_posts/Windows系统修改jar内容.md","raw":"---\ntitle: Windows系统修改jar包中的文件或者依赖\ndate: 2022-07-29 09:20:52\ntags:\n  - jar包\n\ncategories: [操作系统, Windows]\n---\n## 场景\n\n应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/Mr_7777777/article/details/125152748\n```\n\n本文主要说一下Windows系统，如何达到上述目的。\n\n### 操作步骤\n\n下面是具体的操作步骤\n\n#### 打开windows命令窗口，查看jar命令是否可用\n\n![avatar](https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png)\n如果提示，`jar`不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置\n\n##### jar环境变量配置\n\n可以参考如下链接：\n\n```url\n    https://blog.csdn.net/sinat_20593627/article/details/109613547\n```\n\n如果是java1.8版本，会提示`bin\\jlink.exe`不是内部或外部命令，也不是可运行的程序，这个忽略即可。\n\n#### 解压jar包并手动替换，然后再重新打包\n\n- 解压原jar包\n\n  ```text\n  jar -xvf xxx.jar\n  ```\n\n- 手动替换文件或者依赖\n- 重新打包\n  \n  ```text\n  jar -cfM0 test.jar BOOT-INF/ META-INF/ org/\n  ```\n\n以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。\n","slug":"Windows系统修改jar内容","published":1,"updated":"2022-10-27T06:40:13.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce19004vhgac4aet6k62","content":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。<br>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/Mr_7777777/article/details/125152748</span><br></pre></td></tr></table></figure>\n\n<p>本文主要说一下Windows系统，如何达到上述目的。</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><p>下面是具体的操作步骤</p>\n<h4 id=\"打开windows命令窗口，查看jar命令是否可用\"><a href=\"#打开windows命令窗口，查看jar命令是否可用\" class=\"headerlink\" title=\"打开windows命令窗口，查看jar命令是否可用\"></a>打开windows命令窗口，查看jar命令是否可用</h4><p><img src=\"https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png\" class=\"lazyload placeholder\" data-srcset=\"https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br>如果提示，<code>jar</code>不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置</p>\n<h5 id=\"jar环境变量配置\"><a href=\"#jar环境变量配置\" class=\"headerlink\" title=\"jar环境变量配置\"></a>jar环境变量配置</h5><p>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/sinat_20593627/article/details/109613547</span><br></pre></td></tr></table></figure>\n\n<p>如果是java1.8版本，会提示<code>bin\\jlink.exe</code>不是内部或外部命令，也不是可运行的程序，这个忽略即可。</p>\n<h4 id=\"解压jar包并手动替换，然后再重新打包\"><a href=\"#解压jar包并手动替换，然后再重新打包\" class=\"headerlink\" title=\"解压jar包并手动替换，然后再重新打包\"></a>解压jar包并手动替换，然后再重新打包</h4><ul>\n<li><p>解压原jar包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -xvf xxx.jar</span><br></pre></td></tr></table></figure></li>\n<li><p>手动替换文件或者依赖</p>\n</li>\n<li><p>重新打包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -cfM0 test.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。<br>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/Mr_7777777/article/details/125152748</span><br></pre></td></tr></table></figure>\n\n<p>本文主要说一下Windows系统，如何达到上述目的。</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><p>下面是具体的操作步骤</p>\n<h4 id=\"打开windows命令窗口，查看jar命令是否可用\"><a href=\"#打开windows命令窗口，查看jar命令是否可用\" class=\"headerlink\" title=\"打开windows命令窗口，查看jar命令是否可用\"></a>打开windows命令窗口，查看jar命令是否可用</h4><p><img src=\"https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png\" alt=\"avatar\"><br>如果提示，<code>jar</code>不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置</p>\n<h5 id=\"jar环境变量配置\"><a href=\"#jar环境变量配置\" class=\"headerlink\" title=\"jar环境变量配置\"></a>jar环境变量配置</h5><p>可以参考如下链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/sinat_20593627/article/details/109613547</span><br></pre></td></tr></table></figure>\n\n<p>如果是java1.8版本，会提示<code>bin\\jlink.exe</code>不是内部或外部命令，也不是可运行的程序，这个忽略即可。</p>\n<h4 id=\"解压jar包并手动替换，然后再重新打包\"><a href=\"#解压jar包并手动替换，然后再重新打包\" class=\"headerlink\" title=\"解压jar包并手动替换，然后再重新打包\"></a>解压jar包并手动替换，然后再重新打包</h4><ul>\n<li><p>解压原jar包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -xvf xxx.jar</span><br></pre></td></tr></table></figure></li>\n<li><p>手动替换文件或者依赖</p>\n</li>\n<li><p>重新打包</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -cfM0 test.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。</p>\n"},{"title":"关于我","date":"2021-03-18T09:44:17.000Z","_content":"\n## 个人信息\n\n- 张凯/男/1996.12.28\n- 本科/淮阴工学院（计算机科学与技术）\n- 工作年限：5 年\n- 技术博客：<https://zhkai-ybwn.github.io//>\n\n## 联系方式\n\n- 手机：13182353591\n- 邮箱：<2572429235@qq.com>\n- QQ/微信：2572429235/13182353591\n\n## 工作经历\n\n南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）\n软通动力信息技术（集团）股份有限公司（2021 年 5 月 ~ 2022 年 7 月）\n北京优锘科技有限公司（2022 年 7 月 ~ 至今）\n\n## 北京优锘科技有限公司-苏沪开发组--全栈工程师及开发组长（ 2022年7月 ~ 至今 ）\n\n### 华泰证券可视化大屏\n\n该项目是针对华泰证券相关业务的一个可视化大屏项目，个人负责开发部分Echarts图表以及3D地图模型相关需求。\n\n#### 项目框架\n\n- 前端：Vue3 + Scss + JS + Echarts\n- 后端：数据采集平台\n\n#### 项目职责\n\n- 把控整个项目的进度以及需求迭代\n- 定制开发3D地图的飞线、信息顶牌、热力图，以及经纬度与模型坐标的转换工作。\n- 需求完成后，实时支持现场问题，主要是bug修复以及和数据采集平台进行数据对接工作。\n\n### 中国银联运营可视化管理平台\n\n该项目为定制化在线可视化图标配置平台，可以自行配置生成大屏图表，配置后端管理系统，对不同人员权限进\n行管理，人员管理，静态资源管理等，主要特色为可视化自由配置平台。\n\n#### 项目框架\n\n- 前端：Vue + Scss + JS + Element-ui + Echarts\n- 后端：SpringBoot + MybatisPlus + Swagger\n- 数据存储：MySql\n\n#### 项目职责\n\n- 整个项目的后台维护，以及新需求开发，版本发布\n- 平台的消息处理：消息的全量标记已读功能接口\n- 视图-免登录访问\n- 后台管理系统-多个文件上传业务模块的接口开发\n\n### 上海轨道交通站内可视化系统\n\n该项目是为上海轨道交通定制的可视化系统，包含前端的可视化图表，模型，以及后台的用户管理系统。\n\n#### 项目框架\n\n- 前端：Vue + Scss + JS + Element-ui + Echarts\n- 后端：SpringBoot + Jpa + JWT + SpringSecurity + Swagger\n- 数据存储：MySql\n\n#### 项目职责\n\n- 对接开发后台管理系统，包括登录和用户管理功能\n- 使用JWT进行鉴权，支持token过期，另外使用Ehcache进行缓存，减少每次鉴权对数据库的压力\n- 用户的CRUD\n\n## 南京软通动力信息技术有限公司--消费者云平台实施部--Java工程师（ 2021年5月 ~ 2022年7月 ）\n\n### 开发者联盟管理台\n\n该项目是华为开发者联盟的后台管理系统\n\n#### 项目架构\n\n前端：AngularJs/Angular11 + NG-ZORRO组件库 + TS\n后端：Java，华为自研NUWA框架\n数据存储：Mysql\n\n### 项目职责\n\n- Angular框架的升级工作（AngularJS升级到Angular11）。通过不断的学习和总结，快速上手并掌\n握了Angular框架，并成为该项目的主要开发和日常支撑。\n- 参与该项目的代码CleanCode工作，修改冗余繁琐，不“整洁”的代码，定期组织项\n目成员进行分享学习会议。\n\n### 开发者联盟画像系统\n\n#### 项目架构\n\n- 前端：Angular11 + NG-ZORRO组件库\n- 后端：Java，华为自研NUWA框架\n- 数据存储：Mysql\n\n#### 项目职责\n\n- 人群导入页面、基础属性批量创建页面、线索管理菜单等需求的开发工作，包括前端的\n页面以及后台接口的透传校验。\n\n### 其他项目\n\n开发者联盟资讯管理台的田主，负责该项目的开发和日常问题支持，包括ckeditor版本升级，\nAngular版本升级以及资讯创建功能。\n开发者联盟合同管理台技术支持，负责部分需求开发以及主导Angular框架的升级工作。\n\n## 南京联迪信息股份有限公司--数据工程研究中心--高级程序员 （ 2018年6月 ~ 2021年5月 ）\n\n### 3M POS 数据收集系统\n\n帮助 3M 公司使用系统自动处理经销商的销售数据。包括对数据的自动定时抽取上传、校验、转换等基础，.\n以及错误数据回滚、经销商管理、日志管理等配套功能。\n\n#### 项目框架\n\n- 前端：Vue + Element-ui\n- 后端：SpringBoot + Jpa + Hibernate + Swagger\n- 数据存储：SQLSERVER\n- 客户端：Winform + Cefsharp\n\n#### 项目职责\n\n此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。\n\n- WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。\n- 客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。\n- 经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。\n- 系统操作手册和客户端安装手册的编写。\n- 系统后续功能的开发和运维工作。\n\n### ANA 航空到着案内\n\n面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。\n\n#### 项目框架\n\n- 前端：Kony + Node.js\n- 后端：JavaService\n- 数据存储：Mysql\n\n#### 项目职责\n\n- 在线查询航班并将所查航班信息发送到邮箱服务\n- 个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。\n- 航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。\n- 航空公司新闻和注意事项提示信息的展示\n- Web 端管理新闻和注意事项\n- 后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。\n- 航班查询页面的开发。\n- 为适应手机、平板、WEB 对多个页面进行样式调整。\n- 测试式样书的编写。\n\n### 爬虫开发与部署\n\n使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。\n\n#### 项目框架\n\n- 爬虫框架：Python + Scrapy\n- 数据存储：MongoDB + ElasticSearch + Redis\n- 爬虫发布平台：crawlab\n\n### 项目职责\n\n- Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写\n- 爬虫发布到部署好的 Crawlab 定期执行\n- 3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能\n\n### ElasticSearch 管理及新闻检索平台\n\n将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。\n\n#### 项目框架\n\n- WEB：Vue + Elemen-ui\n- API：Python + FastApi\n- 数据库：Mysql + ElasticSearch\n\n### 项目职责\n\n整个项目的搭建和前后台开发，加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。\n\n## 技能清单\n\n- 开发语言：Java/C#/Python\n- 前端框架：Vue/Angular\n- 数据库相关：MySQL/SQLSERVER/MongoDB/ES\n- 版本管理：Git/Svn\n- 单元测试：Junit/Pytest\n- 开发工具：Idea/STS/VsCode\n","source":"_posts/about.md","raw":"---\ntitle: 关于我\ndate: 2021-03-18 17:44:17\ntags:\n  - 简历\ncategories: [个人]\n---\n\n## 个人信息\n\n- 张凯/男/1996.12.28\n- 本科/淮阴工学院（计算机科学与技术）\n- 工作年限：5 年\n- 技术博客：<https://zhkai-ybwn.github.io//>\n\n## 联系方式\n\n- 手机：13182353591\n- 邮箱：<2572429235@qq.com>\n- QQ/微信：2572429235/13182353591\n\n## 工作经历\n\n南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）\n软通动力信息技术（集团）股份有限公司（2021 年 5 月 ~ 2022 年 7 月）\n北京优锘科技有限公司（2022 年 7 月 ~ 至今）\n\n## 北京优锘科技有限公司-苏沪开发组--全栈工程师及开发组长（ 2022年7月 ~ 至今 ）\n\n### 华泰证券可视化大屏\n\n该项目是针对华泰证券相关业务的一个可视化大屏项目，个人负责开发部分Echarts图表以及3D地图模型相关需求。\n\n#### 项目框架\n\n- 前端：Vue3 + Scss + JS + Echarts\n- 后端：数据采集平台\n\n#### 项目职责\n\n- 把控整个项目的进度以及需求迭代\n- 定制开发3D地图的飞线、信息顶牌、热力图，以及经纬度与模型坐标的转换工作。\n- 需求完成后，实时支持现场问题，主要是bug修复以及和数据采集平台进行数据对接工作。\n\n### 中国银联运营可视化管理平台\n\n该项目为定制化在线可视化图标配置平台，可以自行配置生成大屏图表，配置后端管理系统，对不同人员权限进\n行管理，人员管理，静态资源管理等，主要特色为可视化自由配置平台。\n\n#### 项目框架\n\n- 前端：Vue + Scss + JS + Element-ui + Echarts\n- 后端：SpringBoot + MybatisPlus + Swagger\n- 数据存储：MySql\n\n#### 项目职责\n\n- 整个项目的后台维护，以及新需求开发，版本发布\n- 平台的消息处理：消息的全量标记已读功能接口\n- 视图-免登录访问\n- 后台管理系统-多个文件上传业务模块的接口开发\n\n### 上海轨道交通站内可视化系统\n\n该项目是为上海轨道交通定制的可视化系统，包含前端的可视化图表，模型，以及后台的用户管理系统。\n\n#### 项目框架\n\n- 前端：Vue + Scss + JS + Element-ui + Echarts\n- 后端：SpringBoot + Jpa + JWT + SpringSecurity + Swagger\n- 数据存储：MySql\n\n#### 项目职责\n\n- 对接开发后台管理系统，包括登录和用户管理功能\n- 使用JWT进行鉴权，支持token过期，另外使用Ehcache进行缓存，减少每次鉴权对数据库的压力\n- 用户的CRUD\n\n## 南京软通动力信息技术有限公司--消费者云平台实施部--Java工程师（ 2021年5月 ~ 2022年7月 ）\n\n### 开发者联盟管理台\n\n该项目是华为开发者联盟的后台管理系统\n\n#### 项目架构\n\n前端：AngularJs/Angular11 + NG-ZORRO组件库 + TS\n后端：Java，华为自研NUWA框架\n数据存储：Mysql\n\n### 项目职责\n\n- Angular框架的升级工作（AngularJS升级到Angular11）。通过不断的学习和总结，快速上手并掌\n握了Angular框架，并成为该项目的主要开发和日常支撑。\n- 参与该项目的代码CleanCode工作，修改冗余繁琐，不“整洁”的代码，定期组织项\n目成员进行分享学习会议。\n\n### 开发者联盟画像系统\n\n#### 项目架构\n\n- 前端：Angular11 + NG-ZORRO组件库\n- 后端：Java，华为自研NUWA框架\n- 数据存储：Mysql\n\n#### 项目职责\n\n- 人群导入页面、基础属性批量创建页面、线索管理菜单等需求的开发工作，包括前端的\n页面以及后台接口的透传校验。\n\n### 其他项目\n\n开发者联盟资讯管理台的田主，负责该项目的开发和日常问题支持，包括ckeditor版本升级，\nAngular版本升级以及资讯创建功能。\n开发者联盟合同管理台技术支持，负责部分需求开发以及主导Angular框架的升级工作。\n\n## 南京联迪信息股份有限公司--数据工程研究中心--高级程序员 （ 2018年6月 ~ 2021年5月 ）\n\n### 3M POS 数据收集系统\n\n帮助 3M 公司使用系统自动处理经销商的销售数据。包括对数据的自动定时抽取上传、校验、转换等基础，.\n以及错误数据回滚、经销商管理、日志管理等配套功能。\n\n#### 项目框架\n\n- 前端：Vue + Element-ui\n- 后端：SpringBoot + Jpa + Hibernate + Swagger\n- 数据存储：SQLSERVER\n- 客户端：Winform + Cefsharp\n\n#### 项目职责\n\n此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。\n\n- WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。\n- 客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。\n- 经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。\n- 系统操作手册和客户端安装手册的编写。\n- 系统后续功能的开发和运维工作。\n\n### ANA 航空到着案内\n\n面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。\n\n#### 项目框架\n\n- 前端：Kony + Node.js\n- 后端：JavaService\n- 数据存储：Mysql\n\n#### 项目职责\n\n- 在线查询航班并将所查航班信息发送到邮箱服务\n- 个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。\n- 航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。\n- 航空公司新闻和注意事项提示信息的展示\n- Web 端管理新闻和注意事项\n- 后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。\n- 航班查询页面的开发。\n- 为适应手机、平板、WEB 对多个页面进行样式调整。\n- 测试式样书的编写。\n\n### 爬虫开发与部署\n\n使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。\n\n#### 项目框架\n\n- 爬虫框架：Python + Scrapy\n- 数据存储：MongoDB + ElasticSearch + Redis\n- 爬虫发布平台：crawlab\n\n### 项目职责\n\n- Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写\n- 爬虫发布到部署好的 Crawlab 定期执行\n- 3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能\n\n### ElasticSearch 管理及新闻检索平台\n\n将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。\n\n#### 项目框架\n\n- WEB：Vue + Elemen-ui\n- API：Python + FastApi\n- 数据库：Mysql + ElasticSearch\n\n### 项目职责\n\n整个项目的搭建和前后台开发，加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。\n\n## 技能清单\n\n- 开发语言：Java/C#/Python\n- 前端框架：Vue/Angular\n- 数据库相关：MySQL/SQLSERVER/MongoDB/ES\n- 版本管理：Git/Svn\n- 单元测试：Junit/Pytest\n- 开发工具：Idea/STS/VsCode\n","slug":"about","published":1,"updated":"2023-06-25T02:11:53.929Z","_id":"clhjvce1a004yhgac8d4e6ztm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>张凯/男/1996.12.28</li>\n<li>本科/淮阴工学院（计算机科学与技术）</li>\n<li>工作年限：5 年</li>\n<li>技术博客：<a href=\"https://zhkai-ybwn.github.io//\">https://zhkai-ybwn.github.io//</a></li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>手机：13182353591</li>\n<li>邮箱：<a href=\"mailto:&#50;&#53;&#x37;&#50;&#52;&#50;&#57;&#x32;&#51;&#x35;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;\">&#50;&#53;&#x37;&#50;&#52;&#50;&#57;&#x32;&#51;&#x35;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a></li>\n<li>QQ/微信：2572429235/13182353591</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）<br>软通动力信息技术（集团）股份有限公司（2021 年 5 月 ~ 2022 年 7 月）<br>北京优锘科技有限公司（2022 年 7 月 ~ 至今）</p>\n<h2 id=\"北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（-2022年7月-至今-）\"><a href=\"#北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（-2022年7月-至今-）\" class=\"headerlink\" title=\"北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（ 2022年7月 ~ 至今 ）\"></a>北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（ 2022年7月 ~ 至今 ）</h2><h3 id=\"华泰证券可视化大屏\"><a href=\"#华泰证券可视化大屏\" class=\"headerlink\" title=\"华泰证券可视化大屏\"></a>华泰证券可视化大屏</h3><p>该项目是针对华泰证券相关业务的一个可视化大屏项目，个人负责开发部分Echarts图表以及3D地图模型相关需求。</p>\n<h4 id=\"项目框架\"><a href=\"#项目框架\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue3 + Scss + JS + Echarts</li>\n<li>后端：数据采集平台</li>\n</ul>\n<h4 id=\"项目职责\"><a href=\"#项目职责\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>把控整个项目的进度以及需求迭代</li>\n<li>定制开发3D地图的飞线、信息顶牌、热力图，以及经纬度与模型坐标的转换工作。</li>\n<li>需求完成后，实时支持现场问题，主要是bug修复以及和数据采集平台进行数据对接工作。</li>\n</ul>\n<h3 id=\"中国银联运营可视化管理平台\"><a href=\"#中国银联运营可视化管理平台\" class=\"headerlink\" title=\"中国银联运营可视化管理平台\"></a>中国银联运营可视化管理平台</h3><p>该项目为定制化在线可视化图标配置平台，可以自行配置生成大屏图表，配置后端管理系统，对不同人员权限进<br>行管理，人员管理，静态资源管理等，主要特色为可视化自由配置平台。</p>\n<h4 id=\"项目框架-1\"><a href=\"#项目框架-1\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue + Scss + JS + Element-ui + Echarts</li>\n<li>后端：SpringBoot + MybatisPlus + Swagger</li>\n<li>数据存储：MySql</li>\n</ul>\n<h4 id=\"项目职责-1\"><a href=\"#项目职责-1\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>整个项目的后台维护，以及新需求开发，版本发布</li>\n<li>平台的消息处理：消息的全量标记已读功能接口</li>\n<li>视图-免登录访问</li>\n<li>后台管理系统-多个文件上传业务模块的接口开发</li>\n</ul>\n<h3 id=\"上海轨道交通站内可视化系统\"><a href=\"#上海轨道交通站内可视化系统\" class=\"headerlink\" title=\"上海轨道交通站内可视化系统\"></a>上海轨道交通站内可视化系统</h3><p>该项目是为上海轨道交通定制的可视化系统，包含前端的可视化图表，模型，以及后台的用户管理系统。</p>\n<h4 id=\"项目框架-2\"><a href=\"#项目框架-2\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue + Scss + JS + Element-ui + Echarts</li>\n<li>后端：SpringBoot + Jpa + JWT + SpringSecurity + Swagger</li>\n<li>数据存储：MySql</li>\n</ul>\n<h4 id=\"项目职责-2\"><a href=\"#项目职责-2\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>对接开发后台管理系统，包括登录和用户管理功能</li>\n<li>使用JWT进行鉴权，支持token过期，另外使用Ehcache进行缓存，减少每次鉴权对数据库的压力</li>\n<li>用户的CRUD</li>\n</ul>\n<h2 id=\"南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（-2021年5月-2022年7月-）\"><a href=\"#南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（-2021年5月-2022年7月-）\" class=\"headerlink\" title=\"南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（ 2021年5月 ~ 2022年7月 ）\"></a>南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（ 2021年5月 ~ 2022年7月 ）</h2><h3 id=\"开发者联盟管理台\"><a href=\"#开发者联盟管理台\" class=\"headerlink\" title=\"开发者联盟管理台\"></a>开发者联盟管理台</h3><p>该项目是华为开发者联盟的后台管理系统</p>\n<h4 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h4><p>前端：AngularJs/Angular11 + NG-ZORRO组件库 + TS<br>后端：Java，华为自研NUWA框架<br>数据存储：Mysql</p>\n<h3 id=\"项目职责-3\"><a href=\"#项目职责-3\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h3><ul>\n<li>Angular框架的升级工作（AngularJS升级到Angular11）。通过不断的学习和总结，快速上手并掌<br>握了Angular框架，并成为该项目的主要开发和日常支撑。</li>\n<li>参与该项目的代码CleanCode工作，修改冗余繁琐，不“整洁”的代码，定期组织项<br>目成员进行分享学习会议。</li>\n</ul>\n<h3 id=\"开发者联盟画像系统\"><a href=\"#开发者联盟画像系统\" class=\"headerlink\" title=\"开发者联盟画像系统\"></a>开发者联盟画像系统</h3><h4 id=\"项目架构-1\"><a href=\"#项目架构-1\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h4><ul>\n<li>前端：Angular11 + NG-ZORRO组件库</li>\n<li>后端：Java，华为自研NUWA框架</li>\n<li>数据存储：Mysql</li>\n</ul>\n<h4 id=\"项目职责-4\"><a href=\"#项目职责-4\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>人群导入页面、基础属性批量创建页面、线索管理菜单等需求的开发工作，包括前端的<br>页面以及后台接口的透传校验。</li>\n</ul>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>开发者联盟资讯管理台的田主，负责该项目的开发和日常问题支持，包括ckeditor版本升级，<br>Angular版本升级以及资讯创建功能。<br>开发者联盟合同管理台技术支持，负责部分需求开发以及主导Angular框架的升级工作。</p>\n<h2 id=\"南京联迪信息股份有限公司–数据工程研究中心–高级程序员-（-2018年6月-2021年5月-）\"><a href=\"#南京联迪信息股份有限公司–数据工程研究中心–高级程序员-（-2018年6月-2021年5月-）\" class=\"headerlink\" title=\"南京联迪信息股份有限公司–数据工程研究中心–高级程序员 （ 2018年6月 ~ 2021年5月 ）\"></a>南京联迪信息股份有限公司–数据工程研究中心–高级程序员 （ 2018年6月 ~ 2021年5月 ）</h2><h3 id=\"3M-POS-数据收集系统\"><a href=\"#3M-POS-数据收集系统\" class=\"headerlink\" title=\"3M POS 数据收集系统\"></a>3M POS 数据收集系统</h3><p>帮助 3M 公司使用系统自动处理经销商的销售数据。包括对数据的自动定时抽取上传、校验、转换等基础，.<br>以及错误数据回滚、经销商管理、日志管理等配套功能。</p>\n<h4 id=\"项目框架-3\"><a href=\"#项目框架-3\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue + Element-ui</li>\n<li>后端：SpringBoot + Jpa + Hibernate + Swagger</li>\n<li>数据存储：SQLSERVER</li>\n<li>客户端：Winform + Cefsharp</li>\n</ul>\n<h4 id=\"项目职责-5\"><a href=\"#项目职责-5\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><p>此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。</p>\n<ul>\n<li>WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。</li>\n<li>客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。</li>\n<li>经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。</li>\n<li>系统操作手册和客户端安装手册的编写。</li>\n<li>系统后续功能的开发和运维工作。</li>\n</ul>\n<h3 id=\"ANA-航空到着案内\"><a href=\"#ANA-航空到着案内\" class=\"headerlink\" title=\"ANA 航空到着案内\"></a>ANA 航空到着案内</h3><p>面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。</p>\n<h4 id=\"项目框架-4\"><a href=\"#项目框架-4\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Kony + Node.js</li>\n<li>后端：JavaService</li>\n<li>数据存储：Mysql</li>\n</ul>\n<h4 id=\"项目职责-6\"><a href=\"#项目职责-6\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>在线查询航班并将所查航班信息发送到邮箱服务</li>\n<li>个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。</li>\n<li>航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。</li>\n<li>航空公司新闻和注意事项提示信息的展示</li>\n<li>Web 端管理新闻和注意事项</li>\n<li>后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。</li>\n<li>航班查询页面的开发。</li>\n<li>为适应手机、平板、WEB 对多个页面进行样式调整。</li>\n<li>测试式样书的编写。</li>\n</ul>\n<h3 id=\"爬虫开发与部署\"><a href=\"#爬虫开发与部署\" class=\"headerlink\" title=\"爬虫开发与部署\"></a>爬虫开发与部署</h3><p>使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。</p>\n<h4 id=\"项目框架-5\"><a href=\"#项目框架-5\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>爬虫框架：Python + Scrapy</li>\n<li>数据存储：MongoDB + ElasticSearch + Redis</li>\n<li>爬虫发布平台：crawlab</li>\n</ul>\n<h3 id=\"项目职责-7\"><a href=\"#项目职责-7\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h3><ul>\n<li>Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写</li>\n<li>爬虫发布到部署好的 Crawlab 定期执行</li>\n<li>3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能</li>\n</ul>\n<h3 id=\"ElasticSearch-管理及新闻检索平台\"><a href=\"#ElasticSearch-管理及新闻检索平台\" class=\"headerlink\" title=\"ElasticSearch 管理及新闻检索平台\"></a>ElasticSearch 管理及新闻检索平台</h3><p>将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。</p>\n<h4 id=\"项目框架-6\"><a href=\"#项目框架-6\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>WEB：Vue + Elemen-ui</li>\n<li>API：Python + FastApi</li>\n<li>数据库：Mysql + ElasticSearch</li>\n</ul>\n<h3 id=\"项目职责-8\"><a href=\"#项目职责-8\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h3><p>整个项目的搭建和前后台开发，加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。</p>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ul>\n<li>开发语言：Java/C#/Python</li>\n<li>前端框架：Vue/Angular</li>\n<li>数据库相关：MySQL/SQLSERVER/MongoDB/ES</li>\n<li>版本管理：Git/Svn</li>\n<li>单元测试：Junit/Pytest</li>\n<li>开发工具：Idea/STS/VsCode</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>张凯/男/1996.12.28</li>\n<li>本科/淮阴工学院（计算机科学与技术）</li>\n<li>工作年限：5 年</li>\n<li>技术博客：<a href=\"https://zhkai-ybwn.github.io//\">https://zhkai-ybwn.github.io//</a></li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>手机：13182353591</li>\n<li>邮箱：<a href=\"mailto:&#50;&#53;&#x37;&#50;&#52;&#50;&#57;&#x32;&#51;&#x35;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;\">&#50;&#53;&#x37;&#50;&#52;&#50;&#57;&#x32;&#51;&#x35;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a></li>\n<li>QQ/微信：2572429235/13182353591</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）<br>软通动力信息技术（集团）股份有限公司（2021 年 5 月 ~ 2022 年 7 月）<br>北京优锘科技有限公司（2022 年 7 月 ~ 至今）</p>\n<h2 id=\"北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（-2022年7月-至今-）\"><a href=\"#北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（-2022年7月-至今-）\" class=\"headerlink\" title=\"北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（ 2022年7月 ~ 至今 ）\"></a>北京优锘科技有限公司-苏沪开发组–全栈工程师及开发组长（ 2022年7月 ~ 至今 ）</h2><h3 id=\"华泰证券可视化大屏\"><a href=\"#华泰证券可视化大屏\" class=\"headerlink\" title=\"华泰证券可视化大屏\"></a>华泰证券可视化大屏</h3><p>该项目是针对华泰证券相关业务的一个可视化大屏项目，个人负责开发部分Echarts图表以及3D地图模型相关需求。</p>\n<h4 id=\"项目框架\"><a href=\"#项目框架\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue3 + Scss + JS + Echarts</li>\n<li>后端：数据采集平台</li>\n</ul>\n<h4 id=\"项目职责\"><a href=\"#项目职责\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>把控整个项目的进度以及需求迭代</li>\n<li>定制开发3D地图的飞线、信息顶牌、热力图，以及经纬度与模型坐标的转换工作。</li>\n<li>需求完成后，实时支持现场问题，主要是bug修复以及和数据采集平台进行数据对接工作。</li>\n</ul>\n<h3 id=\"中国银联运营可视化管理平台\"><a href=\"#中国银联运营可视化管理平台\" class=\"headerlink\" title=\"中国银联运营可视化管理平台\"></a>中国银联运营可视化管理平台</h3><p>该项目为定制化在线可视化图标配置平台，可以自行配置生成大屏图表，配置后端管理系统，对不同人员权限进<br>行管理，人员管理，静态资源管理等，主要特色为可视化自由配置平台。</p>\n<h4 id=\"项目框架-1\"><a href=\"#项目框架-1\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue + Scss + JS + Element-ui + Echarts</li>\n<li>后端：SpringBoot + MybatisPlus + Swagger</li>\n<li>数据存储：MySql</li>\n</ul>\n<h4 id=\"项目职责-1\"><a href=\"#项目职责-1\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>整个项目的后台维护，以及新需求开发，版本发布</li>\n<li>平台的消息处理：消息的全量标记已读功能接口</li>\n<li>视图-免登录访问</li>\n<li>后台管理系统-多个文件上传业务模块的接口开发</li>\n</ul>\n<h3 id=\"上海轨道交通站内可视化系统\"><a href=\"#上海轨道交通站内可视化系统\" class=\"headerlink\" title=\"上海轨道交通站内可视化系统\"></a>上海轨道交通站内可视化系统</h3><p>该项目是为上海轨道交通定制的可视化系统，包含前端的可视化图表，模型，以及后台的用户管理系统。</p>\n<h4 id=\"项目框架-2\"><a href=\"#项目框架-2\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue + Scss + JS + Element-ui + Echarts</li>\n<li>后端：SpringBoot + Jpa + JWT + SpringSecurity + Swagger</li>\n<li>数据存储：MySql</li>\n</ul>\n<h4 id=\"项目职责-2\"><a href=\"#项目职责-2\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>对接开发后台管理系统，包括登录和用户管理功能</li>\n<li>使用JWT进行鉴权，支持token过期，另外使用Ehcache进行缓存，减少每次鉴权对数据库的压力</li>\n<li>用户的CRUD</li>\n</ul>\n<h2 id=\"南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（-2021年5月-2022年7月-）\"><a href=\"#南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（-2021年5月-2022年7月-）\" class=\"headerlink\" title=\"南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（ 2021年5月 ~ 2022年7月 ）\"></a>南京软通动力信息技术有限公司–消费者云平台实施部–Java工程师（ 2021年5月 ~ 2022年7月 ）</h2><h3 id=\"开发者联盟管理台\"><a href=\"#开发者联盟管理台\" class=\"headerlink\" title=\"开发者联盟管理台\"></a>开发者联盟管理台</h3><p>该项目是华为开发者联盟的后台管理系统</p>\n<h4 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h4><p>前端：AngularJs/Angular11 + NG-ZORRO组件库 + TS<br>后端：Java，华为自研NUWA框架<br>数据存储：Mysql</p>\n<h3 id=\"项目职责-3\"><a href=\"#项目职责-3\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h3><ul>\n<li>Angular框架的升级工作（AngularJS升级到Angular11）。通过不断的学习和总结，快速上手并掌<br>握了Angular框架，并成为该项目的主要开发和日常支撑。</li>\n<li>参与该项目的代码CleanCode工作，修改冗余繁琐，不“整洁”的代码，定期组织项<br>目成员进行分享学习会议。</li>\n</ul>\n<h3 id=\"开发者联盟画像系统\"><a href=\"#开发者联盟画像系统\" class=\"headerlink\" title=\"开发者联盟画像系统\"></a>开发者联盟画像系统</h3><h4 id=\"项目架构-1\"><a href=\"#项目架构-1\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h4><ul>\n<li>前端：Angular11 + NG-ZORRO组件库</li>\n<li>后端：Java，华为自研NUWA框架</li>\n<li>数据存储：Mysql</li>\n</ul>\n<h4 id=\"项目职责-4\"><a href=\"#项目职责-4\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>人群导入页面、基础属性批量创建页面、线索管理菜单等需求的开发工作，包括前端的<br>页面以及后台接口的透传校验。</li>\n</ul>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>开发者联盟资讯管理台的田主，负责该项目的开发和日常问题支持，包括ckeditor版本升级，<br>Angular版本升级以及资讯创建功能。<br>开发者联盟合同管理台技术支持，负责部分需求开发以及主导Angular框架的升级工作。</p>\n<h2 id=\"南京联迪信息股份有限公司–数据工程研究中心–高级程序员-（-2018年6月-2021年5月-）\"><a href=\"#南京联迪信息股份有限公司–数据工程研究中心–高级程序员-（-2018年6月-2021年5月-）\" class=\"headerlink\" title=\"南京联迪信息股份有限公司–数据工程研究中心–高级程序员 （ 2018年6月 ~ 2021年5月 ）\"></a>南京联迪信息股份有限公司–数据工程研究中心–高级程序员 （ 2018年6月 ~ 2021年5月 ）</h2><h3 id=\"3M-POS-数据收集系统\"><a href=\"#3M-POS-数据收集系统\" class=\"headerlink\" title=\"3M POS 数据收集系统\"></a>3M POS 数据收集系统</h3><p>帮助 3M 公司使用系统自动处理经销商的销售数据。包括对数据的自动定时抽取上传、校验、转换等基础，.<br>以及错误数据回滚、经销商管理、日志管理等配套功能。</p>\n<h4 id=\"项目框架-3\"><a href=\"#项目框架-3\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Vue + Element-ui</li>\n<li>后端：SpringBoot + Jpa + Hibernate + Swagger</li>\n<li>数据存储：SQLSERVER</li>\n<li>客户端：Winform + Cefsharp</li>\n</ul>\n<h4 id=\"项目职责-5\"><a href=\"#项目职责-5\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><p>此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。</p>\n<ul>\n<li>WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。</li>\n<li>客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。</li>\n<li>经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。</li>\n<li>系统操作手册和客户端安装手册的编写。</li>\n<li>系统后续功能的开发和运维工作。</li>\n</ul>\n<h3 id=\"ANA-航空到着案内\"><a href=\"#ANA-航空到着案内\" class=\"headerlink\" title=\"ANA 航空到着案内\"></a>ANA 航空到着案内</h3><p>面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。</p>\n<h4 id=\"项目框架-4\"><a href=\"#项目框架-4\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>前端：Kony + Node.js</li>\n<li>后端：JavaService</li>\n<li>数据存储：Mysql</li>\n</ul>\n<h4 id=\"项目职责-6\"><a href=\"#项目职责-6\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h4><ul>\n<li>在线查询航班并将所查航班信息发送到邮箱服务</li>\n<li>个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。</li>\n<li>航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。</li>\n<li>航空公司新闻和注意事项提示信息的展示</li>\n<li>Web 端管理新闻和注意事项</li>\n<li>后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。</li>\n<li>航班查询页面的开发。</li>\n<li>为适应手机、平板、WEB 对多个页面进行样式调整。</li>\n<li>测试式样书的编写。</li>\n</ul>\n<h3 id=\"爬虫开发与部署\"><a href=\"#爬虫开发与部署\" class=\"headerlink\" title=\"爬虫开发与部署\"></a>爬虫开发与部署</h3><p>使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。</p>\n<h4 id=\"项目框架-5\"><a href=\"#项目框架-5\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>爬虫框架：Python + Scrapy</li>\n<li>数据存储：MongoDB + ElasticSearch + Redis</li>\n<li>爬虫发布平台：crawlab</li>\n</ul>\n<h3 id=\"项目职责-7\"><a href=\"#项目职责-7\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h3><ul>\n<li>Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写</li>\n<li>爬虫发布到部署好的 Crawlab 定期执行</li>\n<li>3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能</li>\n</ul>\n<h3 id=\"ElasticSearch-管理及新闻检索平台\"><a href=\"#ElasticSearch-管理及新闻检索平台\" class=\"headerlink\" title=\"ElasticSearch 管理及新闻检索平台\"></a>ElasticSearch 管理及新闻检索平台</h3><p>将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。</p>\n<h4 id=\"项目框架-6\"><a href=\"#项目框架-6\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h4><ul>\n<li>WEB：Vue + Elemen-ui</li>\n<li>API：Python + FastApi</li>\n<li>数据库：Mysql + ElasticSearch</li>\n</ul>\n<h3 id=\"项目职责-8\"><a href=\"#项目职责-8\" class=\"headerlink\" title=\"项目职责\"></a>项目职责</h3><p>整个项目的搭建和前后台开发，加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。</p>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ul>\n<li>开发语言：Java/C#/Python</li>\n<li>前端框架：Vue/Angular</li>\n<li>数据库相关：MySQL/SQLSERVER/MongoDB/ES</li>\n<li>版本管理：Git/Svn</li>\n<li>单元测试：Junit/Pytest</li>\n<li>开发工具：Idea/STS/VsCode</li>\n</ul>\n"},{"title":"async/await的理解","date":"2022-03-27T07:22:54.000Z","_content":"## async/await的理解\n\n遇到个五连回调的代码，真的是地狱级拷打，用`async await`进行了一波改写，顿时神清气爽，总结一下。\n顾名思义，`async`是异步的简写，`await`是 `async await`的简写。所以async就是用于声明一个`function`是异步的，而`await`就是用来等待这个异步方法执行完成的。另外，规定`await`只能在`async`中使用。\n\n### async作用及工作原理\n\n先看下`async`是怎么处理返回值的\n\n```js\n    async function testAsync() {\n    return \"hello world\";\n    }\n\n    const result = testAsync();\n    console.log(result);// Promise {'hello world'}\n```\n\n可见，`async`返回一个`Promise`对象。如果在`async`函数中直接`return`一个值，那么`async`会把这个值通过`Promise.resolve()`封装成`Promise`对象。`Promise`的特点——无等待，所以在没有使用`await`的情况下，`async`会立即执行，不会阻塞后面的代码。\n\n### await在等谁呢？\n\n原以为，`await`在等待`async`的函数完成，等`async`的讯息。看了文档后，`await`等待的其实是一个表达式，这个表达式的计算结果是`Promise`对象或者其它值。\n`await`不仅仅用于等`Promise`对象，它可以等任意表达式的结果，所以`await`是可以接普通函数的。\n\n```js\n    function getValue() {\n        return 123;\n    }\n\n    async function testAsync() {\n        return Promise.resolve(\"hello world\");\n    }\n\n    async function test() {\n        const v1 = await getValue();\n        const v2 = await testAsync();\n        console.log(v1, v2);// 123 hello world\n    }\n\n    test();\n```\n\n### await等到结果之后\n\n返回`Promise`对象的处理结果，如果等待的不是`Promise`对象，则返回值本身。\n`await`会在暂停`async`函数，等待`Promise`处理完成。\n如果`Promise`正常处理，则回调的`resolve`函数参数作为`await`的值，继续执行`async`函数。\n如果`Promise`处理异常，`await`会把Promise的异常原因抛出。\n\n### 为啥要使用async/await\n\n反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。\n\n```js\n    function mockApi() {\n        return new Promise((resolve) => {\n            setTimeout(() => resolve(\"hello world\"), 1000);\n        });\n    }\n\n    // then写法\n    mockApi().then(v => {\n        console.log(\"then\", v);\n    })\n\n    // async/await写法\n    async function test() {\n        const v = await mockApi();\n        console.log(v);\n    }\n\ntest();\n```\n\n`async/await`反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂\n不要着急，脱裤子肯定不是为了...\n单一的`Promise`链并不能发现`async/await`的妙用😏，当遇到多个`Promise`组成的`then`链时，你会发现`async/await`就是救世主。\n试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。\n`setTimeout`受累一下😙😙😙\n\n```js\n/**\n * 传入参数value，表示这个函数执行的时间\n * 执行结果增加1000，用于下一步\n * @param {*} value 时间\n * @returns 时间+1000ms\n */\n    function mockApi(value) {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(value + 1000), value);\n    });\n    }\n\n    function step1(value) {\n    console.log(`step1 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step2(value) {\n    console.log(`step2 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step3(value) {\n    console.log(`step3 with ${value}`);\n    return mockApi(value);\n    }\n\n    // then写法\n\n    function testThen() {\n    console.time(\"testThen\");\n    const time1 = 300;\n    step1(time1).then((time2) => {\n        step2(time2).then((time3) => {\n        step3(time3).then((result) => {\n            console.log(`result is ${result}`); // 我已经晕了😵😵😵😵\n            console.timeEnd(\"testThen\");\n        });\n        });\n    });\n    }\n\n    testThen();\n    // step1 with 300\n    // step2 with 1300\n    // step3 with 2300\n    // result is 3300\n    // testThen: 3921.948ms\n\n    // async/await写法\n    async function testAsync() {\n        console.time(\"testAsync\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time2 = await step3(time1);\n        const result = await step3(time1);\n        console.log(`result is ${result}`); // YYDS\n        console.timeEnd(\"testAsync\");\n    }\n\n    testAsync();\n```\n\n`async/await`有多清晰，不用多说了吧。\n\n## 附庸风雅😳😳😳\n\n**<font size=4>梅花引</font>** <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font>\n\n**白鸥问我泊孤舟**\n\n*是身留？是心留？*\n\n**心若留时，何事锁眉头？**\n\n*风拍小帘灯晕舞*\n\n**对闲影，冷清清，忆旧游。**\n\n*旧游旧游今在不？*\n\n**花外楼，柳下舟。**\n\n*梦也梦也，梦不到，寒水空流。*\n\n**漠漠黄云，湿透木棉裘。**\n\n*都道无人愁似我*\n\n**今夜雪，有梅花，似我愁。**\n","source":"_posts/async-await的理解.md","raw":"---\ntitle: async/await的理解\ndate: 2022-03-27 15:22:54\ntags:\n    - 异步\n    - async/await\ncategories: [前端]\n---\n## async/await的理解\n\n遇到个五连回调的代码，真的是地狱级拷打，用`async await`进行了一波改写，顿时神清气爽，总结一下。\n顾名思义，`async`是异步的简写，`await`是 `async await`的简写。所以async就是用于声明一个`function`是异步的，而`await`就是用来等待这个异步方法执行完成的。另外，规定`await`只能在`async`中使用。\n\n### async作用及工作原理\n\n先看下`async`是怎么处理返回值的\n\n```js\n    async function testAsync() {\n    return \"hello world\";\n    }\n\n    const result = testAsync();\n    console.log(result);// Promise {'hello world'}\n```\n\n可见，`async`返回一个`Promise`对象。如果在`async`函数中直接`return`一个值，那么`async`会把这个值通过`Promise.resolve()`封装成`Promise`对象。`Promise`的特点——无等待，所以在没有使用`await`的情况下，`async`会立即执行，不会阻塞后面的代码。\n\n### await在等谁呢？\n\n原以为，`await`在等待`async`的函数完成，等`async`的讯息。看了文档后，`await`等待的其实是一个表达式，这个表达式的计算结果是`Promise`对象或者其它值。\n`await`不仅仅用于等`Promise`对象，它可以等任意表达式的结果，所以`await`是可以接普通函数的。\n\n```js\n    function getValue() {\n        return 123;\n    }\n\n    async function testAsync() {\n        return Promise.resolve(\"hello world\");\n    }\n\n    async function test() {\n        const v1 = await getValue();\n        const v2 = await testAsync();\n        console.log(v1, v2);// 123 hello world\n    }\n\n    test();\n```\n\n### await等到结果之后\n\n返回`Promise`对象的处理结果，如果等待的不是`Promise`对象，则返回值本身。\n`await`会在暂停`async`函数，等待`Promise`处理完成。\n如果`Promise`正常处理，则回调的`resolve`函数参数作为`await`的值，继续执行`async`函数。\n如果`Promise`处理异常，`await`会把Promise的异常原因抛出。\n\n### 为啥要使用async/await\n\n反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。\n\n```js\n    function mockApi() {\n        return new Promise((resolve) => {\n            setTimeout(() => resolve(\"hello world\"), 1000);\n        });\n    }\n\n    // then写法\n    mockApi().then(v => {\n        console.log(\"then\", v);\n    })\n\n    // async/await写法\n    async function test() {\n        const v = await mockApi();\n        console.log(v);\n    }\n\ntest();\n```\n\n`async/await`反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂\n不要着急，脱裤子肯定不是为了...\n单一的`Promise`链并不能发现`async/await`的妙用😏，当遇到多个`Promise`组成的`then`链时，你会发现`async/await`就是救世主。\n试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。\n`setTimeout`受累一下😙😙😙\n\n```js\n/**\n * 传入参数value，表示这个函数执行的时间\n * 执行结果增加1000，用于下一步\n * @param {*} value 时间\n * @returns 时间+1000ms\n */\n    function mockApi(value) {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(value + 1000), value);\n    });\n    }\n\n    function step1(value) {\n    console.log(`step1 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step2(value) {\n    console.log(`step2 with ${value}`);\n    return mockApi(value);\n    }\n\n    function step3(value) {\n    console.log(`step3 with ${value}`);\n    return mockApi(value);\n    }\n\n    // then写法\n\n    function testThen() {\n    console.time(\"testThen\");\n    const time1 = 300;\n    step1(time1).then((time2) => {\n        step2(time2).then((time3) => {\n        step3(time3).then((result) => {\n            console.log(`result is ${result}`); // 我已经晕了😵😵😵😵\n            console.timeEnd(\"testThen\");\n        });\n        });\n    });\n    }\n\n    testThen();\n    // step1 with 300\n    // step2 with 1300\n    // step3 with 2300\n    // result is 3300\n    // testThen: 3921.948ms\n\n    // async/await写法\n    async function testAsync() {\n        console.time(\"testAsync\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time2 = await step3(time1);\n        const result = await step3(time1);\n        console.log(`result is ${result}`); // YYDS\n        console.timeEnd(\"testAsync\");\n    }\n\n    testAsync();\n```\n\n`async/await`有多清晰，不用多说了吧。\n\n## 附庸风雅😳😳😳\n\n**<font size=4>梅花引</font>** <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font>\n\n**白鸥问我泊孤舟**\n\n*是身留？是心留？*\n\n**心若留时，何事锁眉头？**\n\n*风拍小帘灯晕舞*\n\n**对闲影，冷清清，忆旧游。**\n\n*旧游旧游今在不？*\n\n**花外楼，柳下舟。**\n\n*梦也梦也，梦不到，寒水空流。*\n\n**漠漠黄云，湿透木棉裘。**\n\n*都道无人愁似我*\n\n**今夜雪，有梅花，似我愁。**\n","slug":"async-await的理解","published":1,"updated":"2022-10-27T06:40:13.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1b0051hgac9x1pcr38","content":"<h2 id=\"async-await的理解\"><a href=\"#async-await的理解\" class=\"headerlink\" title=\"async/await的理解\"></a>async/await的理解</h2><p>遇到个五连回调的代码，真的是地狱级拷打，用<code>async await</code>进行了一波改写，顿时神清气爽，总结一下。<br>顾名思义，<code>async</code>是异步的简写，<code>await</code>是 <code>async await</code>的简写。所以async就是用于声明一个<code>function</code>是异步的，而<code>await</code>就是用来等待这个异步方法执行完成的。另外，规定<code>await</code>只能在<code>async</code>中使用。</p>\n<h3 id=\"async作用及工作原理\"><a href=\"#async作用及工作原理\" class=\"headerlink\" title=\"async作用及工作原理\"></a>async作用及工作原理</h3><p>先看下<code>async</code>是怎么处理返回值的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);<span class=\"comment\">// Promise &#123;&#x27;hello world&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可见，<code>async</code>返回一个<code>Promise</code>对象。如果在<code>async</code>函数中直接<code>return</code>一个值，那么<code>async</code>会把这个值通过<code>Promise.resolve()</code>封装成<code>Promise</code>对象。<code>Promise</code>的特点——无等待，所以在没有使用<code>await</code>的情况下，<code>async</code>会立即执行，不会阻塞后面的代码。</p>\n<h3 id=\"await在等谁呢？\"><a href=\"#await在等谁呢？\" class=\"headerlink\" title=\"await在等谁呢？\"></a>await在等谁呢？</h3><p>原以为，<code>await</code>在等待<code>async</code>的函数完成，等<code>async</code>的讯息。看了文档后，<code>await</code>等待的其实是一个表达式，这个表达式的计算结果是<code>Promise</code>对象或者其它值。<br><code>await</code>不仅仅用于等<code>Promise</code>对象，它可以等任意表达式的结果，所以<code>await</code>是可以接普通函数的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v1 = <span class=\"keyword\">await</span> <span class=\"title function_\">getValue</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v2 = <span class=\"keyword\">await</span> <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v1, v2);<span class=\"comment\">// 123 hello world</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"await等到结果之后\"><a href=\"#await等到结果之后\" class=\"headerlink\" title=\"await等到结果之后\"></a>await等到结果之后</h3><p>返回<code>Promise</code>对象的处理结果，如果等待的不是<code>Promise</code>对象，则返回值本身。<br><code>await</code>会在暂停<code>async</code>函数，等待<code>Promise</code>处理完成。<br>如果<code>Promise</code>正常处理，则回调的<code>resolve</code>函数参数作为<code>await</code>的值，继续执行<code>async</code>函数。<br>如果<code>Promise</code>处理异常，<code>await</code>会把Promise的异常原因抛出。</p>\n<h3 id=\"为啥要使用async-await\"><a href=\"#为啥要使用async-await\" class=\"headerlink\" title=\"为啥要使用async/await\"></a>为啥要使用async/await</h3><p>反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\">    <span class=\"title function_\">mockApi</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;then&quot;</span>, v);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> v = <span class=\"keyword\">await</span> <span class=\"title function_\">mockApi</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂<br>不要着急，脱裤子肯定不是为了…<br>单一的<code>Promise</code>链并不能发现<code>async/await</code>的妙用😏，当遇到多个<code>Promise</code>组成的<code>then</code>链时，你会发现<code>async/await</code>就是救世主。<br>试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。<br><code>setTimeout</code>受累一下😙😙😙</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入参数value，表示这个函数执行的时间</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行结果增加1000，用于下一步</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 时间+1000ms</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(value + <span class=\"number\">1000</span>), value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">testThen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"title function_\">step1</span>(time1).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step2</span>(time2).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time3</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step3</span>(time3).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// 我已经晕了😵😵😵😵</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testThen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// step1 with 300</span></span><br><span class=\"line\">    <span class=\"comment\">// step2 with 1300</span></span><br><span class=\"line\">    <span class=\"comment\">// step3 with 2300</span></span><br><span class=\"line\">    <span class=\"comment\">// result is 3300</span></span><br><span class=\"line\">    <span class=\"comment\">// testThen: 3921.948ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// YYDS</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testAsync</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>有多清晰，不用多说了吧。</p>\n<h2 id=\"附庸风雅😳😳😳\"><a href=\"#附庸风雅😳😳😳\" class=\"headerlink\" title=\"附庸风雅😳😳😳\"></a>附庸风雅😳😳😳</h2><p><strong><font size=4>梅花引</font></strong> <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font></p>\n<p><strong>白鸥问我泊孤舟</strong></p>\n<p><em>是身留？是心留？</em></p>\n<p><strong>心若留时，何事锁眉头？</strong></p>\n<p><em>风拍小帘灯晕舞</em></p>\n<p><strong>对闲影，冷清清，忆旧游。</strong></p>\n<p><em>旧游旧游今在不？</em></p>\n<p><strong>花外楼，柳下舟。</strong></p>\n<p><em>梦也梦也，梦不到，寒水空流。</em></p>\n<p><strong>漠漠黄云，湿透木棉裘。</strong></p>\n<p><em>都道无人愁似我</em></p>\n<p><strong>今夜雪，有梅花，似我愁。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"async-await的理解\"><a href=\"#async-await的理解\" class=\"headerlink\" title=\"async/await的理解\"></a>async/await的理解</h2><p>遇到个五连回调的代码，真的是地狱级拷打，用<code>async await</code>进行了一波改写，顿时神清气爽，总结一下。<br>顾名思义，<code>async</code>是异步的简写，<code>await</code>是 <code>async await</code>的简写。所以async就是用于声明一个<code>function</code>是异步的，而<code>await</code>就是用来等待这个异步方法执行完成的。另外，规定<code>await</code>只能在<code>async</code>中使用。</p>\n<h3 id=\"async作用及工作原理\"><a href=\"#async作用及工作原理\" class=\"headerlink\" title=\"async作用及工作原理\"></a>async作用及工作原理</h3><p>先看下<code>async</code>是怎么处理返回值的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);<span class=\"comment\">// Promise &#123;&#x27;hello world&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可见，<code>async</code>返回一个<code>Promise</code>对象。如果在<code>async</code>函数中直接<code>return</code>一个值，那么<code>async</code>会把这个值通过<code>Promise.resolve()</code>封装成<code>Promise</code>对象。<code>Promise</code>的特点——无等待，所以在没有使用<code>await</code>的情况下，<code>async</code>会立即执行，不会阻塞后面的代码。</p>\n<h3 id=\"await在等谁呢？\"><a href=\"#await在等谁呢？\" class=\"headerlink\" title=\"await在等谁呢？\"></a>await在等谁呢？</h3><p>原以为，<code>await</code>在等待<code>async</code>的函数完成，等<code>async</code>的讯息。看了文档后，<code>await</code>等待的其实是一个表达式，这个表达式的计算结果是<code>Promise</code>对象或者其它值。<br><code>await</code>不仅仅用于等<code>Promise</code>对象，它可以等任意表达式的结果，所以<code>await</code>是可以接普通函数的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v1 = <span class=\"keyword\">await</span> <span class=\"title function_\">getValue</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v2 = <span class=\"keyword\">await</span> <span class=\"title function_\">testAsync</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v1, v2);<span class=\"comment\">// 123 hello world</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"await等到结果之后\"><a href=\"#await等到结果之后\" class=\"headerlink\" title=\"await等到结果之后\"></a>await等到结果之后</h3><p>返回<code>Promise</code>对象的处理结果，如果等待的不是<code>Promise</code>对象，则返回值本身。<br><code>await</code>会在暂停<code>async</code>函数，等待<code>Promise</code>处理完成。<br>如果<code>Promise</code>正常处理，则回调的<code>resolve</code>函数参数作为<code>await</code>的值，继续执行<code>async</code>函数。<br>如果<code>Promise</code>处理异常，<code>await</code>会把Promise的异常原因抛出。</p>\n<h3 id=\"为啥要使用async-await\"><a href=\"#为啥要使用async-await\" class=\"headerlink\" title=\"为啥要使用async/await\"></a>为啥要使用async/await</h3><p>反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;hello world&quot;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\">    <span class=\"title function_\">mockApi</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;then&quot;</span>, v);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> v = <span class=\"keyword\">await</span> <span class=\"title function_\">mockApi</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂<br>不要着急，脱裤子肯定不是为了…<br>单一的<code>Promise</code>链并不能发现<code>async/await</code>的妙用😏，当遇到多个<code>Promise</code>组成的<code>then</code>链时，你会发现<code>async/await</code>就是救世主。<br>试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。<br><code>setTimeout</code>受累一下😙😙😙</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入参数value，表示这个函数执行的时间</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行结果增加1000，用于下一步</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 时间+1000ms</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mockApi</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(value + <span class=\"number\">1000</span>), value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mockApi</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">testThen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"title function_\">step1</span>(time1).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step2</span>(time2).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">time3</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step3</span>(time3).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// 我已经晕了😵😵😵😵</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testThen&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testThen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// step1 with 300</span></span><br><span class=\"line\">    <span class=\"comment\">// step2 with 1300</span></span><br><span class=\"line\">    <span class=\"comment\">// step3 with 2300</span></span><br><span class=\"line\">    <span class=\"comment\">// result is 3300</span></span><br><span class=\"line\">    <span class=\"comment\">// testThen: 3921.948ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// async/await写法</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time1);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>); <span class=\"comment\">// YYDS</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&quot;testAsync&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">testAsync</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>async/await</code>有多清晰，不用多说了吧。</p>\n<h2 id=\"附庸风雅😳😳😳\"><a href=\"#附庸风雅😳😳😳\" class=\"headerlink\" title=\"附庸风雅😳😳😳\"></a>附庸风雅😳😳😳</h2><p><strong><font size=4>梅花引</font></strong> <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font></p>\n<p><strong>白鸥问我泊孤舟</strong></p>\n<p><em>是身留？是心留？</em></p>\n<p><strong>心若留时，何事锁眉头？</strong></p>\n<p><em>风拍小帘灯晕舞</em></p>\n<p><strong>对闲影，冷清清，忆旧游。</strong></p>\n<p><em>旧游旧游今在不？</em></p>\n<p><strong>花外楼，柳下舟。</strong></p>\n<p><em>梦也梦也，梦不到，寒水空流。</em></p>\n<p><strong>漠漠黄云，湿透木棉裘。</strong></p>\n<p><em>都道无人愁似我</em></p>\n<p><strong>今夜雪，有梅花，似我愁。</strong></p>\n"},{"title":"css学习一","date":"2022-04-03T01:55:57.000Z","_content":"\n## CSS 学习一\n\n从涉及前端开发到现在，差不多有四年了，框架有`Vue`、`Angular`，组件库用了`ElementUI`、`NG-Zorro`、`Ant-Design`。\n而对于`CSS`，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下`CSS`，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）\n\n### 定义\n\n层叠样式表，用于设计`HTML`的风格和布局，字体、颜色、大小、间距等等。\n\n### 语法\n\n`CSS`由两部分组成：选择器，以及声明。\n一个熟悉与值的键值被称为声明，而将一个或者多个声明用`{}`括起来，就是声明块。\n声明作用到对应的`HTML`元素，就要加上选择器。\n\n### 选择器\n\n#### 基础选择器\n\n- 标签选择器：`h1`\n- 类选择器：`.checked`\n- ID 选择器：`#picker`\n- 通配选择器：`*`\n\n#### 属性选择器\n\n- [attr]：指定属性的元素\n- [attr=val]：属性等于指定值的元素\n- [attr*=val]：属性包含指定值的元素\n- [attr^=val]：属性以指定值开头的元素\n- [attr$=val]：属性以指定值结尾的元素\n- [attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）\n- [attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）\n\n#### 组合选择器\n\n- 相邻兄弟选择器：`A+B`\n- 普通兄弟选择器：`A~B`\n- 子选择器：`A>B`\n- 后代选择器：`AB`\n\n#### 伪类\n\n##### 条件伪类\n\n- `:lang()`：基于元素语言来匹配页面元素\n- `:dir()`：匹配特定文字书写方向的元素\n- `:has()`：匹配包含指定元素的元素\n- `:is()`：匹配指定选择器列表里的元素\n- `:not()`：用来匹配不符合一组选择器的元素\n\n##### 行为伪类\n\n-`:active`：鼠标激活的元素 -`:hover`：鼠标悬浮的元素 -`::selection`：鼠标选中的元素\n\n##### 状态伪类\n\n- `:target`：当前锚点的元素\n- `:link`：未访问的链接元素\n- `:visited`：已访问的链接元素\n- `:focus`：输入聚焦的表单元素\n- `:required`：输入必填的表单元素\n- `:valid`：输入合法的表单元素\n- `：invalid`：输入非法的表单元素\n- `:in-range`：输入范围以内的表单元素\n- `out-of-range`：输入范围以外的表单元素\n- `checked`：选项选中的表单元素\n- `optional`：选项可选的表单元素\n- `enabled`：事件启用的表单元素\n- `disabled`：事件禁用的表单元素\n- `read-only`：只读的表单元素\n- `read-write`：可读可写的表单元素\n- `blank`：输入为空的表单元素\n- `current()`：浏览中的元素\n- `past()`：已浏览的元素\n- `future`：未浏览的元素\n\n##### 结构伪类\n\n- `：root`：文档的根元素\n- `:empty`： 无子元素的元素\n- `:first-letter`：元素的首字母\n- `:first-line`：元素的首行\n- `:nth-child(n)`：元素中指定书序索引的元素\n- `:nth-last-child(n)`：元素中指定逆序索引的元素\n- `:first-child`：元素中为首的元素\n- `:last-child`：元素中为尾的元素\n- `:only-child`：父元素仅有该元素的元素\n- `:nth-of-type(n)`：标签中指定顺序索引的标签\n- `:nth-last-of-type(n)`：标签中指定逆序索引的标签\n- `:first-of-type`：标签中为首的标签\n- `:last-of-type`：标签中为尾标签\n- `:only-of-type`：父元素仅有该标签的标签\n\n##### 伪元素\n\n- `::before`：在元素前插入内容\n- `::after`：在元素后插入内容\n\n#### 优先级\n\n- !important\n- 内联样式\n- ID 选择器\n- 类选择、伪类选择器、属性选择器\n- 元素选择器、伪元素选择器\n- 通配选择器、后代选择器、兄弟选择器\n\n### CSS Backgrounds\n\n- `background`：将背景属性设置在一个声明中\n\n- `background-attachment`：背景图像是否固定或者随着页面的其余部分滚动\n  - `scroll`：随着页面的滚动而滚动（默认值）\n  - `fixed`：不会随着页面的滚动而滚动\n  - `local`：随着元素的内容的滚动而滚动\n  - `initial`：使用默认值\n  - `inherit`：继承父元素的属性\n\n- `background-color`：设置元素的背景颜色\n  - `color`：背景颜色\n  - `transparent`：背景颜色透明\n  - `inherit`：继承父元素\n\n- `background-image`：把图像设置为背景\n  - `linear-gradient()`：创建一个线性渐变的\"图像\"（从上而下）\n  - `radial-gradient()`：用径向渐变创建\"图像\"\n  - `repeating-linear-gradient()`：创建重复的线性渐变\"图像\"\n  - `repeating-radial-gradient()`：创建重复的径向渐变\"图像\"\n  - `inherit`：继承父元素\n\n- `background-position`：设置起始位置\n  - `left/top/centet/bottom/right`：仅指定一个时，其他值会是center\n  - `x% y%`：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%\n  - `xpos ypos`：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%\n  - `inherit`：继承父元素\n  \n- `background-repeat`：设置是否及如何重复\n  - `repeat`：垂直和水平方向重复（默认值）\n  - `repeat-x`：水平重复\n  - `repeat-y`：垂直重复\n  - `no-repeat`：不重复\n  - `inherit`：继承父元素的属性\n\n## 喟然叹息😒😒\n\n**<font size=4>凤栖梧** </font><font size=2>柳永</font>\n\n**伫倚危楼风细细，**\n\n*望极春愁，*\n\n**黯黯生天际。**\n\n*草色烟光残照里，*\n\n**无言谁会凭栏意。**\n\n*拟把疏狂图一醉，*\n\n**对酒当歌，**\n\n*强乐还无味。*\n\n**衣带渐宽终不悔，**\n\n*为伊消得人憔悴。*\n","source":"_posts/css学习一.md","raw":"---\ntitle: css学习一\ndate: 2022-04-03 09:55:57\ntags:\n  - css\ncategories: [前端]\n---\n\n## CSS 学习一\n\n从涉及前端开发到现在，差不多有四年了，框架有`Vue`、`Angular`，组件库用了`ElementUI`、`NG-Zorro`、`Ant-Design`。\n而对于`CSS`，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下`CSS`，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）\n\n### 定义\n\n层叠样式表，用于设计`HTML`的风格和布局，字体、颜色、大小、间距等等。\n\n### 语法\n\n`CSS`由两部分组成：选择器，以及声明。\n一个熟悉与值的键值被称为声明，而将一个或者多个声明用`{}`括起来，就是声明块。\n声明作用到对应的`HTML`元素，就要加上选择器。\n\n### 选择器\n\n#### 基础选择器\n\n- 标签选择器：`h1`\n- 类选择器：`.checked`\n- ID 选择器：`#picker`\n- 通配选择器：`*`\n\n#### 属性选择器\n\n- [attr]：指定属性的元素\n- [attr=val]：属性等于指定值的元素\n- [attr*=val]：属性包含指定值的元素\n- [attr^=val]：属性以指定值开头的元素\n- [attr$=val]：属性以指定值结尾的元素\n- [attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）\n- [attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）\n\n#### 组合选择器\n\n- 相邻兄弟选择器：`A+B`\n- 普通兄弟选择器：`A~B`\n- 子选择器：`A>B`\n- 后代选择器：`AB`\n\n#### 伪类\n\n##### 条件伪类\n\n- `:lang()`：基于元素语言来匹配页面元素\n- `:dir()`：匹配特定文字书写方向的元素\n- `:has()`：匹配包含指定元素的元素\n- `:is()`：匹配指定选择器列表里的元素\n- `:not()`：用来匹配不符合一组选择器的元素\n\n##### 行为伪类\n\n-`:active`：鼠标激活的元素 -`:hover`：鼠标悬浮的元素 -`::selection`：鼠标选中的元素\n\n##### 状态伪类\n\n- `:target`：当前锚点的元素\n- `:link`：未访问的链接元素\n- `:visited`：已访问的链接元素\n- `:focus`：输入聚焦的表单元素\n- `:required`：输入必填的表单元素\n- `:valid`：输入合法的表单元素\n- `：invalid`：输入非法的表单元素\n- `:in-range`：输入范围以内的表单元素\n- `out-of-range`：输入范围以外的表单元素\n- `checked`：选项选中的表单元素\n- `optional`：选项可选的表单元素\n- `enabled`：事件启用的表单元素\n- `disabled`：事件禁用的表单元素\n- `read-only`：只读的表单元素\n- `read-write`：可读可写的表单元素\n- `blank`：输入为空的表单元素\n- `current()`：浏览中的元素\n- `past()`：已浏览的元素\n- `future`：未浏览的元素\n\n##### 结构伪类\n\n- `：root`：文档的根元素\n- `:empty`： 无子元素的元素\n- `:first-letter`：元素的首字母\n- `:first-line`：元素的首行\n- `:nth-child(n)`：元素中指定书序索引的元素\n- `:nth-last-child(n)`：元素中指定逆序索引的元素\n- `:first-child`：元素中为首的元素\n- `:last-child`：元素中为尾的元素\n- `:only-child`：父元素仅有该元素的元素\n- `:nth-of-type(n)`：标签中指定顺序索引的标签\n- `:nth-last-of-type(n)`：标签中指定逆序索引的标签\n- `:first-of-type`：标签中为首的标签\n- `:last-of-type`：标签中为尾标签\n- `:only-of-type`：父元素仅有该标签的标签\n\n##### 伪元素\n\n- `::before`：在元素前插入内容\n- `::after`：在元素后插入内容\n\n#### 优先级\n\n- !important\n- 内联样式\n- ID 选择器\n- 类选择、伪类选择器、属性选择器\n- 元素选择器、伪元素选择器\n- 通配选择器、后代选择器、兄弟选择器\n\n### CSS Backgrounds\n\n- `background`：将背景属性设置在一个声明中\n\n- `background-attachment`：背景图像是否固定或者随着页面的其余部分滚动\n  - `scroll`：随着页面的滚动而滚动（默认值）\n  - `fixed`：不会随着页面的滚动而滚动\n  - `local`：随着元素的内容的滚动而滚动\n  - `initial`：使用默认值\n  - `inherit`：继承父元素的属性\n\n- `background-color`：设置元素的背景颜色\n  - `color`：背景颜色\n  - `transparent`：背景颜色透明\n  - `inherit`：继承父元素\n\n- `background-image`：把图像设置为背景\n  - `linear-gradient()`：创建一个线性渐变的\"图像\"（从上而下）\n  - `radial-gradient()`：用径向渐变创建\"图像\"\n  - `repeating-linear-gradient()`：创建重复的线性渐变\"图像\"\n  - `repeating-radial-gradient()`：创建重复的径向渐变\"图像\"\n  - `inherit`：继承父元素\n\n- `background-position`：设置起始位置\n  - `left/top/centet/bottom/right`：仅指定一个时，其他值会是center\n  - `x% y%`：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%\n  - `xpos ypos`：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%\n  - `inherit`：继承父元素\n  \n- `background-repeat`：设置是否及如何重复\n  - `repeat`：垂直和水平方向重复（默认值）\n  - `repeat-x`：水平重复\n  - `repeat-y`：垂直重复\n  - `no-repeat`：不重复\n  - `inherit`：继承父元素的属性\n\n## 喟然叹息😒😒\n\n**<font size=4>凤栖梧** </font><font size=2>柳永</font>\n\n**伫倚危楼风细细，**\n\n*望极春愁，*\n\n**黯黯生天际。**\n\n*草色烟光残照里，*\n\n**无言谁会凭栏意。**\n\n*拟把疏狂图一醉，*\n\n**对酒当歌，**\n\n*强乐还无味。*\n\n**衣带渐宽终不悔，**\n\n*为伊消得人憔悴。*\n","slug":"css学习一","published":1,"updated":"2022-10-27T06:40:13.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1b0056hgacgw328z83","content":"<h2 id=\"CSS-学习一\"><a href=\"#CSS-学习一\" class=\"headerlink\" title=\"CSS 学习一\"></a>CSS 学习一</h2><p>从涉及前端开发到现在，差不多有四年了，框架有<code>Vue</code>、<code>Angular</code>，组件库用了<code>ElementUI</code>、<code>NG-Zorro</code>、<code>Ant-Design</code>。<br>而对于<code>CSS</code>，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下<code>CSS</code>，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>层叠样式表，用于设计<code>HTML</code>的风格和布局，字体、颜色、大小、间距等等。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>CSS</code>由两部分组成：选择器，以及声明。<br>一个熟悉与值的键值被称为声明，而将一个或者多个声明用<code>&#123;&#125;</code>括起来，就是声明块。<br>声明作用到对应的<code>HTML</code>元素，就要加上选择器。</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h4><ul>\n<li>标签选择器：<code>h1</code></li>\n<li>类选择器：<code>.checked</code></li>\n<li>ID 选择器：<code>#picker</code></li>\n<li>通配选择器：<code>*</code></li>\n</ul>\n<h4 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h4><ul>\n<li>[attr]：指定属性的元素</li>\n<li>[attr=val]：属性等于指定值的元素</li>\n<li>[attr*=val]：属性包含指定值的元素</li>\n<li>[attr^=val]：属性以指定值开头的元素</li>\n<li>[attr$=val]：属性以指定值结尾的元素</li>\n<li>[attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）</li>\n<li>[attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）</li>\n</ul>\n<h4 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h4><ul>\n<li>相邻兄弟选择器：<code>A+B</code></li>\n<li>普通兄弟选择器：<code>A~B</code></li>\n<li>子选择器：<code>A&gt;B</code></li>\n<li>后代选择器：<code>AB</code></li>\n</ul>\n<h4 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h4><h5 id=\"条件伪类\"><a href=\"#条件伪类\" class=\"headerlink\" title=\"条件伪类\"></a>条件伪类</h5><ul>\n<li><code>:lang()</code>：基于元素语言来匹配页面元素</li>\n<li><code>:dir()</code>：匹配特定文字书写方向的元素</li>\n<li><code>:has()</code>：匹配包含指定元素的元素</li>\n<li><code>:is()</code>：匹配指定选择器列表里的元素</li>\n<li><code>:not()</code>：用来匹配不符合一组选择器的元素</li>\n</ul>\n<h5 id=\"行为伪类\"><a href=\"#行为伪类\" class=\"headerlink\" title=\"行为伪类\"></a>行为伪类</h5><p>-<code>:active</code>：鼠标激活的元素 -<code>:hover</code>：鼠标悬浮的元素 -<code>::selection</code>：鼠标选中的元素</p>\n<h5 id=\"状态伪类\"><a href=\"#状态伪类\" class=\"headerlink\" title=\"状态伪类\"></a>状态伪类</h5><ul>\n<li><code>:target</code>：当前锚点的元素</li>\n<li><code>:link</code>：未访问的链接元素</li>\n<li><code>:visited</code>：已访问的链接元素</li>\n<li><code>:focus</code>：输入聚焦的表单元素</li>\n<li><code>:required</code>：输入必填的表单元素</li>\n<li><code>:valid</code>：输入合法的表单元素</li>\n<li><code>：invalid</code>：输入非法的表单元素</li>\n<li><code>:in-range</code>：输入范围以内的表单元素</li>\n<li><code>out-of-range</code>：输入范围以外的表单元素</li>\n<li><code>checked</code>：选项选中的表单元素</li>\n<li><code>optional</code>：选项可选的表单元素</li>\n<li><code>enabled</code>：事件启用的表单元素</li>\n<li><code>disabled</code>：事件禁用的表单元素</li>\n<li><code>read-only</code>：只读的表单元素</li>\n<li><code>read-write</code>：可读可写的表单元素</li>\n<li><code>blank</code>：输入为空的表单元素</li>\n<li><code>current()</code>：浏览中的元素</li>\n<li><code>past()</code>：已浏览的元素</li>\n<li><code>future</code>：未浏览的元素</li>\n</ul>\n<h5 id=\"结构伪类\"><a href=\"#结构伪类\" class=\"headerlink\" title=\"结构伪类\"></a>结构伪类</h5><ul>\n<li><code>：root</code>：文档的根元素</li>\n<li><code>:empty</code>： 无子元素的元素</li>\n<li><code>:first-letter</code>：元素的首字母</li>\n<li><code>:first-line</code>：元素的首行</li>\n<li><code>:nth-child(n)</code>：元素中指定书序索引的元素</li>\n<li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素</li>\n<li><code>:first-child</code>：元素中为首的元素</li>\n<li><code>:last-child</code>：元素中为尾的元素</li>\n<li><code>:only-child</code>：父元素仅有该元素的元素</li>\n<li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签</li>\n<li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签</li>\n<li><code>:first-of-type</code>：标签中为首的标签</li>\n<li><code>:last-of-type</code>：标签中为尾标签</li>\n<li><code>:only-of-type</code>：父元素仅有该标签的标签</li>\n</ul>\n<h5 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h5><ul>\n<li><code>::before</code>：在元素前插入内容</li>\n<li><code>::after</code>：在元素后插入内容</li>\n</ul>\n<h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li>!important</li>\n<li>内联样式</li>\n<li>ID 选择器</li>\n<li>类选择、伪类选择器、属性选择器</li>\n<li>元素选择器、伪元素选择器</li>\n<li>通配选择器、后代选择器、兄弟选择器</li>\n</ul>\n<h3 id=\"CSS-Backgrounds\"><a href=\"#CSS-Backgrounds\" class=\"headerlink\" title=\"CSS Backgrounds\"></a>CSS Backgrounds</h3><ul>\n<li><p><code>background</code>：将背景属性设置在一个声明中</p>\n</li>\n<li><p><code>background-attachment</code>：背景图像是否固定或者随着页面的其余部分滚动</p>\n<ul>\n<li><code>scroll</code>：随着页面的滚动而滚动（默认值）</li>\n<li><code>fixed</code>：不会随着页面的滚动而滚动</li>\n<li><code>local</code>：随着元素的内容的滚动而滚动</li>\n<li><code>initial</code>：使用默认值</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n<li><p><code>background-color</code>：设置元素的背景颜色</p>\n<ul>\n<li><code>color</code>：背景颜色</li>\n<li><code>transparent</code>：背景颜色透明</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-image</code>：把图像设置为背景</p>\n<ul>\n<li><code>linear-gradient()</code>：创建一个线性渐变的”图像”（从上而下）</li>\n<li><code>radial-gradient()</code>：用径向渐变创建”图像”</li>\n<li><code>repeating-linear-gradient()</code>：创建重复的线性渐变”图像”</li>\n<li><code>repeating-radial-gradient()</code>：创建重复的径向渐变”图像”</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-position</code>：设置起始位置</p>\n<ul>\n<li><code>left/top/centet/bottom/right</code>：仅指定一个时，其他值会是center</li>\n<li><code>x% y%</code>：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%</li>\n<li><code>xpos ypos</code>：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-repeat</code>：设置是否及如何重复</p>\n<ul>\n<li><code>repeat</code>：垂直和水平方向重复（默认值）</li>\n<li><code>repeat-x</code>：水平重复</li>\n<li><code>repeat-y</code>：垂直重复</li>\n<li><code>no-repeat</code>：不重复</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"喟然叹息😒😒\"><a href=\"#喟然叹息😒😒\" class=\"headerlink\" title=\"喟然叹息😒😒\"></a>喟然叹息😒😒</h2><p><strong><font size=4>凤栖梧</strong> </font><font size=2>柳永</font></p>\n<p><strong>伫倚危楼风细细，</strong></p>\n<p><em>望极春愁，</em></p>\n<p><strong>黯黯生天际。</strong></p>\n<p><em>草色烟光残照里，</em></p>\n<p><strong>无言谁会凭栏意。</strong></p>\n<p><em>拟把疏狂图一醉，</em></p>\n<p><strong>对酒当歌，</strong></p>\n<p><em>强乐还无味。</em></p>\n<p><strong>衣带渐宽终不悔，</strong></p>\n<p><em>为伊消得人憔悴。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-学习一\"><a href=\"#CSS-学习一\" class=\"headerlink\" title=\"CSS 学习一\"></a>CSS 学习一</h2><p>从涉及前端开发到现在，差不多有四年了，框架有<code>Vue</code>、<code>Angular</code>，组件库用了<code>ElementUI</code>、<code>NG-Zorro</code>、<code>Ant-Design</code>。<br>而对于<code>CSS</code>，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下<code>CSS</code>，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>层叠样式表，用于设计<code>HTML</code>的风格和布局，字体、颜色、大小、间距等等。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>CSS</code>由两部分组成：选择器，以及声明。<br>一个熟悉与值的键值被称为声明，而将一个或者多个声明用<code>&#123;&#125;</code>括起来，就是声明块。<br>声明作用到对应的<code>HTML</code>元素，就要加上选择器。</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h4><ul>\n<li>标签选择器：<code>h1</code></li>\n<li>类选择器：<code>.checked</code></li>\n<li>ID 选择器：<code>#picker</code></li>\n<li>通配选择器：<code>*</code></li>\n</ul>\n<h4 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h4><ul>\n<li>[attr]：指定属性的元素</li>\n<li>[attr=val]：属性等于指定值的元素</li>\n<li>[attr*=val]：属性包含指定值的元素</li>\n<li>[attr^=val]：属性以指定值开头的元素</li>\n<li>[attr$=val]：属性以指定值结尾的元素</li>\n<li>[attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）</li>\n<li>[attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）</li>\n</ul>\n<h4 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h4><ul>\n<li>相邻兄弟选择器：<code>A+B</code></li>\n<li>普通兄弟选择器：<code>A~B</code></li>\n<li>子选择器：<code>A&gt;B</code></li>\n<li>后代选择器：<code>AB</code></li>\n</ul>\n<h4 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h4><h5 id=\"条件伪类\"><a href=\"#条件伪类\" class=\"headerlink\" title=\"条件伪类\"></a>条件伪类</h5><ul>\n<li><code>:lang()</code>：基于元素语言来匹配页面元素</li>\n<li><code>:dir()</code>：匹配特定文字书写方向的元素</li>\n<li><code>:has()</code>：匹配包含指定元素的元素</li>\n<li><code>:is()</code>：匹配指定选择器列表里的元素</li>\n<li><code>:not()</code>：用来匹配不符合一组选择器的元素</li>\n</ul>\n<h5 id=\"行为伪类\"><a href=\"#行为伪类\" class=\"headerlink\" title=\"行为伪类\"></a>行为伪类</h5><p>-<code>:active</code>：鼠标激活的元素 -<code>:hover</code>：鼠标悬浮的元素 -<code>::selection</code>：鼠标选中的元素</p>\n<h5 id=\"状态伪类\"><a href=\"#状态伪类\" class=\"headerlink\" title=\"状态伪类\"></a>状态伪类</h5><ul>\n<li><code>:target</code>：当前锚点的元素</li>\n<li><code>:link</code>：未访问的链接元素</li>\n<li><code>:visited</code>：已访问的链接元素</li>\n<li><code>:focus</code>：输入聚焦的表单元素</li>\n<li><code>:required</code>：输入必填的表单元素</li>\n<li><code>:valid</code>：输入合法的表单元素</li>\n<li><code>：invalid</code>：输入非法的表单元素</li>\n<li><code>:in-range</code>：输入范围以内的表单元素</li>\n<li><code>out-of-range</code>：输入范围以外的表单元素</li>\n<li><code>checked</code>：选项选中的表单元素</li>\n<li><code>optional</code>：选项可选的表单元素</li>\n<li><code>enabled</code>：事件启用的表单元素</li>\n<li><code>disabled</code>：事件禁用的表单元素</li>\n<li><code>read-only</code>：只读的表单元素</li>\n<li><code>read-write</code>：可读可写的表单元素</li>\n<li><code>blank</code>：输入为空的表单元素</li>\n<li><code>current()</code>：浏览中的元素</li>\n<li><code>past()</code>：已浏览的元素</li>\n<li><code>future</code>：未浏览的元素</li>\n</ul>\n<h5 id=\"结构伪类\"><a href=\"#结构伪类\" class=\"headerlink\" title=\"结构伪类\"></a>结构伪类</h5><ul>\n<li><code>：root</code>：文档的根元素</li>\n<li><code>:empty</code>： 无子元素的元素</li>\n<li><code>:first-letter</code>：元素的首字母</li>\n<li><code>:first-line</code>：元素的首行</li>\n<li><code>:nth-child(n)</code>：元素中指定书序索引的元素</li>\n<li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素</li>\n<li><code>:first-child</code>：元素中为首的元素</li>\n<li><code>:last-child</code>：元素中为尾的元素</li>\n<li><code>:only-child</code>：父元素仅有该元素的元素</li>\n<li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签</li>\n<li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签</li>\n<li><code>:first-of-type</code>：标签中为首的标签</li>\n<li><code>:last-of-type</code>：标签中为尾标签</li>\n<li><code>:only-of-type</code>：父元素仅有该标签的标签</li>\n</ul>\n<h5 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h5><ul>\n<li><code>::before</code>：在元素前插入内容</li>\n<li><code>::after</code>：在元素后插入内容</li>\n</ul>\n<h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li>!important</li>\n<li>内联样式</li>\n<li>ID 选择器</li>\n<li>类选择、伪类选择器、属性选择器</li>\n<li>元素选择器、伪元素选择器</li>\n<li>通配选择器、后代选择器、兄弟选择器</li>\n</ul>\n<h3 id=\"CSS-Backgrounds\"><a href=\"#CSS-Backgrounds\" class=\"headerlink\" title=\"CSS Backgrounds\"></a>CSS Backgrounds</h3><ul>\n<li><p><code>background</code>：将背景属性设置在一个声明中</p>\n</li>\n<li><p><code>background-attachment</code>：背景图像是否固定或者随着页面的其余部分滚动</p>\n<ul>\n<li><code>scroll</code>：随着页面的滚动而滚动（默认值）</li>\n<li><code>fixed</code>：不会随着页面的滚动而滚动</li>\n<li><code>local</code>：随着元素的内容的滚动而滚动</li>\n<li><code>initial</code>：使用默认值</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n<li><p><code>background-color</code>：设置元素的背景颜色</p>\n<ul>\n<li><code>color</code>：背景颜色</li>\n<li><code>transparent</code>：背景颜色透明</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-image</code>：把图像设置为背景</p>\n<ul>\n<li><code>linear-gradient()</code>：创建一个线性渐变的”图像”（从上而下）</li>\n<li><code>radial-gradient()</code>：用径向渐变创建”图像”</li>\n<li><code>repeating-linear-gradient()</code>：创建重复的线性渐变”图像”</li>\n<li><code>repeating-radial-gradient()</code>：创建重复的径向渐变”图像”</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-position</code>：设置起始位置</p>\n<ul>\n<li><code>left/top/centet/bottom/right</code>：仅指定一个时，其他值会是center</li>\n<li><code>x% y%</code>：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%</li>\n<li><code>xpos ypos</code>：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>background-repeat</code>：设置是否及如何重复</p>\n<ul>\n<li><code>repeat</code>：垂直和水平方向重复（默认值）</li>\n<li><code>repeat-x</code>：水平重复</li>\n<li><code>repeat-y</code>：垂直重复</li>\n<li><code>no-repeat</code>：不重复</li>\n<li><code>inherit</code>：继承父元素的属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"喟然叹息😒😒\"><a href=\"#喟然叹息😒😒\" class=\"headerlink\" title=\"喟然叹息😒😒\"></a>喟然叹息😒😒</h2><p><strong><font size=4>凤栖梧</strong> </font><font size=2>柳永</font></p>\n<p><strong>伫倚危楼风细细，</strong></p>\n<p><em>望极春愁，</em></p>\n<p><strong>黯黯生天际。</strong></p>\n<p><em>草色烟光残照里，</em></p>\n<p><strong>无言谁会凭栏意。</strong></p>\n<p><em>拟把疏狂图一醉，</em></p>\n<p><strong>对酒当歌，</strong></p>\n<p><em>强乐还无味。</em></p>\n<p><strong>衣带渐宽终不悔，</strong></p>\n<p><em>为伊消得人憔悴。</em></p>\n"},{"title":"css学习三","date":"2022-04-05T03:18:10.000Z","_content":"\n## CSS 学习三\n\n继续\n\n### CSS Fonts\n\n- `font-family`：指定字体\n\n- `font-size`：字体大小\n\n- `font-style`：字体样式\n  - `normal`：默认值\n  - `italic`：斜体\n  - `oblique`：斜体\n  - `inherit`：继承父元素\n\n- `font-variant`：将小写字母转为大写，但是字体尺寸更小\n  - `normal`：默认值，不做任何样式调整\n  - `small-caps`：小型大写字母的字体\n  - `inherit`：继承父元素\n\n- `font-weight`：字体的粗细\n  - `normal`：默认\n  - `bold`：粗体\n  - `bloder`：更粗的粗体\n  - `lighter`：更细的字体\n  - `数字`：400等于normal，700等于bold\n  - `inherit`：继承父元素\n\n### CSS Link\n\n- `a:link`：未访问链接\n- `a:visited`：已访问链接\n- `a:hover`：鼠标移动到链接上\n- `a:active`：鼠标点击时\n\n### CSS 列表\n\n- `list-style-image`：将图像设置为列表标志\n- `list-style-position`：标志位置\n  - `outside`：放置在文本以内，并环绕文本对齐\n  - `inside`：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐\n  - `inherit`：继承父元素\n\n### 盒子模型\n\n封装周围的HTML元素，包括边距、边框、填充和内容\n\n- `Margin`：外边距，透明，用以清除边框外的区域\n- `Boder`：边框\n- `Padding`：内边距，透明，用以清除内容周围的区域\n- `Content`：内容\n\n### CSS Border\n\n- `boder-style`：设置四个边框的样式\n  - `none`：无边框，优先级最低，如果存在重叠边框，会显示为其他边框\n  - `hidden`：无边框，优先级最高，如果存在重叠边框，则不显示边框\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n\n- `border-width`：设置四个边框的宽度\n  - `thin`：细边框\n  - `medium`：中等边框（默认）\n  - `thick`：粗边框\n  - `length`：自定义值\n  - `inherit`：继承父元素\n\n- `boder-color`：设置四个边框颜色\n  - `color`：指定颜色\n  - `transparent`：透明（默认）\n  - `inherit`：继承父元素\n\n- `border-radius`：外边框圆角\n\n瑞了瑞了，满脑子英文单词\n\n### 美则美矣，未尽善焉😕😕😕\n\n**<font size=4>浪淘沙</font>**</font> <font size=2>欧阳修</font>\n\n**把酒祝东风，**\n\n*且共从容。*\n\n**垂杨紫陌洛城东。**\n\n*总是当时携手处，*\n\n**游遍芳丛。**\n\n*聚散苦匆匆，*\n\n**此恨无穷。**\n\n*今年花胜去年红。*\n\n**可惜明年花更好，**\n\n*知与谁同？*\n","source":"_posts/css学习三.md","raw":"---\ntitle: css学习三\ndate: 2022-04-05 11:18:10\ntags:\n  - css\ncategories: [前端]\n---\n\n## CSS 学习三\n\n继续\n\n### CSS Fonts\n\n- `font-family`：指定字体\n\n- `font-size`：字体大小\n\n- `font-style`：字体样式\n  - `normal`：默认值\n  - `italic`：斜体\n  - `oblique`：斜体\n  - `inherit`：继承父元素\n\n- `font-variant`：将小写字母转为大写，但是字体尺寸更小\n  - `normal`：默认值，不做任何样式调整\n  - `small-caps`：小型大写字母的字体\n  - `inherit`：继承父元素\n\n- `font-weight`：字体的粗细\n  - `normal`：默认\n  - `bold`：粗体\n  - `bloder`：更粗的粗体\n  - `lighter`：更细的字体\n  - `数字`：400等于normal，700等于bold\n  - `inherit`：继承父元素\n\n### CSS Link\n\n- `a:link`：未访问链接\n- `a:visited`：已访问链接\n- `a:hover`：鼠标移动到链接上\n- `a:active`：鼠标点击时\n\n### CSS 列表\n\n- `list-style-image`：将图像设置为列表标志\n- `list-style-position`：标志位置\n  - `outside`：放置在文本以内，并环绕文本对齐\n  - `inside`：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐\n  - `inherit`：继承父元素\n\n### 盒子模型\n\n封装周围的HTML元素，包括边距、边框、填充和内容\n\n- `Margin`：外边距，透明，用以清除边框外的区域\n- `Boder`：边框\n- `Padding`：内边距，透明，用以清除内容周围的区域\n- `Content`：内容\n\n### CSS Border\n\n- `boder-style`：设置四个边框的样式\n  - `none`：无边框，优先级最低，如果存在重叠边框，会显示为其他边框\n  - `hidden`：无边框，优先级最高，如果存在重叠边框，则不显示边框\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n\n- `border-width`：设置四个边框的宽度\n  - `thin`：细边框\n  - `medium`：中等边框（默认）\n  - `thick`：粗边框\n  - `length`：自定义值\n  - `inherit`：继承父元素\n\n- `boder-color`：设置四个边框颜色\n  - `color`：指定颜色\n  - `transparent`：透明（默认）\n  - `inherit`：继承父元素\n\n- `border-radius`：外边框圆角\n\n瑞了瑞了，满脑子英文单词\n\n### 美则美矣，未尽善焉😕😕😕\n\n**<font size=4>浪淘沙</font>**</font> <font size=2>欧阳修</font>\n\n**把酒祝东风，**\n\n*且共从容。*\n\n**垂杨紫陌洛城东。**\n\n*总是当时携手处，*\n\n**游遍芳丛。**\n\n*聚散苦匆匆，*\n\n**此恨无穷。**\n\n*今年花胜去年红。*\n\n**可惜明年花更好，**\n\n*知与谁同？*\n","slug":"css学习三","published":1,"updated":"2022-10-27T06:40:13.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1c0058hgac904i1guh","content":"<h2 id=\"CSS-学习三\"><a href=\"#CSS-学习三\" class=\"headerlink\" title=\"CSS 学习三\"></a>CSS 学习三</h2><p>继续</p>\n<h3 id=\"CSS-Fonts\"><a href=\"#CSS-Fonts\" class=\"headerlink\" title=\"CSS Fonts\"></a>CSS Fonts</h3><ul>\n<li><p><code>font-family</code>：指定字体</p>\n</li>\n<li><p><code>font-size</code>：字体大小</p>\n</li>\n<li><p><code>font-style</code>：字体样式</p>\n<ul>\n<li><code>normal</code>：默认值</li>\n<li><code>italic</code>：斜体</li>\n<li><code>oblique</code>：斜体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-variant</code>：将小写字母转为大写，但是字体尺寸更小</p>\n<ul>\n<li><code>normal</code>：默认值，不做任何样式调整</li>\n<li><code>small-caps</code>：小型大写字母的字体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-weight</code>：字体的粗细</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>bold</code>：粗体</li>\n<li><code>bloder</code>：更粗的粗体</li>\n<li><code>lighter</code>：更细的字体</li>\n<li><code>数字</code>：400等于normal，700等于bold</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS-Link\"><a href=\"#CSS-Link\" class=\"headerlink\" title=\"CSS Link\"></a>CSS Link</h3><ul>\n<li><code>a:link</code>：未访问链接</li>\n<li><code>a:visited</code>：已访问链接</li>\n<li><code>a:hover</code>：鼠标移动到链接上</li>\n<li><code>a:active</code>：鼠标点击时</li>\n</ul>\n<h3 id=\"CSS-列表\"><a href=\"#CSS-列表\" class=\"headerlink\" title=\"CSS 列表\"></a>CSS 列表</h3><ul>\n<li><code>list-style-image</code>：将图像设置为列表标志</li>\n<li><code>list-style-position</code>：标志位置<ul>\n<li><code>outside</code>：放置在文本以内，并环绕文本对齐</li>\n<li><code>inside</code>：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>封装周围的HTML元素，包括边距、边框、填充和内容</p>\n<ul>\n<li><code>Margin</code>：外边距，透明，用以清除边框外的区域</li>\n<li><code>Boder</code>：边框</li>\n<li><code>Padding</code>：内边距，透明，用以清除内容周围的区域</li>\n<li><code>Content</code>：内容</li>\n</ul>\n<h3 id=\"CSS-Border\"><a href=\"#CSS-Border\" class=\"headerlink\" title=\"CSS Border\"></a>CSS Border</h3><ul>\n<li><p><code>boder-style</code>：设置四个边框的样式</p>\n<ul>\n<li><code>none</code>：无边框，优先级最低，如果存在重叠边框，会显示为其他边框</li>\n<li><code>hidden</code>：无边框，优先级最高，如果存在重叠边框，则不显示边框</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-width</code>：设置四个边框的宽度</p>\n<ul>\n<li><code>thin</code>：细边框</li>\n<li><code>medium</code>：中等边框（默认）</li>\n<li><code>thick</code>：粗边框</li>\n<li><code>length</code>：自定义值</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>boder-color</code>：设置四个边框颜色</p>\n<ul>\n<li><code>color</code>：指定颜色</li>\n<li><code>transparent</code>：透明（默认）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-radius</code>：外边框圆角</p>\n</li>\n</ul>\n<p>瑞了瑞了，满脑子英文单词</p>\n<h3 id=\"美则美矣，未尽善焉😕😕😕\"><a href=\"#美则美矣，未尽善焉😕😕😕\" class=\"headerlink\" title=\"美则美矣，未尽善焉😕😕😕\"></a>美则美矣，未尽善焉😕😕😕</h3><p><strong><font size=4>浪淘沙</font></strong></font> <font size=2>欧阳修</font></p>\n<p><strong>把酒祝东风，</strong></p>\n<p><em>且共从容。</em></p>\n<p><strong>垂杨紫陌洛城东。</strong></p>\n<p><em>总是当时携手处，</em></p>\n<p><strong>游遍芳丛。</strong></p>\n<p><em>聚散苦匆匆，</em></p>\n<p><strong>此恨无穷。</strong></p>\n<p><em>今年花胜去年红。</em></p>\n<p><strong>可惜明年花更好，</strong></p>\n<p><em>知与谁同？</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-学习三\"><a href=\"#CSS-学习三\" class=\"headerlink\" title=\"CSS 学习三\"></a>CSS 学习三</h2><p>继续</p>\n<h3 id=\"CSS-Fonts\"><a href=\"#CSS-Fonts\" class=\"headerlink\" title=\"CSS Fonts\"></a>CSS Fonts</h3><ul>\n<li><p><code>font-family</code>：指定字体</p>\n</li>\n<li><p><code>font-size</code>：字体大小</p>\n</li>\n<li><p><code>font-style</code>：字体样式</p>\n<ul>\n<li><code>normal</code>：默认值</li>\n<li><code>italic</code>：斜体</li>\n<li><code>oblique</code>：斜体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-variant</code>：将小写字母转为大写，但是字体尺寸更小</p>\n<ul>\n<li><code>normal</code>：默认值，不做任何样式调整</li>\n<li><code>small-caps</code>：小型大写字母的字体</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>font-weight</code>：字体的粗细</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>bold</code>：粗体</li>\n<li><code>bloder</code>：更粗的粗体</li>\n<li><code>lighter</code>：更细的字体</li>\n<li><code>数字</code>：400等于normal，700等于bold</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS-Link\"><a href=\"#CSS-Link\" class=\"headerlink\" title=\"CSS Link\"></a>CSS Link</h3><ul>\n<li><code>a:link</code>：未访问链接</li>\n<li><code>a:visited</code>：已访问链接</li>\n<li><code>a:hover</code>：鼠标移动到链接上</li>\n<li><code>a:active</code>：鼠标点击时</li>\n</ul>\n<h3 id=\"CSS-列表\"><a href=\"#CSS-列表\" class=\"headerlink\" title=\"CSS 列表\"></a>CSS 列表</h3><ul>\n<li><code>list-style-image</code>：将图像设置为列表标志</li>\n<li><code>list-style-position</code>：标志位置<ul>\n<li><code>outside</code>：放置在文本以内，并环绕文本对齐</li>\n<li><code>inside</code>：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>封装周围的HTML元素，包括边距、边框、填充和内容</p>\n<ul>\n<li><code>Margin</code>：外边距，透明，用以清除边框外的区域</li>\n<li><code>Boder</code>：边框</li>\n<li><code>Padding</code>：内边距，透明，用以清除内容周围的区域</li>\n<li><code>Content</code>：内容</li>\n</ul>\n<h3 id=\"CSS-Border\"><a href=\"#CSS-Border\" class=\"headerlink\" title=\"CSS Border\"></a>CSS Border</h3><ul>\n<li><p><code>boder-style</code>：设置四个边框的样式</p>\n<ul>\n<li><code>none</code>：无边框，优先级最低，如果存在重叠边框，会显示为其他边框</li>\n<li><code>hidden</code>：无边框，优先级最高，如果存在重叠边框，则不显示边框</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-width</code>：设置四个边框的宽度</p>\n<ul>\n<li><code>thin</code>：细边框</li>\n<li><code>medium</code>：中等边框（默认）</li>\n<li><code>thick</code>：粗边框</li>\n<li><code>length</code>：自定义值</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>boder-color</code>：设置四个边框颜色</p>\n<ul>\n<li><code>color</code>：指定颜色</li>\n<li><code>transparent</code>：透明（默认）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>border-radius</code>：外边框圆角</p>\n</li>\n</ul>\n<p>瑞了瑞了，满脑子英文单词</p>\n<h3 id=\"美则美矣，未尽善焉😕😕😕\"><a href=\"#美则美矣，未尽善焉😕😕😕\" class=\"headerlink\" title=\"美则美矣，未尽善焉😕😕😕\"></a>美则美矣，未尽善焉😕😕😕</h3><p><strong><font size=4>浪淘沙</font></strong></font> <font size=2>欧阳修</font></p>\n<p><strong>把酒祝东风，</strong></p>\n<p><em>且共从容。</em></p>\n<p><strong>垂杨紫陌洛城东。</strong></p>\n<p><em>总是当时携手处，</em></p>\n<p><strong>游遍芳丛。</strong></p>\n<p><em>聚散苦匆匆，</em></p>\n<p><strong>此恨无穷。</strong></p>\n<p><em>今年花胜去年红。</em></p>\n<p><strong>可惜明年花更好，</strong></p>\n<p><em>知与谁同？</em></p>\n"},{"title":"css学习二","date":"2022-04-04T00:52:38.000Z","_content":"\n## CSS 学习二\n\n继续\n\n### CSS 单位\n\n#### 相对长度\n\n- `em`：当前元素的字体尺寸\n- `ex`：英文字母小x的高度\n- `ch`：数字0的高度\n- `vw`：视窗宽度，1vm=视窗宽度的1%\n- `vh`：视窗高度，1vm=视窗高度的1%\n- `vmin`：vm和vh中较小的那个\n- `vmax`：vm和vh中较大的那个\n- `%`：😁😁😁\n\n#### 绝对长度\n\n- `cm`：厘米\n- `mm`：毫米\n- `in`：英寸\n- `px`：像素\n- `pt`：1pt = 1/72in\n- `pc`：1pc = 12 pt\n\n### CSS Text\n\n- `color`：设置文本颜色\n- `direction`：设置文字方向\n  - `ltr`：从左向右（默认）\n  - `rtl`：从右向左\n  - `ingerit`：继承父元素\n\n- `letter-spacing`：设置字符间距\n  - `noraml`：字符间没有额外的空间\n  - `length`：使用固定空间（可以为负值）\n  - `inherit`：继承父元素\n\n- `line-height`：设置行间距\n  - `normal`：默认\n  - `number`：设置数字，会与字体尺寸相乘得到行间距\n  - `length`：固定值\n  - `%`：字体尺寸的百分比为行间距\n  - `inherit`：继承父元素\n\n- `text-align`：文本的水平对齐方式\n  - `left`：左对齐（默认）\n  - `right`：右对齐\n  - `center`：居中\n  - `justify`：两端对齐\n  - `inherit`：继承父元素\n\n- `text-decoration`：添加文本修饰\n  - `none`：无修饰（默认）\n  - `underline`：下划线\n  - `overline`：上划线\n  - `line-through`：删除线\n  - `blink`：闪烁效果\n  - `inherit`：继承父元素\n\n- `text-indent`：首行缩进\n  - `length`：固定缩进\n  - `%`：基于父元素宽度的百分比缩进\n  - `inherit`：继承父元素\n\n- `text-shadow`：文本阴影\n  - `h-shadow`：必需，允许负值，水平阴影位置\n  - `v-shadow`：必需，允许负值，垂直阴影位置\n  - `blur`：模糊的距离\n  - `color`：阴影的颜色\n\n- `text-transform`：字母样式\n  - `none`：默认\n  - `capitalize`：每个单词以大写字母开头\n  - `uppercase`：全部大写\n  - `lowercase`：全部小写\n  - `inherit`：继承父元素\n\n- `unicode-bidi`：是否重写文本，需要配合`direction`使用\n  - `normal`：默认\n  - `embed`：创建一个附加的嵌入层面\n  - `bidi-override`：创建一个附加的嵌入层面，按照`direction`属性重新排序\n  - `initial`：设置默认值\n  - `inherit`：继承父元素\n这里`embed`属性和`normal`属性如果单独使用，最终样式看来是没有区别的。\n但是`embed`会创建一个附加的嵌入层面，因为在`bidi-override`属性值里面，`normal`是不会起作用的，因为`bidi-override`也创建了一个嵌入层面，这个时候就可以使用`embed`了\n\n- `vertical-align`：文本的垂直对齐方式\n  - `baseline`：默认\n  - `sub`：垂直对齐文本下标\n  - `super`：垂直对齐文本上标\n  - `top`：元素顶端与行中最高元素的顶端对齐\n  - `text-top`：元素顶端与父元素字体的顶端对齐\n  - `middle`：元素放于父元素的中部\n  - `bottom`：使元素及其后代元素的底部与整行的底部对齐\n  - `text-bottom`：元素底端与父元素字体的底端对齐\n  - `length`：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。\n  - `%`：使用 \"line-height\" 属性的百分比值来排列此元素。允许使用负值。\n  - `inherit`：继承父元素\n\n- `white-space`：空白处理方式\n  - `noraml`：连续的空白符会被合并，换行符会被当作空白符来处理\n  - `nowwrap`：和 normal 一样，连续的空白符会被合并。但文本内的换行无效\n  - `pre`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-wrap`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-line`：连续的空白符会被合并。在遇到换行符或者`<br>`元素时会换行\n  - `inherit`：继承父元素\n\n    |    | 换行符 | 空格和制表符 | 文字换行 | 行尾空格 |\n    | ---- | ---- | ---- | ---- | ---- |\n    | `normal` | 合并 | 合并 | 换行 | 删除 |\n    | `nowwrap` | 合并 | 合并 | 不换行 | 删除 |\n    | `pre` | 保留 | 保留 | 不换行 | 保留 |\n    | `pre-wrap` | 保留 | 保留 | 换行 | 挂起 |\n    | `pre-line` | 保留 | 保留 | 换行 | 换行 |\n\n- `word-spacing`：字间距\n  - `normal`：默认，使用标准空间\n  - `length`：使用指定空间\n  - `inherit`：继承父元素\n\n瑞了瑞了！！！\n\n### 有垣曰苑，无垣曰囿😉😉\n\n**<font size=4>临江仙</font>** <font size=1>夜归临皋</font> <font size=2>苏轼</font>\n\n**夜饮东坡醒复醉，**\n\n*归来仿佛三更。*\n\n**家童鼻息已雷鸣。**\n\n*敲门都不应，*\n\n**倚杖听江声。**\n\n*长恨此身非我有，*\n\n**何时忘却营营？**\n\n*夜阑风静彀纹平。*\n\n**小舟从此逝，**\n\n*江海寄余生。*\n","source":"_posts/css学习二.md","raw":"---\ntitle: css学习二\ndate: 2022-04-04 08:52:38\ntags:\n  - css\ncategories: [前端]\n---\n\n## CSS 学习二\n\n继续\n\n### CSS 单位\n\n#### 相对长度\n\n- `em`：当前元素的字体尺寸\n- `ex`：英文字母小x的高度\n- `ch`：数字0的高度\n- `vw`：视窗宽度，1vm=视窗宽度的1%\n- `vh`：视窗高度，1vm=视窗高度的1%\n- `vmin`：vm和vh中较小的那个\n- `vmax`：vm和vh中较大的那个\n- `%`：😁😁😁\n\n#### 绝对长度\n\n- `cm`：厘米\n- `mm`：毫米\n- `in`：英寸\n- `px`：像素\n- `pt`：1pt = 1/72in\n- `pc`：1pc = 12 pt\n\n### CSS Text\n\n- `color`：设置文本颜色\n- `direction`：设置文字方向\n  - `ltr`：从左向右（默认）\n  - `rtl`：从右向左\n  - `ingerit`：继承父元素\n\n- `letter-spacing`：设置字符间距\n  - `noraml`：字符间没有额外的空间\n  - `length`：使用固定空间（可以为负值）\n  - `inherit`：继承父元素\n\n- `line-height`：设置行间距\n  - `normal`：默认\n  - `number`：设置数字，会与字体尺寸相乘得到行间距\n  - `length`：固定值\n  - `%`：字体尺寸的百分比为行间距\n  - `inherit`：继承父元素\n\n- `text-align`：文本的水平对齐方式\n  - `left`：左对齐（默认）\n  - `right`：右对齐\n  - `center`：居中\n  - `justify`：两端对齐\n  - `inherit`：继承父元素\n\n- `text-decoration`：添加文本修饰\n  - `none`：无修饰（默认）\n  - `underline`：下划线\n  - `overline`：上划线\n  - `line-through`：删除线\n  - `blink`：闪烁效果\n  - `inherit`：继承父元素\n\n- `text-indent`：首行缩进\n  - `length`：固定缩进\n  - `%`：基于父元素宽度的百分比缩进\n  - `inherit`：继承父元素\n\n- `text-shadow`：文本阴影\n  - `h-shadow`：必需，允许负值，水平阴影位置\n  - `v-shadow`：必需，允许负值，垂直阴影位置\n  - `blur`：模糊的距离\n  - `color`：阴影的颜色\n\n- `text-transform`：字母样式\n  - `none`：默认\n  - `capitalize`：每个单词以大写字母开头\n  - `uppercase`：全部大写\n  - `lowercase`：全部小写\n  - `inherit`：继承父元素\n\n- `unicode-bidi`：是否重写文本，需要配合`direction`使用\n  - `normal`：默认\n  - `embed`：创建一个附加的嵌入层面\n  - `bidi-override`：创建一个附加的嵌入层面，按照`direction`属性重新排序\n  - `initial`：设置默认值\n  - `inherit`：继承父元素\n这里`embed`属性和`normal`属性如果单独使用，最终样式看来是没有区别的。\n但是`embed`会创建一个附加的嵌入层面，因为在`bidi-override`属性值里面，`normal`是不会起作用的，因为`bidi-override`也创建了一个嵌入层面，这个时候就可以使用`embed`了\n\n- `vertical-align`：文本的垂直对齐方式\n  - `baseline`：默认\n  - `sub`：垂直对齐文本下标\n  - `super`：垂直对齐文本上标\n  - `top`：元素顶端与行中最高元素的顶端对齐\n  - `text-top`：元素顶端与父元素字体的顶端对齐\n  - `middle`：元素放于父元素的中部\n  - `bottom`：使元素及其后代元素的底部与整行的底部对齐\n  - `text-bottom`：元素底端与父元素字体的底端对齐\n  - `length`：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。\n  - `%`：使用 \"line-height\" 属性的百分比值来排列此元素。允许使用负值。\n  - `inherit`：继承父元素\n\n- `white-space`：空白处理方式\n  - `noraml`：连续的空白符会被合并，换行符会被当作空白符来处理\n  - `nowwrap`：和 normal 一样，连续的空白符会被合并。但文本内的换行无效\n  - `pre`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-wrap`：连续的空白符会被保留。在遇到换行符或者`<br>`元素时才会换行\n  - `pre-line`：连续的空白符会被合并。在遇到换行符或者`<br>`元素时会换行\n  - `inherit`：继承父元素\n\n    |    | 换行符 | 空格和制表符 | 文字换行 | 行尾空格 |\n    | ---- | ---- | ---- | ---- | ---- |\n    | `normal` | 合并 | 合并 | 换行 | 删除 |\n    | `nowwrap` | 合并 | 合并 | 不换行 | 删除 |\n    | `pre` | 保留 | 保留 | 不换行 | 保留 |\n    | `pre-wrap` | 保留 | 保留 | 换行 | 挂起 |\n    | `pre-line` | 保留 | 保留 | 换行 | 换行 |\n\n- `word-spacing`：字间距\n  - `normal`：默认，使用标准空间\n  - `length`：使用指定空间\n  - `inherit`：继承父元素\n\n瑞了瑞了！！！\n\n### 有垣曰苑，无垣曰囿😉😉\n\n**<font size=4>临江仙</font>** <font size=1>夜归临皋</font> <font size=2>苏轼</font>\n\n**夜饮东坡醒复醉，**\n\n*归来仿佛三更。*\n\n**家童鼻息已雷鸣。**\n\n*敲门都不应，*\n\n**倚杖听江声。**\n\n*长恨此身非我有，*\n\n**何时忘却营营？**\n\n*夜阑风静彀纹平。*\n\n**小舟从此逝，**\n\n*江海寄余生。*\n","slug":"css学习二","published":1,"updated":"2022-10-27T06:40:13.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1d005bhgac8gw30c6g","content":"<h2 id=\"CSS-学习二\"><a href=\"#CSS-学习二\" class=\"headerlink\" title=\"CSS 学习二\"></a>CSS 学习二</h2><p>继续</p>\n<h3 id=\"CSS-单位\"><a href=\"#CSS-单位\" class=\"headerlink\" title=\"CSS 单位\"></a>CSS 单位</h3><h4 id=\"相对长度\"><a href=\"#相对长度\" class=\"headerlink\" title=\"相对长度\"></a>相对长度</h4><ul>\n<li><code>em</code>：当前元素的字体尺寸</li>\n<li><code>ex</code>：英文字母小x的高度</li>\n<li><code>ch</code>：数字0的高度</li>\n<li><code>vw</code>：视窗宽度，1vm=视窗宽度的1%</li>\n<li><code>vh</code>：视窗高度，1vm=视窗高度的1%</li>\n<li><code>vmin</code>：vm和vh中较小的那个</li>\n<li><code>vmax</code>：vm和vh中较大的那个</li>\n<li><code>%</code>：😁😁😁</li>\n</ul>\n<h4 id=\"绝对长度\"><a href=\"#绝对长度\" class=\"headerlink\" title=\"绝对长度\"></a>绝对长度</h4><ul>\n<li><code>cm</code>：厘米</li>\n<li><code>mm</code>：毫米</li>\n<li><code>in</code>：英寸</li>\n<li><code>px</code>：像素</li>\n<li><code>pt</code>：1pt = 1/72in</li>\n<li><code>pc</code>：1pc = 12 pt</li>\n</ul>\n<h3 id=\"CSS-Text\"><a href=\"#CSS-Text\" class=\"headerlink\" title=\"CSS Text\"></a>CSS Text</h3><ul>\n<li><p><code>color</code>：设置文本颜色</p>\n</li>\n<li><p><code>direction</code>：设置文字方向</p>\n<ul>\n<li><code>ltr</code>：从左向右（默认）</li>\n<li><code>rtl</code>：从右向左</li>\n<li><code>ingerit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>letter-spacing</code>：设置字符间距</p>\n<ul>\n<li><code>noraml</code>：字符间没有额外的空间</li>\n<li><code>length</code>：使用固定空间（可以为负值）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>line-height</code>：设置行间距</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>number</code>：设置数字，会与字体尺寸相乘得到行间距</li>\n<li><code>length</code>：固定值</li>\n<li><code>%</code>：字体尺寸的百分比为行间距</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-align</code>：文本的水平对齐方式</p>\n<ul>\n<li><code>left</code>：左对齐（默认）</li>\n<li><code>right</code>：右对齐</li>\n<li><code>center</code>：居中</li>\n<li><code>justify</code>：两端对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-decoration</code>：添加文本修饰</p>\n<ul>\n<li><code>none</code>：无修饰（默认）</li>\n<li><code>underline</code>：下划线</li>\n<li><code>overline</code>：上划线</li>\n<li><code>line-through</code>：删除线</li>\n<li><code>blink</code>：闪烁效果</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-indent</code>：首行缩进</p>\n<ul>\n<li><code>length</code>：固定缩进</li>\n<li><code>%</code>：基于父元素宽度的百分比缩进</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-shadow</code>：文本阴影</p>\n<ul>\n<li><code>h-shadow</code>：必需，允许负值，水平阴影位置</li>\n<li><code>v-shadow</code>：必需，允许负值，垂直阴影位置</li>\n<li><code>blur</code>：模糊的距离</li>\n<li><code>color</code>：阴影的颜色</li>\n</ul>\n</li>\n<li><p><code>text-transform</code>：字母样式</p>\n<ul>\n<li><code>none</code>：默认</li>\n<li><code>capitalize</code>：每个单词以大写字母开头</li>\n<li><code>uppercase</code>：全部大写</li>\n<li><code>lowercase</code>：全部小写</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>unicode-bidi</code>：是否重写文本，需要配合<code>direction</code>使用</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>embed</code>：创建一个附加的嵌入层面</li>\n<li><code>bidi-override</code>：创建一个附加的嵌入层面，按照<code>direction</code>属性重新排序</li>\n<li><code>initial</code>：设置默认值</li>\n<li><code>inherit</code>：继承父元素<br>这里<code>embed</code>属性和<code>normal</code>属性如果单独使用，最终样式看来是没有区别的。<br>但是<code>embed</code>会创建一个附加的嵌入层面，因为在<code>bidi-override</code>属性值里面，<code>normal</code>是不会起作用的，因为<code>bidi-override</code>也创建了一个嵌入层面，这个时候就可以使用<code>embed</code>了</li>\n</ul>\n</li>\n<li><p><code>vertical-align</code>：文本的垂直对齐方式</p>\n<ul>\n<li><code>baseline</code>：默认</li>\n<li><code>sub</code>：垂直对齐文本下标</li>\n<li><code>super</code>：垂直对齐文本上标</li>\n<li><code>top</code>：元素顶端与行中最高元素的顶端对齐</li>\n<li><code>text-top</code>：元素顶端与父元素字体的顶端对齐</li>\n<li><code>middle</code>：元素放于父元素的中部</li>\n<li><code>bottom</code>：使元素及其后代元素的底部与整行的底部对齐</li>\n<li><code>text-bottom</code>：元素底端与父元素字体的底端对齐</li>\n<li><code>length</code>：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。</li>\n<li><code>%</code>：使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>white-space</code>：空白处理方式</p>\n<ul>\n<li><p><code>noraml</code>：连续的空白符会被合并，换行符会被当作空白符来处理</p>\n</li>\n<li><p><code>nowwrap</code>：和 normal 一样，连续的空白符会被合并。但文本内的换行无效</p>\n</li>\n<li><p><code>pre</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-wrap</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-line</code>：连续的空白符会被合并。在遇到换行符或者<code>&lt;br&gt;</code>元素时会换行</p>\n</li>\n<li><p><code>inherit</code>：继承父元素</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>换行符</th>\n<th>空格和制表符</th>\n<th>文字换行</th>\n<th>行尾空格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>normal</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>nowwrap</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>不换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>pre</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>不换行</td>\n<td>保留</td>\n</tr>\n<tr>\n<td><code>pre-wrap</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>挂起</td>\n</tr>\n<tr>\n<td><code>pre-line</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>换行</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p><code>word-spacing</code>：字间距</p>\n<ul>\n<li><code>normal</code>：默认，使用标准空间</li>\n<li><code>length</code>：使用指定空间</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<p>瑞了瑞了！！！</p>\n<h3 id=\"有垣曰苑，无垣曰囿😉😉\"><a href=\"#有垣曰苑，无垣曰囿😉😉\" class=\"headerlink\" title=\"有垣曰苑，无垣曰囿😉😉\"></a>有垣曰苑，无垣曰囿😉😉</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>夜归临皋</font> <font size=2>苏轼</font></p>\n<p><strong>夜饮东坡醒复醉，</strong></p>\n<p><em>归来仿佛三更。</em></p>\n<p><strong>家童鼻息已雷鸣。</strong></p>\n<p><em>敲门都不应，</em></p>\n<p><strong>倚杖听江声。</strong></p>\n<p><em>长恨此身非我有，</em></p>\n<p><strong>何时忘却营营？</strong></p>\n<p><em>夜阑风静彀纹平。</em></p>\n<p><strong>小舟从此逝，</strong></p>\n<p><em>江海寄余生。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-学习二\"><a href=\"#CSS-学习二\" class=\"headerlink\" title=\"CSS 学习二\"></a>CSS 学习二</h2><p>继续</p>\n<h3 id=\"CSS-单位\"><a href=\"#CSS-单位\" class=\"headerlink\" title=\"CSS 单位\"></a>CSS 单位</h3><h4 id=\"相对长度\"><a href=\"#相对长度\" class=\"headerlink\" title=\"相对长度\"></a>相对长度</h4><ul>\n<li><code>em</code>：当前元素的字体尺寸</li>\n<li><code>ex</code>：英文字母小x的高度</li>\n<li><code>ch</code>：数字0的高度</li>\n<li><code>vw</code>：视窗宽度，1vm=视窗宽度的1%</li>\n<li><code>vh</code>：视窗高度，1vm=视窗高度的1%</li>\n<li><code>vmin</code>：vm和vh中较小的那个</li>\n<li><code>vmax</code>：vm和vh中较大的那个</li>\n<li><code>%</code>：😁😁😁</li>\n</ul>\n<h4 id=\"绝对长度\"><a href=\"#绝对长度\" class=\"headerlink\" title=\"绝对长度\"></a>绝对长度</h4><ul>\n<li><code>cm</code>：厘米</li>\n<li><code>mm</code>：毫米</li>\n<li><code>in</code>：英寸</li>\n<li><code>px</code>：像素</li>\n<li><code>pt</code>：1pt = 1/72in</li>\n<li><code>pc</code>：1pc = 12 pt</li>\n</ul>\n<h3 id=\"CSS-Text\"><a href=\"#CSS-Text\" class=\"headerlink\" title=\"CSS Text\"></a>CSS Text</h3><ul>\n<li><p><code>color</code>：设置文本颜色</p>\n</li>\n<li><p><code>direction</code>：设置文字方向</p>\n<ul>\n<li><code>ltr</code>：从左向右（默认）</li>\n<li><code>rtl</code>：从右向左</li>\n<li><code>ingerit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>letter-spacing</code>：设置字符间距</p>\n<ul>\n<li><code>noraml</code>：字符间没有额外的空间</li>\n<li><code>length</code>：使用固定空间（可以为负值）</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>line-height</code>：设置行间距</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>number</code>：设置数字，会与字体尺寸相乘得到行间距</li>\n<li><code>length</code>：固定值</li>\n<li><code>%</code>：字体尺寸的百分比为行间距</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-align</code>：文本的水平对齐方式</p>\n<ul>\n<li><code>left</code>：左对齐（默认）</li>\n<li><code>right</code>：右对齐</li>\n<li><code>center</code>：居中</li>\n<li><code>justify</code>：两端对齐</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-decoration</code>：添加文本修饰</p>\n<ul>\n<li><code>none</code>：无修饰（默认）</li>\n<li><code>underline</code>：下划线</li>\n<li><code>overline</code>：上划线</li>\n<li><code>line-through</code>：删除线</li>\n<li><code>blink</code>：闪烁效果</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-indent</code>：首行缩进</p>\n<ul>\n<li><code>length</code>：固定缩进</li>\n<li><code>%</code>：基于父元素宽度的百分比缩进</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>text-shadow</code>：文本阴影</p>\n<ul>\n<li><code>h-shadow</code>：必需，允许负值，水平阴影位置</li>\n<li><code>v-shadow</code>：必需，允许负值，垂直阴影位置</li>\n<li><code>blur</code>：模糊的距离</li>\n<li><code>color</code>：阴影的颜色</li>\n</ul>\n</li>\n<li><p><code>text-transform</code>：字母样式</p>\n<ul>\n<li><code>none</code>：默认</li>\n<li><code>capitalize</code>：每个单词以大写字母开头</li>\n<li><code>uppercase</code>：全部大写</li>\n<li><code>lowercase</code>：全部小写</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>unicode-bidi</code>：是否重写文本，需要配合<code>direction</code>使用</p>\n<ul>\n<li><code>normal</code>：默认</li>\n<li><code>embed</code>：创建一个附加的嵌入层面</li>\n<li><code>bidi-override</code>：创建一个附加的嵌入层面，按照<code>direction</code>属性重新排序</li>\n<li><code>initial</code>：设置默认值</li>\n<li><code>inherit</code>：继承父元素<br>这里<code>embed</code>属性和<code>normal</code>属性如果单独使用，最终样式看来是没有区别的。<br>但是<code>embed</code>会创建一个附加的嵌入层面，因为在<code>bidi-override</code>属性值里面，<code>normal</code>是不会起作用的，因为<code>bidi-override</code>也创建了一个嵌入层面，这个时候就可以使用<code>embed</code>了</li>\n</ul>\n</li>\n<li><p><code>vertical-align</code>：文本的垂直对齐方式</p>\n<ul>\n<li><code>baseline</code>：默认</li>\n<li><code>sub</code>：垂直对齐文本下标</li>\n<li><code>super</code>：垂直对齐文本上标</li>\n<li><code>top</code>：元素顶端与行中最高元素的顶端对齐</li>\n<li><code>text-top</code>：元素顶端与父元素字体的顶端对齐</li>\n<li><code>middle</code>：元素放于父元素的中部</li>\n<li><code>bottom</code>：使元素及其后代元素的底部与整行的底部对齐</li>\n<li><code>text-bottom</code>：元素底端与父元素字体的底端对齐</li>\n<li><code>length</code>：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。</li>\n<li><code>%</code>：使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><p><code>white-space</code>：空白处理方式</p>\n<ul>\n<li><p><code>noraml</code>：连续的空白符会被合并，换行符会被当作空白符来处理</p>\n</li>\n<li><p><code>nowwrap</code>：和 normal 一样，连续的空白符会被合并。但文本内的换行无效</p>\n</li>\n<li><p><code>pre</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-wrap</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p>\n</li>\n<li><p><code>pre-line</code>：连续的空白符会被合并。在遇到换行符或者<code>&lt;br&gt;</code>元素时会换行</p>\n</li>\n<li><p><code>inherit</code>：继承父元素</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>换行符</th>\n<th>空格和制表符</th>\n<th>文字换行</th>\n<th>行尾空格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>normal</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>nowwrap</code></td>\n<td>合并</td>\n<td>合并</td>\n<td>不换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td><code>pre</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>不换行</td>\n<td>保留</td>\n</tr>\n<tr>\n<td><code>pre-wrap</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>挂起</td>\n</tr>\n<tr>\n<td><code>pre-line</code></td>\n<td>保留</td>\n<td>保留</td>\n<td>换行</td>\n<td>换行</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p><code>word-spacing</code>：字间距</p>\n<ul>\n<li><code>normal</code>：默认，使用标准空间</li>\n<li><code>length</code>：使用指定空间</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n</ul>\n<p>瑞了瑞了！！！</p>\n<h3 id=\"有垣曰苑，无垣曰囿😉😉\"><a href=\"#有垣曰苑，无垣曰囿😉😉\" class=\"headerlink\" title=\"有垣曰苑，无垣曰囿😉😉\"></a>有垣曰苑，无垣曰囿😉😉</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>夜归临皋</font> <font size=2>苏轼</font></p>\n<p><strong>夜饮东坡醒复醉，</strong></p>\n<p><em>归来仿佛三更。</em></p>\n<p><strong>家童鼻息已雷鸣。</strong></p>\n<p><em>敲门都不应，</em></p>\n<p><strong>倚杖听江声。</strong></p>\n<p><em>长恨此身非我有，</em></p>\n<p><strong>何时忘却营营？</strong></p>\n<p><em>夜阑风静彀纹平。</em></p>\n<p><strong>小舟从此逝，</strong></p>\n<p><em>江海寄余生。</em></p>\n"},{"title":"css学习四","date":"2022-04-09T02:00:37.000Z","_content":"\n继续\n\n### outline\n\n设置轮廓属性，不占用空间\n\n- `outline-color`：轮廓颜色\n- `out-style`：样式\n  - `none`：默认，不设置样式\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n- `out-width`：轮廓宽带\n\n### display visibility\n\n`display`设置一个元素如何显示，设置`none`时，元素会被隐藏且不占用空间，但是不会被继承\n`visibility`知道一个元素可见还是隐藏，设置为`hidden`时，元素会被隐藏但空间仍被占用，可以被继承\n\n#### display属性\n\n- `block`：会独占一行，多个元素会另起一行，可以设置`width`、`height`、`margin`、`padding`属性\n- `inline`：不会独占一行，设置`width`、`height`属性无效，可以设置水平方向的`margin`和`padding`属性，不能设置垂直方向的`padding`和`margin`\n- `inline-block`：将对象设置为`inline`对象，但对象的内容作为`block`对象呈现，之后的内联对象会被排列在同一行内。\n\n#### 行内元素和块级元素\n\n- 行内元素\n  - 设置宽度无效\n  - 可以设置水平方向的`margin`和`padding`属性，但不能设置垂直方向的`padding`和`margin`属性\n  - 不会自动换行\n- 块级元素\n  - 可以设置宽度\n  - 设置`margin`和`padding`都可以\n  - 可以自动换行\n  - 多个块级元素，默认排列从上到下\n\n### position\n\n`absolute`：生成绝对定位的元素，相对于`static`定位以外的一个父元素进行定位。\n元素的位置通过`left、top、right、bottom`属性进行规定。\n浏览器会递归查找该元素的所有父元素，如果找到了设置`position：relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位\n\n`relative`：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过`left、top、right、bottom`属性进行规定。`relative`永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。\n\n`fiexd`：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位\n\n`static`：默认值，没有定位，会忽略`top、bottom、left、rioght`或者`z-index`属性。块级元素从上往下排布，行级元素从左到右排列\n\n#### absolute和fixed比较\n\n共同点：\n\n- 改变行内元素的呈现方式，将`display`置为`inline-block`\n- 使元素脱离普通文档流，不再占用文档物理空间\n- 覆盖非定位文档元素\n不同点：\n\n- `absolute`和`fixed`根元素不同，`absolute`的根元素可以设置，`fixed`的根元素是浏览器\n- 在有滚动条的页面中，a`bsolute`会跟着父元素移动，`fiexd`固定在页面的具体位置不变\n\n### display float position 关系\n\n- 首先判断`display`属性是否为`none`，如果为`none`，则`position`和`float`属性的值不影响元素最后的表现\n- 然后判断`position`的值是否为`absolute`或者fixed，如果是，则`float`属性失效，并且`displa`y的值应该被设置为`table`或者`block`\n- 如果`position`的值补位`absolute`或者`fixed`，则判断`float`属性的值是否为`none`，如果不是，则`display`的值则按上面的规则转换。注意，如果`position`的值为`relative`并且`float`属性的值存在，则`relative`相对于浮动后的最终位置定位\n- 如果`float`的值为`none`，则判断元素是否为根元素，如果是根元素则`display`属性按照上面的规则转换，如果不是，则保持指定的`display`属性值不变\n\n总的来说，可以把它看作是类似优先级的机制，`position:absolute`和`position:fixed`优先级最高，有它存在对的时候，浮动不起作用，`display`的值也需要调整。其次，元素的`float`特性的值不是`none`的时候或者它是根元素的时候，调整`display`的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，`display`特性值同设置值\n\n### 一与人同，未免屈意以循之😜😜😜\n\n**<font size=4>临江仙</font>** <font size=1>送钱穆父</font> <font size=2>苏轼</font>\n\n**一别都门三改火，**\n\n*天涯踏尽红尘。*\n\n**依然一笑作春温，**\n\n*无波真古井，*\n\n**有节是秋筠。**\n\n*惆怅孤帆连夜发，*\n\n**送行淡月微云。**\n\n*尊前不用翠眉颦。*\n\n**人生如逆旅，**\n\n*我亦是行人。*\n","source":"_posts/css学习四.md","raw":"---\ntitle: css学习四\ndate: 2022-04-09 10:00:37\ntags:\n  - css\ncategories: [前端]\n---\n\n继续\n\n### outline\n\n设置轮廓属性，不占用空间\n\n- `outline-color`：轮廓颜色\n- `out-style`：样式\n  - `none`：默认，不设置样式\n  - `dotted`：点状\n  - `dashed`：虚线\n  - `solid`：实线\n  - `double`：双实线\n  - `groove`：3D凹槽\n  - `ridge`：3D垄状\n  - `inset`：陷入\n  - `ouset`：突出\n  - `inherit`：继承父元素\n- `out-width`：轮廓宽带\n\n### display visibility\n\n`display`设置一个元素如何显示，设置`none`时，元素会被隐藏且不占用空间，但是不会被继承\n`visibility`知道一个元素可见还是隐藏，设置为`hidden`时，元素会被隐藏但空间仍被占用，可以被继承\n\n#### display属性\n\n- `block`：会独占一行，多个元素会另起一行，可以设置`width`、`height`、`margin`、`padding`属性\n- `inline`：不会独占一行，设置`width`、`height`属性无效，可以设置水平方向的`margin`和`padding`属性，不能设置垂直方向的`padding`和`margin`\n- `inline-block`：将对象设置为`inline`对象，但对象的内容作为`block`对象呈现，之后的内联对象会被排列在同一行内。\n\n#### 行内元素和块级元素\n\n- 行内元素\n  - 设置宽度无效\n  - 可以设置水平方向的`margin`和`padding`属性，但不能设置垂直方向的`padding`和`margin`属性\n  - 不会自动换行\n- 块级元素\n  - 可以设置宽度\n  - 设置`margin`和`padding`都可以\n  - 可以自动换行\n  - 多个块级元素，默认排列从上到下\n\n### position\n\n`absolute`：生成绝对定位的元素，相对于`static`定位以外的一个父元素进行定位。\n元素的位置通过`left、top、right、bottom`属性进行规定。\n浏览器会递归查找该元素的所有父元素，如果找到了设置`position：relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位\n\n`relative`：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过`left、top、right、bottom`属性进行规定。`relative`永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。\n\n`fiexd`：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位\n\n`static`：默认值，没有定位，会忽略`top、bottom、left、rioght`或者`z-index`属性。块级元素从上往下排布，行级元素从左到右排列\n\n#### absolute和fixed比较\n\n共同点：\n\n- 改变行内元素的呈现方式，将`display`置为`inline-block`\n- 使元素脱离普通文档流，不再占用文档物理空间\n- 覆盖非定位文档元素\n不同点：\n\n- `absolute`和`fixed`根元素不同，`absolute`的根元素可以设置，`fixed`的根元素是浏览器\n- 在有滚动条的页面中，a`bsolute`会跟着父元素移动，`fiexd`固定在页面的具体位置不变\n\n### display float position 关系\n\n- 首先判断`display`属性是否为`none`，如果为`none`，则`position`和`float`属性的值不影响元素最后的表现\n- 然后判断`position`的值是否为`absolute`或者fixed，如果是，则`float`属性失效，并且`displa`y的值应该被设置为`table`或者`block`\n- 如果`position`的值补位`absolute`或者`fixed`，则判断`float`属性的值是否为`none`，如果不是，则`display`的值则按上面的规则转换。注意，如果`position`的值为`relative`并且`float`属性的值存在，则`relative`相对于浮动后的最终位置定位\n- 如果`float`的值为`none`，则判断元素是否为根元素，如果是根元素则`display`属性按照上面的规则转换，如果不是，则保持指定的`display`属性值不变\n\n总的来说，可以把它看作是类似优先级的机制，`position:absolute`和`position:fixed`优先级最高，有它存在对的时候，浮动不起作用，`display`的值也需要调整。其次，元素的`float`特性的值不是`none`的时候或者它是根元素的时候，调整`display`的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，`display`特性值同设置值\n\n### 一与人同，未免屈意以循之😜😜😜\n\n**<font size=4>临江仙</font>** <font size=1>送钱穆父</font> <font size=2>苏轼</font>\n\n**一别都门三改火，**\n\n*天涯踏尽红尘。*\n\n**依然一笑作春温，**\n\n*无波真古井，*\n\n**有节是秋筠。**\n\n*惆怅孤帆连夜发，*\n\n**送行淡月微云。**\n\n*尊前不用翠眉颦。*\n\n**人生如逆旅，**\n\n*我亦是行人。*\n","slug":"css学习四","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1e005fhgac1sr36z7l","content":"<p>继续</p>\n<h3 id=\"outline\"><a href=\"#outline\" class=\"headerlink\" title=\"outline\"></a>outline</h3><p>设置轮廓属性，不占用空间</p>\n<ul>\n<li><code>outline-color</code>：轮廓颜色</li>\n<li><code>out-style</code>：样式<ul>\n<li><code>none</code>：默认，不设置样式</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><code>out-width</code>：轮廓宽带</li>\n</ul>\n<h3 id=\"display-visibility\"><a href=\"#display-visibility\" class=\"headerlink\" title=\"display visibility\"></a>display visibility</h3><p><code>display</code>设置一个元素如何显示，设置<code>none</code>时，元素会被隐藏且不占用空间，但是不会被继承<br><code>visibility</code>知道一个元素可见还是隐藏，设置为<code>hidden</code>时，元素会被隐藏但空间仍被占用，可以被继承</p>\n<h4 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h4><ul>\n<li><code>block</code>：会独占一行，多个元素会另起一行，可以设置<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>属性</li>\n<li><code>inline</code>：不会独占一行，设置<code>width</code>、<code>height</code>属性无效，可以设置水平方向的<code>margin</code>和<code>padding</code>属性，不能设置垂直方向的<code>padding</code>和<code>margin</code></li>\n<li><code>inline-block</code>：将对象设置为<code>inline</code>对象，但对象的内容作为<code>block</code>对象呈现，之后的内联对象会被排列在同一行内。</li>\n</ul>\n<h4 id=\"行内元素和块级元素\"><a href=\"#行内元素和块级元素\" class=\"headerlink\" title=\"行内元素和块级元素\"></a>行内元素和块级元素</h4><ul>\n<li>行内元素<ul>\n<li>设置宽度无效</li>\n<li>可以设置水平方向的<code>margin</code>和<code>padding</code>属性，但不能设置垂直方向的<code>padding</code>和<code>margin</code>属性</li>\n<li>不会自动换行</li>\n</ul>\n</li>\n<li>块级元素<ul>\n<li>可以设置宽度</li>\n<li>设置<code>margin</code>和<code>padding</code>都可以</li>\n<li>可以自动换行</li>\n<li>多个块级元素，默认排列从上到下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h3><p><code>absolute</code>：生成绝对定位的元素，相对于<code>static</code>定位以外的一个父元素进行定位。<br>元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<br>浏览器会递归查找该元素的所有父元素，如果找到了设置<code>position：relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位</p>\n<p><code>relative</code>：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<code>relative</code>永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。</p>\n<p><code>fiexd</code>：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位</p>\n<p><code>static</code>：默认值，没有定位，会忽略<code>top、bottom、left、rioght</code>或者<code>z-index</code>属性。块级元素从上往下排布，行级元素从左到右排列</p>\n<h4 id=\"absolute和fixed比较\"><a href=\"#absolute和fixed比较\" class=\"headerlink\" title=\"absolute和fixed比较\"></a>absolute和fixed比较</h4><p>共同点：</p>\n<ul>\n<li><p>改变行内元素的呈现方式，将<code>display</code>置为<code>inline-block</code></p>\n</li>\n<li><p>使元素脱离普通文档流，不再占用文档物理空间</p>\n</li>\n<li><p>覆盖非定位文档元素<br>不同点：</p>\n</li>\n<li><p><code>absolute</code>和<code>fixed</code>根元素不同，<code>absolute</code>的根元素可以设置，<code>fixed</code>的根元素是浏览器</p>\n</li>\n<li><p>在有滚动条的页面中，a<code>bsolute</code>会跟着父元素移动，<code>fiexd</code>固定在页面的具体位置不变</p>\n</li>\n</ul>\n<h3 id=\"display-float-position-关系\"><a href=\"#display-float-position-关系\" class=\"headerlink\" title=\"display float position 关系\"></a>display float position 关系</h3><ul>\n<li>首先判断<code>display</code>属性是否为<code>none</code>，如果为<code>none</code>，则<code>position</code>和<code>float</code>属性的值不影响元素最后的表现</li>\n<li>然后判断<code>position</code>的值是否为<code>absolute</code>或者fixed，如果是，则<code>float</code>属性失效，并且<code>displa</code>y的值应该被设置为<code>table</code>或者<code>block</code></li>\n<li>如果<code>position</code>的值补位<code>absolute</code>或者<code>fixed</code>，则判断<code>float</code>属性的值是否为<code>none</code>，如果不是，则<code>display</code>的值则按上面的规则转换。注意，如果<code>position</code>的值为<code>relative</code>并且<code>float</code>属性的值存在，则<code>relative</code>相对于浮动后的最终位置定位</li>\n<li>如果<code>float</code>的值为<code>none</code>，则判断元素是否为根元素，如果是根元素则<code>display</code>属性按照上面的规则转换，如果不是，则保持指定的<code>display</code>属性值不变</li>\n</ul>\n<p>总的来说，可以把它看作是类似优先级的机制，<code>position:absolute</code>和<code>position:fixed</code>优先级最高，有它存在对的时候，浮动不起作用，<code>display</code>的值也需要调整。其次，元素的<code>float</code>特性的值不是<code>none</code>的时候或者它是根元素的时候，调整<code>display</code>的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，<code>display</code>特性值同设置值</p>\n<h3 id=\"一与人同，未免屈意以循之😜😜😜\"><a href=\"#一与人同，未免屈意以循之😜😜😜\" class=\"headerlink\" title=\"一与人同，未免屈意以循之😜😜😜\"></a>一与人同，未免屈意以循之😜😜😜</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>送钱穆父</font> <font size=2>苏轼</font></p>\n<p><strong>一别都门三改火，</strong></p>\n<p><em>天涯踏尽红尘。</em></p>\n<p><strong>依然一笑作春温，</strong></p>\n<p><em>无波真古井，</em></p>\n<p><strong>有节是秋筠。</strong></p>\n<p><em>惆怅孤帆连夜发，</em></p>\n<p><strong>送行淡月微云。</strong></p>\n<p><em>尊前不用翠眉颦。</em></p>\n<p><strong>人生如逆旅，</strong></p>\n<p><em>我亦是行人。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>继续</p>\n<h3 id=\"outline\"><a href=\"#outline\" class=\"headerlink\" title=\"outline\"></a>outline</h3><p>设置轮廓属性，不占用空间</p>\n<ul>\n<li><code>outline-color</code>：轮廓颜色</li>\n<li><code>out-style</code>：样式<ul>\n<li><code>none</code>：默认，不设置样式</li>\n<li><code>dotted</code>：点状</li>\n<li><code>dashed</code>：虚线</li>\n<li><code>solid</code>：实线</li>\n<li><code>double</code>：双实线</li>\n<li><code>groove</code>：3D凹槽</li>\n<li><code>ridge</code>：3D垄状</li>\n<li><code>inset</code>：陷入</li>\n<li><code>ouset</code>：突出</li>\n<li><code>inherit</code>：继承父元素</li>\n</ul>\n</li>\n<li><code>out-width</code>：轮廓宽带</li>\n</ul>\n<h3 id=\"display-visibility\"><a href=\"#display-visibility\" class=\"headerlink\" title=\"display visibility\"></a>display visibility</h3><p><code>display</code>设置一个元素如何显示，设置<code>none</code>时，元素会被隐藏且不占用空间，但是不会被继承<br><code>visibility</code>知道一个元素可见还是隐藏，设置为<code>hidden</code>时，元素会被隐藏但空间仍被占用，可以被继承</p>\n<h4 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h4><ul>\n<li><code>block</code>：会独占一行，多个元素会另起一行，可以设置<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>属性</li>\n<li><code>inline</code>：不会独占一行，设置<code>width</code>、<code>height</code>属性无效，可以设置水平方向的<code>margin</code>和<code>padding</code>属性，不能设置垂直方向的<code>padding</code>和<code>margin</code></li>\n<li><code>inline-block</code>：将对象设置为<code>inline</code>对象，但对象的内容作为<code>block</code>对象呈现，之后的内联对象会被排列在同一行内。</li>\n</ul>\n<h4 id=\"行内元素和块级元素\"><a href=\"#行内元素和块级元素\" class=\"headerlink\" title=\"行内元素和块级元素\"></a>行内元素和块级元素</h4><ul>\n<li>行内元素<ul>\n<li>设置宽度无效</li>\n<li>可以设置水平方向的<code>margin</code>和<code>padding</code>属性，但不能设置垂直方向的<code>padding</code>和<code>margin</code>属性</li>\n<li>不会自动换行</li>\n</ul>\n</li>\n<li>块级元素<ul>\n<li>可以设置宽度</li>\n<li>设置<code>margin</code>和<code>padding</code>都可以</li>\n<li>可以自动换行</li>\n<li>多个块级元素，默认排列从上到下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h3><p><code>absolute</code>：生成绝对定位的元素，相对于<code>static</code>定位以外的一个父元素进行定位。<br>元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<br>浏览器会递归查找该元素的所有父元素，如果找到了设置<code>position：relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位</p>\n<p><code>relative</code>：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<code>relative</code>永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。</p>\n<p><code>fiexd</code>：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位</p>\n<p><code>static</code>：默认值，没有定位，会忽略<code>top、bottom、left、rioght</code>或者<code>z-index</code>属性。块级元素从上往下排布，行级元素从左到右排列</p>\n<h4 id=\"absolute和fixed比较\"><a href=\"#absolute和fixed比较\" class=\"headerlink\" title=\"absolute和fixed比较\"></a>absolute和fixed比较</h4><p>共同点：</p>\n<ul>\n<li><p>改变行内元素的呈现方式，将<code>display</code>置为<code>inline-block</code></p>\n</li>\n<li><p>使元素脱离普通文档流，不再占用文档物理空间</p>\n</li>\n<li><p>覆盖非定位文档元素<br>不同点：</p>\n</li>\n<li><p><code>absolute</code>和<code>fixed</code>根元素不同，<code>absolute</code>的根元素可以设置，<code>fixed</code>的根元素是浏览器</p>\n</li>\n<li><p>在有滚动条的页面中，a<code>bsolute</code>会跟着父元素移动，<code>fiexd</code>固定在页面的具体位置不变</p>\n</li>\n</ul>\n<h3 id=\"display-float-position-关系\"><a href=\"#display-float-position-关系\" class=\"headerlink\" title=\"display float position 关系\"></a>display float position 关系</h3><ul>\n<li>首先判断<code>display</code>属性是否为<code>none</code>，如果为<code>none</code>，则<code>position</code>和<code>float</code>属性的值不影响元素最后的表现</li>\n<li>然后判断<code>position</code>的值是否为<code>absolute</code>或者fixed，如果是，则<code>float</code>属性失效，并且<code>displa</code>y的值应该被设置为<code>table</code>或者<code>block</code></li>\n<li>如果<code>position</code>的值补位<code>absolute</code>或者<code>fixed</code>，则判断<code>float</code>属性的值是否为<code>none</code>，如果不是，则<code>display</code>的值则按上面的规则转换。注意，如果<code>position</code>的值为<code>relative</code>并且<code>float</code>属性的值存在，则<code>relative</code>相对于浮动后的最终位置定位</li>\n<li>如果<code>float</code>的值为<code>none</code>，则判断元素是否为根元素，如果是根元素则<code>display</code>属性按照上面的规则转换，如果不是，则保持指定的<code>display</code>属性值不变</li>\n</ul>\n<p>总的来说，可以把它看作是类似优先级的机制，<code>position:absolute</code>和<code>position:fixed</code>优先级最高，有它存在对的时候，浮动不起作用，<code>display</code>的值也需要调整。其次，元素的<code>float</code>特性的值不是<code>none</code>的时候或者它是根元素的时候，调整<code>display</code>的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，<code>display</code>特性值同设置值</p>\n<h3 id=\"一与人同，未免屈意以循之😜😜😜\"><a href=\"#一与人同，未免屈意以循之😜😜😜\" class=\"headerlink\" title=\"一与人同，未免屈意以循之😜😜😜\"></a>一与人同，未免屈意以循之😜😜😜</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>送钱穆父</font> <font size=2>苏轼</font></p>\n<p><strong>一别都门三改火，</strong></p>\n<p><em>天涯踏尽红尘。</em></p>\n<p><strong>依然一笑作春温，</strong></p>\n<p><em>无波真古井，</em></p>\n<p><strong>有节是秋筠。</strong></p>\n<p><em>惆怅孤帆连夜发，</em></p>\n<p><strong>送行淡月微云。</strong></p>\n<p><em>尊前不用翠眉颦。</em></p>\n<p><strong>人生如逆旅，</strong></p>\n<p><em>我亦是行人。</em></p>\n"},{"title":"html+js实现多文件上传、预览","date":"2023-04-07T07:21:34.000Z","_content":"\n## html+js实现多文件上传、预览\n\n当我们需要上传图片时，一般是通过文件上传的方式上传图片到服务器，但有时候我们需要在上传之前预览图片，以便查看是否选择了正确的图片或者调整裁剪等。这时我们就需要用到前端技术来实现图片预览功能。\n下面将介绍如何使用 HTML、CSS 和 JavaScript 实现文件上传和图片预览的功能，具体实现如下。\n\n### 文件上传表单和预览区\n\n首先，我们需要一个文件上传表单和一个预览区域。文件上传表单可以使用标准的 HTML `<form>`标签实现，如下所示：\n\n```Html\n<form action=\"#\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\" multiple>\n    <input type=\"submit\" value=\"上传文件\">\n</form>\n```\n\n这个表单包含一个文件选择框和一个提交按钮，用户可以通过文件选择框选择要上传的文件并点击提交按钮上传。\n为了实现预览功能，我们还需要一个预览区域，用于在上传文件之前显示选择的图像文件。预览区域可以使用一个空的 `<div>`元素实现，如下所示：\n\n```Html\n<!-- 图像预览区域 -->\n<div id=\"imagePreviews\"></div>\n```\n\n在这个示例中，我们将预览区域的 ID 设置为`imagePreview`。\n\n### CSS样式\n\n为预览区域定义一些基本的 CSS 样式，并确保它的大小和文件上传框的大小相同，如下所示\n\n```Css\n#imagePreview {\n    width: 200px;\n    height: 200px;\n    margin-top: 20px;\n    background-color: #eee;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center center;\n}\n```\n\n这个 CSS 样式定义了预览区域的宽度、高度、边距、背景颜色和背景图像属性，使其以一种较为合理的方式呈现预览图片。在这个示例中，我们将预览区域的大小设置为 200 x 200 像素，并将背景颜色设置为浅灰色\n\n### JavaScript 实现文件上传和预览\n\n现在，我们需要一些 JavaScript 代码来实现文件上传和图像预览的功能\n\n```JavaScript\n// 获取文件上传表单中的 input 元素\nvar fileInput = document.getElementById('fileToUpload');\n// 监听 input 元素的 onchange 事件\nfileInput.addEventListener('change', function(event) {\n// 获取上传的文件\nvar file = event.target.files[0];\n// 如果上传的文件是图像文件，则进行预览\nif (file.type.match('image.*')) {\n    var reader = new FileReader();\n    // 将图像文件转换为 Data URL\n    reader.readAsDataURL(file);\n    // 当读取完成时，显示预览图像\n    reader.onload = function() {\n    var imagePreview = document.getElementById('imagePreview');\n    imagePreview.style.backgroundImage = 'url(' + reader.result + ')';\n    }\n}\n});\n```\n\n这个示例代码使用了`JavaScript`监听文件上传表单中的`input`元素的`onChange`事件。在事件回调函数中，我们判断上传的文件是否为图像文件，如果是，则创建一个新的 FileReader 对象，并调用它的`readAsDataURL`方法将文件转换为 Data URL。最后，我们使用 Image 的 CSS 属性将 Data URL 应用到预览区域的背景图片上，以显示图像预览。\n\n### 实现多文件上传和预览\n\n如果需要同时上传多个文件并预览它们，可以使用`multiple`属性将输入框设置为多选模式，并稍加修改 JavaScript 代码来处理多个文件。\n以下是针对多文件上传和预览的JavaScript和CSS代码：\n\n```JavaScript\n// 获取文件上传表单中的 input 元素\nvar fileInput = document.getElementById('fileToUpload');\n// 监听 input 元素的 onchange 事件\nfileInput.addEventListener('change', function(event) {\n  // 获取上传的文件\n  var files = event.target.files;\n  // 如果上传的文件是图像文件，则进行预览\n  for (var i = 0; i < files.length; i++) {\n    if (files[i].type.match('image.*')) {\n      var reader = new FileReader();\n      // 使用闭包保存每个 reader 对象的状态\n      (function(reader) {\n        // 将图像文件转换为 Data URL\n        reader.readAsDataURL(files[i]);\n        // 当读取完成时，显示预览图像\n        reader.onload = function() {\n          var imagePreviews = document.getElementById('imagePreviews');\n          // 创建预览图像的容器和图像元素\n          var previewContainer = document.createElement('div');\n          previewContainer.classList.add('image-preview');\n          var previewImage = document.createElement('img');\n          previewImage.src = reader.result;\n          // 将图像元素添加到容器中，并将容器添加到预览区域中\n          previewContainer.appendChild(previewImage);\n          imagePreviews.appendChild(previewContainer);\n        }\n      })(reader);\n    }\n  }\n});\n```\n\n```Css\n.image-preview {\n    width: 200px;\n    height: 200px;\n    margin: 10px;\n    background-color: #eee;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center center;\n}\n```\n\n这个修改后的代码使用了一个`for`循环来迭代每个上传的文件。对于每个图像文件，我们创建一个新的`FileReader`对象并调用它的`readAsDataURL`方法将文件转换为 Data URL。最后，我们创建一个图片`img`元素，将 Data URL 设置为其源属性，并将图片元素包装在一个`<div>`元素中添加到预览区域中。\n同时使用了一个闭包来保存每个 reader 对象的状态。在每个循环中，用一个匿名函数包装`reader`对象，以便在读取完成事件回调函数中访问正确的数据。这样每个`reader`对象的状态就不会在过程中被覆盖，每个图像文件都可以正确地显示预览了\n","source":"_posts/html-js实现多文件上传、预览.md","raw":"---\ntitle: html+js实现多文件上传、预览\ndate: 2023-04-07 15:21:34\ntags: \n\t- 文件上传\ncategories: \n\t[前端,HTML]\n---\n\n## html+js实现多文件上传、预览\n\n当我们需要上传图片时，一般是通过文件上传的方式上传图片到服务器，但有时候我们需要在上传之前预览图片，以便查看是否选择了正确的图片或者调整裁剪等。这时我们就需要用到前端技术来实现图片预览功能。\n下面将介绍如何使用 HTML、CSS 和 JavaScript 实现文件上传和图片预览的功能，具体实现如下。\n\n### 文件上传表单和预览区\n\n首先，我们需要一个文件上传表单和一个预览区域。文件上传表单可以使用标准的 HTML `<form>`标签实现，如下所示：\n\n```Html\n<form action=\"#\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\" multiple>\n    <input type=\"submit\" value=\"上传文件\">\n</form>\n```\n\n这个表单包含一个文件选择框和一个提交按钮，用户可以通过文件选择框选择要上传的文件并点击提交按钮上传。\n为了实现预览功能，我们还需要一个预览区域，用于在上传文件之前显示选择的图像文件。预览区域可以使用一个空的 `<div>`元素实现，如下所示：\n\n```Html\n<!-- 图像预览区域 -->\n<div id=\"imagePreviews\"></div>\n```\n\n在这个示例中，我们将预览区域的 ID 设置为`imagePreview`。\n\n### CSS样式\n\n为预览区域定义一些基本的 CSS 样式，并确保它的大小和文件上传框的大小相同，如下所示\n\n```Css\n#imagePreview {\n    width: 200px;\n    height: 200px;\n    margin-top: 20px;\n    background-color: #eee;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center center;\n}\n```\n\n这个 CSS 样式定义了预览区域的宽度、高度、边距、背景颜色和背景图像属性，使其以一种较为合理的方式呈现预览图片。在这个示例中，我们将预览区域的大小设置为 200 x 200 像素，并将背景颜色设置为浅灰色\n\n### JavaScript 实现文件上传和预览\n\n现在，我们需要一些 JavaScript 代码来实现文件上传和图像预览的功能\n\n```JavaScript\n// 获取文件上传表单中的 input 元素\nvar fileInput = document.getElementById('fileToUpload');\n// 监听 input 元素的 onchange 事件\nfileInput.addEventListener('change', function(event) {\n// 获取上传的文件\nvar file = event.target.files[0];\n// 如果上传的文件是图像文件，则进行预览\nif (file.type.match('image.*')) {\n    var reader = new FileReader();\n    // 将图像文件转换为 Data URL\n    reader.readAsDataURL(file);\n    // 当读取完成时，显示预览图像\n    reader.onload = function() {\n    var imagePreview = document.getElementById('imagePreview');\n    imagePreview.style.backgroundImage = 'url(' + reader.result + ')';\n    }\n}\n});\n```\n\n这个示例代码使用了`JavaScript`监听文件上传表单中的`input`元素的`onChange`事件。在事件回调函数中，我们判断上传的文件是否为图像文件，如果是，则创建一个新的 FileReader 对象，并调用它的`readAsDataURL`方法将文件转换为 Data URL。最后，我们使用 Image 的 CSS 属性将 Data URL 应用到预览区域的背景图片上，以显示图像预览。\n\n### 实现多文件上传和预览\n\n如果需要同时上传多个文件并预览它们，可以使用`multiple`属性将输入框设置为多选模式，并稍加修改 JavaScript 代码来处理多个文件。\n以下是针对多文件上传和预览的JavaScript和CSS代码：\n\n```JavaScript\n// 获取文件上传表单中的 input 元素\nvar fileInput = document.getElementById('fileToUpload');\n// 监听 input 元素的 onchange 事件\nfileInput.addEventListener('change', function(event) {\n  // 获取上传的文件\n  var files = event.target.files;\n  // 如果上传的文件是图像文件，则进行预览\n  for (var i = 0; i < files.length; i++) {\n    if (files[i].type.match('image.*')) {\n      var reader = new FileReader();\n      // 使用闭包保存每个 reader 对象的状态\n      (function(reader) {\n        // 将图像文件转换为 Data URL\n        reader.readAsDataURL(files[i]);\n        // 当读取完成时，显示预览图像\n        reader.onload = function() {\n          var imagePreviews = document.getElementById('imagePreviews');\n          // 创建预览图像的容器和图像元素\n          var previewContainer = document.createElement('div');\n          previewContainer.classList.add('image-preview');\n          var previewImage = document.createElement('img');\n          previewImage.src = reader.result;\n          // 将图像元素添加到容器中，并将容器添加到预览区域中\n          previewContainer.appendChild(previewImage);\n          imagePreviews.appendChild(previewContainer);\n        }\n      })(reader);\n    }\n  }\n});\n```\n\n```Css\n.image-preview {\n    width: 200px;\n    height: 200px;\n    margin: 10px;\n    background-color: #eee;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center center;\n}\n```\n\n这个修改后的代码使用了一个`for`循环来迭代每个上传的文件。对于每个图像文件，我们创建一个新的`FileReader`对象并调用它的`readAsDataURL`方法将文件转换为 Data URL。最后，我们创建一个图片`img`元素，将 Data URL 设置为其源属性，并将图片元素包装在一个`<div>`元素中添加到预览区域中。\n同时使用了一个闭包来保存每个 reader 对象的状态。在每个循环中，用一个匿名函数包装`reader`对象，以便在读取完成事件回调函数中访问正确的数据。这样每个`reader`对象的状态就不会在过程中被覆盖，每个图像文件都可以正确地显示预览了\n","slug":"html-js实现多文件上传、预览","published":1,"updated":"2023-04-07T07:50:09.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1e005jhgac4d58dvnx","content":"<h2 id=\"html-js实现多文件上传、预览\"><a href=\"#html-js实现多文件上传、预览\" class=\"headerlink\" title=\"html+js实现多文件上传、预览\"></a>html+js实现多文件上传、预览</h2><p>当我们需要上传图片时，一般是通过文件上传的方式上传图片到服务器，但有时候我们需要在上传之前预览图片，以便查看是否选择了正确的图片或者调整裁剪等。这时我们就需要用到前端技术来实现图片预览功能。<br>下面将介绍如何使用 HTML、CSS 和 JavaScript 实现文件上传和图片预览的功能，具体实现如下。</p>\n<h3 id=\"文件上传表单和预览区\"><a href=\"#文件上传表单和预览区\" class=\"headerlink\" title=\"文件上传表单和预览区\"></a>文件上传表单和预览区</h3><p>首先，我们需要一个文件上传表单和一个预览区域。文件上传表单可以使用标准的 HTML <code>&lt;form&gt;</code>标签实现，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fileToUpload&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fileToUpload&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;上传文件&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个表单包含一个文件选择框和一个提交按钮，用户可以通过文件选择框选择要上传的文件并点击提交按钮上传。<br>为了实现预览功能，我们还需要一个预览区域，用于在上传文件之前显示选择的图像文件。预览区域可以使用一个空的 <code>&lt;div&gt;</code>元素实现，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 图像预览区域 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;imagePreviews&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们将预览区域的 ID 设置为<code>imagePreview</code>。</p>\n<h3 id=\"CSS样式\"><a href=\"#CSS样式\" class=\"headerlink\" title=\"CSS样式\"></a>CSS样式</h3><p>为预览区域定义一些基本的 CSS 样式，并确保它的大小和文件上传框的大小相同，如下所示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#imagePreview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 CSS 样式定义了预览区域的宽度、高度、边距、背景颜色和背景图像属性，使其以一种较为合理的方式呈现预览图片。在这个示例中，我们将预览区域的大小设置为 200 x 200 像素，并将背景颜色设置为浅灰色</p>\n<h3 id=\"JavaScript-实现文件上传和预览\"><a href=\"#JavaScript-实现文件上传和预览\" class=\"headerlink\" title=\"JavaScript 实现文件上传和预览\"></a>JavaScript 实现文件上传和预览</h3><p>现在，我们需要一些 JavaScript 代码来实现文件上传和图像预览的功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取文件上传表单中的 input 元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;fileToUpload&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听 input 元素的 onchange 事件</span></span><br><span class=\"line\">fileInput.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取上传的文件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> file = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// 如果上传的文件是图像文件，则进行预览</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (file.<span class=\"property\">type</span>.<span class=\"title function_\">match</span>(<span class=\"string\">&#x27;image.*&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 将图像文件转换为 Data URL</span></span><br><span class=\"line\">    reader.<span class=\"title function_\">readAsDataURL</span>(file);</span><br><span class=\"line\">    <span class=\"comment\">// 当读取完成时，显示预览图像</span></span><br><span class=\"line\">    reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imagePreview = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;imagePreview&#x27;</span>);</span><br><span class=\"line\">    imagePreview.<span class=\"property\">style</span>.<span class=\"property\">backgroundImage</span> = <span class=\"string\">&#x27;url(&#x27;</span> + reader.<span class=\"property\">result</span> + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这个示例代码使用了<code>JavaScript</code>监听文件上传表单中的<code>input</code>元素的<code>onChange</code>事件。在事件回调函数中，我们判断上传的文件是否为图像文件，如果是，则创建一个新的 FileReader 对象，并调用它的<code>readAsDataURL</code>方法将文件转换为 Data URL。最后，我们使用 Image 的 CSS 属性将 Data URL 应用到预览区域的背景图片上，以显示图像预览。</p>\n<h3 id=\"实现多文件上传和预览\"><a href=\"#实现多文件上传和预览\" class=\"headerlink\" title=\"实现多文件上传和预览\"></a>实现多文件上传和预览</h3><p>如果需要同时上传多个文件并预览它们，可以使用<code>multiple</code>属性将输入框设置为多选模式，并稍加修改 JavaScript 代码来处理多个文件。<br>以下是针对多文件上传和预览的JavaScript和CSS代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取文件上传表单中的 input 元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;fileToUpload&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听 input 元素的 onchange 事件</span></span><br><span class=\"line\">fileInput.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取上传的文件</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果上传的文件是图像文件，则进行预览</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files[i].<span class=\"property\">type</span>.<span class=\"title function_\">match</span>(<span class=\"string\">&#x27;image.*&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 使用闭包保存每个 reader 对象的状态</span></span><br><span class=\"line\">      (<span class=\"keyword\">function</span>(<span class=\"params\">reader</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将图像文件转换为 Data URL</span></span><br><span class=\"line\">        reader.<span class=\"title function_\">readAsDataURL</span>(files[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 当读取完成时，显示预览图像</span></span><br><span class=\"line\">        reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> imagePreviews = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;imagePreviews&#x27;</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 创建预览图像的容器和图像元素</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> previewContainer = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">          previewContainer.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;image-preview&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> previewImage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span><br><span class=\"line\">          previewImage.<span class=\"property\">src</span> = reader.<span class=\"property\">result</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 将图像元素添加到容器中，并将容器添加到预览区域中</span></span><br><span class=\"line\">          previewContainer.<span class=\"title function_\">appendChild</span>(previewImage);</span><br><span class=\"line\">          imagePreviews.<span class=\"title function_\">appendChild</span>(previewContainer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)(reader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.image-preview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个修改后的代码使用了一个<code>for</code>循环来迭代每个上传的文件。对于每个图像文件，我们创建一个新的<code>FileReader</code>对象并调用它的<code>readAsDataURL</code>方法将文件转换为 Data URL。最后，我们创建一个图片<code>img</code>元素，将 Data URL 设置为其源属性，并将图片元素包装在一个<code>&lt;div&gt;</code>元素中添加到预览区域中。<br>同时使用了一个闭包来保存每个 reader 对象的状态。在每个循环中，用一个匿名函数包装<code>reader</code>对象，以便在读取完成事件回调函数中访问正确的数据。这样每个<code>reader</code>对象的状态就不会在过程中被覆盖，每个图像文件都可以正确地显示预览了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"html-js实现多文件上传、预览\"><a href=\"#html-js实现多文件上传、预览\" class=\"headerlink\" title=\"html+js实现多文件上传、预览\"></a>html+js实现多文件上传、预览</h2><p>当我们需要上传图片时，一般是通过文件上传的方式上传图片到服务器，但有时候我们需要在上传之前预览图片，以便查看是否选择了正确的图片或者调整裁剪等。这时我们就需要用到前端技术来实现图片预览功能。<br>下面将介绍如何使用 HTML、CSS 和 JavaScript 实现文件上传和图片预览的功能，具体实现如下。</p>\n<h3 id=\"文件上传表单和预览区\"><a href=\"#文件上传表单和预览区\" class=\"headerlink\" title=\"文件上传表单和预览区\"></a>文件上传表单和预览区</h3><p>首先，我们需要一个文件上传表单和一个预览区域。文件上传表单可以使用标准的 HTML <code>&lt;form&gt;</code>标签实现，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fileToUpload&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fileToUpload&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;上传文件&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个表单包含一个文件选择框和一个提交按钮，用户可以通过文件选择框选择要上传的文件并点击提交按钮上传。<br>为了实现预览功能，我们还需要一个预览区域，用于在上传文件之前显示选择的图像文件。预览区域可以使用一个空的 <code>&lt;div&gt;</code>元素实现，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 图像预览区域 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;imagePreviews&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们将预览区域的 ID 设置为<code>imagePreview</code>。</p>\n<h3 id=\"CSS样式\"><a href=\"#CSS样式\" class=\"headerlink\" title=\"CSS样式\"></a>CSS样式</h3><p>为预览区域定义一些基本的 CSS 样式，并确保它的大小和文件上传框的大小相同，如下所示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#imagePreview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 CSS 样式定义了预览区域的宽度、高度、边距、背景颜色和背景图像属性，使其以一种较为合理的方式呈现预览图片。在这个示例中，我们将预览区域的大小设置为 200 x 200 像素，并将背景颜色设置为浅灰色</p>\n<h3 id=\"JavaScript-实现文件上传和预览\"><a href=\"#JavaScript-实现文件上传和预览\" class=\"headerlink\" title=\"JavaScript 实现文件上传和预览\"></a>JavaScript 实现文件上传和预览</h3><p>现在，我们需要一些 JavaScript 代码来实现文件上传和图像预览的功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取文件上传表单中的 input 元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;fileToUpload&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听 input 元素的 onchange 事件</span></span><br><span class=\"line\">fileInput.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取上传的文件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> file = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// 如果上传的文件是图像文件，则进行预览</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (file.<span class=\"property\">type</span>.<span class=\"title function_\">match</span>(<span class=\"string\">&#x27;image.*&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 将图像文件转换为 Data URL</span></span><br><span class=\"line\">    reader.<span class=\"title function_\">readAsDataURL</span>(file);</span><br><span class=\"line\">    <span class=\"comment\">// 当读取完成时，显示预览图像</span></span><br><span class=\"line\">    reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imagePreview = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;imagePreview&#x27;</span>);</span><br><span class=\"line\">    imagePreview.<span class=\"property\">style</span>.<span class=\"property\">backgroundImage</span> = <span class=\"string\">&#x27;url(&#x27;</span> + reader.<span class=\"property\">result</span> + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这个示例代码使用了<code>JavaScript</code>监听文件上传表单中的<code>input</code>元素的<code>onChange</code>事件。在事件回调函数中，我们判断上传的文件是否为图像文件，如果是，则创建一个新的 FileReader 对象，并调用它的<code>readAsDataURL</code>方法将文件转换为 Data URL。最后，我们使用 Image 的 CSS 属性将 Data URL 应用到预览区域的背景图片上，以显示图像预览。</p>\n<h3 id=\"实现多文件上传和预览\"><a href=\"#实现多文件上传和预览\" class=\"headerlink\" title=\"实现多文件上传和预览\"></a>实现多文件上传和预览</h3><p>如果需要同时上传多个文件并预览它们，可以使用<code>multiple</code>属性将输入框设置为多选模式，并稍加修改 JavaScript 代码来处理多个文件。<br>以下是针对多文件上传和预览的JavaScript和CSS代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取文件上传表单中的 input 元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;fileToUpload&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听 input 元素的 onchange 事件</span></span><br><span class=\"line\">fileInput.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取上传的文件</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果上传的文件是图像文件，则进行预览</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files[i].<span class=\"property\">type</span>.<span class=\"title function_\">match</span>(<span class=\"string\">&#x27;image.*&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 使用闭包保存每个 reader 对象的状态</span></span><br><span class=\"line\">      (<span class=\"keyword\">function</span>(<span class=\"params\">reader</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将图像文件转换为 Data URL</span></span><br><span class=\"line\">        reader.<span class=\"title function_\">readAsDataURL</span>(files[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 当读取完成时，显示预览图像</span></span><br><span class=\"line\">        reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> imagePreviews = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;imagePreviews&#x27;</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 创建预览图像的容器和图像元素</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> previewContainer = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">          previewContainer.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;image-preview&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> previewImage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span><br><span class=\"line\">          previewImage.<span class=\"property\">src</span> = reader.<span class=\"property\">result</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 将图像元素添加到容器中，并将容器添加到预览区域中</span></span><br><span class=\"line\">          previewContainer.<span class=\"title function_\">appendChild</span>(previewImage);</span><br><span class=\"line\">          imagePreviews.<span class=\"title function_\">appendChild</span>(previewContainer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)(reader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.image-preview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个修改后的代码使用了一个<code>for</code>循环来迭代每个上传的文件。对于每个图像文件，我们创建一个新的<code>FileReader</code>对象并调用它的<code>readAsDataURL</code>方法将文件转换为 Data URL。最后，我们创建一个图片<code>img</code>元素，将 Data URL 设置为其源属性，并将图片元素包装在一个<code>&lt;div&gt;</code>元素中添加到预览区域中。<br>同时使用了一个闭包来保存每个 reader 对象的状态。在每个循环中，用一个匿名函数包装<code>reader</code>对象，以便在读取完成事件回调函数中访问正确的数据。这样每个<code>reader</code>对象的状态就不会在过程中被覆盖，每个图像文件都可以正确地显示预览了</p>\n"},{"title":"一款智能的日期解析工具","date":"2021-03-19T01:26:03.000Z","_content":"\n## 前言\n\n`Java` 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `ZoneDateTime` 、 `OffsetDateTime` 等等。针对这些时间类型又通过 `SimpleDateFormat` 和 `DateTimeFormatter` 实现不同的日期与字符串之间的格式化和解析。\n\n为了应对各种各样的日期解析，我们通常会封装类似于 `DateUtils` 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 `DateUtils` 通常会面临性能与兼容性的两难问题。\n\n而本文要介绍的，是一个截然不同的日期解析工具 `dateparser` ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。\n\n## DateUtils 的两难问题\n\n一个比较典型的日期解析函数类似这样（这是 `commons-lang3` 在其 `DateUtils` 中提供的函数）：\n\n```java\n    public static Date parseDate(final String str, final String... parsePatterns) {\n        return parseDate(str, null, parsePatterns);\n    }\n```\n\n这种日期解析函数的内部逻辑，往往是根据一批 `DATE_FORMAT` 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。\n\n首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。\n\n其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 `2` 微秒，而一次日期解析可能消耗 `0.75` 微秒。如果提供的 `parsePatterns` 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 `Redis` 读写操作。\n\n那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？\n\n## `dateparser`\n\n这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。\n\n为了实现高性能与可扩展性，它并没有采用 `SimpleDateFormat` 或 `DateTimeFormatter` ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 `year` , `month` , `day` , `hour` , `minute` , `second` , `zone` 等熟悉。\n\n这些预定义的正则表达式片段包括：\n\n`(?<week>%s)\\W*` 可以将 `Monday` 解析为 `week`\n\n`?(?<year>\\d{4})$` 可以将 `2019` 解析为 `year`\n\n`^(?<year>\\d{4})(?<month>\\d{2})$` 可以抽取出 `201909` 内部的 `year` 和 `month`\n\n`?(?<hour>\\d{1,2}) o’clock\\W*` 可以将 `12 o’clock` 解析为 `hour`\n\n更多规则参见 `DateParserBuilder.java`\n\n如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 `java.util.regex` 包来进行循环匹配，随着规则增加，确实会有性能问题。\n但是 `dateparser` 使用 `retree` 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。\n\n## 安装 Maven 依赖\n\n可以通过此 `maven` 坐标引入依赖\n\n```xml\n    <dependency>\n        <groupId>com.github.sisyphsu</groupId>\n        <artifactId>dateparser</artifactId>\n        <version>1.0.2</version>\n    </dependency>\n```\n\n## 基础使用\n\n`dateparser` 提供了一个 `DateParserUtils` 工具类，可以直接使用它将字符串解析为 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `OffsetDateTime` 等：\n\n```java\n    Date date = DateParserUtils.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n    Calendar calendar =\n    DateParserUtils.parseCalendar(\"Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\");\n    // 2015-07-03T17:04:07Z\n    LocalDateTime dateTime =\n    DateParserUtils.parseDateTime(\"2019-09-20 10:20:30.12345678 +0200\");\n    // 2019-09-20T16:20:30.123456780\n    OffsetDateTime offsetDateTime =\n    DateParserUtils.parseOffsetDateTime(\"2015-09-30 18:48:56.35272715 +0000 UTC\");\n    // 2015-09-30T18:48:56.352727150Z\n```\n\n需要注意的是，它会根据字符串中标明的 `TimeZon` e 或 `ZoneOffset` 自动进行偏移量转换。\n\n## 创建新 DateParser 实例\n\n由于 `DateParser` 不是线程安全的，同时 `parse` 操作通常非常快速（1us），因此 `DateParserUtils` 内部直接维护了一个 `DateParser` 单例，然后通过 `synchronized` 进行并发控制。\n\n如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 `DateParser` 实例：\n\n```java\n    DateParser parser = DateParser.newBuilder().build();\n    Date date = parser.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n```\n\n`DateParser` 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。\n\n## `MM/dd` 与 `dd/MM` 的优先级\n\n多数情况下， `dateparser` 可以按照规则自动地识别出字符串内部的 `month` 与 `day` 片段。\n\n但是对于 `MM/dd/yy` 和 `dd/MM/yy` ，有时候它就难以区分了。因为世界上多数国家会使用 `dd/MM/yy` 作为日期的格式，但是也有少数国家会特立独行地使用 `MM/dd/yy` 作为日期格式，最典型的就是美帝国主义。\n\n因此当 `dateparser` 遇到类似于 `7.8.2019` 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。\n\n为解决这个难题， `dateparser` 内部增加了一个名为 `preferMonthFirst` 的选项，用于辅助解决这个问题：\n\n```java\n    DateParserUtils.preferMonthFirst(true);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-08-03\n    DateParserUtils.preferMonthFirst(false);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-03-08\n```\n\n默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 `preferMonthFirst` 为 `true` ，则试为月在前。\n\n## 自定义 Parser\n\n你可以使用 `DateParserBuilder` 构建自己的日期解析器，通过此 `builder` ，你可以自定义新的解析规则。\n\n例如，如果你想支持 `【2019】` 这样的 `year` 字符串，可以这样做：\n\n```java\n    DateParser parser = DateParser.newBuilder().addRule(\"【(?<year>\\\\d{4})】\").build();\n    Calendar calendar = parser.parseCalendar(\"【1991】\");\n    assert calendar.get(Calendar.YEAR) == 1991;\n```\n\n需要注意的是，正则表达式 `【(?<year>\\\\d{4})】` 里面的 `year` 非常重要，它是 `dateparser` 内置的捕捉关键词。\n\n你也可以增加更加灵活的解析规则，就像这样：\n\n```java\n    DateParser parser = DateParser.newBuilder()\n    .addRule(\"民国(\\\\d{3})年\", (input, matcher, dt) -> {\n        int offset = matcher.start(1);\n        int i0 = input.charAt(offset) - '0';\n        int i1 = input.charAt(offset + 1) - '0';\n        int i2 = input.charAt(offset + 2) - '0';\n        dt.setYear(i0 * 100 + i1 * 10 + i2 + 1911);\n    })\n    .build();\n    Calendar calendar = parser.parseCalendar(\"民国101年\");\n    assert calendar.get(Calendar.YEAR) == 2012;\n```\n\n这个例子里面，新增了一个捕捉并解析 `民国xxx年` 的日期规则。\n\n## 性能对比\n\n首先，在单一日期格式下，对比一下 `dateparser` 与 `SimpleDateFormat` 的性能表现：\n\n```text\n    Benchmark               Mode  Cnt     Score    Error  Units\n    SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op\n    SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op\n```\n\n可以看到，在日期格式固定且单一的情况下， `dateparser` 在性能上处于下风，这也在预料之中。\n\n然后，在单一日期格式下，对比一下 `dateparser` 与 `DateTimeFormatter` 的性能表现：\n\n```text\n    Benchmark                       Mode  Cnt     Score    Error  Units\n    SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op\n    SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op\n```\n\n可以看到， `DateTimeFormatter` 的性能表现确实比 S `impleDateFormat` 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。\n\n如果我们将日期格式增加为 16 种时，性能表现就不一样了：\n\n```text\n    Benchmark              Mode  Cnt      Score      Error  Units\n    MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op\n    MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op\n```\n\n如果换算一下，无论日期格式是一种还是 16 中， `dateparser` 的性能始终维持在 `1.5us` ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失\n\n## 支持的日期格式（部分）\n\n以下为 `dateparser` 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：\n\n```text\n    May 8, 2009 5:57:51 PM\n    oct 7, 1970\n    oct 7, '70\n    oct. 7, 1970\n    oct. 7, 70\n    Mon Jan  2 15:04:05 2006\n    Mon Jan  2 15:04:05 MST 2006\n    Mon Jan 02 15:04:05 -0700 2006\n    Monday, 02-Jan-06 15:04:05 MST\n    Mon, 02 Jan 2006 15:04:05 MST\n    Tue, 11 Jul 2017 16:28:13 +0200 (CEST)\n    Mon, 02 Jan 2006 15:04:05 -0700\n    Thu, 4 Jan 2018 17:53:36 +0000\n    Mon Aug 10 15:44:11 UTC+0100 2015\n    Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\n    September 17, 2012 10:09am\n    September 17, 2012 at 10:09am PST-08\n    September 17, 2012, 10:10:09\n    October 7, 1970\n    October 7th, 1970\n    12 Feb 2006, 19:17\n    12 Feb 2006 19:17\n    7 oct 70\n    7 oct 1970\n    03 February 2013\n    1 July 2013\n    2013-Feb-03\n    3/31/2014\n    03/31/2014\n    08/21/71\n    8/1/71\n    4/8/2014 22:05\n    04/08/2014 22:05\n    4/8/14 22:05\n    04/2/2014 03:00:51\n    8/8/1965 12:00:00 AM\n    8/8/1965 01:00:01 PM\n    8/8/1965 01:00 PM\n    8/8/1965 1:00 PM\n    8/8/1965 12:00 AM\n    4/02/2014 03:00:51\n    03/19/2012 10:11:59\n    03/19/2012 10:11:59.3186369\n    2014/3/31\n    2014/03/31\n    2014/4/8 22:05\n    2014/04/08 22:05\n    2014/04/2 03:00:51\n    2014/4/02 03:00:51\n    2012/03/19 10:11:59\n    2012/03/19 10:11:59.3186369\n    2014年04月08日\n    2006-01-02T15:04:05+0000\n    2009-08-12T22:15:09-07:00\n    2009-08-12T22:15:09\n    2009-08-12T22:15:09Z\n    2014-04-26 17:24:37.3186369\n    2012-08-03 18:31:59.257000000\n    2014-04-26 17:24:37.123\n    2013-04-01 22:43\n    2013-04-01 22:43:22\n    2014-12-16 06:20:00 UTC\n    2014-12-16 06:20:00 GMT\n    2014-04-26 05:24:37 PM\n    2014-04-26 13:13:43 +0800\n    2014-04-26 13:13:43 +0800 +08\n    2014-04-26 13:13:44 +09:00\n    2012-08-03 18:31:59.257000000 +0000 UTC\n    2015-09-30 18:48:56.35272715 +0000 UTC\n    2015-02-18 00:12:00 +0000 GMT\n    2015-02-18 00:12:00 +0000 UTC\n    2015-02-08 03:02:00 +0300 MSK m=+0.000000001\n    2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001\n    2017-07-19 03:21:51+00:00\n    2014-04-26\n    2014-04\n    2014\n    2014-05-11 08:20:13,787\n    3.31.2014\n    03.31.2014\n    08.21.71\n    2014.03\n    2014.03.30\n    20140601\n    20140722105203\n    1332151919\n    1384216367189\n    1384216367111222\n    1384216367111222333\n```\n\n## 原文地址\n\n本文转载至<https://sulin.me/2019/38Z4HAT.html>\n","source":"_posts/一款智能的日期解析工具.md","raw":"---\ntitle: 一款智能的日期解析工具\ndate: 2021-03-19 09:26:03\ntags:\n  - 日期解析\n  - Utils\n\ncategories: [后端, Java]\n---\n\n## 前言\n\n`Java` 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `ZoneDateTime` 、 `OffsetDateTime` 等等。针对这些时间类型又通过 `SimpleDateFormat` 和 `DateTimeFormatter` 实现不同的日期与字符串之间的格式化和解析。\n\n为了应对各种各样的日期解析，我们通常会封装类似于 `DateUtils` 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 `DateUtils` 通常会面临性能与兼容性的两难问题。\n\n而本文要介绍的，是一个截然不同的日期解析工具 `dateparser` ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。\n\n## DateUtils 的两难问题\n\n一个比较典型的日期解析函数类似这样（这是 `commons-lang3` 在其 `DateUtils` 中提供的函数）：\n\n```java\n    public static Date parseDate(final String str, final String... parsePatterns) {\n        return parseDate(str, null, parsePatterns);\n    }\n```\n\n这种日期解析函数的内部逻辑，往往是根据一批 `DATE_FORMAT` 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。\n\n首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。\n\n其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 `2` 微秒，而一次日期解析可能消耗 `0.75` 微秒。如果提供的 `parsePatterns` 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 `Redis` 读写操作。\n\n那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？\n\n## `dateparser`\n\n这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。\n\n为了实现高性能与可扩展性，它并没有采用 `SimpleDateFormat` 或 `DateTimeFormatter` ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 `year` , `month` , `day` , `hour` , `minute` , `second` , `zone` 等熟悉。\n\n这些预定义的正则表达式片段包括：\n\n`(?<week>%s)\\W*` 可以将 `Monday` 解析为 `week`\n\n`?(?<year>\\d{4})$` 可以将 `2019` 解析为 `year`\n\n`^(?<year>\\d{4})(?<month>\\d{2})$` 可以抽取出 `201909` 内部的 `year` 和 `month`\n\n`?(?<hour>\\d{1,2}) o’clock\\W*` 可以将 `12 o’clock` 解析为 `hour`\n\n更多规则参见 `DateParserBuilder.java`\n\n如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 `java.util.regex` 包来进行循环匹配，随着规则增加，确实会有性能问题。\n但是 `dateparser` 使用 `retree` 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。\n\n## 安装 Maven 依赖\n\n可以通过此 `maven` 坐标引入依赖\n\n```xml\n    <dependency>\n        <groupId>com.github.sisyphsu</groupId>\n        <artifactId>dateparser</artifactId>\n        <version>1.0.2</version>\n    </dependency>\n```\n\n## 基础使用\n\n`dateparser` 提供了一个 `DateParserUtils` 工具类，可以直接使用它将字符串解析为 `Date` 、 `Calendar` 、 `LocalDateTime` 、 `OffsetDateTime` 等：\n\n```java\n    Date date = DateParserUtils.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n    Calendar calendar =\n    DateParserUtils.parseCalendar(\"Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\");\n    // 2015-07-03T17:04:07Z\n    LocalDateTime dateTime =\n    DateParserUtils.parseDateTime(\"2019-09-20 10:20:30.12345678 +0200\");\n    // 2019-09-20T16:20:30.123456780\n    OffsetDateTime offsetDateTime =\n    DateParserUtils.parseOffsetDateTime(\"2015-09-30 18:48:56.35272715 +0000 UTC\");\n    // 2015-09-30T18:48:56.352727150Z\n```\n\n需要注意的是，它会根据字符串中标明的 `TimeZon` e 或 `ZoneOffset` 自动进行偏移量转换。\n\n## 创建新 DateParser 实例\n\n由于 `DateParser` 不是线程安全的，同时 `parse` 操作通常非常快速（1us），因此 `DateParserUtils` 内部直接维护了一个 `DateParser` 单例，然后通过 `synchronized` 进行并发控制。\n\n如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 `DateParser` 实例：\n\n```java\n    DateParser parser = DateParser.newBuilder().build();\n    Date date = parser.parseDate(\"Mon Jan 02 15:04:05 -0700 2006\");\n    // Tue Jan 03 06:04:05 CST 2006\n```\n\n`DateParser` 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。\n\n## `MM/dd` 与 `dd/MM` 的优先级\n\n多数情况下， `dateparser` 可以按照规则自动地识别出字符串内部的 `month` 与 `day` 片段。\n\n但是对于 `MM/dd/yy` 和 `dd/MM/yy` ，有时候它就难以区分了。因为世界上多数国家会使用 `dd/MM/yy` 作为日期的格式，但是也有少数国家会特立独行地使用 `MM/dd/yy` 作为日期格式，最典型的就是美帝国主义。\n\n因此当 `dateparser` 遇到类似于 `7.8.2019` 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。\n\n为解决这个难题， `dateparser` 内部增加了一个名为 `preferMonthFirst` 的选项，用于辅助解决这个问题：\n\n```java\n    DateParserUtils.preferMonthFirst(true);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-08-03\n    DateParserUtils.preferMonthFirst(false);\n    DateParserUtils.parseCalendar(\"08.03.71\");\n    // 1971-03-08\n```\n\n默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 `preferMonthFirst` 为 `true` ，则试为月在前。\n\n## 自定义 Parser\n\n你可以使用 `DateParserBuilder` 构建自己的日期解析器，通过此 `builder` ，你可以自定义新的解析规则。\n\n例如，如果你想支持 `【2019】` 这样的 `year` 字符串，可以这样做：\n\n```java\n    DateParser parser = DateParser.newBuilder().addRule(\"【(?<year>\\\\d{4})】\").build();\n    Calendar calendar = parser.parseCalendar(\"【1991】\");\n    assert calendar.get(Calendar.YEAR) == 1991;\n```\n\n需要注意的是，正则表达式 `【(?<year>\\\\d{4})】` 里面的 `year` 非常重要，它是 `dateparser` 内置的捕捉关键词。\n\n你也可以增加更加灵活的解析规则，就像这样：\n\n```java\n    DateParser parser = DateParser.newBuilder()\n    .addRule(\"民国(\\\\d{3})年\", (input, matcher, dt) -> {\n        int offset = matcher.start(1);\n        int i0 = input.charAt(offset) - '0';\n        int i1 = input.charAt(offset + 1) - '0';\n        int i2 = input.charAt(offset + 2) - '0';\n        dt.setYear(i0 * 100 + i1 * 10 + i2 + 1911);\n    })\n    .build();\n    Calendar calendar = parser.parseCalendar(\"民国101年\");\n    assert calendar.get(Calendar.YEAR) == 2012;\n```\n\n这个例子里面，新增了一个捕捉并解析 `民国xxx年` 的日期规则。\n\n## 性能对比\n\n首先，在单一日期格式下，对比一下 `dateparser` 与 `SimpleDateFormat` 的性能表现：\n\n```text\n    Benchmark               Mode  Cnt     Score    Error  Units\n    SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op\n    SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op\n```\n\n可以看到，在日期格式固定且单一的情况下， `dateparser` 在性能上处于下风，这也在预料之中。\n\n然后，在单一日期格式下，对比一下 `dateparser` 与 `DateTimeFormatter` 的性能表现：\n\n```text\n    Benchmark                       Mode  Cnt     Score    Error  Units\n    SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op\n    SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op\n```\n\n可以看到， `DateTimeFormatter` 的性能表现确实比 S `impleDateFormat` 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。\n\n如果我们将日期格式增加为 16 种时，性能表现就不一样了：\n\n```text\n    Benchmark              Mode  Cnt      Score      Error  Units\n    MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op\n    MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op\n```\n\n如果换算一下，无论日期格式是一种还是 16 中， `dateparser` 的性能始终维持在 `1.5us` ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失\n\n## 支持的日期格式（部分）\n\n以下为 `dateparser` 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：\n\n```text\n    May 8, 2009 5:57:51 PM\n    oct 7, 1970\n    oct 7, '70\n    oct. 7, 1970\n    oct. 7, 70\n    Mon Jan  2 15:04:05 2006\n    Mon Jan  2 15:04:05 MST 2006\n    Mon Jan 02 15:04:05 -0700 2006\n    Monday, 02-Jan-06 15:04:05 MST\n    Mon, 02 Jan 2006 15:04:05 MST\n    Tue, 11 Jul 2017 16:28:13 +0200 (CEST)\n    Mon, 02 Jan 2006 15:04:05 -0700\n    Thu, 4 Jan 2018 17:53:36 +0000\n    Mon Aug 10 15:44:11 UTC+0100 2015\n    Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)\n    September 17, 2012 10:09am\n    September 17, 2012 at 10:09am PST-08\n    September 17, 2012, 10:10:09\n    October 7, 1970\n    October 7th, 1970\n    12 Feb 2006, 19:17\n    12 Feb 2006 19:17\n    7 oct 70\n    7 oct 1970\n    03 February 2013\n    1 July 2013\n    2013-Feb-03\n    3/31/2014\n    03/31/2014\n    08/21/71\n    8/1/71\n    4/8/2014 22:05\n    04/08/2014 22:05\n    4/8/14 22:05\n    04/2/2014 03:00:51\n    8/8/1965 12:00:00 AM\n    8/8/1965 01:00:01 PM\n    8/8/1965 01:00 PM\n    8/8/1965 1:00 PM\n    8/8/1965 12:00 AM\n    4/02/2014 03:00:51\n    03/19/2012 10:11:59\n    03/19/2012 10:11:59.3186369\n    2014/3/31\n    2014/03/31\n    2014/4/8 22:05\n    2014/04/08 22:05\n    2014/04/2 03:00:51\n    2014/4/02 03:00:51\n    2012/03/19 10:11:59\n    2012/03/19 10:11:59.3186369\n    2014年04月08日\n    2006-01-02T15:04:05+0000\n    2009-08-12T22:15:09-07:00\n    2009-08-12T22:15:09\n    2009-08-12T22:15:09Z\n    2014-04-26 17:24:37.3186369\n    2012-08-03 18:31:59.257000000\n    2014-04-26 17:24:37.123\n    2013-04-01 22:43\n    2013-04-01 22:43:22\n    2014-12-16 06:20:00 UTC\n    2014-12-16 06:20:00 GMT\n    2014-04-26 05:24:37 PM\n    2014-04-26 13:13:43 +0800\n    2014-04-26 13:13:43 +0800 +08\n    2014-04-26 13:13:44 +09:00\n    2012-08-03 18:31:59.257000000 +0000 UTC\n    2015-09-30 18:48:56.35272715 +0000 UTC\n    2015-02-18 00:12:00 +0000 GMT\n    2015-02-18 00:12:00 +0000 UTC\n    2015-02-08 03:02:00 +0300 MSK m=+0.000000001\n    2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001\n    2017-07-19 03:21:51+00:00\n    2014-04-26\n    2014-04\n    2014\n    2014-05-11 08:20:13,787\n    3.31.2014\n    03.31.2014\n    08.21.71\n    2014.03\n    2014.03.30\n    20140601\n    20140722105203\n    1332151919\n    1384216367189\n    1384216367111222\n    1384216367111222333\n```\n\n## 原文地址\n\n本文转载至<https://sulin.me/2019/38Z4HAT.html>\n","slug":"一款智能的日期解析工具","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1g005mhgac85g311rx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>Java</code> 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>ZoneDateTime</code> 、 <code>OffsetDateTime</code> 等等。针对这些时间类型又通过 <code>SimpleDateFormat</code> 和 <code>DateTimeFormatter</code> 实现不同的日期与字符串之间的格式化和解析。</p>\n<p>为了应对各种各样的日期解析，我们通常会封装类似于 <code>DateUtils</code> 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 <code>DateUtils</code> 通常会面临性能与兼容性的两难问题。</p>\n<p>而本文要介绍的，是一个截然不同的日期解析工具 <code>dateparser</code> ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。</p>\n<h2 id=\"DateUtils-的两难问题\"><a href=\"#DateUtils-的两难问题\" class=\"headerlink\" title=\"DateUtils 的两难问题\"></a>DateUtils 的两难问题</h2><p>一个比较典型的日期解析函数类似这样（这是 <code>commons-lang3</code> 在其 <code>DateUtils</code> 中提供的函数）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">parseDate</span><span class=\"params\">(<span class=\"keyword\">final</span> String str, <span class=\"keyword\">final</span> String... parsePatterns)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseDate(str, <span class=\"literal\">null</span>, parsePatterns);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种日期解析函数的内部逻辑，往往是根据一批 <code>DATE_FORMAT</code> 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。</p>\n<p>首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。</p>\n<p>其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 <code>2</code> 微秒，而一次日期解析可能消耗 <code>0.75</code> 微秒。如果提供的 <code>parsePatterns</code> 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 <code>Redis</code> 读写操作。</p>\n<p>那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？</p>\n<h2 id=\"dateparser\"><a href=\"#dateparser\" class=\"headerlink\" title=\"dateparser\"></a><code>dateparser</code></h2><p>这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。</p>\n<p>为了实现高性能与可扩展性，它并没有采用 <code>SimpleDateFormat</code> 或 <code>DateTimeFormatter</code> ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 <code>year</code> , <code>month</code> , <code>day</code> , <code>hour</code> , <code>minute</code> , <code>second</code> , <code>zone</code> 等熟悉。</p>\n<p>这些预定义的正则表达式片段包括：</p>\n<p><code>(?&lt;week&gt;%s)\\W*</code> 可以将 <code>Monday</code> 解析为 <code>week</code></p>\n<p><code>?(?&lt;year&gt;\\d&#123;4&#125;)$</code> 可以将 <code>2019</code> 解析为 <code>year</code></p>\n<p><code>^(?&lt;year&gt;\\d&#123;4&#125;)(?&lt;month&gt;\\d&#123;2&#125;)$</code> 可以抽取出 <code>201909</code> 内部的 <code>year</code> 和 <code>month</code></p>\n<p><code>?(?&lt;hour&gt;\\d&#123;1,2&#125;) o’clock\\W*</code> 可以将 <code>12 o’clock</code> 解析为 <code>hour</code></p>\n<p>更多规则参见 <code>DateParserBuilder.java</code></p>\n<p>如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 <code>java.util.regex</code> 包来进行循环匹配，随着规则增加，确实会有性能问题。<br>但是 <code>dateparser</code> 使用 <code>retree</code> 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。</p>\n<h2 id=\"安装-Maven-依赖\"><a href=\"#安装-Maven-依赖\" class=\"headerlink\" title=\"安装 Maven 依赖\"></a>安装 Maven 依赖</h2><p>可以通过此 <code>maven</code> 坐标引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sisyphsu<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dateparser<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><p><code>dateparser</code> 提供了一个 <code>DateParserUtils</code> 工具类，可以直接使用它将字符串解析为 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>OffsetDateTime</code> 等：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> DateParserUtils.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-07-03T17:04:07Z</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseDateTime(<span class=\"string\">&quot;2019-09-20 10:20:30.12345678 +0200&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2019-09-20T16:20:30.123456780</span></span><br><span class=\"line\"><span class=\"type\">OffsetDateTime</span> <span class=\"variable\">offsetDateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseOffsetDateTime(<span class=\"string\">&quot;2015-09-30 18:48:56.35272715 +0000 UTC&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-09-30T18:48:56.352727150Z</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，它会根据字符串中标明的 <code>TimeZon</code> e 或 <code>ZoneOffset</code> 自动进行偏移量转换。</p>\n<h2 id=\"创建新-DateParser-实例\"><a href=\"#创建新-DateParser-实例\" class=\"headerlink\" title=\"创建新 DateParser 实例\"></a>创建新 DateParser 实例</h2><p>由于 <code>DateParser</code> 不是线程安全的，同时 <code>parse</code> 操作通常非常快速（1us），因此 <code>DateParserUtils</code> 内部直接维护了一个 <code>DateParser</code> 单例，然后通过 <code>synchronized</code> 进行并发控制。</p>\n<p>如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 <code>DateParser</code> 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().build();</span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> parser.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br></pre></td></tr></table></figure>\n\n<p><code>DateParser</code> 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。</p>\n<h2 id=\"MM-dd-与-dd-MM-的优先级\"><a href=\"#MM-dd-与-dd-MM-的优先级\" class=\"headerlink\" title=\"MM/dd 与 dd/MM 的优先级\"></a><code>MM/dd</code> 与 <code>dd/MM</code> 的优先级</h2><p>多数情况下， <code>dateparser</code> 可以按照规则自动地识别出字符串内部的 <code>month</code> 与 <code>day</code> 片段。</p>\n<p>但是对于 <code>MM/dd/yy</code> 和 <code>dd/MM/yy</code> ，有时候它就难以区分了。因为世界上多数国家会使用 <code>dd/MM/yy</code> 作为日期的格式，但是也有少数国家会特立独行地使用 <code>MM/dd/yy</code> 作为日期格式，最典型的就是美帝国主义。</p>\n<p>因此当 <code>dateparser</code> 遇到类似于 <code>7.8.2019</code> 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。</p>\n<p>为解决这个难题， <code>dateparser</code> 内部增加了一个名为 <code>preferMonthFirst</code> 的选项，用于辅助解决这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">true</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-08-03</span></span><br><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">false</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-03-08</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 <code>preferMonthFirst</code> 为 <code>true</code> ，则试为月在前。</p>\n<h2 id=\"自定义-Parser\"><a href=\"#自定义-Parser\" class=\"headerlink\" title=\"自定义 Parser\"></a>自定义 Parser</h2><p>你可以使用 <code>DateParserBuilder</code> 构建自己的日期解析器，通过此 <code>builder</code> ，你可以自定义新的解析规则。</p>\n<p>例如，如果你想支持 <code>【2019】</code> 这样的 <code>year</code> 字符串，可以这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().addRule(<span class=\"string\">&quot;【(?&lt;year&gt;\\\\d&#123;4&#125;)】&quot;</span>).build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;【1991】&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">1991</span>;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，正则表达式 <code>【(?&lt;year&gt;\\\\d&#123;4&#125;)】</code> 里面的 <code>year</code> 非常重要，它是 <code>dateparser</code> 内置的捕捉关键词。</p>\n<p>你也可以增加更加灵活的解析规则，就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder()</span><br><span class=\"line\">.addRule(<span class=\"string\">&quot;民国(\\\\d&#123;3&#125;)年&quot;</span>, (input, matcher, dt) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> matcher.start(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i0</span> <span class=\"operator\">=</span> input.charAt(offset) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">1</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">2</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    dt.setYear(i0 * <span class=\"number\">100</span> + i1 * <span class=\"number\">10</span> + i2 + <span class=\"number\">1911</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;民国101年&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">2012</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子里面，新增了一个捕捉并解析 <code>民国xxx年</code> 的日期规则。</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>SimpleDateFormat</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark               Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op</span><br><span class=\"line\">SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在日期格式固定且单一的情况下， <code>dateparser</code> 在性能上处于下风，这也在预料之中。</p>\n<p>然后，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>DateTimeFormatter</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark                       Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op</span><br><span class=\"line\">SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到， <code>DateTimeFormatter</code> 的性能表现确实比 S <code>impleDateFormat</code> 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。</p>\n<p>如果我们将日期格式增加为 16 种时，性能表现就不一样了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark              Mode  Cnt      Score      Error  Units</span><br><span class=\"line\">MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op</span><br><span class=\"line\">MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>如果换算一下，无论日期格式是一种还是 16 中， <code>dateparser</code> 的性能始终维持在 <code>1.5us</code> ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失</p>\n<h2 id=\"支持的日期格式（部分）\"><a href=\"#支持的日期格式（部分）\" class=\"headerlink\" title=\"支持的日期格式（部分）\"></a>支持的日期格式（部分）</h2><p>以下为 <code>dateparser</code> 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">May 8, 2009 5:57:51 PM</span><br><span class=\"line\">oct 7, 1970</span><br><span class=\"line\">oct 7, &#x27;70</span><br><span class=\"line\">oct. 7, 1970</span><br><span class=\"line\">oct. 7, 70</span><br><span class=\"line\">Mon Jan  2 15:04:05 2006</span><br><span class=\"line\">Mon Jan  2 15:04:05 MST 2006</span><br><span class=\"line\">Mon Jan 02 15:04:05 -0700 2006</span><br><span class=\"line\">Monday, 02-Jan-06 15:04:05 MST</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 MST</span><br><span class=\"line\">Tue, 11 Jul 2017 16:28:13 +0200 (CEST)</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 -0700</span><br><span class=\"line\">Thu, 4 Jan 2018 17:53:36 +0000</span><br><span class=\"line\">Mon Aug 10 15:44:11 UTC+0100 2015</span><br><span class=\"line\">Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)</span><br><span class=\"line\">September 17, 2012 10:09am</span><br><span class=\"line\">September 17, 2012 at 10:09am PST-08</span><br><span class=\"line\">September 17, 2012, 10:10:09</span><br><span class=\"line\">October 7, 1970</span><br><span class=\"line\">October 7th, 1970</span><br><span class=\"line\">12 Feb 2006, 19:17</span><br><span class=\"line\">12 Feb 2006 19:17</span><br><span class=\"line\">7 oct 70</span><br><span class=\"line\">7 oct 1970</span><br><span class=\"line\">03 February 2013</span><br><span class=\"line\">1 July 2013</span><br><span class=\"line\">2013-Feb-03</span><br><span class=\"line\">3/31/2014</span><br><span class=\"line\">03/31/2014</span><br><span class=\"line\">08/21/71</span><br><span class=\"line\">8/1/71</span><br><span class=\"line\">4/8/2014 22:05</span><br><span class=\"line\">04/08/2014 22:05</span><br><span class=\"line\">4/8/14 22:05</span><br><span class=\"line\">04/2/2014 03:00:51</span><br><span class=\"line\">8/8/1965 12:00:00 AM</span><br><span class=\"line\">8/8/1965 01:00:01 PM</span><br><span class=\"line\">8/8/1965 01:00 PM</span><br><span class=\"line\">8/8/1965 1:00 PM</span><br><span class=\"line\">8/8/1965 12:00 AM</span><br><span class=\"line\">4/02/2014 03:00:51</span><br><span class=\"line\">03/19/2012 10:11:59</span><br><span class=\"line\">03/19/2012 10:11:59.3186369</span><br><span class=\"line\">2014/3/31</span><br><span class=\"line\">2014/03/31</span><br><span class=\"line\">2014/4/8 22:05</span><br><span class=\"line\">2014/04/08 22:05</span><br><span class=\"line\">2014/04/2 03:00:51</span><br><span class=\"line\">2014/4/02 03:00:51</span><br><span class=\"line\">2012/03/19 10:11:59</span><br><span class=\"line\">2012/03/19 10:11:59.3186369</span><br><span class=\"line\">2014年04月08日</span><br><span class=\"line\">2006-01-02T15:04:05+0000</span><br><span class=\"line\">2009-08-12T22:15:09-07:00</span><br><span class=\"line\">2009-08-12T22:15:09</span><br><span class=\"line\">2009-08-12T22:15:09Z</span><br><span class=\"line\">2014-04-26 17:24:37.3186369</span><br><span class=\"line\">2012-08-03 18:31:59.257000000</span><br><span class=\"line\">2014-04-26 17:24:37.123</span><br><span class=\"line\">2013-04-01 22:43</span><br><span class=\"line\">2013-04-01 22:43:22</span><br><span class=\"line\">2014-12-16 06:20:00 UTC</span><br><span class=\"line\">2014-12-16 06:20:00 GMT</span><br><span class=\"line\">2014-04-26 05:24:37 PM</span><br><span class=\"line\">2014-04-26 13:13:43 +0800</span><br><span class=\"line\">2014-04-26 13:13:43 +0800 +08</span><br><span class=\"line\">2014-04-26 13:13:44 +09:00</span><br><span class=\"line\">2012-08-03 18:31:59.257000000 +0000 UTC</span><br><span class=\"line\">2015-09-30 18:48:56.35272715 +0000 UTC</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 GMT</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 UTC</span><br><span class=\"line\">2015-02-08 03:02:00 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2017-07-19 03:21:51+00:00</span><br><span class=\"line\">2014-04-26</span><br><span class=\"line\">2014-04</span><br><span class=\"line\">2014</span><br><span class=\"line\">2014-05-11 08:20:13,787</span><br><span class=\"line\">3.31.2014</span><br><span class=\"line\">03.31.2014</span><br><span class=\"line\">08.21.71</span><br><span class=\"line\">2014.03</span><br><span class=\"line\">2014.03.30</span><br><span class=\"line\">20140601</span><br><span class=\"line\">20140722105203</span><br><span class=\"line\">1332151919</span><br><span class=\"line\">1384216367189</span><br><span class=\"line\">1384216367111222</span><br><span class=\"line\">1384216367111222333</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a>原文地址</h2><p>本文转载至<a href=\"https://sulin.me/2019/38Z4HAT.html\">https://sulin.me/2019/38Z4HAT.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>Java</code> 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>ZoneDateTime</code> 、 <code>OffsetDateTime</code> 等等。针对这些时间类型又通过 <code>SimpleDateFormat</code> 和 <code>DateTimeFormatter</code> 实现不同的日期与字符串之间的格式化和解析。</p>\n<p>为了应对各种各样的日期解析，我们通常会封装类似于 <code>DateUtils</code> 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 <code>DateUtils</code> 通常会面临性能与兼容性的两难问题。</p>\n<p>而本文要介绍的，是一个截然不同的日期解析工具 <code>dateparser</code> ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。</p>\n<h2 id=\"DateUtils-的两难问题\"><a href=\"#DateUtils-的两难问题\" class=\"headerlink\" title=\"DateUtils 的两难问题\"></a>DateUtils 的两难问题</h2><p>一个比较典型的日期解析函数类似这样（这是 <code>commons-lang3</code> 在其 <code>DateUtils</code> 中提供的函数）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">parseDate</span><span class=\"params\">(<span class=\"keyword\">final</span> String str, <span class=\"keyword\">final</span> String... parsePatterns)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseDate(str, <span class=\"literal\">null</span>, parsePatterns);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种日期解析函数的内部逻辑，往往是根据一批 <code>DATE_FORMAT</code> 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。</p>\n<p>首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。</p>\n<p>其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 <code>2</code> 微秒，而一次日期解析可能消耗 <code>0.75</code> 微秒。如果提供的 <code>parsePatterns</code> 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 <code>Redis</code> 读写操作。</p>\n<p>那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？</p>\n<h2 id=\"dateparser\"><a href=\"#dateparser\" class=\"headerlink\" title=\"dateparser\"></a><code>dateparser</code></h2><p>这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。</p>\n<p>为了实现高性能与可扩展性，它并没有采用 <code>SimpleDateFormat</code> 或 <code>DateTimeFormatter</code> ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 <code>year</code> , <code>month</code> , <code>day</code> , <code>hour</code> , <code>minute</code> , <code>second</code> , <code>zone</code> 等熟悉。</p>\n<p>这些预定义的正则表达式片段包括：</p>\n<p><code>(?&lt;week&gt;%s)\\W*</code> 可以将 <code>Monday</code> 解析为 <code>week</code></p>\n<p><code>?(?&lt;year&gt;\\d&#123;4&#125;)$</code> 可以将 <code>2019</code> 解析为 <code>year</code></p>\n<p><code>^(?&lt;year&gt;\\d&#123;4&#125;)(?&lt;month&gt;\\d&#123;2&#125;)$</code> 可以抽取出 <code>201909</code> 内部的 <code>year</code> 和 <code>month</code></p>\n<p><code>?(?&lt;hour&gt;\\d&#123;1,2&#125;) o’clock\\W*</code> 可以将 <code>12 o’clock</code> 解析为 <code>hour</code></p>\n<p>更多规则参见 <code>DateParserBuilder.java</code></p>\n<p>如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 <code>java.util.regex</code> 包来进行循环匹配，随着规则增加，确实会有性能问题。<br>但是 <code>dateparser</code> 使用 <code>retree</code> 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。</p>\n<h2 id=\"安装-Maven-依赖\"><a href=\"#安装-Maven-依赖\" class=\"headerlink\" title=\"安装 Maven 依赖\"></a>安装 Maven 依赖</h2><p>可以通过此 <code>maven</code> 坐标引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sisyphsu<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dateparser<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><p><code>dateparser</code> 提供了一个 <code>DateParserUtils</code> 工具类，可以直接使用它将字符串解析为 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>OffsetDateTime</code> 等：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> DateParserUtils.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-07-03T17:04:07Z</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseDateTime(<span class=\"string\">&quot;2019-09-20 10:20:30.12345678 +0200&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2019-09-20T16:20:30.123456780</span></span><br><span class=\"line\"><span class=\"type\">OffsetDateTime</span> <span class=\"variable\">offsetDateTime</span> <span class=\"operator\">=</span></span><br><span class=\"line\">DateParserUtils.parseOffsetDateTime(<span class=\"string\">&quot;2015-09-30 18:48:56.35272715 +0000 UTC&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2015-09-30T18:48:56.352727150Z</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，它会根据字符串中标明的 <code>TimeZon</code> e 或 <code>ZoneOffset</code> 自动进行偏移量转换。</p>\n<h2 id=\"创建新-DateParser-实例\"><a href=\"#创建新-DateParser-实例\" class=\"headerlink\" title=\"创建新 DateParser 实例\"></a>创建新 DateParser 实例</h2><p>由于 <code>DateParser</code> 不是线程安全的，同时 <code>parse</code> 操作通常非常快速（1us），因此 <code>DateParserUtils</code> 内部直接维护了一个 <code>DateParser</code> 单例，然后通过 <code>synchronized</code> 进行并发控制。</p>\n<p>如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 <code>DateParser</code> 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().build();</span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> parser.parseDate(<span class=\"string\">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Tue Jan 03 06:04:05 CST 2006</span></span><br></pre></td></tr></table></figure>\n\n<p><code>DateParser</code> 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。</p>\n<h2 id=\"MM-dd-与-dd-MM-的优先级\"><a href=\"#MM-dd-与-dd-MM-的优先级\" class=\"headerlink\" title=\"MM/dd 与 dd/MM 的优先级\"></a><code>MM/dd</code> 与 <code>dd/MM</code> 的优先级</h2><p>多数情况下， <code>dateparser</code> 可以按照规则自动地识别出字符串内部的 <code>month</code> 与 <code>day</code> 片段。</p>\n<p>但是对于 <code>MM/dd/yy</code> 和 <code>dd/MM/yy</code> ，有时候它就难以区分了。因为世界上多数国家会使用 <code>dd/MM/yy</code> 作为日期的格式，但是也有少数国家会特立独行地使用 <code>MM/dd/yy</code> 作为日期格式，最典型的就是美帝国主义。</p>\n<p>因此当 <code>dateparser</code> 遇到类似于 <code>7.8.2019</code> 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。</p>\n<p>为解决这个难题， <code>dateparser</code> 内部增加了一个名为 <code>preferMonthFirst</code> 的选项，用于辅助解决这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">true</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-08-03</span></span><br><span class=\"line\">DateParserUtils.preferMonthFirst(<span class=\"literal\">false</span>);</span><br><span class=\"line\">DateParserUtils.parseCalendar(<span class=\"string\">&quot;08.03.71&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1971-03-08</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 <code>preferMonthFirst</code> 为 <code>true</code> ，则试为月在前。</p>\n<h2 id=\"自定义-Parser\"><a href=\"#自定义-Parser\" class=\"headerlink\" title=\"自定义 Parser\"></a>自定义 Parser</h2><p>你可以使用 <code>DateParserBuilder</code> 构建自己的日期解析器，通过此 <code>builder</code> ，你可以自定义新的解析规则。</p>\n<p>例如，如果你想支持 <code>【2019】</code> 这样的 <code>year</code> 字符串，可以这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder().addRule(<span class=\"string\">&quot;【(?&lt;year&gt;\\\\d&#123;4&#125;)】&quot;</span>).build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;【1991】&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">1991</span>;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，正则表达式 <code>【(?&lt;year&gt;\\\\d&#123;4&#125;)】</code> 里面的 <code>year</code> 非常重要，它是 <code>dateparser</code> 内置的捕捉关键词。</p>\n<p>你也可以增加更加灵活的解析规则，就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> DateParser.newBuilder()</span><br><span class=\"line\">.addRule(<span class=\"string\">&quot;民国(\\\\d&#123;3&#125;)年&quot;</span>, (input, matcher, dt) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> matcher.start(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i0</span> <span class=\"operator\">=</span> input.charAt(offset) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">1</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> input.charAt(offset + <span class=\"number\">2</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    dt.setYear(i0 * <span class=\"number\">100</span> + i1 * <span class=\"number\">10</span> + i2 + <span class=\"number\">1911</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.build();</span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">calendar</span> <span class=\"operator\">=</span> parser.parseCalendar(<span class=\"string\">&quot;民国101年&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span> calendar.get(Calendar.YEAR) == <span class=\"number\">2012</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子里面，新增了一个捕捉并解析 <code>民国xxx年</code> 的日期规则。</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>SimpleDateFormat</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark               Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op</span><br><span class=\"line\">SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在日期格式固定且单一的情况下， <code>dateparser</code> 在性能上处于下风，这也在预料之中。</p>\n<p>然后，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>DateTimeFormatter</code> 的性能表现：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark                       Mode  Cnt     Score    Error  Units</span><br><span class=\"line\">SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op</span><br><span class=\"line\">SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>可以看到， <code>DateTimeFormatter</code> 的性能表现确实比 S <code>impleDateFormat</code> 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。</p>\n<p>如果我们将日期格式增加为 16 种时，性能表现就不一样了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark              Mode  Cnt      Score      Error  Units</span><br><span class=\"line\">MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op</span><br><span class=\"line\">MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op</span><br></pre></td></tr></table></figure>\n\n<p>如果换算一下，无论日期格式是一种还是 16 中， <code>dateparser</code> 的性能始终维持在 <code>1.5us</code> ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失</p>\n<h2 id=\"支持的日期格式（部分）\"><a href=\"#支持的日期格式（部分）\" class=\"headerlink\" title=\"支持的日期格式（部分）\"></a>支持的日期格式（部分）</h2><p>以下为 <code>dateparser</code> 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">May 8, 2009 5:57:51 PM</span><br><span class=\"line\">oct 7, 1970</span><br><span class=\"line\">oct 7, &#x27;70</span><br><span class=\"line\">oct. 7, 1970</span><br><span class=\"line\">oct. 7, 70</span><br><span class=\"line\">Mon Jan  2 15:04:05 2006</span><br><span class=\"line\">Mon Jan  2 15:04:05 MST 2006</span><br><span class=\"line\">Mon Jan 02 15:04:05 -0700 2006</span><br><span class=\"line\">Monday, 02-Jan-06 15:04:05 MST</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 MST</span><br><span class=\"line\">Tue, 11 Jul 2017 16:28:13 +0200 (CEST)</span><br><span class=\"line\">Mon, 02 Jan 2006 15:04:05 -0700</span><br><span class=\"line\">Thu, 4 Jan 2018 17:53:36 +0000</span><br><span class=\"line\">Mon Aug 10 15:44:11 UTC+0100 2015</span><br><span class=\"line\">Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)</span><br><span class=\"line\">September 17, 2012 10:09am</span><br><span class=\"line\">September 17, 2012 at 10:09am PST-08</span><br><span class=\"line\">September 17, 2012, 10:10:09</span><br><span class=\"line\">October 7, 1970</span><br><span class=\"line\">October 7th, 1970</span><br><span class=\"line\">12 Feb 2006, 19:17</span><br><span class=\"line\">12 Feb 2006 19:17</span><br><span class=\"line\">7 oct 70</span><br><span class=\"line\">7 oct 1970</span><br><span class=\"line\">03 February 2013</span><br><span class=\"line\">1 July 2013</span><br><span class=\"line\">2013-Feb-03</span><br><span class=\"line\">3/31/2014</span><br><span class=\"line\">03/31/2014</span><br><span class=\"line\">08/21/71</span><br><span class=\"line\">8/1/71</span><br><span class=\"line\">4/8/2014 22:05</span><br><span class=\"line\">04/08/2014 22:05</span><br><span class=\"line\">4/8/14 22:05</span><br><span class=\"line\">04/2/2014 03:00:51</span><br><span class=\"line\">8/8/1965 12:00:00 AM</span><br><span class=\"line\">8/8/1965 01:00:01 PM</span><br><span class=\"line\">8/8/1965 01:00 PM</span><br><span class=\"line\">8/8/1965 1:00 PM</span><br><span class=\"line\">8/8/1965 12:00 AM</span><br><span class=\"line\">4/02/2014 03:00:51</span><br><span class=\"line\">03/19/2012 10:11:59</span><br><span class=\"line\">03/19/2012 10:11:59.3186369</span><br><span class=\"line\">2014/3/31</span><br><span class=\"line\">2014/03/31</span><br><span class=\"line\">2014/4/8 22:05</span><br><span class=\"line\">2014/04/08 22:05</span><br><span class=\"line\">2014/04/2 03:00:51</span><br><span class=\"line\">2014/4/02 03:00:51</span><br><span class=\"line\">2012/03/19 10:11:59</span><br><span class=\"line\">2012/03/19 10:11:59.3186369</span><br><span class=\"line\">2014年04月08日</span><br><span class=\"line\">2006-01-02T15:04:05+0000</span><br><span class=\"line\">2009-08-12T22:15:09-07:00</span><br><span class=\"line\">2009-08-12T22:15:09</span><br><span class=\"line\">2009-08-12T22:15:09Z</span><br><span class=\"line\">2014-04-26 17:24:37.3186369</span><br><span class=\"line\">2012-08-03 18:31:59.257000000</span><br><span class=\"line\">2014-04-26 17:24:37.123</span><br><span class=\"line\">2013-04-01 22:43</span><br><span class=\"line\">2013-04-01 22:43:22</span><br><span class=\"line\">2014-12-16 06:20:00 UTC</span><br><span class=\"line\">2014-12-16 06:20:00 GMT</span><br><span class=\"line\">2014-04-26 05:24:37 PM</span><br><span class=\"line\">2014-04-26 13:13:43 +0800</span><br><span class=\"line\">2014-04-26 13:13:43 +0800 +08</span><br><span class=\"line\">2014-04-26 13:13:44 +09:00</span><br><span class=\"line\">2012-08-03 18:31:59.257000000 +0000 UTC</span><br><span class=\"line\">2015-09-30 18:48:56.35272715 +0000 UTC</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 GMT</span><br><span class=\"line\">2015-02-18 00:12:00 +0000 UTC</span><br><span class=\"line\">2015-02-08 03:02:00 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001</span><br><span class=\"line\">2017-07-19 03:21:51+00:00</span><br><span class=\"line\">2014-04-26</span><br><span class=\"line\">2014-04</span><br><span class=\"line\">2014</span><br><span class=\"line\">2014-05-11 08:20:13,787</span><br><span class=\"line\">3.31.2014</span><br><span class=\"line\">03.31.2014</span><br><span class=\"line\">08.21.71</span><br><span class=\"line\">2014.03</span><br><span class=\"line\">2014.03.30</span><br><span class=\"line\">20140601</span><br><span class=\"line\">20140722105203</span><br><span class=\"line\">1332151919</span><br><span class=\"line\">1384216367189</span><br><span class=\"line\">1384216367111222</span><br><span class=\"line\">1384216367111222333</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a>原文地址</h2><p>本文转载至<a href=\"https://sulin.me/2019/38Z4HAT.html\">https://sulin.me/2019/38Z4HAT.html</a></p>\n"},{"title":"双向绑定和单向绑定","date":"2021-04-07T05:15:40.000Z","_content":"\n## 数据绑定\n\n所谓数据绑定，就是指`View`层和`Model`层之间的映射关系\n\n### 单向绑定\n\n`Model`的更新会触发 View 的更新，而 View 的更新不会触发`Model`的更新，它们的作用是单向的。\n\n### 双向绑定\n\n`Model`的更新会触发`View`的更新，`View`的更新也会触发`Model`的更新，它们的作用是相互的。\n\n![avatar](https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg)\n\n### React 采用单向数据绑定\n\n![avatar](https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg)\n当用户访问`View`时，通过触发`Events`进行交互，而在相应`Events Handlers`中，会触发相应的`Actions`，而`Actions`通过调用`setState`方法对`View`的`State`进行更新，`State`更新后会触发`View`的重新渲染。\n\n单向数据绑定的优缺点：\n优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。\n缺点：会有很多类似的样板代码，代码量会相应的上升。\n\n### Vue 支持单向数据绑定和双向数据绑定\n\n- 单项数据绑定：使用`v-bind`属性绑定、`v-on`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`v-model`指令，用户对`View`的更改会直接同步到`Model`。\n\nVue 的双向数据绑定就是指使用`v-model`指令进行数据绑定，而`v-model`本质上是`v-bind`和`v-on`相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。\n\n双向数据绑定的优缺点：\n\n优点：在操作表单时使用`v-model`方便简单，可以省略繁琐或重复的`onChange`事件去处理每个表单数据的变化（减少代码量）。\n缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。\n\n### Angular 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`[x]`属性绑定，`(x)`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`[(x)]`语法，用户对`View`的更改会直接同步到`Model`。\n\n### AngularJS 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`ng-bind`指令或插值形式`{{data}}`。\n- 双向数据绑定：使用`ng-model`指令，用户对`View`的更改会直接同步到`Model`。\n\n## 参考地址\n\n<https://juejin.cn/post/6854573208646090765>\n","source":"_posts/双向绑定和单向绑定.md","raw":"---\ntitle: 双向绑定和单向绑定\ndate: 2021-04-07 13:15:40\ntags:\n  - 双向绑定\n  - 单向绑定\n\ncategories: [前端, Vue]\n---\n\n## 数据绑定\n\n所谓数据绑定，就是指`View`层和`Model`层之间的映射关系\n\n### 单向绑定\n\n`Model`的更新会触发 View 的更新，而 View 的更新不会触发`Model`的更新，它们的作用是单向的。\n\n### 双向绑定\n\n`Model`的更新会触发`View`的更新，`View`的更新也会触发`Model`的更新，它们的作用是相互的。\n\n![avatar](https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg)\n\n### React 采用单向数据绑定\n\n![avatar](https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg)\n当用户访问`View`时，通过触发`Events`进行交互，而在相应`Events Handlers`中，会触发相应的`Actions`，而`Actions`通过调用`setState`方法对`View`的`State`进行更新，`State`更新后会触发`View`的重新渲染。\n\n单向数据绑定的优缺点：\n优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。\n缺点：会有很多类似的样板代码，代码量会相应的上升。\n\n### Vue 支持单向数据绑定和双向数据绑定\n\n- 单项数据绑定：使用`v-bind`属性绑定、`v-on`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`v-model`指令，用户对`View`的更改会直接同步到`Model`。\n\nVue 的双向数据绑定就是指使用`v-model`指令进行数据绑定，而`v-model`本质上是`v-bind`和`v-on`相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。\n\n双向数据绑定的优缺点：\n\n优点：在操作表单时使用`v-model`方便简单，可以省略繁琐或重复的`onChange`事件去处理每个表单数据的变化（减少代码量）。\n缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。\n\n### Angular 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`[x]`属性绑定，`(x)`事件绑定或插值形式`{{data}}`。\n- 双向数据绑定：使用`[(x)]`语法，用户对`View`的更改会直接同步到`Model`。\n\n### AngularJS 支持单向数据绑定和双向数据绑定\n\n- 单向数据绑定：使用`ng-bind`指令或插值形式`{{data}}`。\n- 双向数据绑定：使用`ng-model`指令，用户对`View`的更改会直接同步到`Model`。\n\n## 参考地址\n\n<https://juejin.cn/post/6854573208646090765>\n","slug":"双向绑定和单向绑定","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1h005phgac5ypm6bup","content":"<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>所谓数据绑定，就是指<code>View</code>层和<code>Model</code>层之间的映射关系</p>\n<h3 id=\"单向绑定\"><a href=\"#单向绑定\" class=\"headerlink\" title=\"单向绑定\"></a>单向绑定</h3><p><code>Model</code>的更新会触发 View 的更新，而 View 的更新不会触发<code>Model</code>的更新，它们的作用是单向的。</p>\n<h3 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h3><p><code>Model</code>的更新会触发<code>View</code>的更新，<code>View</code>的更新也会触发<code>Model</code>的更新，它们的作用是相互的。</p>\n<p><img src=\"https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"></p>\n<h3 id=\"React-采用单向数据绑定\"><a href=\"#React-采用单向数据绑定\" class=\"headerlink\" title=\"React 采用单向数据绑定\"></a>React 采用单向数据绑定</h3><p><img src=\"https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg\" class=\"lazyload placeholder\" data-srcset=\"https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"avatar\"><br>当用户访问<code>View</code>时，通过触发<code>Events</code>进行交互，而在相应<code>Events Handlers</code>中，会触发相应的<code>Actions</code>，而<code>Actions</code>通过调用<code>setState</code>方法对<code>View</code>的<code>State</code>进行更新，<code>State</code>更新后会触发<code>View</code>的重新渲染。</p>\n<p>单向数据绑定的优缺点：<br>优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。<br>缺点：会有很多类似的样板代码，代码量会相应的上升。</p>\n<h3 id=\"Vue-支持单向数据绑定和双向数据绑定\"><a href=\"#Vue-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Vue 支持单向数据绑定和双向数据绑定\"></a>Vue 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单项数据绑定：使用<code>v-bind</code>属性绑定、<code>v-on</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>v-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<p>Vue 的双向数据绑定就是指使用<code>v-model</code>指令进行数据绑定，而<code>v-model</code>本质上是<code>v-bind</code>和<code>v-on</code>相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。</p>\n<p>双向数据绑定的优缺点：</p>\n<p>优点：在操作表单时使用<code>v-model</code>方便简单，可以省略繁琐或重复的<code>onChange</code>事件去处理每个表单数据的变化（减少代码量）。<br>缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。</p>\n<h3 id=\"Angular-支持单向数据绑定和双向数据绑定\"><a href=\"#Angular-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Angular 支持单向数据绑定和双向数据绑定\"></a>Angular 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>[x]</code>属性绑定，<code>(x)</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>[(x)]</code>语法，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h3 id=\"AngularJS-支持单向数据绑定和双向数据绑定\"><a href=\"#AngularJS-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"AngularJS 支持单向数据绑定和双向数据绑定\"></a>AngularJS 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>ng-bind</code>指令或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>ng-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://juejin.cn/post/6854573208646090765\">https://juejin.cn/post/6854573208646090765</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>所谓数据绑定，就是指<code>View</code>层和<code>Model</code>层之间的映射关系</p>\n<h3 id=\"单向绑定\"><a href=\"#单向绑定\" class=\"headerlink\" title=\"单向绑定\"></a>单向绑定</h3><p><code>Model</code>的更新会触发 View 的更新，而 View 的更新不会触发<code>Model</code>的更新，它们的作用是单向的。</p>\n<h3 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h3><p><code>Model</code>的更新会触发<code>View</code>的更新，<code>View</code>的更新也会触发<code>Model</code>的更新，它们的作用是相互的。</p>\n<p><img src=\"https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg\" alt=\"avatar\"></p>\n<h3 id=\"React-采用单向数据绑定\"><a href=\"#React-采用单向数据绑定\" class=\"headerlink\" title=\"React 采用单向数据绑定\"></a>React 采用单向数据绑定</h3><p><img src=\"https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg\" alt=\"avatar\"><br>当用户访问<code>View</code>时，通过触发<code>Events</code>进行交互，而在相应<code>Events Handlers</code>中，会触发相应的<code>Actions</code>，而<code>Actions</code>通过调用<code>setState</code>方法对<code>View</code>的<code>State</code>进行更新，<code>State</code>更新后会触发<code>View</code>的重新渲染。</p>\n<p>单向数据绑定的优缺点：<br>优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。<br>缺点：会有很多类似的样板代码，代码量会相应的上升。</p>\n<h3 id=\"Vue-支持单向数据绑定和双向数据绑定\"><a href=\"#Vue-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Vue 支持单向数据绑定和双向数据绑定\"></a>Vue 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单项数据绑定：使用<code>v-bind</code>属性绑定、<code>v-on</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>v-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<p>Vue 的双向数据绑定就是指使用<code>v-model</code>指令进行数据绑定，而<code>v-model</code>本质上是<code>v-bind</code>和<code>v-on</code>相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。</p>\n<p>双向数据绑定的优缺点：</p>\n<p>优点：在操作表单时使用<code>v-model</code>方便简单，可以省略繁琐或重复的<code>onChange</code>事件去处理每个表单数据的变化（减少代码量）。<br>缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。</p>\n<h3 id=\"Angular-支持单向数据绑定和双向数据绑定\"><a href=\"#Angular-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"Angular 支持单向数据绑定和双向数据绑定\"></a>Angular 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>[x]</code>属性绑定，<code>(x)</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>[(x)]</code>语法，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h3 id=\"AngularJS-支持单向数据绑定和双向数据绑定\"><a href=\"#AngularJS-支持单向数据绑定和双向数据绑定\" class=\"headerlink\" title=\"AngularJS 支持单向数据绑定和双向数据绑定\"></a>AngularJS 支持单向数据绑定和双向数据绑定</h3><ul>\n<li>单向数据绑定：使用<code>ng-bind</code>指令或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li>\n<li>双向数据绑定：使用<code>ng-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li>\n</ul>\n<h2 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h2><p><a href=\"https://juejin.cn/post/6854573208646090765\">https://juejin.cn/post/6854573208646090765</a></p>\n"},{"title":"常用插件备份","date":"2022-07-29T02:12:27.000Z","_content":"\n## Vscode插件备份\n\nVscode插件备份\n\n### Auto Close Tag\n\n### Auto Rename Tag\n\n### Blockman - Highlight Nested Code Blocks\n\n### Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\n\n### Class autocomplete for HTML\n\n### Code Runner\n\n### Color Info\n\n### CSS Peek\n\n### css-auto-prefix\n\n### Easy Sass\n\n### EditorConfig for VS Code\n\n### ESLint\n\n### GitHub Theme\n\n### GitLens — Git supercharged\n\n### HTML CSS Support\n\n### IntelliSense for CSS class names in HTML\n\n### JavaScript (ES6) code snippets\n\n### koroFileHeader\n\n### Live Server\n\n### Markdown\n\n### Markdown All in One\n\n### Markdown Extended\n\n### Markdown Preview Enhanced\n\n### markdownlint\n\n### npm Intellisense\n\n### Paste Image\n\n### Path Intellisense\n\n### Project Manager\n\n### Stylelint\n\n### Vetur\n\n### vscode-icons\n\n### vscode-json\n\n### Vue 3 Snippets\n\n### Vue Airbnb Style VSCode Snippets\n\n### Vue Language Features (Volar)\n\n### Vue Peek\n\n### Vue VSCode Snippets\n\n### vue-helper\n","source":"_posts/常用插件备份.md","raw":"---\ntitle: 常用插件备份\ndate: 2022-07-29 10:12:27\ntags:\n    Vscode\ncategories: [Vscode, 插件]\n---\n\n## Vscode插件备份\n\nVscode插件备份\n\n### Auto Close Tag\n\n### Auto Rename Tag\n\n### Blockman - Highlight Nested Code Blocks\n\n### Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\n\n### Class autocomplete for HTML\n\n### Code Runner\n\n### Color Info\n\n### CSS Peek\n\n### css-auto-prefix\n\n### Easy Sass\n\n### EditorConfig for VS Code\n\n### ESLint\n\n### GitHub Theme\n\n### GitLens — Git supercharged\n\n### HTML CSS Support\n\n### IntelliSense for CSS class names in HTML\n\n### JavaScript (ES6) code snippets\n\n### koroFileHeader\n\n### Live Server\n\n### Markdown\n\n### Markdown All in One\n\n### Markdown Extended\n\n### Markdown Preview Enhanced\n\n### markdownlint\n\n### npm Intellisense\n\n### Paste Image\n\n### Path Intellisense\n\n### Project Manager\n\n### Stylelint\n\n### Vetur\n\n### vscode-icons\n\n### vscode-json\n\n### Vue 3 Snippets\n\n### Vue Airbnb Style VSCode Snippets\n\n### Vue Language Features (Volar)\n\n### Vue Peek\n\n### Vue VSCode Snippets\n\n### vue-helper\n","slug":"常用插件备份","published":1,"updated":"2022-10-27T06:40:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1i005shgach5itbjyi","content":"<h2 id=\"Vscode插件备份\"><a href=\"#Vscode插件备份\" class=\"headerlink\" title=\"Vscode插件备份\"></a>Vscode插件备份</h2><p>Vscode插件备份</p>\n<h3 id=\"Auto-Close-Tag\"><a href=\"#Auto-Close-Tag\" class=\"headerlink\" title=\"Auto Close Tag\"></a>Auto Close Tag</h3><h3 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h3><h3 id=\"Blockman-Highlight-Nested-Code-Blocks\"><a href=\"#Blockman-Highlight-Nested-Code-Blocks\" class=\"headerlink\" title=\"Blockman - Highlight Nested Code Blocks\"></a>Blockman - Highlight Nested Code Blocks</h3><h3 id=\"Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</h3><h3 id=\"Class-autocomplete-for-HTML\"><a href=\"#Class-autocomplete-for-HTML\" class=\"headerlink\" title=\"Class autocomplete for HTML\"></a>Class autocomplete for HTML</h3><h3 id=\"Code-Runner\"><a href=\"#Code-Runner\" class=\"headerlink\" title=\"Code Runner\"></a>Code Runner</h3><h3 id=\"Color-Info\"><a href=\"#Color-Info\" class=\"headerlink\" title=\"Color Info\"></a>Color Info</h3><h3 id=\"CSS-Peek\"><a href=\"#CSS-Peek\" class=\"headerlink\" title=\"CSS Peek\"></a>CSS Peek</h3><h3 id=\"css-auto-prefix\"><a href=\"#css-auto-prefix\" class=\"headerlink\" title=\"css-auto-prefix\"></a>css-auto-prefix</h3><h3 id=\"Easy-Sass\"><a href=\"#Easy-Sass\" class=\"headerlink\" title=\"Easy Sass\"></a>Easy Sass</h3><h3 id=\"EditorConfig-for-VS-Code\"><a href=\"#EditorConfig-for-VS-Code\" class=\"headerlink\" title=\"EditorConfig for VS Code\"></a>EditorConfig for VS Code</h3><h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><h3 id=\"GitHub-Theme\"><a href=\"#GitHub-Theme\" class=\"headerlink\" title=\"GitHub Theme\"></a>GitHub Theme</h3><h3 id=\"GitLens-—-Git-supercharged\"><a href=\"#GitLens-—-Git-supercharged\" class=\"headerlink\" title=\"GitLens — Git supercharged\"></a>GitLens — Git supercharged</h3><h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><h3 id=\"IntelliSense-for-CSS-class-names-in-HTML\"><a href=\"#IntelliSense-for-CSS-class-names-in-HTML\" class=\"headerlink\" title=\"IntelliSense for CSS class names in HTML\"></a>IntelliSense for CSS class names in HTML</h3><h3 id=\"JavaScript-ES6-code-snippets\"><a href=\"#JavaScript-ES6-code-snippets\" class=\"headerlink\" title=\"JavaScript (ES6) code snippets\"></a>JavaScript (ES6) code snippets</h3><h3 id=\"koroFileHeader\"><a href=\"#koroFileHeader\" class=\"headerlink\" title=\"koroFileHeader\"></a>koroFileHeader</h3><h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h3><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><h3 id=\"Markdown-All-in-One\"><a href=\"#Markdown-All-in-One\" class=\"headerlink\" title=\"Markdown All in One\"></a>Markdown All in One</h3><h3 id=\"Markdown-Extended\"><a href=\"#Markdown-Extended\" class=\"headerlink\" title=\"Markdown Extended\"></a>Markdown Extended</h3><h3 id=\"Markdown-Preview-Enhanced\"><a href=\"#Markdown-Preview-Enhanced\" class=\"headerlink\" title=\"Markdown Preview Enhanced\"></a>Markdown Preview Enhanced</h3><h3 id=\"markdownlint\"><a href=\"#markdownlint\" class=\"headerlink\" title=\"markdownlint\"></a>markdownlint</h3><h3 id=\"npm-Intellisense\"><a href=\"#npm-Intellisense\" class=\"headerlink\" title=\"npm Intellisense\"></a>npm Intellisense</h3><h3 id=\"Paste-Image\"><a href=\"#Paste-Image\" class=\"headerlink\" title=\"Paste Image\"></a>Paste Image</h3><h3 id=\"Path-Intellisense\"><a href=\"#Path-Intellisense\" class=\"headerlink\" title=\"Path Intellisense\"></a>Path Intellisense</h3><h3 id=\"Project-Manager\"><a href=\"#Project-Manager\" class=\"headerlink\" title=\"Project Manager\"></a>Project Manager</h3><h3 id=\"Stylelint\"><a href=\"#Stylelint\" class=\"headerlink\" title=\"Stylelint\"></a>Stylelint</h3><h3 id=\"Vetur\"><a href=\"#Vetur\" class=\"headerlink\" title=\"Vetur\"></a>Vetur</h3><h3 id=\"vscode-icons\"><a href=\"#vscode-icons\" class=\"headerlink\" title=\"vscode-icons\"></a>vscode-icons</h3><h3 id=\"vscode-json\"><a href=\"#vscode-json\" class=\"headerlink\" title=\"vscode-json\"></a>vscode-json</h3><h3 id=\"Vue-3-Snippets\"><a href=\"#Vue-3-Snippets\" class=\"headerlink\" title=\"Vue 3 Snippets\"></a>Vue 3 Snippets</h3><h3 id=\"Vue-Airbnb-Style-VSCode-Snippets\"><a href=\"#Vue-Airbnb-Style-VSCode-Snippets\" class=\"headerlink\" title=\"Vue Airbnb Style VSCode Snippets\"></a>Vue Airbnb Style VSCode Snippets</h3><h3 id=\"Vue-Language-Features-Volar\"><a href=\"#Vue-Language-Features-Volar\" class=\"headerlink\" title=\"Vue Language Features (Volar)\"></a>Vue Language Features (Volar)</h3><h3 id=\"Vue-Peek\"><a href=\"#Vue-Peek\" class=\"headerlink\" title=\"Vue Peek\"></a>Vue Peek</h3><h3 id=\"Vue-VSCode-Snippets\"><a href=\"#Vue-VSCode-Snippets\" class=\"headerlink\" title=\"Vue VSCode Snippets\"></a>Vue VSCode Snippets</h3><h3 id=\"vue-helper\"><a href=\"#vue-helper\" class=\"headerlink\" title=\"vue-helper\"></a>vue-helper</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vscode插件备份\"><a href=\"#Vscode插件备份\" class=\"headerlink\" title=\"Vscode插件备份\"></a>Vscode插件备份</h2><p>Vscode插件备份</p>\n<h3 id=\"Auto-Close-Tag\"><a href=\"#Auto-Close-Tag\" class=\"headerlink\" title=\"Auto Close Tag\"></a>Auto Close Tag</h3><h3 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h3><h3 id=\"Blockman-Highlight-Nested-Code-Blocks\"><a href=\"#Blockman-Highlight-Nested-Code-Blocks\" class=\"headerlink\" title=\"Blockman - Highlight Nested Code Blocks\"></a>Blockman - Highlight Nested Code Blocks</h3><h3 id=\"Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</h3><h3 id=\"Class-autocomplete-for-HTML\"><a href=\"#Class-autocomplete-for-HTML\" class=\"headerlink\" title=\"Class autocomplete for HTML\"></a>Class autocomplete for HTML</h3><h3 id=\"Code-Runner\"><a href=\"#Code-Runner\" class=\"headerlink\" title=\"Code Runner\"></a>Code Runner</h3><h3 id=\"Color-Info\"><a href=\"#Color-Info\" class=\"headerlink\" title=\"Color Info\"></a>Color Info</h3><h3 id=\"CSS-Peek\"><a href=\"#CSS-Peek\" class=\"headerlink\" title=\"CSS Peek\"></a>CSS Peek</h3><h3 id=\"css-auto-prefix\"><a href=\"#css-auto-prefix\" class=\"headerlink\" title=\"css-auto-prefix\"></a>css-auto-prefix</h3><h3 id=\"Easy-Sass\"><a href=\"#Easy-Sass\" class=\"headerlink\" title=\"Easy Sass\"></a>Easy Sass</h3><h3 id=\"EditorConfig-for-VS-Code\"><a href=\"#EditorConfig-for-VS-Code\" class=\"headerlink\" title=\"EditorConfig for VS Code\"></a>EditorConfig for VS Code</h3><h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><h3 id=\"GitHub-Theme\"><a href=\"#GitHub-Theme\" class=\"headerlink\" title=\"GitHub Theme\"></a>GitHub Theme</h3><h3 id=\"GitLens-—-Git-supercharged\"><a href=\"#GitLens-—-Git-supercharged\" class=\"headerlink\" title=\"GitLens — Git supercharged\"></a>GitLens — Git supercharged</h3><h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><h3 id=\"IntelliSense-for-CSS-class-names-in-HTML\"><a href=\"#IntelliSense-for-CSS-class-names-in-HTML\" class=\"headerlink\" title=\"IntelliSense for CSS class names in HTML\"></a>IntelliSense for CSS class names in HTML</h3><h3 id=\"JavaScript-ES6-code-snippets\"><a href=\"#JavaScript-ES6-code-snippets\" class=\"headerlink\" title=\"JavaScript (ES6) code snippets\"></a>JavaScript (ES6) code snippets</h3><h3 id=\"koroFileHeader\"><a href=\"#koroFileHeader\" class=\"headerlink\" title=\"koroFileHeader\"></a>koroFileHeader</h3><h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h3><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><h3 id=\"Markdown-All-in-One\"><a href=\"#Markdown-All-in-One\" class=\"headerlink\" title=\"Markdown All in One\"></a>Markdown All in One</h3><h3 id=\"Markdown-Extended\"><a href=\"#Markdown-Extended\" class=\"headerlink\" title=\"Markdown Extended\"></a>Markdown Extended</h3><h3 id=\"Markdown-Preview-Enhanced\"><a href=\"#Markdown-Preview-Enhanced\" class=\"headerlink\" title=\"Markdown Preview Enhanced\"></a>Markdown Preview Enhanced</h3><h3 id=\"markdownlint\"><a href=\"#markdownlint\" class=\"headerlink\" title=\"markdownlint\"></a>markdownlint</h3><h3 id=\"npm-Intellisense\"><a href=\"#npm-Intellisense\" class=\"headerlink\" title=\"npm Intellisense\"></a>npm Intellisense</h3><h3 id=\"Paste-Image\"><a href=\"#Paste-Image\" class=\"headerlink\" title=\"Paste Image\"></a>Paste Image</h3><h3 id=\"Path-Intellisense\"><a href=\"#Path-Intellisense\" class=\"headerlink\" title=\"Path Intellisense\"></a>Path Intellisense</h3><h3 id=\"Project-Manager\"><a href=\"#Project-Manager\" class=\"headerlink\" title=\"Project Manager\"></a>Project Manager</h3><h3 id=\"Stylelint\"><a href=\"#Stylelint\" class=\"headerlink\" title=\"Stylelint\"></a>Stylelint</h3><h3 id=\"Vetur\"><a href=\"#Vetur\" class=\"headerlink\" title=\"Vetur\"></a>Vetur</h3><h3 id=\"vscode-icons\"><a href=\"#vscode-icons\" class=\"headerlink\" title=\"vscode-icons\"></a>vscode-icons</h3><h3 id=\"vscode-json\"><a href=\"#vscode-json\" class=\"headerlink\" title=\"vscode-json\"></a>vscode-json</h3><h3 id=\"Vue-3-Snippets\"><a href=\"#Vue-3-Snippets\" class=\"headerlink\" title=\"Vue 3 Snippets\"></a>Vue 3 Snippets</h3><h3 id=\"Vue-Airbnb-Style-VSCode-Snippets\"><a href=\"#Vue-Airbnb-Style-VSCode-Snippets\" class=\"headerlink\" title=\"Vue Airbnb Style VSCode Snippets\"></a>Vue Airbnb Style VSCode Snippets</h3><h3 id=\"Vue-Language-Features-Volar\"><a href=\"#Vue-Language-Features-Volar\" class=\"headerlink\" title=\"Vue Language Features (Volar)\"></a>Vue Language Features (Volar)</h3><h3 id=\"Vue-Peek\"><a href=\"#Vue-Peek\" class=\"headerlink\" title=\"Vue Peek\"></a>Vue Peek</h3><h3 id=\"Vue-VSCode-Snippets\"><a href=\"#Vue-VSCode-Snippets\" class=\"headerlink\" title=\"Vue VSCode Snippets\"></a>Vue VSCode Snippets</h3><h3 id=\"vue-helper\"><a href=\"#vue-helper\" class=\"headerlink\" title=\"vue-helper\"></a>vue-helper</h3>"},{"title":"常用链接备忘","date":"2022-07-29T02:06:11.000Z","_content":"\n## 常用链接备忘\n\n### 聚合图床\n\n<https://www.superbed.cn/>\n\n### 冷熊简历\n\n<http://cv.ftqq.com/>\n","source":"_posts/常用链接备忘.md","raw":"---\ntitle: 常用链接备忘\ndate: 2022-07-29 10:06:11\ntags:\n    链接\ncategories: [链接]\n---\n\n## 常用链接备忘\n\n### 聚合图床\n\n<https://www.superbed.cn/>\n\n### 冷熊简历\n\n<http://cv.ftqq.com/>\n","slug":"常用链接备忘","published":1,"updated":"2022-10-27T06:40:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1i005whgac0tksco58","content":"<h2 id=\"常用链接备忘\"><a href=\"#常用链接备忘\" class=\"headerlink\" title=\"常用链接备忘\"></a>常用链接备忘</h2><h3 id=\"聚合图床\"><a href=\"#聚合图床\" class=\"headerlink\" title=\"聚合图床\"></a>聚合图床</h3><p><a href=\"https://www.superbed.cn/\">https://www.superbed.cn/</a></p>\n<h3 id=\"冷熊简历\"><a href=\"#冷熊简历\" class=\"headerlink\" title=\"冷熊简历\"></a>冷熊简历</h3><p><a href=\"http://cv.ftqq.com/\">http://cv.ftqq.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用链接备忘\"><a href=\"#常用链接备忘\" class=\"headerlink\" title=\"常用链接备忘\"></a>常用链接备忘</h2><h3 id=\"聚合图床\"><a href=\"#聚合图床\" class=\"headerlink\" title=\"聚合图床\"></a>聚合图床</h3><p><a href=\"https://www.superbed.cn/\">https://www.superbed.cn/</a></p>\n<h3 id=\"冷熊简历\"><a href=\"#冷熊简历\" class=\"headerlink\" title=\"冷熊简历\"></a>冷熊简历</h3><p><a href=\"http://cv.ftqq.com/\">http://cv.ftqq.com/</a></p>\n"},{"title":"维护java项目之==和equals","date":"2021-03-19T01:54:38.000Z","_content":"\n最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 `==` 来比较两个对象的属性，\n于是顺手就把 `==` 改成了 equals。悲剧发生......🤣🤣🤣\n\n## `==` 和 equals 的区别\n\n`==` ：对于基本类型来说是值比较，对于引用类型来说是引用比较\nequals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。\n\n## 使用 equals 的前提\n\n使用 equals 进行比较，如：\na 和 b 是两个对象\n\n```java\n  a.getId().equals(b.getId())\n```\n\n需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。\n\n## 各种对象使用 equals\n\nString 类型：\n可以使用 StringUtils.equals()进行比较，该方法内置非空校验\n其余封装类型：\n可以使用 Objects.equals()进行比较，该方法内置非空校验\n使用三目运算符：\n\n```java\n  a.getId() == null ? b.getId() == null ? false : true : a.getId().equals(b.getId())\n```\n","source":"_posts/维护java项目之-和equals.md","raw":"---\ntitle: 维护java项目之==和equals\ndate: 2021-03-19 09:54:38\ntags:\n  - equals\n\ncategories: [后端, Java]\n---\n\n最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 `==` 来比较两个对象的属性，\n于是顺手就把 `==` 改成了 equals。悲剧发生......🤣🤣🤣\n\n## `==` 和 equals 的区别\n\n`==` ：对于基本类型来说是值比较，对于引用类型来说是引用比较\nequals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。\n\n## 使用 equals 的前提\n\n使用 equals 进行比较，如：\na 和 b 是两个对象\n\n```java\n  a.getId().equals(b.getId())\n```\n\n需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。\n\n## 各种对象使用 equals\n\nString 类型：\n可以使用 StringUtils.equals()进行比较，该方法内置非空校验\n其余封装类型：\n可以使用 Objects.equals()进行比较，该方法内置非空校验\n使用三目运算符：\n\n```java\n  a.getId() == null ? b.getId() == null ? false : true : a.getId().equals(b.getId())\n```\n","slug":"维护java项目之-和equals","published":1,"updated":"2022-10-27T06:40:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1j0060hgacdn6whji6","content":"<p>最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 <code>==</code> 来比较两个对象的属性，<br>于是顺手就把 <code>==</code> 改成了 equals。悲剧发生……🤣🤣🤣</p>\n<h2 id=\"和-equals-的区别\"><a href=\"#和-equals-的区别\" class=\"headerlink\" title=\"== 和 equals 的区别\"></a><code>==</code> 和 equals 的区别</h2><p><code>==</code> ：对于基本类型来说是值比较，对于引用类型来说是引用比较<br>equals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。</p>\n<h2 id=\"使用-equals-的前提\"><a href=\"#使用-equals-的前提\" class=\"headerlink\" title=\"使用 equals 的前提\"></a>使用 equals 的前提</h2><p>使用 equals 进行比较，如：<br>a 和 b 是两个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n\n<p>需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。</p>\n<h2 id=\"各种对象使用-equals\"><a href=\"#各种对象使用-equals\" class=\"headerlink\" title=\"各种对象使用 equals\"></a>各种对象使用 equals</h2><p>String 类型：<br>可以使用 StringUtils.equals()进行比较，该方法内置非空校验<br>其余封装类型：<br>可以使用 Objects.equals()进行比较，该方法内置非空校验<br>使用三目运算符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId() == <span class=\"literal\">null</span> ? b.getId() == <span class=\"literal\">null</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span> : a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 <code>==</code> 来比较两个对象的属性，<br>于是顺手就把 <code>==</code> 改成了 equals。悲剧发生……🤣🤣🤣</p>\n<h2 id=\"和-equals-的区别\"><a href=\"#和-equals-的区别\" class=\"headerlink\" title=\"== 和 equals 的区别\"></a><code>==</code> 和 equals 的区别</h2><p><code>==</code> ：对于基本类型来说是值比较，对于引用类型来说是引用比较<br>equals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。</p>\n<h2 id=\"使用-equals-的前提\"><a href=\"#使用-equals-的前提\" class=\"headerlink\" title=\"使用 equals 的前提\"></a>使用 equals 的前提</h2><p>使用 equals 进行比较，如：<br>a 和 b 是两个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n\n<p>需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。</p>\n<h2 id=\"各种对象使用-equals\"><a href=\"#各种对象使用-equals\" class=\"headerlink\" title=\"各种对象使用 equals\"></a>各种对象使用 equals</h2><p>String 类型：<br>可以使用 StringUtils.equals()进行比较，该方法内置非空校验<br>其余封装类型：<br>可以使用 Objects.equals()进行比较，该方法内置非空校验<br>使用三目运算符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.getId() == <span class=\"literal\">null</span> ? b.getId() == <span class=\"literal\">null</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span> : a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>\n"},{"title":"在浏览器输入URL回车之后发生了什么？","date":"2021-04-08T06:26:23.000Z","categies":["面试题"],"_content":"\n## 大致流程\n\n- URL 解析\n- DNS 查询\n- TCP 连接\n- 处理请求\n- 接受响应\n- 渲染页面\n","source":"_posts/在浏览器输入URL回车之后发生了什么？.md","raw":"---\ntitle: 在浏览器输入URL回车之后发生了什么？\ndate: 2021-04-08 14:26:23\ntags:\n  - 浏览器\n  - URL\ncategies: [面试题]\n---\n\n## 大致流程\n\n- URL 解析\n- DNS 查询\n- TCP 连接\n- 处理请求\n- 接受响应\n- 渲染页面\n","slug":"在浏览器输入URL回车之后发生了什么？","published":1,"updated":"2022-10-27T06:40:13.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhjvce1k0062hgacdlf5ef7a","content":"<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><ul>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><ul>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ul>\n"},{"title":"Echarts创建中国3D地图","date":"2023-06-15T06:05:14.000Z","_content":"\n## Echarts创建中国3D地图\n\n客户需要做一版3D中国地图，地图要倾斜角度，然后可以支持点击省份，对地图两侧的图表数据进行切换，此外还有一些纹理，顶牌信息面板的效果，不一一赘述，末尾我会放一张成品的图片。\n","source":"_posts/Echarts创建中国3D地图.md","raw":"---\ntitle: Echarts创建中国3D地图\ndate: 2023-06-15 14:05:14\ntags:\n  - echarts\n  - vue3\ncategories: [前端]\n---\n\n## Echarts创建中国3D地图\n\n客户需要做一版3D中国地图，地图要倾斜角度，然后可以支持点击省份，对地图两侧的图表数据进行切换，此外还有一些纹理，顶牌信息面板的效果，不一一赘述，末尾我会放一张成品的图片。\n","slug":"Echarts创建中国3D地图","published":1,"updated":"2023-06-15T06:24:46.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljasso6v0000zgacehj23jlq","content":"<h2 id=\"Echarts创建中国3D地图\"><a href=\"#Echarts创建中国3D地图\" class=\"headerlink\" title=\"Echarts创建中国3D地图\"></a>Echarts创建中国3D地图</h2><p>客户需要做一版3D中国地图，地图要倾斜角度，然后可以支持点击省份，对地图两侧的图表数据进行切换，此外还有一些纹理，顶牌信息面板的效果，不一一赘述，末尾我会放一张成品的图片。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Echarts创建中国3D地图\"><a href=\"#Echarts创建中国3D地图\" class=\"headerlink\" title=\"Echarts创建中国3D地图\"></a>Echarts创建中国3D地图</h2><p>客户需要做一版3D中国地图，地图要倾斜角度，然后可以支持点击省份，对地图两侧的图表数据进行切换，此外还有一些纹理，顶牌信息面板的效果，不一一赘述，末尾我会放一张成品的图片。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clhjvce000001hgacajfm2kvl","category_id":"clhjvce050004hgac60u328ig","_id":"clhjvce0g000vhgac0mb06v5v"},{"post_id":"clhjvce000001hgacajfm2kvl","category_id":"clhjvce0d000lhgachyj36krd","_id":"clhjvce0h000zhgac7dhq9c6c"},{"post_id":"clhjvce08000ahgacfuglcrxw","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce0h0011hgachzfc1e7y"},{"post_id":"clhjvce030003hgac13crgnjv","category_id":"clhjvce050004hgac60u328ig","_id":"clhjvce0l001ehgacapw6gp33"},{"post_id":"clhjvce030003hgac13crgnjv","category_id":"clhjvce0d000lhgachyj36krd","_id":"clhjvce0n001ghgac9fpafyis"},{"post_id":"clhjvce060007hgac8vzlcnhf","category_id":"clhjvce0a000fhgacg5uvdv59","_id":"clhjvce0o001ohgacc1ggh2u5"},{"post_id":"clhjvce060007hgac8vzlcnhf","category_id":"clhjvce0n001ihgac9yxo5hyg","_id":"clhjvce0o001qhgach0slgu5a"},{"post_id":"clhjvce0h0010hgace2cacv4e","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0q0029hgaca3oa1nch"},{"post_id":"clhjvce0h0010hgace2cacv4e","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0q002chgac2f9ydm2b"},{"post_id":"clhjvce09000dhgacgmo1fdr7","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0r002ghgac2dn6h8o6"},{"post_id":"clhjvce09000dhgacgmo1fdr7","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce0r002hhgac90vefaw0"},{"post_id":"clhjvce0i0012hgac4a2s3bn2","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0r002khgac51wqaro4"},{"post_id":"clhjvce0i0012hgac4a2s3bn2","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0r002mhgac9bqm1sna"},{"post_id":"clhjvce0i0016hgac98p6h7ul","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0s002qhgacegp62m9b"},{"post_id":"clhjvce0i0016hgac98p6h7ul","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0s002rhgaccua407sx"},{"post_id":"clhjvce0j0018hgac5w6i4h6h","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0t002uhgac3qyo595k"},{"post_id":"clhjvce0j0018hgac5w6i4h6h","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0t002whgac3glddqqg"},{"post_id":"clhjvce0k001bhgac4a4f0sjc","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0t0030hgac0cwxc6na"},{"post_id":"clhjvce0k001bhgac4a4f0sjc","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0t0031hgacfii4f16r"},{"post_id":"clhjvce0a000ehgacgxtk80x6","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0u0034hgachbcg3fr1"},{"post_id":"clhjvce0a000ehgacgxtk80x6","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce0u0036hgach7ysg3mn"},{"post_id":"clhjvce0b000hhgacgcci4uwb","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0u0039hgace81g4oeg"},{"post_id":"clhjvce0b000hhgacgcci4uwb","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce0u003bhgac8m8h0q42"},{"post_id":"clhjvce0c000jhgac3nt8e6cy","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0v003fhgach7rpbozu"},{"post_id":"clhjvce0c000jhgac3nt8e6cy","category_id":"clhjvce0t0033hgac4fq5eohh","_id":"clhjvce0v003hhgachwuofm4r"},{"post_id":"clhjvce0d000nhgacgym2g5ji","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0v003khgac7kcs2yh8"},{"post_id":"clhjvce0d000nhgacgym2g5ji","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce0v003lhgac14lv51kx"},{"post_id":"clhjvce0e000ohgacc8yj7q2d","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0w003phgaccy8k4cvj"},{"post_id":"clhjvce0e000ohgacc8yj7q2d","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0w003rhgaceswf422x"},{"post_id":"clhjvce0f000rhgac7f4chuo6","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0w003uhgac7ubn71j7"},{"post_id":"clhjvce0f000rhgac7f4chuo6","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0w003vhgac346w42vp"},{"post_id":"clhjvce0f000thgac91voenhl","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0x003yhgacck457mik"},{"post_id":"clhjvce0f000thgac91voenhl","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0x0040hgacdrc7b59n"},{"post_id":"clhjvce0g000yhgac9xd01r8p","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce0x0042hgac2pgfcsty"},{"post_id":"clhjvce0g000yhgac9xd01r8p","category_id":"clhjvce0p0023hgac0dap1khv","_id":"clhjvce0x0043hgac4iov69yh"},{"post_id":"clhjvce110046hgac3wxg43u5","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce13004chgachiw7dkqd"},{"post_id":"clhjvce110046hgac3wxg43u5","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce14004fhgac1trlhfvu"},{"post_id":"clhjvce13004dhgac7kd94wk9","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce17004mhgacf8mp8gh0"},{"post_id":"clhjvce13004dhgac7kd94wk9","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce18004qhgacfdc806hf"},{"post_id":"clhjvce110047hgacgm5805mm","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce19004thgac0mgb7kyi"},{"post_id":"clhjvce110047hgacgm5805mm","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce1a004whgac66xbe2u6"},{"post_id":"clhjvce15004ghgac38d0fokx","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1b004zhgacbwp1f76i"},{"post_id":"clhjvce15004ghgac38d0fokx","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce1b0053hgac095573wz"},{"post_id":"clhjvce16004ihgachdq2gjfg","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1c0057hgac5uu213yl"},{"post_id":"clhjvce16004ihgachdq2gjfg","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce1d005ahgac4zz93jrm"},{"post_id":"clhjvce120049hgaceypkbdn9","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1d005dhgac5qr08p8o"},{"post_id":"clhjvce120049hgaceypkbdn9","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce1e005hhgac71b8drd1"},{"post_id":"clhjvce16004khgacd5o4eaug","category_id":"clhjvce050004hgac60u328ig","_id":"clhjvce1g005lhgacbugjbcw9"},{"post_id":"clhjvce16004khgacd5o4eaug","category_id":"clhjvce0d000lhgachyj36krd","_id":"clhjvce1h005nhgac8yrp1fcr"},{"post_id":"clhjvce12004ahgacbwww8gjh","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1i005qhgac1feh9t59"},{"post_id":"clhjvce12004ahgacbwww8gjh","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce1i005uhgacadw5gr25"},{"post_id":"clhjvce1b0051hgac9x1pcr38","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1j005yhgaccenka967"},{"post_id":"clhjvce1b0056hgacgw328z83","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1k0061hgacbxzs175m"},{"post_id":"clhjvce1c0058hgac904i1guh","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1k0064hgac5aqn39vi"},{"post_id":"clhjvce1d005bhgac8gw30c6g","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1k0066hgaccs0e70sb"},{"post_id":"clhjvce1e005fhgac1sr36z7l","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1l0069hgacdyp8fe19"},{"post_id":"clhjvce1a004yhgac8d4e6ztm","category_id":"clhjvce1e005ghgacfh1m37yd","_id":"clhjvce1l006chgac43lcdv1u"},{"post_id":"clhjvce1g005mhgac85g311rx","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce1l006ehgace0sx2mo9"},{"post_id":"clhjvce1g005mhgac85g311rx","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce1l006fhgach6p46u9k"},{"post_id":"clhjvce1h005phgac5ypm6bup","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1l006ihgac8tefakkw"},{"post_id":"clhjvce1h005phgac5ypm6bup","category_id":"clhjvce13004bhgac0fum0t0e","_id":"clhjvce1m006lhgacceiockn9"},{"post_id":"clhjvce17004ohgac4pj15slt","category_id":"clhjvce19004uhgac4m6v1z9n","_id":"clhjvce1m006nhgac8puvbjwb"},{"post_id":"clhjvce17004ohgac4pj15slt","category_id":"clhjvce1h005ohgac1ljvdym7","_id":"clhjvce1m006phgacedgg3fr1"},{"post_id":"clhjvce19004shgac916b8ytv","category_id":"clhjvce1b0052hgacc1eaa03m","_id":"clhjvce1m006rhgac4igsb6tq"},{"post_id":"clhjvce19004shgac916b8ytv","category_id":"clhjvce1i005vhgacec1zguxe","_id":"clhjvce1m006thgac5y1h328k"},{"post_id":"clhjvce1j0060hgacdn6whji6","category_id":"clhjvce0g000whgaccfj3b25g","_id":"clhjvce1n006whgacat822bij"},{"post_id":"clhjvce1j0060hgacdn6whji6","category_id":"clhjvce0q0027hgace9zdfdz0","_id":"clhjvce1n006xhgac9y7fhbye"},{"post_id":"clhjvce19004vhgac4aet6k62","category_id":"clhjvce1b0052hgacc1eaa03m","_id":"clhjvce1n006yhgac4fqb5mmm"},{"post_id":"clhjvce19004vhgac4aet6k62","category_id":"clhjvce1i005vhgacec1zguxe","_id":"clhjvce1o0071hgacfjiockw0"},{"post_id":"clhjvce1e005jhgac4d58dvnx","category_id":"clhjvce0e000phgacf5tyf66b","_id":"clhjvce1o0073hgace4exe1pd"},{"post_id":"clhjvce1e005jhgac4d58dvnx","category_id":"clhjvce1l0068hgac2k7w03yf","_id":"clhjvce1o0075hgac6yiq5qwt"},{"post_id":"clhjvce1i005whgac0tksco58","category_id":"clhjvce1l006jhgac5uce7sy6","_id":"clhjvce1o0076hgachjcuac68"},{"post_id":"clhjvce1i005shgach5itbjyi","category_id":"clhjvce1l006dhgac2dbhgz5t","_id":"clhjvce1o0078hgac75gsbr3s"},{"post_id":"clhjvce1i005shgach5itbjyi","category_id":"clhjvce1m006ohgac1b1o242o","_id":"clhjvce1o007ahgacamm6b6yy"},{"post_id":"cljasso6v0000zgacehj23jlq","category_id":"clhjvce0e000phgacf5tyf66b","_id":"cljasso750002zgac435r0w42"}],"PostTag":[{"post_id":"clhjvce000001hgacajfm2kvl","tag_id":"clhjvce050005hgacep17e5f9","_id":"clhjvce0c000ihgac8gm9e981"},{"post_id":"clhjvce000001hgacajfm2kvl","tag_id":"clhjvce08000chgaccgy1ej2w","_id":"clhjvce0d000khgacbhwrh6lo"},{"post_id":"clhjvce030003hgac13crgnjv","tag_id":"clhjvce0b000ghgacby9jdawa","_id":"clhjvce0f000shgac4avq659f"},{"post_id":"clhjvce030003hgac13crgnjv","tag_id":"clhjvce08000chgaccgy1ej2w","_id":"clhjvce0g000uhgacau9vgaqd"},{"post_id":"clhjvce060007hgac8vzlcnhf","tag_id":"clhjvce0e000qhgacaryq5m0t","_id":"clhjvce0i0015hgac31yxggfi"},{"post_id":"clhjvce060007hgac8vzlcnhf","tag_id":"clhjvce0g000xhgac8dh5bx5d","_id":"clhjvce0j0017hgachu8ngxuq"},{"post_id":"clhjvce08000ahgacfuglcrxw","tag_id":"clhjvce0i0014hgacgb8b235k","_id":"clhjvce0k001chgach57m40pv"},{"post_id":"clhjvce09000dhgacgmo1fdr7","tag_id":"clhjvce0k001ahgaccaqm1wvt","_id":"clhjvce0n001hhgachnjg3jka"},{"post_id":"clhjvce0a000ehgacgxtk80x6","tag_id":"clhjvce0l001fhgac6fsi7akn","_id":"clhjvce0n001mhgac9p175nc4"},{"post_id":"clhjvce0a000ehgacgxtk80x6","tag_id":"clhjvce0n001jhgacas5h1h2r","_id":"clhjvce0o001phgacar192lxd"},{"post_id":"clhjvce0b000hhgacgcci4uwb","tag_id":"clhjvce0n001lhgac5ntb9tgv","_id":"clhjvce0o001shgace3jfdt36"},{"post_id":"clhjvce0c000jhgac3nt8e6cy","tag_id":"clhjvce0o001rhgac9e3uagg4","_id":"clhjvce0o001whgac3nymfktx"},{"post_id":"clhjvce0d000nhgacgym2g5ji","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0p001zhgacbvjr3p2o"},{"post_id":"clhjvce0e000ohgacc8yj7q2d","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0q0024hgac9qo7d6eq"},{"post_id":"clhjvce0e000ohgacc8yj7q2d","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0q0025hgac26x2dz02"},{"post_id":"clhjvce0f000rhgac7f4chuo6","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0q002bhgac7f3j1bi6"},{"post_id":"clhjvce0f000rhgac7f4chuo6","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0r002dhgacdgkjhki6"},{"post_id":"clhjvce0f000thgac91voenhl","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0r002lhgaccm22hbsn"},{"post_id":"clhjvce0f000thgac91voenhl","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0s002nhgacfg5c3u93"},{"post_id":"clhjvce0g000yhgac9xd01r8p","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0t002vhgacaok31fxo"},{"post_id":"clhjvce0g000yhgac9xd01r8p","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0t002xhgac2fw81eto"},{"post_id":"clhjvce0h0010hgace2cacv4e","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0u0035hgac11ncffpj"},{"post_id":"clhjvce0h0010hgace2cacv4e","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0u0037hgacfcu12xjz"},{"post_id":"clhjvce0i0012hgac4a2s3bn2","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0v003dhgacbil79yr4"},{"post_id":"clhjvce0i0012hgac4a2s3bn2","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0v003ghgac7zwi02mh"},{"post_id":"clhjvce0i0016hgac98p6h7ul","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0w003nhgac5ld2eonr"},{"post_id":"clhjvce0i0016hgac98p6h7ul","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0w003qhgac817cgbli"},{"post_id":"clhjvce0j0018hgac5w6i4h6h","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0x003xhgac9vxv5oqm"},{"post_id":"clhjvce0j0018hgac5w6i4h6h","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0x003zhgac9y3fh9yv"},{"post_id":"clhjvce0k001bhgac4a4f0sjc","tag_id":"clhjvce0p001xhgacdw39ae1f","_id":"clhjvce0x0044hgacdqdwae2d"},{"post_id":"clhjvce0k001bhgac4a4f0sjc","tag_id":"clhjvce0o001uhgacened9dx9","_id":"clhjvce0x0045hgac7mg66v2d"},{"post_id":"clhjvce110046hgac3wxg43u5","tag_id":"clhjvce120048hgac3yjt0mjw","_id":"clhjvce17004lhgacczy31ak2"},{"post_id":"clhjvce110046hgac3wxg43u5","tag_id":"clhjvce13004ehgaceaqb5y0f","_id":"clhjvce18004phgac35ib6tr7"},{"post_id":"clhjvce110047hgacgm5805mm","tag_id":"clhjvce16004jhgacbva44l9n","_id":"clhjvce1b0050hgac6qfx6f1s"},{"post_id":"clhjvce110047hgacgm5805mm","tag_id":"clhjvce18004rhgacedpobv1g","_id":"clhjvce1b0054hgac64w04dko"},{"post_id":"clhjvce120049hgaceypkbdn9","tag_id":"clhjvce16004jhgacbva44l9n","_id":"clhjvce1e005ehgac2wpv07s8"},{"post_id":"clhjvce120049hgaceypkbdn9","tag_id":"clhjvce1b0055hgac0plm5l0m","_id":"clhjvce1e005ihgac6z3oapce"},{"post_id":"clhjvce12004ahgacbwww8gjh","tag_id":"clhjvce16004jhgacbva44l9n","_id":"clhjvce1i005thgacdrf86r9s"},{"post_id":"clhjvce12004ahgacbwww8gjh","tag_id":"clhjvce1g005khgac8w7s0gw0","_id":"clhjvce1j005xhgaceims17v2"},{"post_id":"clhjvce13004dhgac7kd94wk9","tag_id":"clhjvce1i005rhgachhro3xq8","_id":"clhjvce1l0067hgac6hcj7o14"},{"post_id":"clhjvce13004dhgac7kd94wk9","tag_id":"clhjvce1j005zhgac3kc8gpi4","_id":"clhjvce1l006ahgacf7uw71oz"},{"post_id":"clhjvce15004ghgac38d0fokx","tag_id":"clhjvce1k0065hgacb0z12rz8","_id":"clhjvce1l006hhgacclqwb16x"},{"post_id":"clhjvce15004ghgac38d0fokx","tag_id":"clhjvce1l006bhgac0pbn7l7c","_id":"clhjvce1m006khgac55lm74j3"},{"post_id":"clhjvce16004ihgachdq2gjfg","tag_id":"clhjvce1l006ghgac6b313s5r","_id":"clhjvce1m006shgacg8jx08f3"},{"post_id":"clhjvce16004ihgachdq2gjfg","tag_id":"clhjvce1m006mhgacdgcf9c2r","_id":"clhjvce1n006uhgacg3h1a1zk"},{"post_id":"clhjvce16004khgacd5o4eaug","tag_id":"clhjvce1m006qhgachsnb1pnx","_id":"clhjvce1o0070hgac2kf6hn6m"},{"post_id":"clhjvce16004khgacd5o4eaug","tag_id":"clhjvce1n006vhgac61vxaf0a","_id":"clhjvce1o0072hgachmg84su7"},{"post_id":"clhjvce17004ohgac4pj15slt","tag_id":"clhjvce1n006zhgach366bwh1","_id":"clhjvce1o0079hgac37n9d6x5"},{"post_id":"clhjvce17004ohgac4pj15slt","tag_id":"clhjvce1o0074hgac4iy60vp5","_id":"clhjvce1o007bhgac2lygeyc3"},{"post_id":"clhjvce19004shgac916b8ytv","tag_id":"clhjvce1o0077hgacb7vdbvsq","_id":"clhjvce1o007dhgac3s9i801e"},{"post_id":"clhjvce19004vhgac4aet6k62","tag_id":"clhjvce1o007chgac9ld68n35","_id":"clhjvce1p007fhgac3oqpgojc"},{"post_id":"clhjvce1a004yhgac8d4e6ztm","tag_id":"clhjvce1o007ehgac2ssb0lq4","_id":"clhjvce1p007hhgacdub10x93"},{"post_id":"clhjvce1b0051hgac9x1pcr38","tag_id":"clhjvce1p007ghgacfa083k4f","_id":"clhjvce1q007khgacac3lhm3y"},{"post_id":"clhjvce1b0051hgac9x1pcr38","tag_id":"clhjvce1p007ihgac65rabga4","_id":"clhjvce1q007lhgac3k7s8x12"},{"post_id":"clhjvce1b0056hgacgw328z83","tag_id":"clhjvce1q007jhgac8rmu450m","_id":"clhjvce1q007nhgac47mabfk6"},{"post_id":"clhjvce1c0058hgac904i1guh","tag_id":"clhjvce1q007jhgac8rmu450m","_id":"clhjvce1q007phgac5vica0ij"},{"post_id":"clhjvce1d005bhgac8gw30c6g","tag_id":"clhjvce1q007jhgac8rmu450m","_id":"clhjvce1q007rhgaca7e3ej0y"},{"post_id":"clhjvce1e005fhgac1sr36z7l","tag_id":"clhjvce1q007jhgac8rmu450m","_id":"clhjvce1q007thgac10d0axji"},{"post_id":"clhjvce1e005jhgac4d58dvnx","tag_id":"clhjvce1q007shgacht26g36l","_id":"clhjvce1r007vhgacc6eq2t3n"},{"post_id":"clhjvce1g005mhgac85g311rx","tag_id":"clhjvce1q007uhgacg0eh90h9","_id":"clhjvce1r007xhgac8iy8bl0p"},{"post_id":"clhjvce1g005mhgac85g311rx","tag_id":"clhjvce0n001jhgacas5h1h2r","_id":"clhjvce1s007yhgacaerx9bkh"},{"post_id":"clhjvce1h005phgac5ypm6bup","tag_id":"clhjvce1r007whgache1ode19","_id":"clhjvce1t0081hgac52gu3vv5"},{"post_id":"clhjvce1h005phgac5ypm6bup","tag_id":"clhjvce1s007zhgacgfs9412u","_id":"clhjvce1t0082hgacavb48mfn"},{"post_id":"clhjvce1i005shgach5itbjyi","tag_id":"clhjvce1s0080hgac3wquajgj","_id":"clhjvce1t0084hgac4jit00hw"},{"post_id":"clhjvce1i005whgac0tksco58","tag_id":"clhjvce1t0083hgacan65gt4e","_id":"clhjvce1t0086hgachhhchqi8"},{"post_id":"clhjvce1j0060hgacdn6whji6","tag_id":"clhjvce1t0085hgac085s962a","_id":"clhjvce1t0088hgac965wd68m"},{"post_id":"clhjvce1k0062hgacdlf5ef7a","tag_id":"clhjvce1t0087hgac1v3jf6wk","_id":"clhjvce1t008ahgac5tfc83ws"},{"post_id":"clhjvce1k0062hgacdlf5ef7a","tag_id":"clhjvce1t0089hgac60tchzrb","_id":"clhjvce1t008bhgac3c4592cy"},{"post_id":"cljasso6v0000zgacehj23jlq","tag_id":"cljasso6z0001zgac3kic2v0i","_id":"cljasso750004zgac1lwxg92t"},{"post_id":"cljasso6v0000zgacehj23jlq","tag_id":"cljasso750003zgacgvcogcgf","_id":"cljasso750005zgac698ngavr"}],"Tag":[{"name":"AutoUpdater","_id":"clhjvce050005hgacep17e5f9"},{"name":"客户端","_id":"clhjvce08000chgaccgy1ej2w"},{"name":"CefSharp","_id":"clhjvce0b000ghgacby9jdawa"},{"name":"Elasticsearch","_id":"clhjvce0e000qhgacaryq5m0t"},{"name":"笔记","_id":"clhjvce0g000xhgac8dh5bx5d"},{"name":"循环","_id":"clhjvce0i0014hgacgb8b235k"},{"name":"IO模型","_id":"clhjvce0k001ahgaccaqm1wvt"},{"name":"类型转换","_id":"clhjvce0l001fhgac6fsi7akn"},{"name":"Utils","_id":"clhjvce0n001jhgacas5h1h2r"},{"name":"JVM","_id":"clhjvce0n001lhgac5ntb9tgv"},{"name":"文件处理","_id":"clhjvce0o001rhgac9e3uagg4"},{"name":"数组","_id":"clhjvce0o001uhgacened9dx9"},{"name":"LeetCode","_id":"clhjvce0p001xhgacdw39ae1f"},{"name":"Spring Batch","_id":"clhjvce120048hgac3yjt0mjw"},{"name":"批处理","_id":"clhjvce13004ehgaceaqb5y0f"},{"name":"Vue","_id":"clhjvce16004jhgacbva44l9n"},{"name":"Swiper","_id":"clhjvce18004rhgacedpobv1g"},{"name":"Mitt","_id":"clhjvce1b0055hgac0plm5l0m"},{"name":"Pinia","_id":"clhjvce1g005khgac8w7s0gw0"},{"name":"防抖","_id":"clhjvce1i005rhgachhro3xq8"},{"name":"节流","_id":"clhjvce1j005zhgac3kc8gpi4"},{"name":"引入JS","_id":"clhjvce1k0065hgacb0z12rz8"},{"name":"模板语法","_id":"clhjvce1l006bhgac0pbn7l7c"},{"name":"el与data","_id":"clhjvce1l006ghgac6b313s5r"},{"name":"MVVM模型","_id":"clhjvce1m006mhgacdgcf9c2r"},{"name":"控件","_id":"clhjvce1m006qhgachsnb1pnx"},{"name":"居中","_id":"clhjvce1n006vhgac61vxaf0a"},{"name":"Hive","_id":"clhjvce1n006zhgach366bwh1"},{"name":"数据库","_id":"clhjvce1o0074hgac4iy60vp5"},{"name":"端口占用","_id":"clhjvce1o0077hgacb7vdbvsq"},{"name":"jar包","_id":"clhjvce1o007chgac9ld68n35"},{"name":"简历","_id":"clhjvce1o007ehgac2ssb0lq4"},{"name":"异步","_id":"clhjvce1p007ghgacfa083k4f"},{"name":"async/await","_id":"clhjvce1p007ihgac65rabga4"},{"name":"css","_id":"clhjvce1q007jhgac8rmu450m"},{"name":"文件上传","_id":"clhjvce1q007shgacht26g36l"},{"name":"日期解析","_id":"clhjvce1q007uhgacg0eh90h9"},{"name":"双向绑定","_id":"clhjvce1r007whgache1ode19"},{"name":"单向绑定","_id":"clhjvce1s007zhgacgfs9412u"},{"name":"Vscode","_id":"clhjvce1s0080hgac3wquajgj"},{"name":"链接","_id":"clhjvce1t0083hgacan65gt4e"},{"name":"equals","_id":"clhjvce1t0085hgac085s962a"},{"name":"浏览器","_id":"clhjvce1t0087hgac1v3jf6wk"},{"name":"URL","_id":"clhjvce1t0089hgac60tchzrb"},{"name":"echarts","_id":"cljasso6z0001zgac3kic2v0i"},{"name":"vue3","_id":"cljasso750003zgacgvcogcgf"}]}}