<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3 + Swiper开发轮播列表组件</title>
      <link href="/2023/03/20/vue3-swiper-kai-fa-lun-bo-lie-biao-zu-jian/"/>
      <url>/2023/03/20/vue3-swiper-kai-fa-lun-bo-lie-biao-zu-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3-Swiper开发轮播列表组件"><a href="#Vue3-Swiper开发轮播列表组件" class="headerlink" title="Vue3 + Swiper开发轮播列表组件"></a>Vue3 + Swiper开发轮播列表组件</h2><p>前端开发中，轮播列表的场景并不少见，通常使用<code>Vue+Swiper</code>来实现，上手比较快。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>直接执行npm命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i swiper</span><br></pre></td></tr></table></figure><h3 id="组件编写"><a href="#组件编写" class="headerlink" title="组件编写"></a>组件编写</h3><h4 id="Html模板代码"><a href="#Html模板代码" class="headerlink" title="Html模板代码"></a>Html模板代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-list-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 列标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in column&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title-name&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width: `$&#123;item.width&#125;px`&#125;&quot;</span>&gt;</span></span><br><span class="line">                    &#123;&#123;item.title&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container list-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide list-line&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;val in column&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;val.key&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: `$&#123;val.width&#125;px` &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                        &#123;&#123;item[val.key]&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS逻辑代码"><a href="#JS逻辑代码" class="headerlink" title="JS逻辑代码"></a>JS逻辑代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/dist/css/swiper.min.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/dist/js/swiper.min&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&#x27;swiper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="comment">// 列标题</span></span><br><span class="line">        <span class="attr">column</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="function">() =&gt;</span> [</span><br><span class="line">                &#123; <span class="attr">title</span>: <span class="string">&#x27;姓名&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;name&#x27;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">title</span>: <span class="string">&#x27;年龄&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;age&#x27;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">title</span>: <span class="string">&#x27;性别&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;sex&#x27;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 数据</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="function">() =&gt;</span> [</span><br><span class="line">                &#123; <span class="attr">name</span>: <span class="string">&#x27;Nicholas&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">name</span>: <span class="string">&#x27;Hetty&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">name</span>: <span class="string">&#x27;Graham&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">name</span>: <span class="string">&#x27;Harley&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">name</span>: <span class="string">&#x27;Finbar&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">name</span>: <span class="string">&#x27;Oliver&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">swipers</span>: <span class="literal">null</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">createSwiper</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            data.<span class="property">swipers</span> = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">height</span>: <span class="number">150</span>,</span><br><span class="line">                <span class="attr">speed</span>: <span class="number">2000</span>, <span class="comment">// 匀速时间</span></span><br><span class="line">                <span class="attr">autoplay</span>: &#123;</span><br><span class="line">                    <span class="attr">delay</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">stopOnLastSlide</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">disableOnInteraction</span>: <span class="literal">false</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">freeMode</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">loop</span>: props.<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">5</span>,</span><br><span class="line">                <span class="attr">direction</span>: <span class="string">&#x27;vertical&#x27;</span>,</span><br><span class="line">                <span class="attr">slidesPerView</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!data.<span class="property">swipers</span>) &#123;</span><br><span class="line">                <span class="title function_">createSwiper</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((data.<span class="property">swipers</span>.<span class="property">passedParams</span>.<span class="property">loop</span> === <span class="literal">true</span> &amp;&amp; props.<span class="property">data</span>.<span class="property">length</span> &lt;= <span class="number">5</span>)</span><br><span class="line">                || (data.<span class="property">swipers</span>.<span class="property">passedParams</span>.<span class="property">loop</span> === <span class="literal">false</span> &amp;&amp; data.<span class="property">listData</span>.<span class="property">length</span> &gt; <span class="number">5</span>)) &#123;</span><br><span class="line">                data.<span class="property">swipers</span>.<span class="title function_">destroy</span>();</span><br><span class="line">                data.<span class="property">swipers</span> = <span class="literal">null</span>;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">createSwiper</span>();</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                data.<span class="property">swipers</span>.<span class="title function_">update</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">init</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="SCSS样式代码"><a href="#SCSS样式代码" class="headerlink" title="SCSS样式代码"></a>SCSS样式代码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-class">.swiper-list-container</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">185</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-title</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d59701</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1a6975</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.title-name</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e9caa6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.list-line</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d59701</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.item</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="重点讲解"><a href="#重点讲解" class="headerlink" title="重点讲解"></a>重点讲解</h4><ul><li>class <code>swiper-container/swiper-wrappe/swiper-slide</code>依次排序，由此将Swiper的样式引入到Vue组件中</li><li>初始化Swiper，即createSwiper方法中，new Swiper对象时应该和Html中的class名称相一致，此外如果存在多个场景使用Swiper时，应该将这个class name命名为不同的名称</li><li>根据接口或者数据更新，要区分创建和更新Swiper两种场景</li></ul><h4 id="Swiper参数介绍"><a href="#Swiper参数介绍" class="headerlink" title="Swiper参数介绍"></a>Swiper参数介绍</h4><p>此处仅介绍上述组件中使用到的参数，其他参数请参照官方文档<br><a href="https://www.swiper.com.cn/api/index.html">https://www.swiper.com.cn/api/index.html</a></p><ul><li>height：强制Swiper的高度(px)，当你的Swiper在隐藏状态下初始化时且切换方向为垂直才用得上。这个参数会使自适应失效</li><li>speed：切换速度，即slider自动滑动开始到结束的时间（单位ms），也是触摸滑动时释放至贴合的时间</li><li>autoplay：设置为true启动自动切换，并使用默认的切换设置</li><li>freeMode：启用自由模式功能，默认情况下Swiper 每次滑动时只滑动一个Slide，并且会自动贴合Wrapper。开启自由模式后，Swiper 会根据惯性滑动可能不止一格且不会贴合</li><li>loop：设置为 true 则开启循环(loop)模式。loop模式：会在原本slide 前后复制若干个slide (默认一个)并在合适的时候切换，让Swiper看起来像是循环的。复制的slide 上有一些额外的类名代表他是生成的</li><li>direction：Swiper的滑动方向，可设置为水平方向切换 horizontal 或垂直方向切换 vertical</li><li>slidesPerView：设置slider容器能够同时显示的slides数量(carousel模式)。可以设置为数字（可为小数，小数不可loop），或者 ‘auto’则自动根据slides的宽度来设定数量</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Swiper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>commons-io的Java文件处理常用方法</title>
      <link href="/2023/02/17/java-wen-jian-chu-li-chang-yong-fang-fa/"/>
      <url>/2023/02/17/java-wen-jian-chu-li-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Java文件处理常用方法"><a href="#Java文件处理常用方法" class="headerlink" title="Java文件处理常用方法"></a>Java文件处理常用方法</h2><p>归纳整理一些常用的处理文件的方法</p><h3 id="Java-Apache-FileUtils"><a href="#Java-Apache-FileUtils" class="headerlink" title="Java Apache FileUtils"></a>Java Apache FileUtils</h3><h4 id="Maven依赖引入"><a href="#Maven依赖引入" class="headerlink" title="Maven依赖引入"></a>Maven依赖引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cn.ybwn.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.FileFileFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.FileFilterUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.IOFileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.CRC32;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 25724</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/16 9:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtilsTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDirTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获得基本的信息</span></span><br><span class="line">        <span class="comment">//获取临时目录 java.io.tmpdir,getUserDirectoryPath返回路径字符串</span></span><br><span class="line">        System.out.println(FileUtils.getTempDirectory());</span><br><span class="line">        <span class="comment">//获取用户主目录 user.home,getUserDirectoryPath返回路径字符串</span></span><br><span class="line">        System.out.println(FileUtils.getUserDirectory());</span><br><span class="line">        <span class="comment">//以可读的方式，返回文件的大小EB, PB, TB, GB, MB, KB or bytes</span></span><br><span class="line">        System.out.println(FileUtils.byteCountToDisplaySize(<span class="number">10000000</span>));</span><br><span class="line">        System.out.println(FileUtils.byteCountToDisplaySize(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件输入和输出的文件流</span></span><br><span class="line">        <span class="comment">//文件是目录或者不存在，都会跑出异常</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> FileUtils.openInputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test1&quot;</span>));</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> FileUtils.openOutputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test2&quot;</span>));</span><br><span class="line">        <span class="comment">//是否追加的形式添加内容</span></span><br><span class="line">        out = FileUtils.openOutputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test3&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FileOperation</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建文件，如果文件存在则更新时间；如果不存在，创建一个空文件</span></span><br><span class="line">        <span class="comment">//创建空文件的方式为：</span></span><br><span class="line">        FileUtils.touch(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件内容的对比</span></span><br><span class="line">        FileUtils.contentEquals(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test1&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test2&quot;</span>));</span><br><span class="line">        <span class="comment">//忽略换行符，第三个参数是字符集</span></span><br><span class="line">        FileUtils.contentEqualsIgnoreEOL(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test1&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test2&quot;</span>), <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据URL获取文件</span></span><br><span class="line">        FileUtils.toFile(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file://D://test/test1&quot;</span>));</span><br><span class="line">        FileUtils.toFiles(<span class="literal">null</span>);</span><br><span class="line">        FileUtils.toURLs(<span class="keyword">new</span> <span class="title class_">File</span>[]&#123;<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://test/test1&quot;</span>)&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件拷贝</span></span><br><span class="line">        <span class="comment">//第三个参数是否更新时间</span></span><br><span class="line">        FileUtils.copyFileToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/test1&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/source&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目录拷贝</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/source&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileUtils.copyDirectoryToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/source&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line">        FileUtils.copyDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/source&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line">        <span class="comment">//仅仅拷贝目录</span></span><br><span class="line">        FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);</span><br><span class="line">        <span class="comment">// 创建.txt过滤器</span></span><br><span class="line">        <span class="type">IOFileFilter</span> <span class="variable">txtSuffixFilter</span> <span class="operator">=</span> FileFilterUtils.suffixFileFilter(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        <span class="type">IOFileFilter</span> <span class="variable">txtFiles</span> <span class="operator">=</span> FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);</span><br><span class="line">        <span class="comment">// 创建包含目录或者txt文件的过滤器</span></span><br><span class="line">        <span class="type">FileFilter</span> <span class="variable">filter</span> <span class="operator">=</span> FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);</span><br><span class="line">        <span class="comment">// Copy using the filter</span></span><br><span class="line">        FileUtils.copyDirectory(srcDir, destDir, filter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件拷贝</span></span><br><span class="line">        FileUtils.copyInputStreamToFile(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/test&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/test&quot;</span>));</span><br><span class="line">        FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:/test&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/test&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件</span></span><br><span class="line">        <span class="comment">//删除目录下所有的内容</span></span><br><span class="line">        FileUtils.deleteDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/test&quot;</span>));</span><br><span class="line">        <span class="comment">//如果是目录，会级联删除；不会抛出异常</span></span><br><span class="line">        FileUtils.deleteQuietly(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/test&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件是否存在</span></span><br><span class="line">        FileUtils.directoryContains(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清除目录中的内容,不会删除该目录；</span></span><br><span class="line">        <span class="comment">//先verifiedListFiles检查目录，检查目录是否为目录、是否存在，然后调用listFiles，如果返回null，则抛出异常</span></span><br><span class="line">        <span class="comment">//遍历目录中的文件，如果是目录则递归删除；如果是文件则强制删除，删除失败（文件不存在或无法删除）都会抛出异常</span></span><br><span class="line">        FileUtils.cleanDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待一个文件xx秒，知道文件创建后才返回。每max(100,remainning)循环检查一次</span></span><br><span class="line">        <span class="keyword">while</span> (FileUtils.waitFor(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="number">60</span>)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取目标文件，内部调用IOUtils.toString(inputstream,&quot;utf-8&quot;)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> FileUtils.readFileToString(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部调用IOUtils.toByteArray(in)</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = FileUtils.readFileToByteArray(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部调用IOUtils.readLines(in, Charsets.toCharset(encoding));</span></span><br><span class="line">        List&lt;String&gt; strs = FileUtils.readLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部调用IOUtils.lineIterator(in, encoding)</span></span><br><span class="line">        FileUtils.lineIterator(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//四个参数分别为：目标文件，写入的字符串，字符集，是否追加</span></span><br><span class="line">        FileUtils.writeStringToFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;string&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        FileUtils.write(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;target char sequence&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(file,字符数组)</span></span><br><span class="line">        FileUtils.writeByteArrayToFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;bytes&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//(file,字符数组，是否追加)</span></span><br><span class="line">        FileUtils.writeByteArrayToFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;bytes&quot;</span>.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//(file,字符数组，起始位置，结束位置)</span></span><br><span class="line">        FileUtils.writeByteArrayToFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;bytes&quot;</span>.getBytes(), <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//(file,字符数组，起始位置，结束位置，是否追加)</span></span><br><span class="line">        FileUtils.writeByteArrayToFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;bytes&quot;</span>.getBytes(), <span class="number">0</span>, <span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeLines多了一个lineEnding参数</span></span><br><span class="line">        FileUtils.writeLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;utf-8&quot;</span>, FileUtils.readLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制删除</span></span><br><span class="line">        FileUtils.forceDelete(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在JVM</span></span><br><span class="line">        FileUtils.forceDeleteOnExit(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制创建文件目录，如果文件存在，会抛出异常</span></span><br><span class="line">        FileUtils.forceMkdir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制创建父级目录</span></span><br><span class="line">        FileUtils.forceMkdirParent(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/xxxx/target&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是文件，直接读取文件大小；如果是目录，级联计算文件下的所有文件大小</span></span><br><span class="line">        <span class="comment">//返回Long</span></span><br><span class="line">        FileUtils.sizeOf(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line">        <span class="comment">//返回BigInteger</span></span><br><span class="line">        FileUtils.sizeOfAsBigInteger(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line">        FileUtils.sizeOfDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line">        FileUtils.sizeOfDirectoryAsBigInteger(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对比文件新旧</span></span><br><span class="line">        FileUtils.isFileNewer(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line"></span><br><span class="line">        FileUtils.isFileOlder(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        FileUtils.checksum(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">CRC32</span>());</span><br><span class="line">        FileUtils.checksumCRC32(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line"></span><br><span class="line">        FileUtils.moveDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">        FileUtils.moveDirectoryToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/file&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        FileUtils.moveFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">        FileUtils.moveFileToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        FileUtils.moveToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/dir&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        FileUtils.isSymlink(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/target&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findFiles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回文件的列表</span></span><br><span class="line">        List&lt;File&gt; files = (List&lt;File&gt;) FileUtils.listFiles(parent, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test2&quot;</span>&#125;, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//返回文件迭代器</span></span><br><span class="line">        Iterator&lt;File&gt; files_iter = FileUtils.iterateFiles(parent, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test3&quot;</span>&#125;, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//把collection&lt;File&gt;转换成File[]</span></span><br><span class="line">        FileUtils.convertFileCollectionToFileArray(files);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> commons-io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用插件备份</title>
      <link href="/2022/07/29/chang-yong-cha-jian-bei-fen/"/>
      <url>/2022/07/29/chang-yong-cha-jian-bei-fen/</url>
      
        <content type="html"><![CDATA[<h2 id="Vscode插件备份"><a href="#Vscode插件备份" class="headerlink" title="Vscode插件备份"></a>Vscode插件备份</h2><p>Vscode插件备份</p><h3 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h3><h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h3><h3 id="Blockman-Highlight-Nested-Code-Blocks"><a href="#Blockman-Highlight-Nested-Code-Blocks" class="headerlink" title="Blockman - Highlight Nested Code Blocks"></a>Blockman - Highlight Nested Code Blocks</h3><h3 id="Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-简体中文-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code"></a>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</h3><h3 id="Class-autocomplete-for-HTML"><a href="#Class-autocomplete-for-HTML" class="headerlink" title="Class autocomplete for HTML"></a>Class autocomplete for HTML</h3><h3 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h3><h3 id="Color-Info"><a href="#Color-Info" class="headerlink" title="Color Info"></a>Color Info</h3><h3 id="CSS-Peek"><a href="#CSS-Peek" class="headerlink" title="CSS Peek"></a>CSS Peek</h3><h3 id="css-auto-prefix"><a href="#css-auto-prefix" class="headerlink" title="css-auto-prefix"></a>css-auto-prefix</h3><h3 id="Easy-Sass"><a href="#Easy-Sass" class="headerlink" title="Easy Sass"></a>Easy Sass</h3><h3 id="EditorConfig-for-VS-Code"><a href="#EditorConfig-for-VS-Code" class="headerlink" title="EditorConfig for VS Code"></a>EditorConfig for VS Code</h3><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><h3 id="GitHub-Theme"><a href="#GitHub-Theme" class="headerlink" title="GitHub Theme"></a>GitHub Theme</h3><h3 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h3><h3 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a>HTML CSS Support</h3><h3 id="IntelliSense-for-CSS-class-names-in-HTML"><a href="#IntelliSense-for-CSS-class-names-in-HTML" class="headerlink" title="IntelliSense for CSS class names in HTML"></a>IntelliSense for CSS class names in HTML</h3><h3 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript (ES6) code snippets"></a>JavaScript (ES6) code snippets</h3><h3 id="koroFileHeader"><a href="#koroFileHeader" class="headerlink" title="koroFileHeader"></a>koroFileHeader</h3><h3 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h3><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><h3 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a>Markdown All in One</h3><h3 id="Markdown-Extended"><a href="#Markdown-Extended" class="headerlink" title="Markdown Extended"></a>Markdown Extended</h3><h3 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h3><h3 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h3><h3 id="npm-Intellisense"><a href="#npm-Intellisense" class="headerlink" title="npm Intellisense"></a>npm Intellisense</h3><h3 id="Paste-Image"><a href="#Paste-Image" class="headerlink" title="Paste Image"></a>Paste Image</h3><h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h3><h3 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h3><h3 id="Stylelint"><a href="#Stylelint" class="headerlink" title="Stylelint"></a>Stylelint</h3><h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h3><h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h3><h3 id="vscode-json"><a href="#vscode-json" class="headerlink" title="vscode-json"></a>vscode-json</h3><h3 id="Vue-3-Snippets"><a href="#Vue-3-Snippets" class="headerlink" title="Vue 3 Snippets"></a>Vue 3 Snippets</h3><h3 id="Vue-Airbnb-Style-VSCode-Snippets"><a href="#Vue-Airbnb-Style-VSCode-Snippets" class="headerlink" title="Vue Airbnb Style VSCode Snippets"></a>Vue Airbnb Style VSCode Snippets</h3><h3 id="Vue-Language-Features-Volar"><a href="#Vue-Language-Features-Volar" class="headerlink" title="Vue Language Features (Volar)"></a>Vue Language Features (Volar)</h3><h3 id="Vue-Peek"><a href="#Vue-Peek" class="headerlink" title="Vue Peek"></a>Vue Peek</h3><h3 id="Vue-VSCode-Snippets"><a href="#Vue-VSCode-Snippets" class="headerlink" title="Vue VSCode Snippets"></a>Vue VSCode Snippets</h3><h3 id="vue-helper"><a href="#vue-helper" class="headerlink" title="vue-helper"></a>vue-helper</h3>]]></content>
      
      
      <categories>
          
          <category> Vscode </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用链接备忘</title>
      <link href="/2022/07/29/chang-yong-lian-jie-bei-wang/"/>
      <url>/2022/07/29/chang-yong-lian-jie-bei-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="常用链接备忘"><a href="#常用链接备忘" class="headerlink" title="常用链接备忘"></a>常用链接备忘</h2><h3 id="聚合图床"><a href="#聚合图床" class="headerlink" title="聚合图床"></a>聚合图床</h3><p><a href="https://www.superbed.cn/">https://www.superbed.cn/</a></p><h3 id="冷熊简历"><a href="#冷熊简历" class="headerlink" title="冷熊简历"></a>冷熊简历</h3><p><a href="http://cv.ftqq.com/">http://cv.ftqq.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 链接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统修改jar包中的文件或者依赖</title>
      <link href="/2022/07/29/windows-xi-tong-xiu-gai-jar-nei-rong/"/>
      <url>/2022/07/29/windows-xi-tong-xiu-gai-jar-nei-rong/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>应用的jar包在安全扫描时，发现不可信依赖，springboot依赖的tomcat几个包版本需要升级，现场环境是Linux，怎么进行依赖jar的替换，一搜一大把，就不赘述了。<br>可以参考如下链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/Mr_7777777/article/details/125152748</span><br></pre></td></tr></table></figure><p>本文主要说一下Windows系统，如何达到上述目的。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>下面是具体的操作步骤</p><h4 id="打开windows命令窗口，查看jar命令是否可用"><a href="#打开windows命令窗口，查看jar命令是否可用" class="headerlink" title="打开windows命令窗口，查看jar命令是否可用"></a>打开windows命令窗口，查看jar命令是否可用</h4><p><img src="https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/62e33bcaf54cd3f937109bf3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"><br>如果提示，<code>jar</code>不是内部或外部命令，也不是可运行的程序，则需要进行环境便的配置</p><h5 id="jar环境变量配置"><a href="#jar环境变量配置" class="headerlink" title="jar环境变量配置"></a>jar环境变量配置</h5><p>可以参考如下链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/sinat_20593627/article/details/109613547</span><br></pre></td></tr></table></figure><p>如果是java1.8版本，会提示<code>bin\jlink.exe</code>不是内部或外部命令，也不是可运行的程序，这个忽略即可。</p><h4 id="解压jar包并手动替换，然后再重新打包"><a href="#解压jar包并手动替换，然后再重新打包" class="headerlink" title="解压jar包并手动替换，然后再重新打包"></a>解压jar包并手动替换，然后再重新打包</h4><ul><li><p>解压原jar包</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf xxx.jar</span><br></pre></td></tr></table></figure></li><li><p>手动替换文件或者依赖</p></li><li><p>重新打包</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cfM0 test.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></table></figure></li></ul><p>以上就是所有内容，主要就是jar这个命令，其实是不区分操作系统，Linux和Windows系统的区别也就是删除和替换操作，解压和打包其实是一致的。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习四</title>
      <link href="/2022/04/09/css-xue-xi-si/"/>
      <url>/2022/04/09/css-xue-xi-si/</url>
      
        <content type="html"><![CDATA[<p>继续</p><h3 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h3><p>设置轮廓属性，不占用空间</p><ul><li><code>outline-color</code>：轮廓颜色</li><li><code>out-style</code>：样式<ul><li><code>none</code>：默认，不设置样式</li><li><code>dotted</code>：点状</li><li><code>dashed</code>：虚线</li><li><code>solid</code>：实线</li><li><code>double</code>：双实线</li><li><code>groove</code>：3D凹槽</li><li><code>ridge</code>：3D垄状</li><li><code>inset</code>：陷入</li><li><code>ouset</code>：突出</li><li><code>inherit</code>：继承父元素</li></ul></li><li><code>out-width</code>：轮廓宽带</li></ul><h3 id="display-visibility"><a href="#display-visibility" class="headerlink" title="display visibility"></a>display visibility</h3><p><code>display</code>设置一个元素如何显示，设置<code>none</code>时，元素会被隐藏且不占用空间，但是不会被继承<br><code>visibility</code>知道一个元素可见还是隐藏，设置为<code>hidden</code>时，元素会被隐藏但空间仍被占用，可以被继承</p><h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><ul><li><code>block</code>：会独占一行，多个元素会另起一行，可以设置<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>属性</li><li><code>inline</code>：不会独占一行，设置<code>width</code>、<code>height</code>属性无效，可以设置水平方向的<code>margin</code>和<code>padding</code>属性，不能设置垂直方向的<code>padding</code>和<code>margin</code></li><li><code>inline-block</code>：将对象设置为<code>inline</code>对象，但对象的内容作为<code>block</code>对象呈现，之后的内联对象会被排列在同一行内。</li></ul><h4 id="行内元素和块级元素"><a href="#行内元素和块级元素" class="headerlink" title="行内元素和块级元素"></a>行内元素和块级元素</h4><ul><li>行内元素<ul><li>设置宽度无效</li><li>可以设置水平方向的<code>margin</code>和<code>padding</code>属性，但不能设置垂直方向的<code>padding</code>和<code>margin</code>属性</li><li>不会自动换行</li></ul></li><li>块级元素<ul><li>可以设置宽度</li><li>设置<code>margin</code>和<code>padding</code>都可以</li><li>可以自动换行</li><li>多个块级元素，默认排列从上到下</li></ul></li></ul><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p><code>absolute</code>：生成绝对定位的元素，相对于<code>static</code>定位以外的一个父元素进行定位。<br>元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<br>浏览器会递归查找该元素的所有父元素，如果找到了设置<code>position：relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器的边界进行定位</p><p><code>relative</code>：生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过<code>left、top、right、bottom</code>属性进行规定。<code>relative</code>永远都相对于自身位置进行定位，与其他元素无关，也不会影响其他元素。</p><p><code>fiexd</code>：生成绝对定位的元素，相对于屏幕视口（viewport）进行定位，元素的位置在屏幕滚动时并不会改变，回到顶部的按钮一般用这种方式进行定位</p><p><code>static</code>：默认值，没有定位，会忽略<code>top、bottom、left、rioght</code>或者<code>z-index</code>属性。块级元素从上往下排布，行级元素从左到右排列</p><h4 id="absolute和fixed比较"><a href="#absolute和fixed比较" class="headerlink" title="absolute和fixed比较"></a>absolute和fixed比较</h4><p>共同点：</p><ul><li><p>改变行内元素的呈现方式，将<code>display</code>置为<code>inline-block</code></p></li><li><p>使元素脱离普通文档流，不再占用文档物理空间</p></li><li><p>覆盖非定位文档元素<br>不同点：</p></li><li><p><code>absolute</code>和<code>fixed</code>根元素不同，<code>absolute</code>的根元素可以设置，<code>fixed</code>的根元素是浏览器</p></li><li><p>在有滚动条的页面中，a<code>bsolute</code>会跟着父元素移动，<code>fiexd</code>固定在页面的具体位置不变</p></li></ul><h3 id="display-float-position-关系"><a href="#display-float-position-关系" class="headerlink" title="display float position 关系"></a>display float position 关系</h3><ul><li>首先判断<code>display</code>属性是否为<code>none</code>，如果为<code>none</code>，则<code>position</code>和<code>float</code>属性的值不影响元素最后的表现</li><li>然后判断<code>position</code>的值是否为<code>absolute</code>或者fixed，如果是，则<code>float</code>属性失效，并且<code>displa</code>y的值应该被设置为<code>table</code>或者<code>block</code></li><li>如果<code>position</code>的值补位<code>absolute</code>或者<code>fixed</code>，则判断<code>float</code>属性的值是否为<code>none</code>，如果不是，则<code>display</code>的值则按上面的规则转换。注意，如果<code>position</code>的值为<code>relative</code>并且<code>float</code>属性的值存在，则<code>relative</code>相对于浮动后的最终位置定位</li><li>如果<code>float</code>的值为<code>none</code>，则判断元素是否为根元素，如果是根元素则<code>display</code>属性按照上面的规则转换，如果不是，则保持指定的<code>display</code>属性值不变</li></ul><p>总的来说，可以把它看作是类似优先级的机制，<code>position:absolute</code>和<code>position:fixed</code>优先级最高，有它存在对的时候，浮动不起作用，<code>display</code>的值也需要调整。其次，元素的<code>float</code>特性的值不是<code>none</code>的时候或者它是根元素的时候，调整<code>display</code>的值。最后，非根元素，并且非浮动元素，并且非绝对定位的元素，<code>display</code>特性值同设置值</p><h3 id="一与人同，未免屈意以循之😜😜😜"><a href="#一与人同，未免屈意以循之😜😜😜" class="headerlink" title="一与人同，未免屈意以循之😜😜😜"></a>一与人同，未免屈意以循之😜😜😜</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>送钱穆父</font> <font size=2>苏轼</font></p><p><strong>一别都门三改火，</strong></p><p><em>天涯踏尽红尘。</em></p><p><strong>依然一笑作春温，</strong></p><p><em>无波真古井，</em></p><p><strong>有节是秋筠。</strong></p><p><em>惆怅孤帆连夜发，</em></p><p><strong>送行淡月微云。</strong></p><p><em>尊前不用翠眉颦。</em></p><p><strong>人生如逆旅，</strong></p><p><em>我亦是行人。</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习三</title>
      <link href="/2022/04/05/css-xue-xi-san/"/>
      <url>/2022/04/05/css-xue-xi-san/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-学习三"><a href="#CSS-学习三" class="headerlink" title="CSS 学习三"></a>CSS 学习三</h2><p>继续</p><h3 id="CSS-Fonts"><a href="#CSS-Fonts" class="headerlink" title="CSS Fonts"></a>CSS Fonts</h3><ul><li><p><code>font-family</code>：指定字体</p></li><li><p><code>font-size</code>：字体大小</p></li><li><p><code>font-style</code>：字体样式</p><ul><li><code>normal</code>：默认值</li><li><code>italic</code>：斜体</li><li><code>oblique</code>：斜体</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>font-variant</code>：将小写字母转为大写，但是字体尺寸更小</p><ul><li><code>normal</code>：默认值，不做任何样式调整</li><li><code>small-caps</code>：小型大写字母的字体</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>font-weight</code>：字体的粗细</p><ul><li><code>normal</code>：默认</li><li><code>bold</code>：粗体</li><li><code>bloder</code>：更粗的粗体</li><li><code>lighter</code>：更细的字体</li><li><code>数字</code>：400等于normal，700等于bold</li><li><code>inherit</code>：继承父元素</li></ul></li></ul><h3 id="CSS-Link"><a href="#CSS-Link" class="headerlink" title="CSS Link"></a>CSS Link</h3><ul><li><code>a:link</code>：未访问链接</li><li><code>a:visited</code>：已访问链接</li><li><code>a:hover</code>：鼠标移动到链接上</li><li><code>a:active</code>：鼠标点击时</li></ul><h3 id="CSS-列表"><a href="#CSS-列表" class="headerlink" title="CSS 列表"></a>CSS 列表</h3><ul><li><code>list-style-image</code>：将图像设置为列表标志</li><li><code>list-style-position</code>：标志位置<ul><li><code>outside</code>：放置在文本以内，并环绕文本对齐</li><li><code>inside</code>：放置文本左侧（默认），列表项目标记放置在文本以外，且环绕文本不根据标记对齐</li><li><code>inherit</code>：继承父元素</li></ul></li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>封装周围的HTML元素，包括边距、边框、填充和内容</p><ul><li><code>Margin</code>：外边距，透明，用以清除边框外的区域</li><li><code>Boder</code>：边框</li><li><code>Padding</code>：内边距，透明，用以清除内容周围的区域</li><li><code>Content</code>：内容</li></ul><h3 id="CSS-Border"><a href="#CSS-Border" class="headerlink" title="CSS Border"></a>CSS Border</h3><ul><li><p><code>boder-style</code>：设置四个边框的样式</p><ul><li><code>none</code>：无边框，优先级最低，如果存在重叠边框，会显示为其他边框</li><li><code>hidden</code>：无边框，优先级最高，如果存在重叠边框，则不显示边框</li><li><code>dotted</code>：点状</li><li><code>dashed</code>：虚线</li><li><code>solid</code>：实线</li><li><code>double</code>：双实线</li><li><code>groove</code>：3D凹槽</li><li><code>ridge</code>：3D垄状</li><li><code>inset</code>：陷入</li><li><code>ouset</code>：突出</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>border-width</code>：设置四个边框的宽度</p><ul><li><code>thin</code>：细边框</li><li><code>medium</code>：中等边框（默认）</li><li><code>thick</code>：粗边框</li><li><code>length</code>：自定义值</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>boder-color</code>：设置四个边框颜色</p><ul><li><code>color</code>：指定颜色</li><li><code>transparent</code>：透明（默认）</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>border-radius</code>：外边框圆角</p></li></ul><p>瑞了瑞了，满脑子英文单词</p><h3 id="美则美矣，未尽善焉😕😕😕"><a href="#美则美矣，未尽善焉😕😕😕" class="headerlink" title="美则美矣，未尽善焉😕😕😕"></a>美则美矣，未尽善焉😕😕😕</h3><p><strong><font size=4>浪淘沙</font></strong></font> <font size=2>欧阳修</font></p><p><strong>把酒祝东风，</strong></p><p><em>且共从容。</em></p><p><strong>垂杨紫陌洛城东。</strong></p><p><em>总是当时携手处，</em></p><p><strong>游遍芳丛。</strong></p><p><em>聚散苦匆匆，</em></p><p><strong>此恨无穷。</strong></p><p><em>今年花胜去年红。</em></p><p><strong>可惜明年花更好，</strong></p><p><em>知与谁同？</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习二</title>
      <link href="/2022/04/04/css-xue-xi-er/"/>
      <url>/2022/04/04/css-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-学习二"><a href="#CSS-学习二" class="headerlink" title="CSS 学习二"></a>CSS 学习二</h2><p>继续</p><h3 id="CSS-单位"><a href="#CSS-单位" class="headerlink" title="CSS 单位"></a>CSS 单位</h3><h4 id="相对长度"><a href="#相对长度" class="headerlink" title="相对长度"></a>相对长度</h4><ul><li><code>em</code>：当前元素的字体尺寸</li><li><code>ex</code>：英文字母小x的高度</li><li><code>ch</code>：数字0的高度</li><li><code>vw</code>：视窗宽度，1vm=视窗宽度的1%</li><li><code>vh</code>：视窗高度，1vm=视窗高度的1%</li><li><code>vmin</code>：vm和vh中较小的那个</li><li><code>vmax</code>：vm和vh中较大的那个</li><li><code>%</code>：😁😁😁</li></ul><h4 id="绝对长度"><a href="#绝对长度" class="headerlink" title="绝对长度"></a>绝对长度</h4><ul><li><code>cm</code>：厘米</li><li><code>mm</code>：毫米</li><li><code>in</code>：英寸</li><li><code>px</code>：像素</li><li><code>pt</code>：1pt = 1/72in</li><li><code>pc</code>：1pc = 12 pt</li></ul><h3 id="CSS-Text"><a href="#CSS-Text" class="headerlink" title="CSS Text"></a>CSS Text</h3><ul><li><p><code>color</code>：设置文本颜色</p></li><li><p><code>direction</code>：设置文字方向</p><ul><li><code>ltr</code>：从左向右（默认）</li><li><code>rtl</code>：从右向左</li><li><code>ingerit</code>：继承父元素</li></ul></li><li><p><code>letter-spacing</code>：设置字符间距</p><ul><li><code>noraml</code>：字符间没有额外的空间</li><li><code>length</code>：使用固定空间（可以为负值）</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>line-height</code>：设置行间距</p><ul><li><code>normal</code>：默认</li><li><code>number</code>：设置数字，会与字体尺寸相乘得到行间距</li><li><code>length</code>：固定值</li><li><code>%</code>：字体尺寸的百分比为行间距</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>text-align</code>：文本的水平对齐方式</p><ul><li><code>left</code>：左对齐（默认）</li><li><code>right</code>：右对齐</li><li><code>center</code>：居中</li><li><code>justify</code>：两端对齐</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>text-decoration</code>：添加文本修饰</p><ul><li><code>none</code>：无修饰（默认）</li><li><code>underline</code>：下划线</li><li><code>overline</code>：上划线</li><li><code>line-through</code>：删除线</li><li><code>blink</code>：闪烁效果</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>text-indent</code>：首行缩进</p><ul><li><code>length</code>：固定缩进</li><li><code>%</code>：基于父元素宽度的百分比缩进</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>text-shadow</code>：文本阴影</p><ul><li><code>h-shadow</code>：必需，允许负值，水平阴影位置</li><li><code>v-shadow</code>：必需，允许负值，垂直阴影位置</li><li><code>blur</code>：模糊的距离</li><li><code>color</code>：阴影的颜色</li></ul></li><li><p><code>text-transform</code>：字母样式</p><ul><li><code>none</code>：默认</li><li><code>capitalize</code>：每个单词以大写字母开头</li><li><code>uppercase</code>：全部大写</li><li><code>lowercase</code>：全部小写</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>unicode-bidi</code>：是否重写文本，需要配合<code>direction</code>使用</p><ul><li><code>normal</code>：默认</li><li><code>embed</code>：创建一个附加的嵌入层面</li><li><code>bidi-override</code>：创建一个附加的嵌入层面，按照<code>direction</code>属性重新排序</li><li><code>initial</code>：设置默认值</li><li><code>inherit</code>：继承父元素<br>这里<code>embed</code>属性和<code>normal</code>属性如果单独使用，最终样式看来是没有区别的。<br>但是<code>embed</code>会创建一个附加的嵌入层面，因为在<code>bidi-override</code>属性值里面，<code>normal</code>是不会起作用的，因为<code>bidi-override</code>也创建了一个嵌入层面，这个时候就可以使用<code>embed</code>了</li></ul></li><li><p><code>vertical-align</code>：文本的垂直对齐方式</p><ul><li><code>baseline</code>：默认</li><li><code>sub</code>：垂直对齐文本下标</li><li><code>super</code>：垂直对齐文本上标</li><li><code>top</code>：元素顶端与行中最高元素的顶端对齐</li><li><code>text-top</code>：元素顶端与父元素字体的顶端对齐</li><li><code>middle</code>：元素放于父元素的中部</li><li><code>bottom</code>：使元素及其后代元素的底部与整行的底部对齐</li><li><code>text-bottom</code>：元素底端与父元素字体的底端对齐</li><li><code>length</code>：使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。</li><li><code>%</code>：使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>white-space</code>：空白处理方式</p><ul><li><p><code>noraml</code>：连续的空白符会被合并，换行符会被当作空白符来处理</p></li><li><p><code>nowwrap</code>：和 normal 一样，连续的空白符会被合并。但文本内的换行无效</p></li><li><p><code>pre</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p></li><li><p><code>pre-wrap</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行</p></li><li><p><code>pre-line</code>：连续的空白符会被合并。在遇到换行符或者<code>&lt;br&gt;</code>元素时会换行</p></li><li><p><code>inherit</code>：继承父元素</p><table><thead><tr><th></th><th>换行符</th><th>空格和制表符</th><th>文字换行</th><th>行尾空格</th></tr></thead><tbody><tr><td><code>normal</code></td><td>合并</td><td>合并</td><td>换行</td><td>删除</td></tr><tr><td><code>nowwrap</code></td><td>合并</td><td>合并</td><td>不换行</td><td>删除</td></tr><tr><td><code>pre</code></td><td>保留</td><td>保留</td><td>不换行</td><td>保留</td></tr><tr><td><code>pre-wrap</code></td><td>保留</td><td>保留</td><td>换行</td><td>挂起</td></tr><tr><td><code>pre-line</code></td><td>保留</td><td>保留</td><td>换行</td><td>换行</td></tr></tbody></table></li></ul></li><li><p><code>word-spacing</code>：字间距</p><ul><li><code>normal</code>：默认，使用标准空间</li><li><code>length</code>：使用指定空间</li><li><code>inherit</code>：继承父元素</li></ul></li></ul><p>瑞了瑞了！！！</p><h3 id="有垣曰苑，无垣曰囿😉😉"><a href="#有垣曰苑，无垣曰囿😉😉" class="headerlink" title="有垣曰苑，无垣曰囿😉😉"></a>有垣曰苑，无垣曰囿😉😉</h3><p><strong><font size=4>临江仙</font></strong> <font size=1>夜归临皋</font> <font size=2>苏轼</font></p><p><strong>夜饮东坡醒复醉，</strong></p><p><em>归来仿佛三更。</em></p><p><strong>家童鼻息已雷鸣。</strong></p><p><em>敲门都不应，</em></p><p><strong>倚杖听江声。</strong></p><p><em>长恨此身非我有，</em></p><p><strong>何时忘却营营？</strong></p><p><em>夜阑风静彀纹平。</em></p><p><strong>小舟从此逝，</strong></p><p><em>江海寄余生。</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习一</title>
      <link href="/2022/04/03/css-xue-xi-yi/"/>
      <url>/2022/04/03/css-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-学习一"><a href="#CSS-学习一" class="headerlink" title="CSS 学习一"></a>CSS 学习一</h2><p>从涉及前端开发到现在，差不多有四年了，框架有<code>Vue</code>、<code>Angular</code>，组件库用了<code>ElementUI</code>、<code>NG-Zorro</code>、<code>Ant-Design</code>。<br>而对于<code>CSS</code>，可谓东一榔头，西一棒子，用时查找，不用忘掉。这次决定花点时间，系统的学习一下<code>CSS</code>，毕竟上一次学，还是大二的时候。（我逝去的青春啊！！😭😭）</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>层叠样式表，用于设计<code>HTML</code>的风格和布局，字体、颜色、大小、间距等等。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>CSS</code>由两部分组成：选择器，以及声明。<br>一个熟悉与值的键值被称为声明，而将一个或者多个声明用<code>&#123;&#125;</code>括起来，就是声明块。<br>声明作用到对应的<code>HTML</code>元素，就要加上选择器。</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ul><li>标签选择器：<code>h1</code></li><li>类选择器：<code>.checked</code></li><li>ID 选择器：<code>#picker</code></li><li>通配选择器：<code>*</code></li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>[attr]：指定属性的元素</li><li>[attr=val]：属性等于指定值的元素</li><li>[attr*=val]：属性包含指定值的元素</li><li>[attr^=val]：属性以指定值开头的元素</li><li>[attr$=val]：属性以指定值结尾的元素</li><li>[attribute~=val]：属性包含指定值（完整单词）的元素（不推荐使用）</li><li>[attr|val]：属性以指定（完整单词）开头的元素（不推荐使用）</li></ul><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><ul><li>相邻兄弟选择器：<code>A+B</code></li><li>普通兄弟选择器：<code>A~B</code></li><li>子选择器：<code>A&gt;B</code></li><li>后代选择器：<code>AB</code></li></ul><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><h5 id="条件伪类"><a href="#条件伪类" class="headerlink" title="条件伪类"></a>条件伪类</h5><ul><li><code>:lang()</code>：基于元素语言来匹配页面元素</li><li><code>:dir()</code>：匹配特定文字书写方向的元素</li><li><code>:has()</code>：匹配包含指定元素的元素</li><li><code>:is()</code>：匹配指定选择器列表里的元素</li><li><code>:not()</code>：用来匹配不符合一组选择器的元素</li></ul><h5 id="行为伪类"><a href="#行为伪类" class="headerlink" title="行为伪类"></a>行为伪类</h5><p>-<code>:active</code>：鼠标激活的元素 -<code>:hover</code>：鼠标悬浮的元素 -<code>::selection</code>：鼠标选中的元素</p><h5 id="状态伪类"><a href="#状态伪类" class="headerlink" title="状态伪类"></a>状态伪类</h5><ul><li><code>:target</code>：当前锚点的元素</li><li><code>:link</code>：未访问的链接元素</li><li><code>:visited</code>：已访问的链接元素</li><li><code>:focus</code>：输入聚焦的表单元素</li><li><code>:required</code>：输入必填的表单元素</li><li><code>:valid</code>：输入合法的表单元素</li><li><code>：invalid</code>：输入非法的表单元素</li><li><code>:in-range</code>：输入范围以内的表单元素</li><li><code>out-of-range</code>：输入范围以外的表单元素</li><li><code>checked</code>：选项选中的表单元素</li><li><code>optional</code>：选项可选的表单元素</li><li><code>enabled</code>：事件启用的表单元素</li><li><code>disabled</code>：事件禁用的表单元素</li><li><code>read-only</code>：只读的表单元素</li><li><code>read-write</code>：可读可写的表单元素</li><li><code>blank</code>：输入为空的表单元素</li><li><code>current()</code>：浏览中的元素</li><li><code>past()</code>：已浏览的元素</li><li><code>future</code>：未浏览的元素</li></ul><h5 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h5><ul><li><code>：root</code>：文档的根元素</li><li><code>:empty</code>： 无子元素的元素</li><li><code>:first-letter</code>：元素的首字母</li><li><code>:first-line</code>：元素的首行</li><li><code>:nth-child(n)</code>：元素中指定书序索引的元素</li><li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素</li><li><code>:first-child</code>：元素中为首的元素</li><li><code>:last-child</code>：元素中为尾的元素</li><li><code>:only-child</code>：父元素仅有该元素的元素</li><li><code>:nth-of-type(n)</code>：标签中指定顺序索引的标签</li><li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签</li><li><code>:first-of-type</code>：标签中为首的标签</li><li><code>:last-of-type</code>：标签中为尾标签</li><li><code>:only-of-type</code>：父元素仅有该标签的标签</li></ul><h5 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h5><ul><li><code>::before</code>：在元素前插入内容</li><li><code>::after</code>：在元素后插入内容</li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>!important</li><li>内联样式</li><li>ID 选择器</li><li>类选择、伪类选择器、属性选择器</li><li>元素选择器、伪元素选择器</li><li>通配选择器、后代选择器、兄弟选择器</li></ul><h3 id="CSS-Backgrounds"><a href="#CSS-Backgrounds" class="headerlink" title="CSS Backgrounds"></a>CSS Backgrounds</h3><ul><li><p><code>background</code>：将背景属性设置在一个声明中</p></li><li><p><code>background-attachment</code>：背景图像是否固定或者随着页面的其余部分滚动</p><ul><li><code>scroll</code>：随着页面的滚动而滚动（默认值）</li><li><code>fixed</code>：不会随着页面的滚动而滚动</li><li><code>local</code>：随着元素的内容的滚动而滚动</li><li><code>initial</code>：使用默认值</li><li><code>inherit</code>：继承父元素的属性</li></ul></li><li><p><code>background-color</code>：设置元素的背景颜色</p><ul><li><code>color</code>：背景颜色</li><li><code>transparent</code>：背景颜色透明</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>background-image</code>：把图像设置为背景</p><ul><li><code>linear-gradient()</code>：创建一个线性渐变的”图像”（从上而下）</li><li><code>radial-gradient()</code>：用径向渐变创建”图像”</li><li><code>repeating-linear-gradient()</code>：创建重复的线性渐变”图像”</li><li><code>repeating-radial-gradient()</code>：创建重复的径向渐变”图像”</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>background-position</code>：设置起始位置</p><ul><li><code>left/top/centet/bottom/right</code>：仅指定一个时，其他值会是center</li><li><code>x% y%</code>：水平位置% 垂直位置%，左上角是0%0%，右下角是100%100%，仅指定一个值，其他将是50%</li><li><code>xpos ypos</code>：水平位置 垂直位置，左上角是0，仅指定一个值，其他将是50%</li><li><code>inherit</code>：继承父元素</li></ul></li><li><p><code>background-repeat</code>：设置是否及如何重复</p><ul><li><code>repeat</code>：垂直和水平方向重复（默认值）</li><li><code>repeat-x</code>：水平重复</li><li><code>repeat-y</code>：垂直重复</li><li><code>no-repeat</code>：不重复</li><li><code>inherit</code>：继承父元素的属性</li></ul></li></ul><h2 id="喟然叹息😒😒"><a href="#喟然叹息😒😒" class="headerlink" title="喟然叹息😒😒"></a>喟然叹息😒😒</h2><p><strong><font size=4>凤栖梧</strong> </font><font size=2>柳永</font></p><p><strong>伫倚危楼风细细，</strong></p><p><em>望极春愁，</em></p><p><strong>黯黯生天际。</strong></p><p><em>草色烟光残照里，</em></p><p><strong>无言谁会凭栏意。</strong></p><p><em>拟把疏狂图一醉，</em></p><p><strong>对酒当歌，</strong></p><p><em>强乐还无味。</em></p><p><strong>衣带渐宽终不悔，</strong></p><p><em>为伊消得人憔悴。</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await的理解</title>
      <link href="/2022/03/27/async-await-de-li-jie/"/>
      <url>/2022/03/27/async-await-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="async-await的理解"><a href="#async-await的理解" class="headerlink" title="async/await的理解"></a>async/await的理解</h2><p>遇到个五连回调的代码，真的是地狱级拷打，用<code>async await</code>进行了一波改写，顿时神清气爽，总结一下。<br>顾名思义，<code>async</code>是异步的简写，<code>await</code>是 <code>async await</code>的简写。所以async就是用于声明一个<code>function</code>是异步的，而<code>await</code>就是用来等待这个异步方法执行完成的。另外，规定<code>await</code>只能在<code>async</code>中使用。</p><h3 id="async作用及工作原理"><a href="#async作用及工作原理" class="headerlink" title="async作用及工作原理"></a>async作用及工作原理</h3><p>先看下<code>async</code>是怎么处理返回值的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">testAsync</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// Promise &#123;&#x27;hello world&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>可见，<code>async</code>返回一个<code>Promise</code>对象。如果在<code>async</code>函数中直接<code>return</code>一个值，那么<code>async</code>会把这个值通过<code>Promise.resolve()</code>封装成<code>Promise</code>对象。<code>Promise</code>的特点——无等待，所以在没有使用<code>await</code>的情况下，<code>async</code>会立即执行，不会阻塞后面的代码。</p><h3 id="await在等谁呢？"><a href="#await在等谁呢？" class="headerlink" title="await在等谁呢？"></a>await在等谁呢？</h3><p>原以为，<code>await</code>在等待<code>async</code>的函数完成，等<code>async</code>的讯息。看了文档后，<code>await</code>等待的其实是一个表达式，这个表达式的计算结果是<code>Promise</code>对象或者其它值。<br><code>await</code>不仅仅用于等<code>Promise</code>对象，它可以等任意表达式的结果，所以<code>await</code>是可以接普通函数的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> v1 = <span class="keyword">await</span> <span class="title function_">getValue</span>();</span><br><span class="line">    <span class="keyword">const</span> v2 = <span class="keyword">await</span> <span class="title function_">testAsync</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v1, v2);<span class="comment">// 123 hello world</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><h3 id="await等到结果之后"><a href="#await等到结果之后" class="headerlink" title="await等到结果之后"></a>await等到结果之后</h3><p>返回<code>Promise</code>对象的处理结果，如果等待的不是<code>Promise</code>对象，则返回值本身。<br><code>await</code>会在暂停<code>async</code>函数，等待<code>Promise</code>处理完成。<br>如果<code>Promise</code>正常处理，则回调的<code>resolve</code>函数参数作为<code>await</code>的值，继续执行<code>async</code>函数。<br>如果<code>Promise</code>处理异常，<code>await</code>会把Promise的异常原因抛出。</p><h3 id="为啥要使用async-await"><a href="#为啥要使用async-await" class="headerlink" title="为啥要使用async/await"></a>为啥要使用async/await</h3><p>反正都是处理Promise对象，为啥不直接用.then()呢？用setTimeout模拟耗时的异步操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">function</span> <span class="title function_">mockApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;hello world&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then写法</span></span><br><span class="line">    <span class="title function_">mockApi</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then&quot;</span>, v);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// async/await写法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> v = <span class="keyword">await</span> <span class="title function_">mockApi</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><p><code>async/await</code>反而要多写一点代码，繁重的工作雪上加霜了。😂😂😂😂😂<br>不要着急，脱裤子肯定不是为了…<br>单一的<code>Promise</code>链并不能发现<code>async/await</code>的妙用😏，当遇到多个<code>Promise</code>组成的<code>then</code>链时，你会发现<code>async/await</code>就是救世主。<br>试试看，一个业务处理分成多个步骤，每一步都是异步 的，而且每一步都依赖前一步的结果。<br><code>setTimeout</code>受累一下😙😙😙</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入参数value，表示这个函数执行的时间</span></span><br><span class="line"><span class="comment"> * 执行结果增加1000，用于下一步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; value 时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 时间+1000ms</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mockApi</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(value + <span class="number">1000</span>), value);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">step1</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`step1 with <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mockApi</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">step2</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`step2 with <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mockApi</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">step3</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`step3 with <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mockApi</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then写法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testThen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;testThen&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> time1 = <span class="number">300</span>;</span><br><span class="line">    <span class="title function_">step1</span>(time1).<span class="title function_">then</span>(<span class="function">(<span class="params">time2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">step2</span>(time2).<span class="title function_">then</span>(<span class="function">(<span class="params">time3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">step3</span>(time3).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`result is <span class="subst">$&#123;result&#125;</span>`</span>); <span class="comment">// 我已经晕了😵😵😵😵</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;testThen&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">testThen</span>();</span><br><span class="line">    <span class="comment">// step1 with 300</span></span><br><span class="line">    <span class="comment">// step2 with 1300</span></span><br><span class="line">    <span class="comment">// step3 with 2300</span></span><br><span class="line">    <span class="comment">// result is 3300</span></span><br><span class="line">    <span class="comment">// testThen: 3921.948ms</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// async/await写法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;testAsync&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> time1 = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">const</span> time2 = <span class="keyword">await</span> <span class="title function_">step1</span>(time1);</span><br><span class="line">        <span class="keyword">const</span> time2 = <span class="keyword">await</span> <span class="title function_">step3</span>(time1);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">step3</span>(time1);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`result is <span class="subst">$&#123;result&#125;</span>`</span>); <span class="comment">// YYDS</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;testAsync&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">testAsync</span>();</span><br></pre></td></tr></table></figure><p><code>async/await</code>有多清晰，不用多说了吧。</p><h2 id="附庸风雅😳😳😳"><a href="#附庸风雅😳😳😳" class="headerlink" title="附庸风雅😳😳😳"></a>附庸风雅😳😳😳</h2><p><strong><font size=4>梅花引</font></strong> <font size=1>荆溪阻雪</font> <font size=2>蒋捷</font></p><p><strong>白鸥问我泊孤舟</strong></p><p><em>是身留？是心留？</em></p><p><strong>心若留时，何事锁眉头？</strong></p><p><em>风拍小帘灯晕舞</em></p><p><strong>对闲影，冷清清，忆旧游。</strong></p><p><em>旧游旧游今在不？</em></p><p><strong>花外楼，柳下舟。</strong></p><p><em>梦也梦也，梦不到，寒水空流。</em></p><p><strong>漠漠黄云，湿透木棉裘。</strong></p><p><em>都道无人愁似我</em></p><p><strong>今夜雪，有梅花，似我愁。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS循环总结</title>
      <link href="/2022/03/26/js-xun-huan-zong-jie/"/>
      <url>/2022/03/26/js-xun-huan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="JS循环总结"><a href="#JS循环总结" class="headerlink" title="JS循环总结"></a>JS循环总结</h2><p>工作发现，项目中的对于对象、数组的循环，使用的方法各不相同，有<code>forEach</code>、<code>for in</code>、<code>for of</code>、<code>map</code>以及<code>for</code>，故对这些循环做些总结。</p><h3 id="forEach（数组方法）"><a href="#forEach（数组方法）" class="headerlink" title="forEach（数组方法）"></a>forEach（数组方法）</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>遍历的时候更加简洁，效率和for循环相同，不用关系集合下标的问题，减少了出错的概率。</li><li>没有返回值。</li><li>不能使用break中断循环，不能使用return返回到外层函数。</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    item+=<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);<span class="comment">// 2 3 4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><p>更适合遍历对象，可以遍历数组，但是会有一些局限性。</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p><code>for in</code>的索引为字符串型数字，不能直接进行几何运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = i + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 01 11 21</span></span><br></pre></td></tr></table></figure><p>遍历顺序有可能不是按照实际数组的内部顺序，使用<code>for in</code>会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用<code>hasOwnProperty()</code>方法可以判断某属性是不是该对象的实例属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = array[index];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.<span class="title function_">hasOwnProperty</span>(index)) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = array[index];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><h4 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h4><ul><li>可遍历map/objet/array/set/string等</li><li>避免了<code>for in</code>的所有缺点，可以使用break、continue和return，不支持数组的遍历，还可以遍历类似数组的对象。</li></ul><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p><code>for of</code>是ES6的新语法，为了弥补<code>for in</code>的局限性。<br><code>for of</code>遍历的数组元素值，而且<code>for of</code>遍历的只是数组内的元素，不包括原型属性和索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">array.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p><code>for of</code>适用遍历拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象，可以用内建的<code>Object.keys()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(myObject)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;：&quot;</span> + myObject[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&gt; &quot;a：1&quot; &quot;b：2&quot; &quot;c：3</span></span><br></pre></td></tr></table></figure><h3 id="map-（数组方法）"><a href="#map-（数组方法）" class="headerlink" title="map （数组方法）"></a>map （数组方法）</h3><h4 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h4><ul><li>map不改变原数组但是会返回新数组</li><li>可以使用break中断循环，可以使用return返回到外层函数</li></ul><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">map</span>(<span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index+= <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);<span class="comment">// [1, 2 , 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);<span class="comment">//  [2, 3 , 4]</span></span><br></pre></td></tr></table></figure><p><strong>在大地上我们只过一生。 —-叶赛宁</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习二</title>
      <link href="/2021/12/08/vue-xue-xi-er/"/>
      <url>/2021/12/08/vue-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-学习二"><a href="#Vue-学习二" class="headerlink" title="Vue 学习二"></a>Vue 学习二</h2><h3 id="el-与-data-的两种写法"><a href="#el-与-data-的两种写法" class="headerlink" title="el 与 data 的两种写法"></a>el 与 data 的两种写法</h3><p>el 有两种写法<br>(1)new Vue 时配置 el 属性<br>(2)先创建 Vue 实例，随后通过 vm.$mount 指定 el 的值。<br>data 有两种写法<br>(1)对象式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)函数式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123; <span class="comment">// 这里写成箭头函数时，this是window</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 此处的this是Vue实例对象</span></span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="MVVM-模型"><a href="#MVVM-模型" class="headerlink" title="MVVM 模型"></a>MVVM 模型</h3><p>M：模型(Model)，对应 data 中的数据<br>V：视图(View)，模板<br>VM：视图模型(ViewModel)，Vue 实例对象</p><p><img src="https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/61b0a95c2ab3f51d914b1836.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"><br>观察发现：<br>1.data 中所有的属性，最后都出现在了 vm 上。<br>2.vm 上所有的属性以及 Vue 原型上的所有属性，在 Vue 模板中都可以直接使用。</p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h4 id="回顾-Object-defineProperty-方法"><a href="#回顾-Object-defineProperty-方法" class="headerlink" title="回顾 Object.defineProperty 方法"></a>回顾 Object.defineProperty 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// value: 18,</span></span><br><span class="line">  <span class="comment">// enumerable: true, // 控制属性是否可以枚举，默认值是false</span></span><br><span class="line">  <span class="comment">// writable: true, // 控制属性是否可以被修改，默认值是false</span></span><br><span class="line">  <span class="comment">// configurable: true // 控制属性是否可以被删除，默认值是false</span></span><br><span class="line">  <span class="comment">// 当person的age的属性被调用时，get函数就会被调用</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    number = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> el与data </tag>
            
            <tag> MVVM模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习一</title>
      <link href="/2021/12/07/vue-xue-xi-yi/"/>
      <url>/2021/12/07/vue-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-学习一"><a href="#Vue-学习一" class="headerlink" title="Vue 学习一"></a>Vue 学习一</h2><h3 id="vue-基础"><a href="#vue-基础" class="headerlink" title="vue 基础"></a>vue 基础</h3><p>一套用于构建用户界面的渐进式 JavaScript 框架<br>渐进式：Vue 可以自底向上逐层的应用<br>简单应用：只需要一个轻量小巧的核心库<br>复杂应用：可以引入各式各样的 Vue 插件<br>特点： 1. 采用组件化模式，提高代码复用率、且让代码更好维护。 2. 声明式编码，让编码人员无需直接操作 DOM，提高开发效率。 与之相对立的是命令式编码 3. 使用虚拟 DOM+优秀的 Diff 算法，尽量复用 DOM 节点。 4. ES6 语法规范<br>ES6 模块化<br>包管理器：npm、yarn<br>原型、原型链<br>数组常用方法<br>axios<br>promise</p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><h4 id="初识-Vue"><a href="#初识-Vue" class="headerlink" title="初识 Vue"></a>初识 Vue</h4><pre><code>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；3.root容器里面的代码被称为【Vue模板】；4.Vue实例和容器是一一对应的；5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</code></pre><p>js 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方<br>(1) a<br>(2) a+b<br>(3) demo(1)<br>js 代码：<br>(1) if(){}<br>(2) for(){}</p><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>, <span class="comment">// el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;EDG FANS&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Vue 模板语法有 2 大类： 1.插值语法：<br>功能：用于解析标签体内容。<br>写法：，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。 2.指令语法<br>功能：用于解析标签（包裹：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href=”xxx”或者简写为 :href=”xxx”，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。</p><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><pre><code> Vue中有两种数据绑定的方式    1.单向绑定(v-bind)：数据只能从data流向页面    2.双向绑定(v-model)：数据不进能从data流向页面，还可以从页面流向data。      备注：        1.双向绑定一般都应用在表单类元素上（如：inpout、select等）        2.v-model:value可以简写v-model，因为v-model默认收集的就是value值。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引入JS </tag>
            
            <tag> 模板语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装Hive</title>
      <link href="/2021/12/07/windows-an-zhuang-hive/"/>
      <url>/2021/12/07/windows-an-zhuang-hive/</url>
      
        <content type="html"><![CDATA[<h2 id="安装包版本"><a href="#安装包版本" class="headerlink" title="安装包版本"></a>安装包版本</h2><p>JDK1.8.0.232(java1.8就可以，小版本号不强求)<br>链接：<a href="https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg">https://pan.baidu.com/s/1ZpMEtomkT1nvY_0qTbwcjg</a><br>提取码：ei07<br>Hadoop2.7.7<br>链接：<a href="https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ">https://pan.baidu.com/s/1oL61X921-4Urd3UCwbrKKQ</a><br>提取码：9aln<br>Hive2.2.1<br>链接：<a href="https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g">https://pan.baidu.com/s/1fPkeEJSImStlcCbYnCUy4g</a><br>提取码：02hg<br>mysql-connector-java-5.1.46.jar<br>链接：<a href="https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA">https://pan.baidu.com/s/13ICebpZljlb39w9sm4O-pA</a><br>提取码：ae9a</p><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>下载解压，安装到非默认路径</p><h3 id="JDK环境变量配置"><a href="#JDK环境变量配置" class="headerlink" title="JDK环境变量配置"></a>JDK环境变量配置</h3><p>配置JDK环境变量，依次点击我的电脑-属性-高级系统设置-环境变量-新建系统变量，如下图所示：</p><p><img src="https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/637c2acd16f2c2beb17674a4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>编辑系统变量<code>Path</code>，添加如下图所示两个值</p><p><img src="https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/637c2d0316f2c2beb178b563.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h2 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h2><p>下载解压即可</p><h3 id="Hadoop环境变量配置"><a href="#Hadoop环境变量配置" class="headerlink" title="Hadoop环境变量配置"></a>Hadoop环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src="https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/637c720b16f2c2beb1da0696.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p><p><img src="https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/637c720716f2c2beb1da0039.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hadoop</code>，正常应如下所示：</p><p><img src="https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/637c79ef16f2c2beb1e77294.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p>新建namenode和datanode目录，新建data目录，在下面新增dfs目录，再在下面新增namenode和datannode目录</p><p><img src="https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/637c7b6416f2c2beb1e9c21e.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h4 id="修改core-site-xml文件"><a href="#修改core-site-xml文件" class="headerlink" title="修改core-site.xml文件"></a>修改core-site.xml文件</h4><p>文件目录<code>E:\tools\Hadoop\hadoop-2.7.7\etc\hadoop</code>，将下面的代码复制到core_site.xml，并保存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录"><a href="#修改hdfs-site-xml（目录和core-site一致），datanode和namenode改为自己的目录" class="headerlink" title="修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录"></a>修改hdfs-site.xml（目录和core_site一致），datanode和namenode改为自己的目录</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/E:/tools/Hadoop/hadoop-2.7.7/data/dfs/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml"><a href="#修改mapred-site-xml-template文件（目录和core-site一致），修改完重命名为mapred-site-xml" class="headerlink" title="修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml"></a>修改mapred-site.xml.template文件（目录和core_site一致），修改完重命名为mapred-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改yarn-site-xml文件（目录和core-site一致）"><a href="#修改yarn-site-xml文件（目录和core-site一致）" class="headerlink" title="修改yarn-site.xml文件（目录和core_site一致）"></a>修改yarn-site.xml文件（目录和core_site一致）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改hadoop-env-cmd文件（目录和core-site一致）"><a href="#修改hadoop-env-cmd文件（目录和core-site一致）" class="headerlink" title="修改hadoop-env.cmd文件（目录和core_site一致）"></a>修改hadoop-env.cmd文件（目录和core_site一致）</h4><p>其实就是设置java的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@rem set JAVA_HOME=%JAVA_HOME%</span><br><span class="line">set JAVA_HOME=D:\tools\java\jdk1.8.0.232</span><br></pre></td></tr></table></figure><h3 id="格式化HDFS，打开Hadoop"><a href="#格式化HDFS，打开Hadoop" class="headerlink" title="格式化HDFS，打开Hadoop"></a>格式化HDFS，打开Hadoop</h3><p>至此，hadoop配置基本结束，接下来就需要测试hadoop是否安装成功</p><p>格式化HDFS，打开cmd，输入<code>hdfs namenode -format</code>，结果如下即为成功</p><p><img src="https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/6387084416f2c2beb1343ddd.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>切换到<code>E:\tools\Hadoop\hadoop-2.7.7\sbin</code>目录，执行<code>start-all.cmd</code>，会打开4个窗口即为成功<br>然后，输入<code>jps</code>命令测试是否成功，如下图<br><img src="https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/6387091a16f2c2beb13568d2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h3><p>在<code>E:\tools\Hadoop\hadoop-2.7.7\sbin</code>目录下创建新的文件，然后在<code>http://localhost:50070/explorer.html#/</code>查看结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /tmp</span><br><span class="line">hadoop fs -mkdir /user/</span><br><span class="line">hadoop fs -mkdir /user/hive/</span><br><span class="line">hadoop fs -mkdir /user/hive/warehouse</span><br><span class="line">hadoop fs -chmod g+w /tmp</span><br><span class="line">hadoop fs -chmod g+w /user/hive/warehouse</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/63870c1916f2c2beb1399e74.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h2 id="HVIE安装"><a href="#HVIE安装" class="headerlink" title="HVIE安装"></a>HVIE安装</h2><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>参考JDK环境变量配置，如下图所示：<br><img src="https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/63870d4716f2c2beb13ada5b.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>编辑系统变量<code>Path</code>，添加如下图所示一个值</p><p><img src="https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/63870dd216f2c2beb13c2054.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>环境变量配置完成后打开<code>cmd</code>进行测试，输入<code>hive</code>，正常应如下所示：</p><p><img src="https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/63870f9316f2c2beb13ffc9d.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><h4 id="目录更改"><a href="#目录更改" class="headerlink" title="目录更改"></a>目录更改</h4><p>修改目录<code>E:\tools\hive\conf</code>中的4个默认的配置文件模板拷贝成新的文件名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive-default.xml.template -----&gt; hive-site.xml</span><br><span class="line">hive-env.sh.template -----&gt; hive-env.sh</span><br><span class="line">hive-exec-log4j.properties.template -----&gt; hive-exec-log4j2.properties</span><br><span class="line">hive-log4j.properties.template -----&gt; hive-log4j2.properties</span><br></pre></td></tr></table></figure><h4 id="创建新目录"><a href="#创建新目录" class="headerlink" title="创建新目录"></a>创建新目录</h4><p>创建以下几个空目录</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\tools\hive\my_hive\operation_logs_dir</span><br><span class="line">E:\tools\hive\my_hive\querylog_dir</span><br><span class="line">E:\tools\hive\my_hive\resources_dir</span><br><span class="line">E:\tools\hive\my_hive\scratch_dir</span><br></pre></td></tr></table></figure><p>如下图所示<br><img src="https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png" class="lazyload placeholder" data-srcset="https://pic1.imgdb.cn/item/638d488ab1fccdcd36c28371.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h4 id="mysql驱动配置"><a href="#mysql驱动配置" class="headerlink" title="mysql驱动配置"></a>mysql驱动配置</h4><p>将mysql-connector-java-5.1.46-bin.jar复制到<code>E:\tools\hive\lib</code>目录下<br>如下图所示<br><img src="https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png" class="lazyload placeholder" data-srcset="https://pic1.imgdb.cn/item/638d4904b1fccdcd36c3118b.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h4 id="修改hive-env-sh文件"><a href="#修改hive-env-sh文件" class="headerlink" title="修改hive-env.sh文件"></a>修改hive-env.sh文件</h4><p>新增以下内容，路径注意修改为自己的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Set HADOOP_HOME to point to a specific hadoop install directory</span><br><span class="line">HADOOP_HOME=E:\tools\Hadoop\hadoop-2.7.7</span><br><span class="line"></span><br><span class="line"># Hive Configuration Directory can be controlled by:</span><br><span class="line">export HIVE_CONF_DIR=E:\tools\hive\conf</span><br><span class="line"></span><br><span class="line"># Folder containing extra ibraries required for hive compilation/execution can be controlled by:</span><br><span class="line">export HIVE_AUX_JARS_PATH=E:\tools\hive\lib</span><br></pre></td></tr></table></figure><h4 id="修改hive-site-xml文件"><a href="#修改hive-site-xml文件" class="headerlink" title="修改hive-site.xml文件"></a>修改hive-site.xml文件</h4><p>文件内容比较多，可以直接用我的，然后替换路径和mysql的账密即可</p><p>链接：<a href="https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw">https://pan.baidu.com/s/1PqtKV8Filn7DSwmqssSlTw</a><br>提取码：12gz</p><p>按照下图所示，查找修改即可<br><img src="https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png" class="lazyload placeholder" data-srcset="https://pic1.imgdb.cn/item/638d4ae8b1fccdcd36c53503.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"><br><img src="https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png" class="lazyload placeholder" data-srcset="https://pic1.imgdb.cn/item/638d4af4b1fccdcd36c54064.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>配置文件完成后，创建数据库，注意字符集和排序规则的设置属性<br><img src="https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png" class="lazyload placeholder" data-srcset="https://pic1.imgdb.cn/item/638d4c1eb1fccdcd36c656e8.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="启动hive，结果测试"><a href="#启动hive，结果测试" class="headerlink" title="启动hive，结果测试"></a>启动hive，结果测试</h3><h4 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h4><p>打开windows命令窗口，切换目录到<code>E:\tools\Hadoop\hadoop-2.7.7\sbin</code>，输入命令<code>start-dfs.cmd</code>并回车，启动两个窗口服务即成功</p><h4 id="启动hive-metastore"><a href="#启动hive-metastore" class="headerlink" title="启动hive metastore"></a>启动hive metastore</h4><p>在目录<code>E:\tools\Hadoop\hadoop-2.7.7\sbin</code>的命令窗口输入<code>hive -service meatstore</code>，如果在hive数据库中出现如下所示众多表，则说明开启成功</p><p><img src="https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f86.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"><br><img src="https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/638d5cfab1fccdcd36dc1f75.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>上述方式启动结果如下<br><img src="https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/638d5da8b1fccdcd36dd2772.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>此外，如果要操作hive，需要使用命令<code>hive Starting Hive Metastore Server</code>，进入hive操作系统<br><img src="https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/638d5e07b1fccdcd36dda9cc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>此时，可以直接执行HQL语句进行测试，例如执行<code>create table stu(id int, name string);</code>，然后去<br><a href="http://localhost:50070/explorer.html#/user/hive/warehouse">http://localhost:50070/explorer.html#/user/hive/warehouse</a>查看结果，<br><img src="https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png" class="lazyload placeholder" data-srcset="https://pic.imgdb.cn/item/638d5eacb1fccdcd36de9167.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><p>如上所示，则hive在windows的安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode替换空格</title>
      <link href="/2021/04/13/leetcode-ti-huan-kong-ge/"/>
      <url>/2021/04/13/leetcode-ti-huan-kong-ge/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-替换空格"><a href="#LeetCode-替换空格" class="headerlink" title="LeetCode 替换空格"></a>LeetCode 替换空格</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>实例 1：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><h3 id="一得之见（Java-Python）"><a href="#一得之见（Java-Python）" class="headerlink" title="一得之见（Java/Python）"></a>一得之见（Java/Python）</h3><p>使用 Java 的 replaceAll()方法，直接进行替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 替换后字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Python 的 replace()方法，直接进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_space</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class="line"><span class="string">    :param s: 原字符串</span></span><br><span class="line"><span class="string">    :return: 替换后字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="他山之石（Java-Python）"><a href="#他山之石（Java-Python）" class="headerlink" title="他山之石（Java/Python）"></a>他山之石（Java/Python）</h3><p>由于每次替换从 1 个字符变成 3 个字符，使用字符数组课方便进行替换。简历字符数组的长度为 s 的长度的 3 被，这样可保证字符数组可以容纳所有替换后的字符。</p><ul><li>获得 s 的长度 length</li><li>创建字符数组 array，其长度为 length*3</li><li>初始化 size 为 0，size 表示替换后的字符串的长度</li><li>从左到右遍历字符串 s<ul><li>获得 s 的当前字符 c</li><li>如果字符 c 是空格，则令<code>array[size] = &#39;%&#39;</code>，<code>array[size + 1] = &#39;2&#39;</code>，<code>array[size + 2] = &#39;0&#39;</code>，并将 size 的值加 3</li><li>如果字符 c 不是空格，则令<code>array[size] = c</code>，并将 size 的值加 1 -遍历结束之后，size 的值等于替换后的字符串的长度，从 array 的前 size 个字符创建新字符串，并返回新字符串</li></ul></li></ul><p>时间复杂度：O(n) 空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 替换后字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceSpaceTwo</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sLen</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">char</span>[] sArray = <span class="keyword">new</span> <span class="title class_">char</span>[sLen * <span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sLen; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            sArray[size++] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            sArray[size++] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            sArray[size++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sArray[size++] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(sArray, <span class="number">0</span>, size);</span><br><span class="line">    <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化一个 list，记为 res</li><li>遍历列表 s 的每个字符 c：<ul><li>当 c 为空格时：向 res 后添加字符串”%20”</li><li>当 c 不为空格时：向 res 后添加字符串 c</li></ul></li><li>将列表 s 转换为字符串并返回。</li></ul><p>时间复杂度：O(n) 空间复杂度：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_space_two</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    把字符串 s 中的每个空格替换成&quot;%20&quot;。</span></span><br><span class="line"><span class="string">    :param s: 原字符串</span></span><br><span class="line"><span class="string">    :return: 替换后字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            res.append(<span class="string">&quot;%20&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure><h3 id="效率对比（Java）"><a href="#效率对比（Java）" class="headerlink" title="效率对比（Java）"></a>效率对比（Java）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;We are happy&quot;</span><br><span class="line">方法一：3575700ns</span><br><span class="line">方法二：338300ns</span><br></pre></td></tr></table></figure><h3 id="效率对比（Python）"><a href="#效率对比（Python）" class="headerlink" title="效率对比（Python）"></a>效率对比（Python）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;We are happy&quot;</span><br><span class="line">方法一：3300ns</span><br><span class="line">方法二：7600ns</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode二维数组中的查找</title>
      <link href="/2021/04/09/leetcode-er-wei-shu-zu-zhong-de-cha-zhao/"/>
      <url>/2021/04/09/leetcode-er-wei-shu-zu-zhong-de-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-二维数组中的查找"><a href="#LeetCode-二维数组中的查找" class="headerlink" title="LeetCode 二维数组中的查找"></a>LeetCode 二维数组中的查找</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个 n*m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增。请完成一个搞笑的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有改整数。</p><p>示例：<br>现有矩阵 matrix 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,4,7,11,15],</span><br><span class="line">  [2,5,8,12,19],</span><br><span class="line">  [3,6,9,16,22],</span><br><span class="line">  [10,13,14,17,24],</span><br><span class="line">  [18,21,23,26,30]</span><br><span class="line">]</span><br><span class="line">给定target = 5，返回true</span><br><span class="line">给定target = 20，返回false</span><br></pre></td></tr></table></figure><h3 id="一得之见（Java-Python）"><a href="#一得之见（Java-Python）" class="headerlink" title="一得之见（Java/Python）"></a>一得之见（Java/Python）</h3><p>双循环求解。<br>时间复杂度：O(nm)，空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix 二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二维数组中是否含有该整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findNumberInTwoDimenArray</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">columns</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; columns; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_number_in_two_dimen_array</span>(<span class="params"></span></span><br><span class="line"><span class="params">        matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class="line"><span class="string">    :param matrix: 二维数组</span></span><br><span class="line"><span class="string">    :param target: 整数</span></span><br><span class="line"><span class="string">    :return: 二维数组中是否含有该整数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> matrix <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(matrix[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == target:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="他山之石（Java-Python）"><a href="#他山之石（Java-Python）" class="headerlink" title="他山之石（Java/Python）"></a>他山之石（Java/Python）</h3><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。<br>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。<br>可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因为往左查找不可能找到目标值，往下查找可能找到目标值。</p><ul><li>若数组为空，返回 false</li><li>初始化行下标为 0，列下标为二维数组的列数减 1</li><li>重复下列步骤，知道行下标或者列下标超出边界<ul><li>获得当前下标位置的元素 num</li><li>如果 num 和 target 相等，则返回 true</li><li>如果 num 大于 target，列下标减 1</li><li>如果 num 小于 target，行下标加 1</li></ul></li></ul><p>时间复杂度：O(n+m)，空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix 二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二维数组中是否含有该整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findNumberInTwoDimenArrayTwo</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">columns</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">column</span> <span class="operator">=</span> columns - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (row &lt; rows &amp;&amp; column &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> matrix[row][column];</span><br><span class="line">        <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; target) &#123;</span><br><span class="line">            column--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            row++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率对比（Java）"><a href="#效率对比（Java）" class="headerlink" title="效率对比（Java）"></a>效率对比（Java）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入： matrix =</span><br><span class="line">  [</span><br><span class="line">    [1, 4, 7, 11, 15],</span><br><span class="line">    [2, 5, 8, 12, 19],</span><br><span class="line">    [3, 6, 9, 16, 22],</span><br><span class="line">    [10, 13, 14, 17, 24],</span><br><span class="line">    [18, 21, 23, 26, 30]</span><br><span class="line">  ]</span><br><span class="line">  target = 5</span><br><span class="line">方法一：2201800ns （个人笨比解法😂）</span><br><span class="line">方法二：8900ns  （线性查找）</span><br></pre></td></tr></table></figure><h3 id="效率对比（Python）"><a href="#效率对比（Python）" class="headerlink" title="效率对比（Python）"></a>效率对比（Python）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入： matrix =</span><br><span class="line">  [</span><br><span class="line">    [1, 4, 7, 11, 15],</span><br><span class="line">    [2, 5, 8, 12, 19],</span><br><span class="line">    [3, 6, 9, 16, 22],</span><br><span class="line">    [10, 13, 14, 17, 24],</span><br><span class="line">    [18, 21, 23, 26, 30]</span><br><span class="line">  ]</span><br><span class="line">  target = 5</span><br><span class="line">方法一：11000ns （个人笨比解法😂）</span><br><span class="line">方法二：5900ns （线性查找）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在浏览器输入URL回车之后发生了什么？</title>
      <link href="/2021/04/08/zai-liu-lan-qi-shu-ru-url-hui-che-zhi-hou-fa-sheng-liao-shi-me/"/>
      <url>/2021/04/08/zai-liu-lan-qi-shu-ru-url-hui-che-zhi-hou-fa-sheng-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ul><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode数组中重复的数字</title>
      <link href="/2021/04/08/leetcode-shu-zu-zhong-chong-fu-de-shu-zi/"/>
      <url>/2021/04/08/leetcode-shu-zu-zhong-chong-fu-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-数组中重复的数字"><a href="#LeetCode-数组中重复的数字" class="headerlink" title="LeetCode 数组中重复的数字"></a>LeetCode 数组中重复的数字</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,3,1,0,2,5,3]</span><br><span class="line">输出：2或3</span><br></pre></td></tr></table></figure><h3 id="一得之见（Java-Python）"><a href="#一得之见（Java-Python）" class="headerlink" title="一得之见（Java/Python）"></a>一得之见（Java/Python）</h3><p>使用双循环，index 不等且 value 相等时，即重复。<br>时间复杂度 O(n²)，空间复杂度 O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任意一个重复的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numsLen</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; numsLen; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j &amp;&amp; nums[i] == nums[j]) &#123;</span><br><span class="line">                result = nums[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_number</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 任意一个重复的数字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums_len):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nums_len):</span><br><span class="line">            <span class="keyword">if</span> i != j <span class="keyword">and</span> nums[i] == nums[j]:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="他山之石（Java-Python）"><a href="#他山之石（Java-Python）" class="headerlink" title="他山之石（Java/Python）"></a>他山之石（Java/Python）</h3><h4 id="使用集合-Set"><a href="#使用集合-Set" class="headerlink" title="使用集合 Set"></a>使用集合 Set</h4><p>把数组中的元素循环加入到集合 Set，如果加入时有重复，则返回。<br>时间复杂度：O(n)，空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任意一个重复的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findRepeatNumberTwo</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">repeat</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">            repeat = num;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_number_two</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 任意一个重复的数字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    temp = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">            temp.add(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="先排序再查找"><a href="#先排序再查找" class="headerlink" title="先排序再查找"></a>先排序再查找</h4><p>先排序再查找，排序之后有重复的肯定是挨着的，然后前后两两比较，如果有重复的直接返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任意一个重复的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findRepeatNumberFour</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_number_three</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 任意一个重复的数字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nums.sort()</span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nums_len):</span><br><span class="line">        <span class="keyword">if</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> nums[i]</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="使用临时数组"><a href="#使用临时数组" class="headerlink" title="使用临时数组"></a>使用临时数组</h4><p>这道题有个很明显的特点，就是数字的大小在 0<del>n-1 之间，所以使用上面两种方法肯定不是最好的选择。这里我们可以申请一个临时数组 temp，因为 nums 元素中的每个元素的大小都在 0</del>n-1 之间，所以我们可以把 nums 中的元素的值和临时数组 temp 建立映射关系，就是 nums 中的元素的值是几，我们就把 temp 中对应的位置的值加 1，当 temp 某个位置的值大于 1 的时候，我们直接返回即可。<br>时间复杂度：O(n)，空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任意一个重复的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findRepeatNumberFive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        temp[nums[i]]++;</span><br><span class="line">        <span class="keyword">if</span> (temp[nums[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_number_four</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 任意一个重复的数字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    temp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums_len)]</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        temp[num] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> temp[num] &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="原地置换"><a href="#原地置换" class="headerlink" title="原地置换"></a>原地置换</h4><p>如果没有重复数字，那么正常排序后，数字 i 应该在下标为 i 的位置，所以思路是重头扫描数组，遇到下标为 i 的数字如果不是 i 的话，（假设为 m），那么我们就拿与下标 m 的数字交换。在家换过程中，如果有重复数字，那么终止返回。<br>时间复杂度：O(n)，空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任意一个重复的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findRepeatNumberThree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (nums[i] != i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            temp = nums[i];</span><br><span class="line">            nums[i] = nums[temp];</span><br><span class="line">            nums[temp] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_number_five</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 任意一个重复的数字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums_len):</span><br><span class="line">        <span class="keyword">if</span> nums[i] != i:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == nums[nums[i]]:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = nums[i]</span><br><span class="line">                nums[i] = nums[temp]</span><br><span class="line">                nums[temp] = temp</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="效率对比（Java）"><a href="#效率对比（Java）" class="headerlink" title="效率对比（Java）"></a>效率对比（Java）</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class="line">方法一：1990900ns （个人笨比解法😂）</span><br><span class="line">方法二：238000ns  （使用集合Set）</span><br><span class="line">方法三：12600ns   （先排序再查找🤗）</span><br><span class="line">方法四：589800ns  （使用临时数组）</span><br><span class="line">方法五：17600ns   （原地置换）</span><br></pre></td></tr></table></figure><h4 id="效率对比（Python）"><a href="#效率对比（Python）" class="headerlink" title="效率对比（Python）"></a>效率对比（Python）</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;2, 3, 1, 0, 2, 5, 3&#125;;</span><br><span class="line">方法一：6600ns （个人笨比解法 😂）</span><br><span class="line">方法二：4500ns （使用集合 Set）</span><br><span class="line">方法三：8100ns （先排序再查找 🤗）</span><br><span class="line">方法四：28300ns （使用临时数组）</span><br><span class="line">方法五：6600ns （原地置换）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向绑定和单向绑定</title>
      <link href="/2021/04/07/shuang-xiang-bang-ding-he-dan-xiang-bang-ding/"/>
      <url>/2021/04/07/shuang-xiang-bang-ding-he-dan-xiang-bang-ding/</url>
      
        <content type="html"><![CDATA[<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>所谓数据绑定，就是指<code>View</code>层和<code>Model</code>层之间的映射关系</p><h3 id="单向绑定"><a href="#单向绑定" class="headerlink" title="单向绑定"></a>单向绑定</h3><p><code>Model</code>的更新会触发 View 的更新，而 View 的更新不会触发<code>Model</code>的更新，它们的作用是单向的。</p><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p><code>Model</code>的更新会触发<code>View</code>的更新，<code>View</code>的更新也会触发<code>Model</code>的更新，它们的作用是相互的。</p><p><img src="https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/606d43ca8322e6675caf6c70.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="React-采用单向数据绑定"><a href="#React-采用单向数据绑定" class="headerlink" title="React 采用单向数据绑定"></a>React 采用单向数据绑定</h3><p><img src="https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/606d441d8322e6675caffcc3.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"><br>当用户访问<code>View</code>时，通过触发<code>Events</code>进行交互，而在相应<code>Events Handlers</code>中，会触发相应的<code>Actions</code>，而<code>Actions</code>通过调用<code>setState</code>方法对<code>View</code>的<code>State</code>进行更新，<code>State</code>更新后会触发<code>View</code>的重新渲染。</p><p>单向数据绑定的优缺点：<br>优点：所有状态都可以被记录、跟踪，状态变化通过手动调用触发，源头易追溯。<br>缺点：会有很多类似的样板代码，代码量会相应的上升。</p><h3 id="Vue-支持单向数据绑定和双向数据绑定"><a href="#Vue-支持单向数据绑定和双向数据绑定" class="headerlink" title="Vue 支持单向数据绑定和双向数据绑定"></a>Vue 支持单向数据绑定和双向数据绑定</h3><ul><li>单项数据绑定：使用<code>v-bind</code>属性绑定、<code>v-on</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li><li>双向数据绑定：使用<code>v-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li></ul><p>Vue 的双向数据绑定就是指使用<code>v-model</code>指令进行数据绑定，而<code>v-model</code>本质上是<code>v-bind</code>和<code>v-on</code>相结合的语法糖，是框架自动帮我们实现了更新事件。换句话说，我们完全可以采用单向绑定，自己实现类似的双向数据绑定。</p><p>双向数据绑定的优缺点：</p><p>优点：在操作表单时使用<code>v-model</code>方便简单，可以省略繁琐或重复的<code>onChange</code>事件去处理每个表单数据的变化（减少代码量）。<br>缺点：属于暗箱操作，无法很好的追踪双向绑定的数据变化。</p><h3 id="Angular-支持单向数据绑定和双向数据绑定"><a href="#Angular-支持单向数据绑定和双向数据绑定" class="headerlink" title="Angular 支持单向数据绑定和双向数据绑定"></a>Angular 支持单向数据绑定和双向数据绑定</h3><ul><li>单向数据绑定：使用<code>[x]</code>属性绑定，<code>(x)</code>事件绑定或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li><li>双向数据绑定：使用<code>[(x)]</code>语法，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li></ul><h3 id="AngularJS-支持单向数据绑定和双向数据绑定"><a href="#AngularJS-支持单向数据绑定和双向数据绑定" class="headerlink" title="AngularJS 支持单向数据绑定和双向数据绑定"></a>AngularJS 支持单向数据绑定和双向数据绑定</h3><ul><li>单向数据绑定：使用<code>ng-bind</code>指令或插值形式<code>&#123;&#123;data&#125;&#125;</code>。</li><li>双向数据绑定：使用<code>ng-model</code>指令，用户对<code>View</code>的更改会直接同步到<code>Model</code>。</li></ul><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://juejin.cn/post/6854573208646090765">https://juejin.cn/post/6854573208646090765</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双向绑定 </tag>
            
            <tag> 单向绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode子矩形查询</title>
      <link href="/2021/04/07/leetcode-zi-ju-xing-cha-xun/"/>
      <url>/2021/04/07/leetcode-zi-ju-xing-cha-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-子矩形查询"><a href="#LeetCode-子矩形查询" class="headerlink" title="LeetCode 子矩形查询"></a>LeetCode 子矩形查询</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请你实现一个类<code>SubrectangleQueries</code>，它的构造函数的参数是一个<code>rows * cols</code>的矩形（这里用整数矩阵表示），并支持以下两种操作：</p><ol><li><code>updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code><ul><li>用 newValue 更新以<code>(row1,col1)</code>为左上角且以<code>(row2,col2)</code>为右下角的子矩形。</li></ul></li><li><code>getValue(int row, int col)</code><ul><li>返回矩形中坐标<code>(row,col)</code>的当前值。</li></ul></li></ol><h3 id="一得之见（Java）"><a href="#一得之见（Java）" class="headerlink" title="一得之见（Java）"></a>一得之见（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月7日09:37:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubrectangleQueries</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] rect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SubrectangleQueries</span><span class="params">(<span class="type">int</span>[][] rectangle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rect = rectangle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row1     子矩形左上角行坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> col1     子矩形左上角列坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row2     子矩形右下角行坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> col2     子矩形右下角列坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue 子矩形新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateSubrectangle</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rect != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row1; i &lt;= row2; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> col1; j &lt;= col2; j++) &#123;</span><br><span class="line">                    rect[i][j] = newValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回矩形中坐标(row,col)的当前值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row 行坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> col 列坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rect != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rect[row][col];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一得之见（Python）"><a href="#一得之见（Python）" class="headerlink" title="一得之见（Python）"></a>一得之见（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubRectangleQueries</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rectangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>):</span><br><span class="line">        self.data = rectangle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_sub_rectangle</span>(<span class="params"></span></span><br><span class="line"><span class="params">            self,</span></span><br><span class="line"><span class="params">            row1: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            col1: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            row2: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            col2: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            new_value: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用 newValue 更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。</span></span><br><span class="line"><span class="string">        :param self:</span></span><br><span class="line"><span class="string">        :param row1: 子矩形左上角行坐标</span></span><br><span class="line"><span class="string">        :param col1:子矩形左上角列坐标</span></span><br><span class="line"><span class="string">        :param row2:子矩形右下角行坐标</span></span><br><span class="line"><span class="string">        :param col2:子矩形右下角列坐标</span></span><br><span class="line"><span class="string">        :param new_value:子矩形新值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row1, row2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col1, col2 + <span class="number">1</span>):</span><br><span class="line">                    self.data[i][j] = new_value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self, row, col</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        回矩形中坐标(row,col)的当前值</span></span><br><span class="line"><span class="string">        :param self:</span></span><br><span class="line"><span class="string">        :param row: 行坐标</span></span><br><span class="line"><span class="string">        :param col: 列坐标</span></span><br><span class="line"><span class="string">        :return: 当前值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self.data[row][col]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode最富有客户的资产总量</title>
      <link href="/2021/04/06/leetcode-zui-fu-you-ke-hu-de-zi-chan-zong-liang/"/>
      <url>/2021/04/06/leetcode-zui-fu-you-ke-hu-de-zi-chan-zong-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="最富有客户的资产总量"><a href="#最富有客户的资产总量" class="headerlink" title="最富有客户的资产总量"></a>最富有客户的资产总量</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。<br>客户的资产总量就是他们在各家银行托管的资产数量之和。最富有客户就是资产总量最大的客户。</p><p>示例 1：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[1,2,3],[3,2,1]]</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">第1位客户的资产总量 = 1+2+3=6</span><br><span class="line">第2位客户的资产总量 = 3+2+1=6</span><br><span class="line">两位客户都是最富有的，资产总量都是6，所以返回6。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[1,5],[7,3],[3,5]]</span><br><span class="line">输出：10</span><br><span class="line">解释：</span><br><span class="line">第1位客户的资产总量 = 6</span><br><span class="line">第2位客户的资产总量 = 10</span><br><span class="line">第3位客户的资产总量 = 8</span><br><span class="line">第2为客户是最富有的，资产总量是10</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]</span><br><span class="line">输出：17</span><br></pre></td></tr></table></figure><h3 id="一得之见（Java）"><a href="#一得之见（Java）" class="headerlink" title="一得之见（Java）"></a>一得之见（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月6日11:28:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaximumWealth</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accounts 整数网格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最富有客户的资产总量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxWealth</span><span class="params">(<span class="type">int</span>[][] accounts)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">accountsLen</span> <span class="operator">=</span> accounts.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accountsLen; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; accounts[i].length; j++) &#123;</span><br><span class="line">                sum += accounts[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            result = Math.max(result, sum);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="他山之石（Java）"><a href="#他山之石（Java）" class="headerlink" title="他山之石（Java）"></a>他山之石（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accounts 整数网格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最富有客户的资产总量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxWealthTwo</span><span class="params">(<span class="type">int</span>[][] accounts)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(accounts).map(ints -&gt; Arrays.stream(ints).sum()).max(Integer::compareTo).get();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效率分析（Java）"><a href="#效率分析（Java）" class="headerlink" title="效率分析（Java）"></a>效率分析（Java）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class="line">方法一：2241700ns</span><br><span class="line">方法二：153366300ns</span><br></pre></td></tr></table></figure><h3 id="一得之见（Python）"><a href="#一得之见（Python）" class="headerlink" title="一得之见（Python）"></a>一得之见（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_wealth</span>(<span class="params">accounts: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class="line"><span class="string">    :param accounts: 整数网格</span></span><br><span class="line"><span class="string">    :return: 最富有客户的资产总量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    accounts_len = <span class="built_in">len</span>(accounts)</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(accounts_len):</span><br><span class="line">        len_two = <span class="built_in">len</span>(accounts[i])</span><br><span class="line">        sum_one = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len_two):</span><br><span class="line">            sum_one += accounts[i][j]</span><br><span class="line">            result = <span class="built_in">max</span>(result, sum_one)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="他山之石（Python）"><a href="#他山之石（Python）" class="headerlink" title="他山之石（Python）"></a>他山之石（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_wealth_two</span>(<span class="params">accounts: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个 m * n 的整数网格 accounts，其中 account[i][j]是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的资产总量。</span></span><br><span class="line"><span class="string">    :param accounts: 整数网格</span></span><br><span class="line"><span class="string">    :return: 最富有客户的资产总量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">sum</span>(accounts[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(accounts)))</span><br></pre></td></tr></table></figure><h3 id="效率分析（Python）"><a href="#效率分析（Python）" class="headerlink" title="效率分析（Python）"></a>效率分析（Python）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = &#123;&#123;1,2,3&#125;,&#123;1,4,5&#125;,&#123;1,4,7&#125;&#125;</span><br><span class="line">方法一：13600ns</span><br><span class="line">方法二：9100ns</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM结构详解</title>
      <link href="/2021/03/31/jvm-jie-gou-xiang-jie/"/>
      <url>/2021/03/31/jvm-jie-gou-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM-结构详解"><a href="#JVM-结构详解" class="headerlink" title="JVM 结构详解"></a>JVM 结构详解</h2><h3 id="JVM-结构图"><a href="#JVM-结构图" class="headerlink" title="JVM 结构图"></a>JVM 结构图</h3><p><img src="https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/606418cb8322e6675c4307c9.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h4 id="程序计数器（PC-寄存器）"><a href="#程序计数器（PC-寄存器）" class="headerlink" title="程序计数器（PC 寄存器）"></a>程序计数器（PC 寄存器）</h4><h5 id="程序计数器的定义"><a href="#程序计数器的定义" class="headerlink" title="程序计数器的定义"></a>程序计数器的定义</h5><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined。</p><h5 id="程序计数器的作用"><a href="#程序计数器的作用" class="headerlink" title="程序计数器的作用"></a>程序计数器的作用</h5><ul><li>字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制。</li><li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li></ul><h5 id="程序计数器的特点"><a href="#程序计数器的特点" class="headerlink" title="程序计数器的特点"></a>程序计数器的特点</h5><ul><li>是一块较小的内存空间。</li><li>线程私有，每条线程都有自己的程序计数器。</li><li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li><li>是唯一一个不会出现 OutOfMemoryError 的内存区域。</li></ul><h4 id="Java-虚拟机栈（Java-栈）"><a href="#Java-虚拟机栈（Java-栈）" class="headerlink" title="Java 虚拟机栈（Java 栈）"></a>Java 虚拟机栈（Java 栈）</h4><h5 id="Java-虚拟机栈的定义"><a href="#Java-虚拟机栈的定义" class="headerlink" title="Java 虚拟机栈的定义"></a>Java 虚拟机栈的定义</h5><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p><p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做<code>栈帧</code>的区域，用于存放该方法运行过程中的一些信息，如：</p><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接</li><li>方法出口信息</li><li>……</li></ul><h5 id="压栈出栈过程"><a href="#压栈出栈过程" class="headerlink" title="压栈出栈过程"></a>压栈出栈过程</h5><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p><p>Java 虚拟机栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p><p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p><p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p><h5 id="Java-虚拟机栈的特点"><a href="#Java-虚拟机栈的特点" class="headerlink" title="Java 虚拟机栈的特点"></a>Java 虚拟机栈的特点</h5><ul><li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可，在方法运行过程中，局部变量表的大小不会发生改变。</li><li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul><li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态拓展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li><li>OutOfMemoryError 若允许动态拓展，那么当线程请求栈时内存用完了，无法再动态拓展时，抛出 OutOfMemoryError 异常。</li></ul></li><li>Java 虚拟机栈是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li></ul><p>出现 StackOverFlowError 时，内存空间可能还有很多。</p><h4 id="本地方法栈（c-栈）"><a href="#本地方法栈（c-栈）" class="headerlink" title="本地方法栈（c 栈）"></a>本地方法栈（c 栈）</h4><h5 id="本地方法栈的定义"><a href="#本地方法栈的定义" class="headerlink" title="本地方法栈的定义"></a>本地方法栈的定义</h5><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p><h5 id="栈帧变化过程"><a href="#栈帧变化过程" class="headerlink" title="栈帧变化过程"></a>栈帧变化过程</h5><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、方法出口信息等。</p><p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMeMoryError 异常。</p><p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><h5 id="堆的定义"><a href="#堆的定义" class="headerlink" title="堆的定义"></a>堆的定义</h5><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p><h5 id="堆的特点"><a href="#堆的特点" class="headerlink" title="堆的特点"></a>堆的特点</h5><ul><li>线程共享，整个 Java 虚拟机只有一个堆，所有线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li><li>在虚拟机启动时创建。</li><li>是垃圾回收的主要场所。</li><li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survior</code>、老年代。</li></ul><p>不同区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p><p>堆的大小既可以固定也可以拓展，但对于主流的虚拟机，堆的大小是可拓展的，因此当线程请求分配内存，但堆已满，且内存已无法再拓展时，会抛出 OutOfMemoryError 异常。</p><p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><h5 id="方法区的定义"><a href="#方法区的定义" class="headerlink" title="方法区的定义"></a>方法区的定义</h5><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放一下信息：</p><ul><li>已经被虚拟机加载的类信息</li><li>常量</li><li>静态变量</li><li>即时编译器编译后的代码</li></ul><h5 id="方法区的特点"><a href="#方法区的特点" class="headerlink" title="方法区的特点"></a>方法区的特点</h5><ul><li>线程共享。方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享。整个虚拟机中只有一个方法区。</li><li>永久代。方法区中的信息一般需要长期存在，而且它又是堆的逻辑部分，因此用堆的划分方法，把方法区成为<code>永久代</code>。</li><li>内存回收效率低。方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li><li>Java 虚拟机规范对方法区的要求比较宽松。和堆一样，允许固定大小，也允许动态拓展，还允许不实现垃圾回收。</li></ul><h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p>方法区中存放：类信息、常量、静态变量、及时编译器编译后的代码。常量就存放在运行时常量池中。</p><p>当类被 Java 虚拟机加载后，.class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的<code>intern()</code>方法就能在运行期间向常量池中添加字符串常量。</p><h4 id="直接内存（堆外内存）"><a href="#直接内存（堆外内存）" class="headerlink" title="直接内存（堆外内存）"></a>直接内存（堆外内存）</h4><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p><h5 id="操作直接内存"><a href="#操作直接内存" class="headerlink" title="操作直接内存"></a>操作直接内存</h5><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提供了数据操作的效率。</p><p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p><h5 id="直接内存和堆内存比较"><a href="#直接内存和堆内存比较" class="headerlink" title="直接内存和堆内存比较"></a>直接内存和堆内存比较</h5><ul><li>直接内存申请空间耗费更高的性能</li><li>直接内存读取 IO 的性能要优于普通的堆内存</li><li>直接内存作用链：本地 IO -&gt; 直接内存 -&gt; 本地 IO</li><li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li></ul><p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域综合大于物理内存限制，从而导致动态拓展时出现<code>OutOfMemoryError</code>异常。</p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure">https://doocs.github.io/jvm/#/docs/01-jvm-memory-structure</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode一维数组的动态和</title>
      <link href="/2021/03/31/leetcode-yi-wei-shu-zu-de-dong-tai-he/"/>
      <url>/2021/03/31/leetcode-yi-wei-shu-zu-de-dong-tai-he/</url>
      
        <content type="html"><![CDATA[<h2 id="一维数组的动态和"><a href="#一维数组的动态和" class="headerlink" title="一维数组的动态和"></a>一维数组的动态和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个数组 nums。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i])。<br>请返回 nums 的动态和。</p><p>示例 1：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：[1,3,6,10]</span><br><span class="line">解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,1,1]</span><br><span class="line">输出：[1,2,3,4,5]</span><br><span class="line">解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,1,2,10,1]</span><br><span class="line">输出：[3,4,5,16,17]</span><br><span class="line">解释：动态和计算过程为 [3, 3+1, 3+1+5, 3+1+5+10, 3+1+5+10+1]</span><br></pre></td></tr></table></figure><h3 id="一得之见（Java）"><a href="#一得之见（Java）" class="headerlink" title="一得之见（Java）"></a>一得之见（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年3月31日10:07:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunningSum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class="line"><span class="comment">     * 请返回 nums 的动态和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nums 的动态和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] runningSum(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numsLen</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (numsLen == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[numsLen];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                result[i] += nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="他山之石（Java）"><a href="#他山之石（Java）" class="headerlink" title="他山之石（Java）"></a>他山之石（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class="line"><span class="comment">    * 请返回 nums 的动态和</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> nums 的动态和</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] runningSumTwo(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">       <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; nums.length ; i++ )&#123;</span><br><span class="line">           nums[i] += nums[i-<span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class="line"><span class="comment">     * 请返回 nums 的动态和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nums 的动态和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] runningSumThree(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numsLen</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[numsLen];</span><br><span class="line">        result[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numsLen; i++) &#123;</span><br><span class="line">            result[i] = result[i - <span class="number">1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="效率分析-Java"><a href="#效率分析-Java" class="headerlink" title="效率分析(Java)"></a>效率分析(Java)</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">方法一用时：1820300ns</span><br><span class="line">方法二用时：8600ns</span><br><span class="line">方法三用时：11300ns</span><br></pre></td></tr></table></figure><h3 id="一得之见（Python）"><a href="#一得之见（Python）" class="headerlink" title="一得之见（Python）"></a>一得之见（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">running_sum</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class="line"><span class="string">    请返回 nums 的动态和</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 数组的动态和</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    result = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums_len)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums_len):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">            result[i] += nums[j]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="他山之石（Python）"><a href="#他山之石（Python）" class="headerlink" title="他山之石（Python）"></a>他山之石（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">running_sum_two</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</span></span><br><span class="line"><span class="string">    请返回 nums 的动态和</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :return: 数组的动态和</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nums_len = <span class="built_in">len</span>(nums)</span><br><span class="line">    res = [nums[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nums_len):</span><br><span class="line">        total = res[i - <span class="number">1</span>] + nums[i]</span><br><span class="line">        res.append(total)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="效率分析-Python"><a href="#效率分析-Python" class="headerlink" title="效率分析(Python)"></a>效率分析(Python)</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">方法一用时：15700ns</span><br><span class="line">方法二用时：6500ns</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java交换数组元素</title>
      <link href="/2021/03/30/java-jiao-huan-shu-zu-yuan-su/"/>
      <url>/2021/03/30/java-jiao-huan-shu-zu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-交换数组元素"><a href="#Java-交换数组元素" class="headerlink" title="Java 交换数组元素"></a>Java 交换数组元素</h2><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年3月30日14:09:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwapElement</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 待交换数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i    需交换下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j    需交换下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 交换后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] swapElementOne(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = item;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 待交换数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i    需交换下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j    需交换下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 交换后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] swapElementTwo(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        List&lt;Integer&gt; item = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class="line">        Collections.swap(item, i, j);</span><br><span class="line">        <span class="type">int</span>[] result = item.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组下标为i和数组下标为j的两个数组元素进行交换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 待交换数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i    需交换下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j    需交换下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 交换后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] swapElementThree(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        nums[i] ^= nums[j];</span><br><span class="line">        nums[j] ^= nums[i];</span><br><span class="line">        nums[i] ^= nums[j];</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 2, 3, 4&#125;; i=1; j=3;</span><br><span class="line">方法一：2420500ns</span><br><span class="line">方法二：163113800ns</span><br><span class="line">方法三：20200ns</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>方法一：<br>  使用中间变量进行交换，不能直接进行交换。</li><li>方法二：<br>  使用Collections.swap()方法进行交换，需要先将数组转换成List，交换完成后再转换成数组返回。</li><li>方法三：<br>  使用位运算符进行交换。<br>  ^：如果相对应位值相同，则结果为0，否则为1<br>  <code>C ^= C1 等价于 C = C^C1</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode缺失的第一个正数</title>
      <link href="/2021/03/29/leetcode-que-shi-de-di-yi-ge-zheng-shu/"/>
      <url>/2021/03/29/leetcode-que-shi-de-di-yi-ge-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-缺失的第一个正数"><a href="#LeetCode-缺失的第一个正数" class="headerlink" title="LeetCode 缺失的第一个正数"></a>LeetCode 缺失的第一个正数</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。</p><p>进阶：你可以实现时间复杂度为 O(n)并且只使用常数级别额外空间的解决方案吗？</p><p>示例 1：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,0]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,4,-1,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,8,9,11,12]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h3 id="Java-解法"><a href="#Java-解法" class="headerlink" title="Java 解法"></a>Java 解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年3月29日13:51:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstMissingPositive</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 未排序的整数数组 nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没有出现的最小的正整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numsLen</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (numsLen == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[numsLen + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">resLen</span> <span class="operator">=</span> res.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; resLen) &#123;</span><br><span class="line">                res[x] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; resLen; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != res[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 未排序的整数数组 nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没有出现的最小的正整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">firstMissingPositiveTwo</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numsLen</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (numsLen == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt; numsLen + <span class="number">1</span> &amp;&amp; nums[i] != i + <span class="number">1</span> &amp;&amp; nums[i] != nums[nums[i] - <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(nums, i, nums[i] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numsLen; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numsLen + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组元素位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 未排序的整数数组 nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 需交换元素数组index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j 与需交换元素进行交换的数组index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">            nums[j] ^= nums[j];</span><br><span class="line">            nums[j] ^= nums[i];</span><br><span class="line">            nums[i] ^= nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Java-解法效率对比"><a href="#Java-解法效率对比" class="headerlink" title="Java 解法效率对比"></a>Java 解法效率对比</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class="line">方法一：2708900ns</span><br><span class="line">方法二：15400ns</span><br></pre></td></tr></table></figure><h3 id="Python-解法"><a href="#Python-解法" class="headerlink" title="Python 解法"></a>Python 解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_missing_positive</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class="line"><span class="string">    :param nums: 未排序的整数数组</span></span><br><span class="line"><span class="string">    :return: 没有出现的最小的正整数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; x &lt; <span class="built_in">len</span>(res):</span><br><span class="line">            res[x] = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">        <span class="keyword">if</span> res[i] != i:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_missing_positive_two</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数</span></span><br><span class="line"><span class="string">    :param nums: 未排序的整数数组</span></span><br><span class="line"><span class="string">    :return: 没有出现的最小的正整数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; nums[i] &lt; n + <span class="number">1</span> <span class="keyword">and</span> nums[<span class="number">1</span>] != i + \</span><br><span class="line">                <span class="number">1</span> <span class="keyword">and</span> nums[i] != nums[nums[i] - <span class="number">1</span>]:</span><br><span class="line">            swap(nums, i, nums[i] - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> nums[i] != i + <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> i != j:</span><br><span class="line">        nums[i] ^= nums[j]</span><br><span class="line">        nums[j] ^= nums[i]</span><br><span class="line">        nums[i] ^= nums[j]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python-解法效率对比"><a href="#Python-解法效率对比" class="headerlink" title="Python 解法效率对比"></a>Python 解法效率对比</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 3, 6, 7, 9&#125;;</span><br><span class="line">方法一：13900ns</span><br><span class="line">方法二：17100ns</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch的倒排索引</title>
      <link href="/2021/03/25/elasticsearch-de-dao-pai-suo-yin/"/>
      <url>/2021/03/25/elasticsearch-de-dao-pai-suo-yin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode移除元素</title>
      <link href="/2021/03/25/leetcode-yi-chu-yuan-su/"/>
      <url>/2021/03/25/leetcode-yi-chu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-移除元素"><a href="#LeetCode-移除元素" class="headerlink" title="LeetCode 移除元素"></a>LeetCode 移除元素</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不需要使用额外的数组空间，你必须仅使用 O(1)额外空间并原地修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h3 id="Java-解法"><a href="#Java-解法" class="headerlink" title="Java 解法"></a>Java 解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class="line"><span class="comment">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class="line"><span class="comment">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val  判断值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新数组的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class="line"><span class="comment">     * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class="line"><span class="comment">     * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val  判断值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新数组的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElementTwo</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] == val) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i++] = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Java-解法效率对比"><a href="#Java-解法效率对比" class="headerlink" title="Java 解法效率对比"></a>Java 解法效率对比</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class="line">方法一：2666500ns</span><br><span class="line">方法二：15300ns</span><br></pre></td></tr></table></figure><h3 id="Python-解法"><a href="#Python-解法" class="headerlink" title="Python 解法"></a>Python 解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_element</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class="line"><span class="string">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class="line"><span class="string">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :param val: 判断值</span></span><br><span class="line"><span class="string">    :return: 新数组的长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> nums[i] == val:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">                nums[j] = nums[j + <span class="number">1</span>]</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_element_two</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span></span><br><span class="line"><span class="string">    不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span></span><br><span class="line"><span class="string">    元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="string">    :param nums: 数组</span></span><br><span class="line"><span class="string">    :param val: 判断值</span></span><br><span class="line"><span class="string">    :return: 新数组的长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> nums[j] == val:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i] = nums[j]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python-解法效率对比"><a href="#Python-解法效率对比" class="headerlink" title="Python 解法效率对比"></a>Python 解法效率对比</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;val = 2;</span><br><span class="line">方法一：60700ns</span><br><span class="line">方法二：36200ns</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode两数之和</title>
      <link href="/2021/03/23/leetcode-liang-shu-zhi-he/"/>
      <url>/2021/03/23/leetcode-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-两数之和"><a href="#LeetCode-两数之和" class="headerlink" title="LeetCode 两数之和"></a>LeetCode 两数之和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给定nums = [2,7,11,15],target=9</span><br><span class="line">因为nums[0] + nums[1] = 2 + 7 = 9 所以返回[0, 1]</span><br></pre></td></tr></table></figure><h3 id="Java-解法"><a href="#Java-解法" class="headerlink" title="Java 解法"></a>Java 解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年3月23日14:27:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoNumSum</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_NUMS</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums   整数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoNumSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; NUM_NUMS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    result[<span class="number">0</span>] = i;</span><br><span class="line">                    result[<span class="number">1</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums   整数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数组中和为目标值的两个整数的数组下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoNumSumMap(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Java解法效率对比"><a href="#Java解法效率对比" class="headerlink" title="Java解法效率对比"></a>Java解法效率对比</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class="line">方法一：5074400ns</span><br><span class="line">方法二：264300ns</span><br></pre></td></tr></table></figure><h3 id="Python-解法"><a href="#Python-解法" class="headerlink" title="Python 解法"></a>Python 解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_sum_dict</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class="line"><span class="string">   :param nums: 整数数组</span></span><br><span class="line"><span class="string">   :param target: 目标值</span></span><br><span class="line"><span class="string">   :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line">    dict_item = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">if</span> target - num <span class="keyword">in</span> dict_item:</span><br><span class="line">            <span class="keyword">return</span> [dict_item[target - num], i]</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_sum</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class="line"><span class="string">    :param nums: 整数数组</span></span><br><span class="line"><span class="string">    :param target: 目标值</span></span><br><span class="line"><span class="string">    :return: 数组中和为目标值的两个整数的数组下标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                <span class="keyword">return</span> [i, j]</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python解法效率对比"><a href="#Python解法效率对比" class="headerlink" title="Python解法效率对比"></a>Python解法效率对比</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = &#123;1, 3, 5, 7, 9, 12, 13, 19, 20&#125;;target = 23;</span><br><span class="line">方法一：10200ns</span><br><span class="line">方法二：6800ns</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch入门</title>
      <link href="/2021/03/23/elasticsearch-ru-men/"/>
      <url>/2021/03/23/elasticsearch-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch-简介"><a href="#Elasticsearch-简介" class="headerlink" title="Elasticsearch 简介"></a>Elasticsearch 简介</h2><p>Elasticsearch 是一款分布式搜索和分析引擎，为所有类型的数据提供快速近乎于实时的搜索和分析。无论是结构化文本还是非结构化文本，数字数据或地理空间数据，Elasticsearch 都能快速有效的对其进行存储和索引。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>应用或者网站的搜索框</li><li>存储和分析日志、指标和安全事件数据</li><li>机器学习用来实时自动模拟数据行为</li><li>作为存储引擎，实现业务工作流的自动化</li><li>作为地理信息系统（GIS）来管理、整合和分析空间信息</li><li>作为生物信息学研究工具存储和处理遗传数据</li></ul><h3 id="数据存储：文档和索引"><a href="#数据存储：文档和索引" class="headerlink" title="数据存储：文档和索引"></a>数据存储：文档和索引</h3><p>Elasticsearch 不会将信息存储为列数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。索引可以看做是文档的优化集合，每个文档都是字段的集合，这些字段包含数据的键值对。</p><p>Elasticsearch 为每个字段中的所有数据建立索引，并且每个索引字段都具有专门的优化数据结构。例如，文本字段存储在倒排索引中，数字字典和地理字段存储在 BKD 树中。</p><h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载链接 <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>直接将下载的压缩包解压，启动<code>bin</code>目录下面的<code>elasticsearch.bat</code></p><p>浏览器打开<a href="http://localhost:9200/">http://localhost:9200/</a>查看 Elasticsearch 服务信息</p><p><img src="https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/6061419f8322e6675c770dcf.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h3 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h3><p>打开<code>config</code>目录下的<code>elasticsearch.yml</code>配置文件</p><p><code>修改network.host: 你的IP地址</code></p><p>放开注释<code>#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</code><br>节点根据情况进行增删</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIO/NIO/AIO对比</title>
      <link href="/2021/03/22/bio-nio-aio-dui-bi/"/>
      <url>/2021/03/22/bio-nio-aio-dui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h2><p>就是使用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br>Java 支持三种网络编程模型：BIO、NIO、AIO。</p><ul><li><p>Java BIO，同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善。</p></li><li><p>Java NIO，同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求会被注册到多路复用器上，多路复用器轮询到有 IO 请求就会进行处理。</p></li><li><p>Java AIO，异步非阻塞，AIO 引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p></li></ul><h2 id="BIO、NIO、AIO-使用场景"><a href="#BIO、NIO、AIO-使用场景" class="headerlink" title="BIO、NIO、AIO 使用场景"></a>BIO、NIO、AIO 使用场景</h2><ul><li>BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。</li><li>NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。</li><li>AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</li></ul><h2 id="BIO-基本介绍"><a href="#BIO-基本介绍" class="headerlink" title="BIO 基本介绍"></a>BIO 基本介绍</h2><ul><li>Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。</li><li>BIO（Blocking I/O）：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不做任何事情就会造成不必要的线程开销，可以通过线程池机制改善。</li></ul><h3 id="BIO-编程简要流程"><a href="#BIO-编程简要流程" class="headerlink" title="BIO 编程简要流程"></a>BIO 编程简要流程</h3><ol><li>服务器驱动一个 ServiceSocket。</li><li>客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信。</li><li>客户端发出请求后，先咨询服务器是否线程响应，如果没有则会等待，或者被拒绝。</li><li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li></ol><h3 id="BIO-服务端代码案例"><a href="#BIO-服务端代码案例" class="headerlink" title="BIO 服务端代码案例"></a>BIO 服务端代码案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年3月22日14:35:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bio</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BIO 测试方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bioTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">// 创建serverSocket</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;等待连接中...&quot;</span>);</span><br><span class="line">            <span class="comment">// 监听，等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到一个客户端&quot;</span>);</span><br><span class="line">            executorService.execute(() -&gt; handler(socket));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写一个handler方法，和客户端通讯</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket 套接字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handler</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程信息：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过socket获取输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="comment">// 循环读取客户度发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (inputStream.read(bytes) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：发送信息为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, bytes.length));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>启动该案例</li><li>使用终端命令<code>telnet 127.0.0.1 6666</code>，打开 telnet 命令窗口<br><img src="https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/60582d968322e6675c66aa1d.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></li><li>按下<code>ctrl+]</code><br><img src="https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/60582da28322e6675c66b0b1.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></li><li>输入<code>send hello world</code>，进行通信<br><img src="https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/60582da98322e6675c66b3ca.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></li><li>输入<code>quit</code>退出 telnet 窗口，关闭连接<br><img src="https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/60582daf8322e6675c66b674.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></li></ul><h3 id="BIO-问题分析"><a href="#BIO-问题分析" class="headerlink" title="BIO 问题分析"></a>BIO 问题分析</h3><ol><li>每个请求都需要创建独立的线程，与对应的客户端进行数据处理。</li><li>当并发数大时，需要创建大量线程来处理连接，系统资源占用大。</li><li>连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费。</li></ol><h2 id="NIO-基本介绍"><a href="#NIO-基本介绍" class="headerlink" title="NIO 基本介绍"></a>NIO 基本介绍</h2><ol><li>Java NIO 全称 Java non-blocking IO，指的是 JDK 提供新的 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。</li><li>NIO 相关类都放在 java.io 包下，并对原 java.io 包中很多类进行了改写。</li><li>NIO 有三大核心部分：Channel（管道）、Buffer（缓冲区）、Selector（选择器）。</li><li>NIO 是面向缓冲区编程的，数据读取到一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程的灵活性，使用它可以提供非阻塞的高伸缩性网格。</li><li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。</li></ol><h3 id="NIO-Buffer-的基本使用"><a href="#NIO-Buffer-的基本使用" class="headerlink" title="NIO Buffer 的基本使用"></a>NIO Buffer 的基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> java.nio.IntBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年3月22日14:39:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nio</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NIO 测试方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nioTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//同理对应的还有：ByteBuffer,IntBuffer,FloatBuffer,CharBuffer,ShortBuffer,DoubleBuffer,LongBuffer</span></span><br><span class="line">        <span class="comment">//创建一个Buffer，大小为5</span></span><br><span class="line">        <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 存放数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> buffer.capacity();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            buffer.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 切换成读模式，读写切换</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NIO-三大核心组件关系"><a href="#NIO-三大核心组件关系" class="headerlink" title="NIO 三大核心组件关系"></a>NIO 三大核心组件关系</h3><p><img src="https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/60583dcf8322e6675c703e73.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>每个 Channel 对应一个 Buffer。</li><li>Selector 对应一个线程，一个线程对应多个 Channel。</li><li>该图反应了有三个 Channel 注册到该 Selector。</li><li>该程序切换到哪个 Channel 是由事件决定的（Event）。</li><li>Selector 会根据不同的事件，在各个通道上切换。</li><li>Buffer 就是一个内存块，底层是一个数组。</li><li>数据的读取和写入是通过 Buffer，但是需要 flip()切换读写模式。而 BIO</li></ol><h3 id="NIO-三大核心理解"><a href="#NIO-三大核心理解" class="headerlink" title="NIO 三大核心理解"></a>NIO 三大核心理解</h3><p><img src="https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/605844f48322e6675c747b0b.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p><h4 id="Buffer-的机制及子类"><a href="#Buffer-的机制及子类" class="headerlink" title="Buffer 的机制及子类"></a>Buffer 的机制及子类</h4><h5 id="Buffer（缓冲区）基本介绍"><a href="#Buffer（缓冲区）基本介绍" class="headerlink" title="Buffer（缓冲区）基本介绍"></a>Buffer（缓冲区）基本介绍</h5><p>缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象（含数组），该对象提供了一组方法，可以更轻松的使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。<br>Channel 提供从文件、网络读取数据的渠道，但是读取或者写都必须经过 Buffer。<br>在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">IntBuffer</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">Buffer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;IntBuffer&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These fields are declared here rather than in Heap-X-Buffer in order to</span></span><br><span class="line">    <span class="comment">// reduce the number of virtual method invocations needed to access these</span></span><br><span class="line">    <span class="comment">// values, which is especially costly when coding small buffers.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] hb;                  <span class="comment">// Non-null only for heap buffers</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">boolean</span> isReadOnly;                 <span class="comment">// Valid only for heap buffers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates a new buffer with the given mark, position, limit, capacity,</span></span><br><span class="line">    <span class="comment">// backing array, and array offset</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    IntBuffer(<span class="type">int</span> mark, <span class="type">int</span> pos, <span class="type">int</span> lim, <span class="type">int</span> cap,   <span class="comment">// package-private</span></span><br><span class="line">                 <span class="type">int</span>[] hb, <span class="type">int</span> offset)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>(mark, pos, lim, cap);</span><br><span class="line">        <span class="built_in">this</span>.hb = hb;</span><br><span class="line">        <span class="built_in">this</span>.offset = offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates a new buffer with the given mark, position, limit, and capacity</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    IntBuffer(<span class="type">int</span> mark, <span class="type">int</span> pos, <span class="type">int</span> lim, <span class="type">int</span> cap) &#123; <span class="comment">// package-private</span></span><br><span class="line">        <span class="built_in">this</span>(mark, pos, lim, cap, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Buffer 常用子类</th><th>描述</th></tr></thead><tbody><tr><td>ByteBuffer</td><td>存储字节数据到缓冲区</td></tr><tr><td>ShortBuffer</td><td>存储字符创数据到缓冲区</td></tr><tr><td>CharBuffer</td><td>存储字符数据到缓冲区</td></tr><tr><td>IntBuffer</td><td>存储整数数据到缓冲区</td></tr><tr><td>LongBuffer</td><td>存储长整型数据到缓冲区</td></tr><tr><td>DoubleBuffer</td><td>存储浮点型数据到缓冲区</td></tr><tr><td>FloatBuffer</td><td>存储浮点型数据到缓冲区</td></tr></tbody></table><p>Buffer 中定义了四个属性来提供所有其包含的数据元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> limit;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> capacity;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>capacity</td><td>容量，即可以容纳的最大数据量；在缓冲区被创建时就被指定，无法修改</td></tr><tr><td>limit</td><td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的</td></tr><tr><td>position</td><td>当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备</td></tr><tr><td>Mark</td><td>标记当前 position 位置，当 reset 后回到标记位置</td></tr></tbody></table><h4 id="Channel-的基本介绍"><a href="#Channel-的基本介绍" class="headerlink" title="Channel 的基本介绍"></a>Channel 的基本介绍</h4><p>NIO 的通道类似于流，但有如下区别：</p><ol><li>通道是双向的可以进行读写，而流是单向的只能读，或者写。</li><li>通道可以实现已读读取数据。</li><li>通道可以从缓冲区读取数据，也可以写入数据到缓冲区。</li></ol><p>常用的 Channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel</p><h5 id="FileChannel-类"><a href="#FileChannel-类" class="headerlink" title="FileChannel 类"></a>FileChannel 类</h5><p>FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：</p><ol><li><p>使用 FileChannel 写入文本文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用FileChannel写入文本文件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nioFileChannelWrite</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">writeStr</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java菜鸟程序员&quot;</span>;</span><br><span class="line">     <span class="comment">// 创建一个输出流</span></span><br><span class="line">     <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">     <span class="comment">// 获取通道</span></span><br><span class="line">     <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> fileOutputStream.getChannel();</span><br><span class="line">     <span class="comment">// 创建缓冲区</span></span><br><span class="line">     <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">     <span class="comment">// 写入byteBuffer</span></span><br><span class="line">     byteBuffer.put(writeStr.getBytes());</span><br><span class="line">     <span class="comment">// 切换模式</span></span><br><span class="line">     byteBuffer.flip();</span><br><span class="line">     <span class="comment">// 写入通道</span></span><br><span class="line">     channel.write(byteBuffer);</span><br><span class="line">     <span class="comment">// 关闭</span></span><br><span class="line">     channel.close();</span><br><span class="line">     fileOutputStream.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 FileChannel 读取文本文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用FileChannel 读取文本文件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nioFileChannelRead</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">     <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">     <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> fileInputStream.getChannel();</span><br><span class="line">     <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">     channel.read(byteBuffer);</span><br><span class="line">     System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(byteBuffer.array(), <span class="number">0</span>, byteBuffer.limit()));</span><br><span class="line">     channel.close();</span><br><span class="line">     fileInputStream.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 FileChannel 复制文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用FileChannel复制文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nioFileChannelCopy</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;world.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">inChannel</span> <span class="operator">=</span> fileInputStream.getChannel();</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">outChannel</span> <span class="operator">=</span> fileOutputStream.getChannel();</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (inChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        outChannel.write(byteBuffer);</span><br><span class="line">        <span class="comment">// 清空重置</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 transferFrom 复制文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用transferFrom复制文件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nioTransferFromCopy</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">     <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">     <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;world.txt&quot;</span>);</span><br><span class="line">     <span class="type">FileChannel</span> <span class="variable">inChannel</span> <span class="operator">=</span> fileInputStream.getChannel();</span><br><span class="line">     <span class="type">FileChannel</span> <span class="variable">outChannel</span> <span class="operator">=</span> fileOutputStream.getChannel();</span><br><span class="line">     <span class="comment">// 从哪拷贝，从几开始到几结束 对应的还有transferTo()方法</span></span><br><span class="line">     outChannel.transferFrom(inChannel, <span class="number">0</span>, inChannel.size());</span><br><span class="line">     outChannel.close();</span><br><span class="line">     fileOutputStream.close();</span><br><span class="line">     fileInputStream.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Channel-和-Buffer-的注意事项"><a href="#Channel-和-Buffer-的注意事项" class="headerlink" title="Channel 和 Buffer 的注意事项"></a>Channel 和 Buffer 的注意事项</h5><ol><li>ByteBuffer 支持类型化的 put 和 get，put 放入什么数据类型，get 就应该使用相应的数据类型来取出，否则可能会产生 ByteUnderflowException 异常。</li><li>可以将一个普通的 Buffer 转换为只读的 Buffer：asReadOnlyBuffer()方法。</li><li>NIO 提供了 MapperByteBuffer，可以让文件直接在内存（堆外内存）中进行修改，而如何同步到文件由 NIO 来完成。</li><li>NIO 还支持通过多个 Buffer（即 Buffer 数组）完成读写操作，即 Scattering（分散）和 Gathering（聚集）。<ul><li>Scattering（分散）：在向缓冲区写入数据时，可以使用 Buffer 数组一次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。</li><li>Gatering（聚集）：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取一下个。</li></ul></li></ol><h4 id="Selector-的基本介绍"><a href="#Selector-的基本介绍" class="headerlink" title="Selector 的基本介绍"></a>Selector 的基本介绍</h4><ol><li>Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector（选择器）。</li><li>Selector 能够检测到多个注册通道上是否有事件发生（多个 Channel 以事件的形式注册到同一个 selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。</li><li>只有在连接真正有读写事件发生时，才会进行读写，减少系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程。</li><li>避免了多线程之间上下文切换导致的开销。</li></ol><h5 id="Selector-特点"><a href="#Selector-特点" class="headerlink" title="Selector 特点"></a>Selector 特点</h5><p>Netty 的 I/O 线程 NioEventLoop 聚合了 Selector（选择器/多路复用器），可以并发处理成百上千个客户端连接。</p><p>当线程从某个客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务。</p><p>线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道。</p><p>由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。</p><p>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本解决了传统同步阻塞 I/O 一连接一线程模型，架构性能、弹性伸缩能力和可靠性都得到极大的提升。</p><h5 id="Selector-常用方法"><a href="#Selector-常用方法" class="headerlink" title="Selector 常用方法"></a>Selector 常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Selector</span> implement Closeable&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Selector <span class="title function_">open</span><span class="params">()</span>; <span class="comment">// 得到一个选择器对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">long</span> timeout)</span>; <span class="comment">// 监听所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间</span></span><br><span class="line">  <span class="keyword">public</span> Set&lt;SelectionKey&gt; <span class="title function_">selectionKeys</span><span class="params">()</span>; <span class="comment">// 从内部集合中得到所有的SelectionKey</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Selector-相关方法说明"><a href="#Selector-相关方法说明" class="headerlink" title="Selector 相关方法说明"></a>Selector 相关方法说明</h5><ul><li>selector.select()：若监听到注册管道中有事件，则持续阻塞</li><li>selector.select(1000)：阻塞 1000 毫秒，1000 毫秒后返回</li><li>selector.wakeup()：换线 selector</li><li>selector.selectNow()：不阻塞，立即返回</li></ul><h4 id="NIO-非阻塞网络编程过程分析"><a href="#NIO-非阻塞网络编程过程分析" class="headerlink" title="NIO 非阻塞网络编程过程分析"></a>NIO 非阻塞网络编程过程分析</h4><ol><li>当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel。</li><li>Selector 进行监听，调用 select()方法，返回注册该 selector 的所有通道中有事件发生的通道个数。</li><li>将 socketChannel 注册到 Selector 上，<code>public final SelectionKey register(Selector sel, int ops)</code>，一个 selector 上可以注册多个 SocketChannel。</li><li>注册后返回一个 SelectionKey，会和该 Selector 关联（以集合的形式）。</li><li>进一步得到各个 SelectionKey，有事件发生。</li><li>再通过 SelectionKey 反向获取 SocketChannel，使用 channel()方法。</li><li>可以通过得到的 channel，完成业务处理。</li></ol><p>SelectionKey 中定义了四个操作标志位：OP_READ 表示通道中发生读事件；OP_WRITE 表示通道中发生写事件；OP_CONNECT 表示建立连接；OP_ACCEPT 表示请求连接。</p><h5 id="SelectionKey-相关方法"><a href="#SelectionKey-相关方法" class="headerlink" title="SelectionKey 相关方法"></a>SelectionKey 相关方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public abstract Selector selector();</td><td>得到与之关联的 Selector 对象</td></tr><tr><td>public abstract SelectableChannel channel();</td><td>得到与之关联的通道</td></tr><tr><td>public final Object attachment();</td><td>得到与之关联的共享数据</td></tr><tr><td>public abstract SelectionKey interestOps(int ops);</td><td>设置或改变监听的事件类型</td></tr><tr><td>public final boolean isReadable();</td><td>通道是否可读</td></tr><tr><td>public final boolean usWritable();</td><td>通道是否可写</td></tr><tr><td>public final boolean isAcceptable();</td><td>是否可以建立连接 ACCEPT</td></tr></tbody></table><h3 id="NIO-和-BIO-对比"><a href="#NIO-和-BIO-对比" class="headerlink" title="NIO 和 BIO 对比"></a>NIO 和 BIO 对比</h3><ol><li>BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比 I/O 高很多。</li><li>BIO 是阻塞的，而 NIO 是非阻塞的。</li><li>BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区中写入到通道中。Selector（选择器）用于监听多个通道事件（比如连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</li></ol><h3 id="AIO-基本介绍"><a href="#AIO-基本介绍" class="headerlink" title="AIO 基本介绍"></a>AIO 基本介绍</h3><p>JDK7 引入了 ASynchronous I/O，即 AIO。在进行 I/O 编程中，通常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务端得到通知，进行相应的处理。</p><p>AIO 叫做异步非阻塞的 I/O，引入了异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才会启动线程，特点就是先由操作系统完成后才会通知服务器端程序启动线程去处理，一般用于连接数较多且连接时长较长的应用。</p><p>Reactor 和 Proactor</p><ul><li>两种 IO 多路复用方案：Reactor and Proactor。</li><li>Reactor 模式是基于同步 I/O 的，而 Proactor 模式是和异步 I/O 相关的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows端口被占用解决方法</title>
      <link href="/2021/03/19/windows-duan-kou-bei-zhan-yong-jie-jue-fang-fa/"/>
      <url>/2021/03/19/windows-duan-kou-bei-zhan-yong-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Error-场景"><a href="#Error-场景" class="headerlink" title="Error 场景"></a>Error 场景</h2><p>启动 Java 项目失败，控制台显示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Error starting ApplicationContext. To display the conditions report`re-run your application with &#x27;debug&#x27; enabled.</span><br><span class="line"></span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Verify the connector&#x27;s configuration, identify and stop any process that&#x27;s listening on port 8080, or configure this application to listen on another port.</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>查看那些进程占用了我们的端口号<code>8080</code></p><p>打开 Windows 控制台，输入命令</p></li></ul><p><code>netstat -nao | findstr &quot;8080&quot;</code></p><p>可以看到占用 <code>8080</code> 端口的进程 PID 为 <code>8404</code></p><ul><li><p>杀死相应进程：</p><p>在 Windows 控制台，继续输入命令</p></li></ul><p><code>taskkill /pid 8404 /f</code></p><p><img src="https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg" class="lazyload placeholder" data-srcset="https://img.imgdb.cn/item/605440cc524f85ce2903d864.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口占用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoUpdater自动更新客户端</title>
      <link href="/2021/03/19/autoupdater-zi-dong-geng-xin-ke-hu-duan/"/>
      <url>/2021/03/19/autoupdater-zi-dong-geng-xin-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-NuGet-包"><a href="#安装-NuGet-包" class="headerlink" title="安装 NuGet 包"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装Autoupdater.NET.Official。</code></pre><h2 id="工作简介"><a href="#工作简介" class="headerlink" title="工作简介"></a>工作简介</h2><pre><code>    从服务器下载包含更新文件的XML文件，从中获取软件的最新版本信息。如果软件的最新版本大于用户PC上安装的当前软件版本，则会向用户显示更新对话框。当然，也可以设置按钮事件进行点击下载更新文件。如果文件是压缩包，会自动将压缩包的内容解压缩到应用程序目录。</code></pre><h2 id="XML-文件"><a href="#XML-文件" class="headerlink" title="XML 文件"></a>XML 文件</h2><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span> encoding = <span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">&lt; item &gt;</span><br><span class="line">    &lt; version &gt; 2.0.0.0 &lt;/ version &gt;</span><br><span class="line">    &lt; url &gt; https://www.cnblogs.com&lt;/ url &gt;</span><br><span class="line">    &lt; changelog &gt; https://www.cnblogs.com &lt;/ changelog &gt;</span><br><span class="line">    &lt; mandatory &gt; false &lt;/ mandatory &gt;</span><br><span class="line">&lt;/ item &gt;</span><br></pre></td></tr></table></figure>如上所示：    version(必填)：格式为X.X.X.X的版本标记。    url(必填)：最新版本安装程序文件的url。    changelog(可选)：程序更改日志的url。    mandatory(可选)：强制更新，将跳过信息和稍后更新按钮隐藏。选择使用以下代码将跳过update对话框，自动下载更新：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mandatory</span> <span class="attr">mode</span>=<span class="string">&quot;2&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">mandatory</span>&gt;</span></span><br></pre></td></tr></table></figure>    args(可选)：为安装提供命令行参数，参数可以包含%path%，用以替换正在执行的应用程序所在目录的路径。    checksum(可选)：更新文件的校验和，用以检验文件的完整性，algorithm属性指定算法，支持 MD5,SHA1,SHA256,SHA384,SHA512。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checksum</span> <span class="attr">algorithm</span>=<span class="string">&quot;MD5&quot;</span>&gt;</span>Update file Checksum<span class="tag">&lt;/<span class="name">checksum</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="窗体代码"><a href="#窗体代码" class="headerlink" title="窗体代码"></a>窗体代码</h2><pre><code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AutoUpdaterDotNET;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//XML文件地址</span></span><br><span class="line">            AutoUpdater.Start(<span class="string">&quot;https://www.cnblogs.com&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://github.com/ravibpatel/AutoUpdater.NET">https://github.com/ravibpatel/AutoUpdater.NET</a></p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> Winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoUpdater </tag>
            
            <tag> 客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CefSharp创建客户端</title>
      <link href="/2021/03/19/cefsharp-chuang-jian-ke-hu-duan/"/>
      <url>/2021/03/19/cefsharp-chuang-jian-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-NuGet-包"><a href="#安装-NuGet-包" class="headerlink" title="安装 NuGet 包"></a>安装 NuGet 包</h2><pre><code>在Visio studio中右击解决方案，选择管理NuGet包，搜索安装CefSharp.WinForms。</code></pre><h2 id="配置工作"><a href="#配置工作" class="headerlink" title="配置工作"></a>配置工作</h2><pre><code>(1)首先右击项目选择属性，在&quot;生成&quot;选项中将&quot;首选32位&quot;勾上。(2)其次在项目文件目录下找到&quot;项目名称.csproj&quot;文件，在第一个PropertyGroup中添加以下代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CefSharpAnyCpuSupport</span>&gt;</span>true<span class="tag">&lt;/<span class="name">CefSharpAnyCpuSupport</span>&gt;</span></span><br></pre></td></tr></table></figure>(3)最后修改App.config文件，和&lt;startup&gt;标签并列地位，添加以下代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">runtime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assemblyBinding</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">probing</span> <span class="attr">privatePath</span>=<span class="string">&quot;x86&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">assemblyBinding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">runtime</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="窗体代码"><a href="#窗体代码" class="headerlink" title="窗体代码"></a>窗体代码</h2><pre><code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> CefSharp;</span><br><span class="line"><span class="keyword">using</span> CefSharp.WinForms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">embebbedChromium</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ChromiumWebBrowser chromeBrowser;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">// 初始化全局组件后启动浏览器</span></span><br><span class="line">            InitializeChromium();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitializeChromium</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            CefSettings settings = <span class="keyword">new</span> CefSettings();</span><br><span class="line">            <span class="comment">//按照设置初始化cef</span></span><br><span class="line">            Cef.Initialize(settings);</span><br><span class="line">            <span class="comment">// 创建一个浏览器组件</span></span><br><span class="line">            chromeBrowser = <span class="keyword">new</span> ChromiumWebBrowser(<span class="string">&quot;http://baidu.com&quot;</span>);</span><br><span class="line">            <span class="comment">// 将其添加到表单并将其填充到表单窗口</span></span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(chromeBrowser);</span><br><span class="line">            chromeBrowser.Dock = DockStyle.Fill;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_FormClosing</span>(<span class="params"><span class="built_in">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Cef.Shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application">https://ourcodeworld.com/articles/read/173/how-to-use-cefsharp-chromium-embedded-framework-csharp-in-a-winforms-application</a></p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> Winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 客户端 </tag>
            
            <tag> CefSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinForm设置控件居中</title>
      <link href="/2021/03/19/winform-she-zhi-kong-jian-ju-zhong/"/>
      <url>/2021/03/19/winform-she-zhi-kong-jian-ju-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="简单阐述"><a href="#简单阐述" class="headerlink" title="简单阐述"></a>简单阐述</h2><pre><code>在C#的WinForm里面，原生控件是没有居中属性的，故通过重写OnResize(EventArgs e)方法，通过计算，重新定位控件位置。</code></pre><h2 id="以-Label-控件为例"><a href="#以-Label-控件为例" class="headerlink" title="以 Label 控件为例"></a>以 Label 控件为例</h2><pre><code>(1)将label的AutoSize属性设置为false；Dock属性设置为fill；TextAlign属性设置为MiddleCenter。(2)重写居中的代码如下：</code></pre><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResize</span>(<span class="params">EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnResize(e);</span><br><span class="line">            <span class="built_in">int</span> x = (<span class="built_in">int</span>)(<span class="number">0.5</span> * (<span class="keyword">this</span>.Width - label1.Width));</span><br><span class="line">            <span class="built_in">int</span> y = label1.Location.Y;</span><br><span class="line">            label1.Location = <span class="keyword">new</span> System.Drawing.Point(x,y);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://blog.csdn.net/mingyueyixi/article/details/55035935">https://blog.csdn.net/mingyueyixi/article/details/55035935</a></p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> Winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 控件 </tag>
            
            <tag> 居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Batch学习笔记（一）</title>
      <link href="/2021/03/19/spring-batch-xue-xi-bi-ji-yi/"/>
      <url>/2021/03/19/spring-batch-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Batch-简介"><a href="#Spring-Batch-简介" class="headerlink" title="Spring Batch 简介"></a>Spring Batch 简介</h2><p>Spring Batch 提供了可重复使用的功能，用来处理大量数据。包括记录、跟踪，事务管理，作业处理统计，作业重启，跳过和资源管理。<br>此外还提供了更高级的技术服务和功能，通过优化和分区技术实现极高容量和高性能的批处理作业。</p><h2 id="Spring-Batch-使用场景"><a href="#Spring-Batch-使用场景" class="headerlink" title="Spring Batch 使用场景"></a>Spring Batch 使用场景</h2><p>(1)一般的批处理程序</p><p>·从数据库，文件或者队列中读取大量数据<br>·处理读取到的数据<br>·将处理完成的数据保存到文件，数据库</p><p>(2)业务场景</p><p>·定期提交批处理<br>·并发批处理，并行处理 Job<br>·分阶段的企业消息驱动处理<br>·大规模并行批处理<br>·失败后手动或预定重启<br>·依赖步骤的顺序处理<br>·部分处理，跳过记录<br>·整批交易，适用于批量较小或现有存储过程/脚本的情况</p><h2 id="Spring-Batch-主要组成部分"><a href="#Spring-Batch-主要组成部分" class="headerlink" title="Spring Batch 主要组成部分"></a>Spring Batch 主要组成部分</h2><p>·JobRepository，用来注册 job 的容器<br>·JobLauncher，用来启动 job 的接口<br>·Job，实际执行的任务，包含一个或多个 Step<br>·Step，step 包含 ItemReader、ItemProcessor 和 ItemWriter<br>·ItemReader，用来读取数据的接口<br>·ItemProcessor，用来处理数据的接口<br>·ItemWriter，用来输出数据的接口<br>以上 Spring Batch 的主要组成部分只需要注册成 Spring 的 Bean 即可。批处理的配置类上需要使用@EnabelBatchProcessing。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>(1)监听器 JobListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobListener</span> <span class="keyword">implements</span> <span class="title class_">JobExecutionListener</span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeJob</span><span class="params">(JobExecution jobExecution)</span>&#123;</span><br><span class="line">  <span class="comment">// Job执行前需要执行的操作</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterJob</span><span class="params">(JobExecution jobExecution)</span>&#123;</span><br><span class="line">  <span class="comment">// Job执行完成后需要执行的操作</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)配置类 DataBatchConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBatchConfiguration</span>&#123;</span><br><span class="line"> <span class="comment">// 用于构建Job</span></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 用于构建Step</span></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 监听器</span></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> JobListener jobListener;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// ItemReader(使用的其中一种读取方式)</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> RepositoryItemReader readerData;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// ItemWriter</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> ItemReader writerData;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Job</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> Job <span class="title function_">dataHandleJob</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;dataHandleJob&quot;</span>).incrementer(<span class="keyword">new</span> <span class="title class_">RunIdIncrementer</span>()).start(getDataStep())</span><br><span class="line">   .listener(jobListener).build();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Step</span></span><br><span class="line"> <span class="comment">// User:要处理的对象</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> Step <span class="title function_">getTDistSellOut</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;getData&quot;</span>).&lt;User, User&gt;chunk(<span class="number">10000</span>) <span class="comment">// 一次commit数据的数量</span></span><br><span class="line">   .faultTolerant().retryLimit(<span class="number">3</span>)</span><br><span class="line">   .retry(Exception.class)</span><br><span class="line">   .skipLimit(<span class="number">100</span>)            <span class="comment">// 发生异常时，允许重试的次数</span></span><br><span class="line">   .skip(Exception.class)</span><br><span class="line">   .reader(readerData)              <span class="comment">// reader</span></span><br><span class="line">   .writer(writerData).build();        <span class="comment">// writer</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)读取类 ReaderStep</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderStep</span>&#123;</span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> EntityManagerFactory emf;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span> RepositoryItemReader&lt;User&gt; <span class="title function_">readerData</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 排序map(读取数据按照ID进行正序排列)</span></span><br><span class="line">  Map&lt;String,Sort.Direction&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;id&quot;</span>,sort.Direction.ASC);</span><br><span class="line">  <span class="comment">// SQL语句所需参数LIST</span></span><br><span class="line">  List&lt;String&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  params.add(<span class="string">&quot;2019-03-20&quot;</span>);</span><br><span class="line">  RepositoryItemReader&lt;User&gt; repositoryItemReader = <span class="keyword">new</span> <span class="title class_">new</span> RepositoryItemReader&lt;&gt;();</span><br><span class="line">  <span class="comment">// Set Repository</span></span><br><span class="line">  repositoryItemReader.setRepository(userRepository);</span><br><span class="line">  <span class="comment">// Set PageSize(没有会报错)</span></span><br><span class="line">  repositoryItemReader.setPageSize(<span class="number">5</span>);</span><br><span class="line">  <span class="comment">// Set Repository Method</span></span><br><span class="line">  repositoryItemReader.setMethodName(<span class="string">&quot;findByDateLike&quot;</span>);</span><br><span class="line">  <span class="comment">// Set 参数List</span></span><br><span class="line">  repositoryItemReader.setArguments(params);</span><br><span class="line">  <span class="comment">// Set 排序Map</span></span><br><span class="line">  repositoryItemReader.setSort(map);</span><br><span class="line">  <span class="keyword">return</span> repositoryItemReader;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)写出类 WriterStep</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriterStep</span> &#123;</span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> RepositoryItemWriter&lt;User&gt; <span class="title function_">writerData</span><span class="params">()</span>&#123;</span><br><span class="line">  RepositoryItemWriter&lt;User&gt; repositoryItemWriter = <span class="keyword">new</span> <span class="title class_">RepositoryItemWriter</span>&lt;&gt;();</span><br><span class="line">  repositoryItemWriter.setRepository(userRepository);</span><br><span class="line">  repositoryItemWriter.setMethodName(<span class="string">&quot;save&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> repositoryItemWriter;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://www.cnblogs.com/ealenxie/p/9647703.html">https://www.cnblogs.com/ealenxie/p/9647703.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Batch </tag>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类型转换工具类（持续更新）</title>
      <link href="/2021/03/19/java-lei-xing-zhuan-huan-gong-ju-lei-chi-xu-geng-xin/"/>
      <url>/2021/03/19/java-lei-xing-zhuan-huan-gong-ju-lei-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  将项目中用到的类型转换做个记录。</p><h2 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeUtil</span> &#123;</span><br><span class="line"> <span class="comment">// [start]字符串转各种格式</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转日期(格式:&quot;yyyyMMdd&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">StrToDateFirst</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">  <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   date = format.parse(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> date;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转日期(格式:&quot;dd/MM/yyyy&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">StrToDateSecond</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class="line">  <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   date = format.parse(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> date;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转日期(格式:&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">StrToDateThird</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">  <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   date = format.parse(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> date;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转日期(格式:&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">StrToDateFourth</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   date = format.parse(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> date;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转Integer</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">StrToInteger</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   integer = Integer.valueOf(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> integer;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转Double</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title function_">StrToDouble</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">Double</span> <span class="variable">double1</span> <span class="operator">=</span> <span class="number">0.00</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   double1 = Double.parseDouble(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> double1;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转时间戳</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Timestamp <span class="title function_">StrToTimeStamp</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">Timestamp</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   timestamp = Timestamp.valueOf(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> timestamp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 字符串转BigDecimal</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">StrTiBigdecimal</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="type">BigDecimal</span> <span class="variable">bigDecimal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   bigDecimal = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(str);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bigDecimal;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// [end]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型转换 </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护java项目之==和equals</title>
      <link href="/2021/03/19/wei-hu-java-xiang-mu-zhi-he-equals/"/>
      <url>/2021/03/19/wei-hu-java-xiang-mu-zhi-he-equals/</url>
      
        <content type="html"><![CDATA[<p>最近发生一件很尴尬的事情，在维护一个 Java 项目的时候，发现有使用 <code>==</code> 来比较两个对象的属性，<br>于是顺手就把 <code>==</code> 改成了 equals。悲剧发生……🤣🤣🤣</p><h2 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="== 和 equals 的区别"></a><code>==</code> 和 equals 的区别</h2><p><code>==</code> ：对于基本类型来说是值比较，对于引用类型来说是引用比较<br>equals：引用比较，但一些类重写了 equals 方法，如 String、Integer 等，变成了值比较。</p><h2 id="使用-equals-的前提"><a href="#使用-equals-的前提" class="headerlink" title="使用 equals 的前提"></a>使用 equals 的前提</h2><p>使用 equals 进行比较，如：<br>a 和 b 是两个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure><p>需要确保 a.getId()不为 null，因为 null 是没有.equals()方法的。</p><h2 id="各种对象使用-equals"><a href="#各种对象使用-equals" class="headerlink" title="各种对象使用 equals"></a>各种对象使用 equals</h2><p>String 类型：<br>可以使用 StringUtils.equals()进行比较，该方法内置非空校验<br>其余封装类型：<br>可以使用 Objects.equals()进行比较，该方法内置非空校验<br>使用三目运算符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.getId() == <span class="literal">null</span> ? b.getId() == <span class="literal">null</span> ? <span class="literal">false</span> : <span class="literal">true</span> : a.getId().equals(b.getId())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款智能的日期解析工具</title>
      <link href="/2021/03/19/yi-kuan-zhi-neng-de-ri-qi-jie-xi-gong-ju/"/>
      <url>/2021/03/19/yi-kuan-zhi-neng-de-ri-qi-jie-xi-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Java</code> 中日期、时间相关的类相当的多，并且分不同的版本提供了不同的实现，包括 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>ZoneDateTime</code> 、 <code>OffsetDateTime</code> 等等。针对这些时间类型又通过 <code>SimpleDateFormat</code> 和 <code>DateTimeFormatter</code> 实现不同的日期与字符串之间的格式化和解析。</p><p>为了应对各种各样的日期解析，我们通常会封装类似于 <code>DateUtils</code> 的工具类，专门用来处理日期字符串的解析，同时为了兼容不同格式的日期字符串，又需要预先枚举出可能用到的日期格式。这种传统的 <code>DateUtils</code> 通常会面临性能与兼容性的两难问题。</p><p>而本文要介绍的，是一个截然不同的日期解析工具 <code>dateparser</code> ，它可以智能地解析几百上千种任意格式的日期字符串，更为难得的是它的性能同样非常出色。</p><h2 id="DateUtils-的两难问题"><a href="#DateUtils-的两难问题" class="headerlink" title="DateUtils 的两难问题"></a>DateUtils 的两难问题</h2><p>一个比较典型的日期解析函数类似这样（这是 <code>commons-lang3</code> 在其 <code>DateUtils</code> 中提供的函数）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parseDate</span><span class="params">(<span class="keyword">final</span> String str, <span class="keyword">final</span> String... parsePatterns)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parseDate(str, <span class="literal">null</span>, parsePatterns);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种日期解析函数的内部逻辑，往往是根据一批 <code>DATE_FORMAT</code> 轮番尝试，通过异常重试的方式试出来唯一匹配的格式。这种简单粗暴的方式，事实上存在着一个两难问题。</p><p>首先，我们很难穷举出全部可能出现的日期格式，年月日的分隔符、排列次序、时分秒、是否有毫秒、时区处理、PM 与 AM 的支持等等，罗列出来的话不计其数。</p><p>其次，异常重试的方式存在一些性能损耗，据我粗略测算，在 MBP 硬件环境中异常中断大概需要消耗 <code>2</code> 微秒，而一次日期解析可能消耗 <code>0.75</code> 微秒。如果提供的 <code>parsePatterns</code> 数量很多，则解析一个日期字符串的循环重试的最终耗时甚至会超过 <code>Redis</code> 读写操作。</p><p>那么，有没有办法既可以支持无数多个不规则的日期字符串，同时也没有性能问题的技术方案呢？</p><h2 id="dateparser"><a href="#dateparser" class="headerlink" title="dateparser"></a><code>dateparser</code></h2><p>这就是解决日期字符串解析的灵丹妙药，它是一个高性能且非常智能的 datetime 字符串解析工具。</p><p>为了实现高性能与可扩展性，它并没有采用 <code>SimpleDateFormat</code> 或 <code>DateTimeFormatter</code> ，而是正则表达式。通过预定义的正则表达式来自动地捕捉不同格式的日期片段，它可以自动抽取出字符串中存在的 <code>year</code> , <code>month</code> , <code>day</code> , <code>hour</code> , <code>minute</code> , <code>second</code> , <code>zone</code> 等熟悉。</p><p>这些预定义的正则表达式片段包括：</p><p><code>(?&lt;week&gt;%s)\W*</code> 可以将 <code>Monday</code> 解析为 <code>week</code></p><p><code>?(?&lt;year&gt;\d&#123;4&#125;)$</code> 可以将 <code>2019</code> 解析为 <code>year</code></p><p><code>^(?&lt;year&gt;\d&#123;4&#125;)(?&lt;month&gt;\d&#123;2&#125;)$</code> 可以抽取出 <code>201909</code> 内部的 <code>year</code> 和 <code>month</code></p><p><code>?(?&lt;hour&gt;\d&#123;1,2&#125;) o’clock\W*</code> 可以将 <code>12 o’clock</code> 解析为 <code>hour</code></p><p>更多规则参见 <code>DateParserBuilder.java</code></p><p>如此多的正则表达式，会不会也存在性能隐患呢？如果使用的是 <code>java.util.regex</code> 包来进行循环匹配，随着规则增加，确实会有性能问题。<br>但是 <code>dateparser</code> 使用 <code>retree</code> 将预定义的一大批正则表达式合并为一颗树，也就是正则匹配树。它可以非常快速地对一大批正则表达式执行并行匹配，内部结构可以理解为字典树，但是树中的节点并不是字母，而是正则匹配节点。</p><h2 id="安装-Maven-依赖"><a href="#安装-Maven-依赖" class="headerlink" title="安装 Maven 依赖"></a>安装 Maven 依赖</h2><p>可以通过此 <code>maven</code> 坐标引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sisyphsu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dateparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p><code>dateparser</code> 提供了一个 <code>DateParserUtils</code> 工具类，可以直接使用它将字符串解析为 <code>Date</code> 、 <code>Calendar</code> 、 <code>LocalDateTime</code> 、 <code>OffsetDateTime</code> 等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> DateParserUtils.parseDate(<span class="string">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class="line"><span class="comment">// Tue Jan 03 06:04:05 CST 2006</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span></span><br><span class="line">DateParserUtils.parseCalendar(<span class="string">&quot;Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)&quot;</span>);</span><br><span class="line"><span class="comment">// 2015-07-03T17:04:07Z</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span></span><br><span class="line">DateParserUtils.parseDateTime(<span class="string">&quot;2019-09-20 10:20:30.12345678 +0200&quot;</span>);</span><br><span class="line"><span class="comment">// 2019-09-20T16:20:30.123456780</span></span><br><span class="line"><span class="type">OffsetDateTime</span> <span class="variable">offsetDateTime</span> <span class="operator">=</span></span><br><span class="line">DateParserUtils.parseOffsetDateTime(<span class="string">&quot;2015-09-30 18:48:56.35272715 +0000 UTC&quot;</span>);</span><br><span class="line"><span class="comment">// 2015-09-30T18:48:56.352727150Z</span></span><br></pre></td></tr></table></figure><p>需要注意的是，它会根据字符串中标明的 <code>TimeZon</code> e 或 <code>ZoneOffset</code> 自动进行偏移量转换。</p><h2 id="创建新-DateParser-实例"><a href="#创建新-DateParser-实例" class="headerlink" title="创建新 DateParser 实例"></a>创建新 DateParser 实例</h2><p>由于 <code>DateParser</code> 不是线程安全的，同时 <code>parse</code> 操作通常非常快速（1us），因此 <code>DateParserUtils</code> 内部直接维护了一个 <code>DateParser</code> 单例，然后通过 <code>synchronized</code> 进行并发控制。</p><p>如果你想在多线程中高频率、并发地使用它，就应该为不同的线程创建不同的 <code>DateParser</code> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateParser</span> <span class="variable">parser</span> <span class="operator">=</span> DateParser.newBuilder().build();</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> parser.parseDate(<span class="string">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>);</span><br><span class="line"><span class="comment">// Tue Jan 03 06:04:05 CST 2006</span></span><br></pre></td></tr></table></figure><p><code>DateParser</code> 实例相当笨重一些，所以你应该尽量多的复用它以提高性能。</p><h2 id="MM-dd-与-dd-MM-的优先级"><a href="#MM-dd-与-dd-MM-的优先级" class="headerlink" title="MM/dd 与 dd/MM 的优先级"></a><code>MM/dd</code> 与 <code>dd/MM</code> 的优先级</h2><p>多数情况下， <code>dateparser</code> 可以按照规则自动地识别出字符串内部的 <code>month</code> 与 <code>day</code> 片段。</p><p>但是对于 <code>MM/dd/yy</code> 和 <code>dd/MM/yy</code> ，有时候它就难以区分了。因为世界上多数国家会使用 <code>dd/MM/yy</code> 作为日期的格式，但是也有少数国家会特立独行地使用 <code>MM/dd/yy</code> 作为日期格式，最典型的就是美帝国主义。</p><p>因此当 <code>dateparser</code> 遇到类似于 <code>7.8.2019</code> 这样的日期时，它就很难判断到底是 7 月 8 日还是 8 月 7 日。</p><p>为解决这个难题， <code>dateparser</code> 内部增加了一个名为 <code>preferMonthFirst</code> 的选项，用于辅助解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DateParserUtils.preferMonthFirst(<span class="literal">true</span>);</span><br><span class="line">DateParserUtils.parseCalendar(<span class="string">&quot;08.03.71&quot;</span>);</span><br><span class="line"><span class="comment">// 1971-08-03</span></span><br><span class="line">DateParserUtils.preferMonthFirst(<span class="literal">false</span>);</span><br><span class="line">DateParserUtils.parseCalendar(<span class="string">&quot;08.03.71&quot;</span>);</span><br><span class="line"><span class="comment">// 1971-03-08</span></span><br></pre></td></tr></table></figure><p>默认情况下，如果无法甄别月与日，则视为月在后。如果你指定了 <code>preferMonthFirst</code> 为 <code>true</code> ，则试为月在前。</p><h2 id="自定义-Parser"><a href="#自定义-Parser" class="headerlink" title="自定义 Parser"></a>自定义 Parser</h2><p>你可以使用 <code>DateParserBuilder</code> 构建自己的日期解析器，通过此 <code>builder</code> ，你可以自定义新的解析规则。</p><p>例如，如果你想支持 <code>【2019】</code> 这样的 <code>year</code> 字符串，可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateParser</span> <span class="variable">parser</span> <span class="operator">=</span> DateParser.newBuilder().addRule(<span class="string">&quot;【(?&lt;year&gt;\\d&#123;4&#125;)】&quot;</span>).build();</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> parser.parseCalendar(<span class="string">&quot;【1991】&quot;</span>);</span><br><span class="line"><span class="keyword">assert</span> calendar.get(Calendar.YEAR) == <span class="number">1991</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是，正则表达式 <code>【(?&lt;year&gt;\\d&#123;4&#125;)】</code> 里面的 <code>year</code> 非常重要，它是 <code>dateparser</code> 内置的捕捉关键词。</p><p>你也可以增加更加灵活的解析规则，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateParser</span> <span class="variable">parser</span> <span class="operator">=</span> DateParser.newBuilder()</span><br><span class="line">.addRule(<span class="string">&quot;民国(\\d&#123;3&#125;)年&quot;</span>, (input, matcher, dt) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> matcher.start(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i0</span> <span class="operator">=</span> input.charAt(offset) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> input.charAt(offset + <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> input.charAt(offset + <span class="number">2</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    dt.setYear(i0 * <span class="number">100</span> + i1 * <span class="number">10</span> + i2 + <span class="number">1911</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.build();</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> parser.parseCalendar(<span class="string">&quot;民国101年&quot;</span>);</span><br><span class="line"><span class="keyword">assert</span> calendar.get(Calendar.YEAR) == <span class="number">2012</span>;</span><br></pre></td></tr></table></figure><p>这个例子里面，新增了一个捕捉并解析 <code>民国xxx年</code> 的日期规则。</p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>首先，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>SimpleDateFormat</code> 的性能表现：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark               Mode  Cnt     Score    Error  Units</span><br><span class="line">SingleBenchmark.java    avgt    6   921.632 ± 12.299  ns/op</span><br><span class="line">SingleBenchmark.parser  avgt    6  1553.909 ± 70.664  ns/op</span><br></pre></td></tr></table></figure><p>可以看到，在日期格式固定且单一的情况下， <code>dateparser</code> 在性能上处于下风，这也在预料之中。</p><p>然后，在单一日期格式下，对比一下 <code>dateparser</code> 与 <code>DateTimeFormatter</code> 的性能表现：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                       Mode  Cnt     Score    Error  Units</span><br><span class="line">SingleDateTimeBenchmark.java    avgt    6   654.553 ± 16.703  ns/op</span><br><span class="line">SingleDateTimeBenchmark.parser  avgt    6  1680.690 ± 34.214  ns/op</span><br></pre></td></tr></table></figure><p>可以看到， <code>DateTimeFormatter</code> 的性能表现确实比 S <code>impleDateFormat</code> 更加出色一些。同时 dateparser 的设计初衷是为了应对不规则日期格式，因此在固定格式匹配上存在劣势并不意外。</p><p>如果我们将日期格式增加为 16 种时，性能表现就不一样了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark              Mode  Cnt      Score      Error  Units</span><br><span class="line">MultiBenchmark.format  avgt    6  47385.021 ± 1083.649  ns/op</span><br><span class="line">MultiBenchmark.parser  avgt    6  22852.113 ±  310.720  ns/op</span><br></pre></td></tr></table></figure><p>如果换算一下，无论日期格式是一种还是 16 中， <code>dateparser</code> 的性能始终维持在 <code>1.5us</code> ，说明它在算法上是非常稳定的，面对不同的场景不会有什么性能损失</p><h2 id="支持的日期格式（部分）"><a href="#支持的日期格式（部分）" class="headerlink" title="支持的日期格式（部分）"></a>支持的日期格式（部分）</h2><p>以下为 <code>dateparser</code> 在单元测试中完成测试解析的日期格式样例，具体可以参考源代码。同时需要注意的是，这个列表只是一个子集：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">May 8, 2009 5:57:51 PM</span><br><span class="line">oct 7, 1970</span><br><span class="line">oct 7, &#x27;70</span><br><span class="line">oct. 7, 1970</span><br><span class="line">oct. 7, 70</span><br><span class="line">Mon Jan  2 15:04:05 2006</span><br><span class="line">Mon Jan  2 15:04:05 MST 2006</span><br><span class="line">Mon Jan 02 15:04:05 -0700 2006</span><br><span class="line">Monday, 02-Jan-06 15:04:05 MST</span><br><span class="line">Mon, 02 Jan 2006 15:04:05 MST</span><br><span class="line">Tue, 11 Jul 2017 16:28:13 +0200 (CEST)</span><br><span class="line">Mon, 02 Jan 2006 15:04:05 -0700</span><br><span class="line">Thu, 4 Jan 2018 17:53:36 +0000</span><br><span class="line">Mon Aug 10 15:44:11 UTC+0100 2015</span><br><span class="line">Fri Jul 03 2015 18:04:07 GMT+0100 (GMT Daylight Time)</span><br><span class="line">September 17, 2012 10:09am</span><br><span class="line">September 17, 2012 at 10:09am PST-08</span><br><span class="line">September 17, 2012, 10:10:09</span><br><span class="line">October 7, 1970</span><br><span class="line">October 7th, 1970</span><br><span class="line">12 Feb 2006, 19:17</span><br><span class="line">12 Feb 2006 19:17</span><br><span class="line">7 oct 70</span><br><span class="line">7 oct 1970</span><br><span class="line">03 February 2013</span><br><span class="line">1 July 2013</span><br><span class="line">2013-Feb-03</span><br><span class="line">3/31/2014</span><br><span class="line">03/31/2014</span><br><span class="line">08/21/71</span><br><span class="line">8/1/71</span><br><span class="line">4/8/2014 22:05</span><br><span class="line">04/08/2014 22:05</span><br><span class="line">4/8/14 22:05</span><br><span class="line">04/2/2014 03:00:51</span><br><span class="line">8/8/1965 12:00:00 AM</span><br><span class="line">8/8/1965 01:00:01 PM</span><br><span class="line">8/8/1965 01:00 PM</span><br><span class="line">8/8/1965 1:00 PM</span><br><span class="line">8/8/1965 12:00 AM</span><br><span class="line">4/02/2014 03:00:51</span><br><span class="line">03/19/2012 10:11:59</span><br><span class="line">03/19/2012 10:11:59.3186369</span><br><span class="line">2014/3/31</span><br><span class="line">2014/03/31</span><br><span class="line">2014/4/8 22:05</span><br><span class="line">2014/04/08 22:05</span><br><span class="line">2014/04/2 03:00:51</span><br><span class="line">2014/4/02 03:00:51</span><br><span class="line">2012/03/19 10:11:59</span><br><span class="line">2012/03/19 10:11:59.3186369</span><br><span class="line">2014年04月08日</span><br><span class="line">2006-01-02T15:04:05+0000</span><br><span class="line">2009-08-12T22:15:09-07:00</span><br><span class="line">2009-08-12T22:15:09</span><br><span class="line">2009-08-12T22:15:09Z</span><br><span class="line">2014-04-26 17:24:37.3186369</span><br><span class="line">2012-08-03 18:31:59.257000000</span><br><span class="line">2014-04-26 17:24:37.123</span><br><span class="line">2013-04-01 22:43</span><br><span class="line">2013-04-01 22:43:22</span><br><span class="line">2014-12-16 06:20:00 UTC</span><br><span class="line">2014-12-16 06:20:00 GMT</span><br><span class="line">2014-04-26 05:24:37 PM</span><br><span class="line">2014-04-26 13:13:43 +0800</span><br><span class="line">2014-04-26 13:13:43 +0800 +08</span><br><span class="line">2014-04-26 13:13:44 +09:00</span><br><span class="line">2012-08-03 18:31:59.257000000 +0000 UTC</span><br><span class="line">2015-09-30 18:48:56.35272715 +0000 UTC</span><br><span class="line">2015-02-18 00:12:00 +0000 GMT</span><br><span class="line">2015-02-18 00:12:00 +0000 UTC</span><br><span class="line">2015-02-08 03:02:00 +0300 MSK m=+0.000000001</span><br><span class="line">2015-02-08 03:02:00.001 +0300 MSK m=+0.000000001</span><br><span class="line">2017-07-19 03:21:51+00:00</span><br><span class="line">2014-04-26</span><br><span class="line">2014-04</span><br><span class="line">2014</span><br><span class="line">2014-05-11 08:20:13,787</span><br><span class="line">3.31.2014</span><br><span class="line">03.31.2014</span><br><span class="line">08.21.71</span><br><span class="line">2014.03</span><br><span class="line">2014.03.30</span><br><span class="line">20140601</span><br><span class="line">20140722105203</span><br><span class="line">1332151919</span><br><span class="line">1384216367189</span><br><span class="line">1384216367111222</span><br><span class="line">1384216367111222333</span><br></pre></td></tr></table></figure><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p>本文转载至<a href="https://sulin.me/2019/38Z4HAT.html">https://sulin.me/2019/38Z4HAT.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
            <tag> 日期解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/2021/03/18/about/"/>
      <url>/2021/03/18/about/</url>
      
        <content type="html"><![CDATA[<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>张凯/男/1996.12.28</li><li>本科/淮阴工学院（计算机科学与技术专业）</li><li>工作年限：4 年</li><li>技术博客：<a href="https://zhkai-ybwn.github.io//">https://zhkai-ybwn.github.io//</a></li></ul><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>手机：13182353591</li><li>邮箱：<a href="mailto:&#50;&#53;&#55;&#x32;&#52;&#x32;&#57;&#50;&#51;&#53;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;">&#50;&#53;&#55;&#x32;&#52;&#x32;&#57;&#50;&#51;&#53;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a></li><li>QQ/微信手机号：2572429235/13182353591</li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><p>南京联迪信息股份有限公司（2018 年 6 月 ~ 2021 年 5 月）<br>南京软通动力（2021 年 5 月 ~ 至今）</p><h3 id="3M-POS-数据收集系统（2020-年-10-月-2021-年-5月）"><a href="#3M-POS-数据收集系统（2020-年-10-月-2021-年-5月）" class="headerlink" title="3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）"></a>3M POS 数据收集系统（2020 年 10 月 ~ 2021 年 5月）</h3><p>帮助 3M 公司使用系统自动处理经销商的销售数据。<br>包括对数据的自动定时抽取上传、校验、转换等基础，以及错误数据回滚、经销商管理、日志管理等配套功能。</p><h4 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h4><ul><li>WEB 端的金税抽取规则设置功能、数据回滚功能、客户端版本管理功能的前后端开发。</li><li>客户端开发，包括数据定时自动抽取、根据 WEB 页面配置的规则进行数据校验和过滤、指定时间的数据补抓重抓、客户端自动更新功能。</li><li>经销商上线的对接，远程指导经销商安装客户端配置定时抓取任务。</li><li>系统操作手册和客户端安装手册的编写。</li><li>系统后续功能的开发和运维工作。</li></ul><h4 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h4><h5 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h5><ul><li>WEB：Vue + Element-ui</li><li>API：SpringBoot + Jpa + Hibernate + Swagger</li><li>数据库：SQLSERVER</li><li>客户端：Winform + Cefsharp</li><li>此外，安装过程中对 Windows 系统的了解加深，任务计划程序在各种操作系统的配置、管理员权限的配置和取得、多种防护软件的设置。</li></ul><h5 id="业绩成果"><a href="#业绩成果" class="headerlink" title="业绩成果"></a>业绩成果</h5><p>目前已经成功上线 7 家经销商，后续上线正则有序进行，2021 年计划上线 100 家经销商。</p><h3 id="ANA-航空到着案内（2019-年-11-月-2020-年-6-月）"><a href="#ANA-航空到着案内（2019-年-11-月-2020-年-6-月）" class="headerlink" title="ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）"></a>ANA 航空到着案内（2019 年 11 月 ~ 2020 年 6 月）</h3><p>面向 ANA 航空公司的乘客提供航班查询以及提示等服务的 PWA 应用。</p><ul><li>在线查询航班并将所查航班信息发送到邮箱服务</li><li>个人航班履历查询功能，安装已乘坐和未乘坐进行分类展示。</li><li>航班提示功能，包括邮箱提示和网页通过操作系统发起的提示。</li><li>航空公司新闻和注意事项提示信息的展示</li><li>Web 端管理新闻和注意事项</li></ul><h4 id="职责-1"><a href="#职责-1" class="headerlink" title="职责"></a>职责</h4><ul><li>后台管理系统的前后端开发，对 PWA 提供的航空新闻和注意事项以及乘客的反馈进行管理。</li><li>航班查询页面的开发。</li><li>为适应手机、平板、WEB 对多个页面进行调整。</li><li>测试式样书的编写。</li></ul><h4 id="项目总结-1"><a href="#项目总结-1" class="headerlink" title="项目总结"></a>项目总结</h4><h5 id="使用技术-1"><a href="#使用技术-1" class="headerlink" title="使用技术"></a>使用技术</h5><ul><li>WEB：Kony + Node.js</li><li>API：JavaService</li><li>数据库：Mysql</li><li>收获：进一步理解了 Kony 的开发生态圈，并通过 Kony 的云平台发布后端的 API，很便捷。</li></ul><h3 id="爬虫开发与部署"><a href="#爬虫开发与部署" class="headerlink" title="爬虫开发与部署"></a>爬虫开发与部署</h3><p>使用 Scrapy 框架对 Nikkei、中商情报网、Yahoo 以及 3GPP 等网站进行数据的爬取，并发布到 Crawlab 平台进行定时执行。</p><h3 id="职责-2"><a href="#职责-2" class="headerlink" title="职责"></a>职责</h3><ul><li>Nikkei 爬虫、中商情报网爬虫、Yahoo 爬虫、3GPP 爬虫的编写</li><li>爬虫发布到部署好的 Crawlab 定期执行</li><li>3GPP 爬虫运行情况以及爬取数据 Size 的邮箱通知功能</li></ul><h4 id="项目总结-2"><a href="#项目总结-2" class="headerlink" title="项目总结"></a>项目总结</h4><h5 id="使用技术-2"><a href="#使用技术-2" class="headerlink" title="使用技术"></a>使用技术</h5><ul><li>爬虫：Python + Scrapy</li><li>数据库：MongoDB + ElasticSearch + Redis</li><li>发布平台：crawlab</li><li>收获：更熟悉 Python，学会了多种存储方式以及各自的优势。反爬虫的初步了解和应对方法。</li></ul><h3 id="ElasticSearch-管理及新闻检索平台"><a href="#ElasticSearch-管理及新闻检索平台" class="headerlink" title="ElasticSearch 管理及新闻检索平台"></a>ElasticSearch 管理及新闻检索平台</h3><p>将 ElasticSearch 的查询文档、创建索引、更新索引、索引的分词和同义词设置等 API 通过界面进行可视化操作。</p><h3 id="职责-3"><a href="#职责-3" class="headerlink" title="职责"></a>职责</h3><p>整个项目的搭建和前后台开发。</p><h4 id="项目总结-3"><a href="#项目总结-3" class="headerlink" title="项目总结"></a>项目总结</h4><h5 id="使用技术-3"><a href="#使用技术-3" class="headerlink" title="使用技术"></a>使用技术</h5><ul><li>WEB：Vue + Elemen-ui</li><li>API：Python + FastApi</li><li>数据库：Mysql + ElasticSearch</li><li>收获：加深了对于ES的了解和使用，学会了使用FastApi进行后台的开发。</li></ul><h2 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h2><ul><li>开发语言：Java/C#/Python</li><li>前端框架：Vue/Angular</li><li>数据库相关：MySQL/SQLSERVER/MongoDB/ES</li><li>版本管理：Git/Svn</li><li>单元测试：Junit/Pytest</li><li>开发工具：Idea/STS/VsCode</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue函数防抖和函数节流</title>
      <link href="/2021/03/18/vue-han-shu-fang-dou-he-han-shu-jie-liu/"/>
      <url>/2021/03/18/vue-han-shu-fang-dou-he-han-shu-jie-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li><li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li><li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li></ul><h3 id="实现方法，防抖重在清零"><a href="#实现方法，防抖重在清零" class="headerlink" title="实现方法，防抖重在清零"></a>实现方法，防抖重在清零</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">f, wait</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">f</span>(..<span class="property">args</span>)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h2><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><code>scroll</code>事件，每隔一秒计算一次位置信息等</li><li>浏览器播放事件，每隔一秒计算一次进度信息等</li><li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求</li></ul><h4 id="实现方法，节流重在开关锁"><a href="#实现方法，节流重在开关锁" class="headerlink" title="实现方法，节流重在开关锁"></a>实现方法，节流重在开关锁</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">f, wait</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">..args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">f</span>(..<span class="property">args</span>)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误触发多次。代码重在清零<code>clearTimeout</code></li><li>节流：控制流量，单位时间内事件只能触发一次，如果服务器端的限流即 Rate Limit。代码实现重在开锁关锁<code>timer=timeout；timer=null</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
